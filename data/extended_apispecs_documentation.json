{"documents": ["The provided query path `/dna/intent/api/v2/template-programmer/template/deploy` is used for deploying a template in Cisco Catalyst Center. This API endpoint allows users to deploy a specific version of a template to a device or multiple devices managed by the Cisco DNA Center.\n\nFrom a user perspective, this query can be used to automate the deployment process of network configurations across devices. Users can create configuration templates with specific settings, variables, and commands. Once these templates are created and committed, they can use this API endpoint to deploy the template to the target devices.\n\nBy sending a POST request to `/dna/intent/api/v2/template-programmer/template/deploy`, users can provide the necessary parameters in the request body, such as whether to forcefully push the template, specify target devices, and any additional parameters required by the template. The deployment process can be initiated seamlessly through this API query, reducing manual configuration tasks and ensuring consistency across the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/template-programmer/template/deploy\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v2/application-policy-application-set\" is used to retrieve information about application sets within the Cisco Catalyst Center platform. \n\nFrom a user perspective, this query can be used to fetch details about specific application sets by providing the name of the application set as a query parameter. Users can also specify the starting point for the results using the offset parameter and limit the number of items returned on a single page using the limit parameter. \n\nBy using this query, users can efficiently retrieve information about application sets stored in the Catalyst Center platform, which can be beneficial for managing and configuring applications and their associated policies within the network. This query provides users with the ability to access and manipulate application set data to align with their organization's business intent and network-specific configurations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/application-policy-application-set\nREST operation:get\nREST API query parameters:\n- attributes: Attributes to retrieve, valid value applicationSet. The query parameters should be used in the query. The default value is 'applicationSet'. This query parameter is required. \n- name: Application set name. The query parameters should be used in the query. This query parameter is required. \n- offset: The starting point or index from where the paginated results should begin.. The query parameters should be used in the query. The default value is '1'. This query parameter is required. \n- limit: The limit which is the maximum number of items to include in a single page of results, max value 500. The query parameters should be used in the query. The default value is '500'. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v2/application-policy-application-set\" is used to create new custom application sets within the Cisco Catalyst Center platform. From a user perspective, this query can be utilized to define and configure custom application sets tailored to the specific needs of an organization.\n\nBy making a POST request to this query path and providing the necessary parameters in the request body, users can create new application sets with unique characteristics and policies. This functionality allows users to manage and organize applications based on their requirements and preferences.\n\nUsers can specify the attributes of the application set they want to create, such as the name and any other relevant details, in the request body. By utilizing this query, users can efficiently create and customize application sets to align with their network policies and business objectives.\n\nOverall, this query provides users with the capability to define and implement custom application sets within the Catalyst Center platform, enabling them to tailor their network configurations according to their specific needs and preferences.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/application-policy-application-set\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: content-type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/tag/{id}/member\" with a POST request operation is used to add members to a specific tag identified by the tag ID (denoted by {id} parameter in the path). Tags in Cisco Catalyst Center are used to categorize and organize network elements, such as devices, based on specific criteria or attributes.\n\nFrom a user perspective, this query can be utilized to manage and organize network elements efficiently. By adding members to a tag, users can group related devices together for easier management, monitoring, and configuration. For example, a network administrator can use this query to add specific switches or routers to a tag named \"Branch_Offices\" to easily apply configurations or policies to all devices within that tag.\n\nIn summary, this query provides a convenient way for users to organize and categorize network elements by adding them to specific tags, facilitating streamlined network management and operations within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag/{id}/member\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- id: Tag ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/tag/{id}/member\" with a get request operation is used to retrieve the members of a specific tag identified by the tag ID (denoted by {id} parameter in the path). In Cisco Catalyst Center, tags are utilized to categorize and organize network elements, such as devices, based on specific attributes or criteria.\n\nFrom a user perspective, this query can be valuable for managing and organizing network elements efficiently. By fetching the members of a tag, users can group related devices together for easier management, monitoring, and configuration. For instance, a network administrator could use this query to view all the devices associated with a tag called \"Branch_Offices\" and apply configurations or policies to all devices within that tag swiftly.\n\nIn summary, this query provides a user-friendly way for users to categorize and manage network elements by retrieving the members associated with specific tags, facilitating streamlined network operations within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag/{id}/member\nREST operation:get\nREST API query parameters:\n- id: Tag ID. The query parameters should be used in the path. This query parameter is required. \n- memberType: Entity type of the member. Possible values can be retrieved by using /tag/member/type API. The query parameters should be used in the query. This query parameter is required. \n- offset: Used for pagination. It indicates the starting row number out of available member records. The query parameters should be used in the query. This query parameter is required. \n- limit: Used to Number of maximum members to return in the result. The query parameters should be used in the query. This query parameter is required. \n- memberAssociationType: Indicates how the member is associated with the tag. Possible values and description. 1) DYNAMIC : The member is associated to the tag through rules. 2) STATIC \u2013 The member is associated to the tag manually. 3) MIXED \u2013 The member is associated manually and also satisfies the rule defined for the tag. The query parameters should be used in the query. This query parameter is required. \n- level: level. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path, \"/dna/intent/api/v1/wireless/accesspoint-configuration\", is used to configure Access Points within the Cisco Catalyst Center platform. By making a POST request to this API endpoint and providing the necessary parameters in the request body, users can configure multiple access points with required options such as SSID settings, security configurations, radio settings, etc.\n\nFrom a user perspective, this query allows network administrators or IT personnel to easily manage and customize the settings of access points in their network infrastructure. Users can define specific configurations for each access point, ensuring optimal performance and security. By utilizing this API endpoint, users can streamline the process of configuring and maintaining access points across their network, saving time and effort.\n\nOverall, this query provides a convenient and efficient way for users to centrally manage their wireless access points within the Catalyst Center platform, ensuring a seamless and tailored wireless network experience for their organization.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/accesspoint-configuration\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "From a user perspective, this specific REST API query path allows users to retrieve all the versions of a specific template by providing its unique templateId (UUID). This query gives users the ability to view the history of changes made to a particular template over time.\n\nUsers can utilize this query to track the evolution of a template, review past modifications, and ensure they are working with the most up-to-date version. This information can be crucial for auditing purposes, troubleshooting, or simply understanding how a template has progressed.\n\nBy accessing this query path, users can gain insights into the development lifecycle of templates within the Cisco Catalyst Center environment. This visibility can help users make informed decisions about template deployment and ensure the stability and reliability of their network configurations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/template/version/{templateId}\nREST operation:get\nREST API query parameters:\n- templateId: templateId(UUID) to get list of versioned templates. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path `/dna/intent/api/v1/template-programmer/clone/name/{name}/project/{projectId}/template/{templateId}` is used for cloning a template in the Cisco Catalyst Center. This API endpoint allows users to create a copy (clone) of an existing template with a new unique name within the same project. \n\nFrom a user perspective, this query can be utilized when a user wants to duplicate an existing template but with some modifications or variations. For example, if a user has a template that configures a specific network device, they can use this API to clone that template and create a new version tailored for a different device without starting from scratch. \n\nBy providing the necessary information such as the original template's `templateId`, the new `name` for the cloned template, and the `projectId` where the new template should be created, users can efficiently replicate configurations and save time when managing network devices. This API operation simplifies the process of template creation and customization within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/clone/name/{name}/project/{projectId}/template/{templateId}\nREST operation:post\nREST API query parameters:\n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- name: Template name to clone template(Name should be different than existing template name within same project). The query parameters should be used in the path. This query parameter is required. \n- templateId: UUID of the template to clone it. The query parameters should be used in the path. This query parameter is required. \n- projectId: UUID of the project in which the template needs to be created. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "From a user perspective, this specific REST API query path in the Cisco Catalyst Center allows users to retrieve a list of all views within a specified view group. By providing the unique viewGroupId of the view group as a required query parameter, users can access a summary of all views associated with that particular group.\n\nThis query can be valuable for users who want to quickly view and analyze the different views available within a specific view group. It provides users with a convenient way to understand the content and scope of a particular view group, enabling them to efficiently navigate and access the relevant information they need.\n\nFor instance, users can use this query to explore the different data visualizations, reports, or configurations stored within a designated view group. This can help users in managing and organizing their data effectively, facilitating easier access to the specific views they are interested in.\n\nOverall, this API query enhances the user experience by offering a streamlined approach to retrieve and review all views within a specified view group, ultimately supporting better decision-making and efficient utilization of the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/data/view-groups/{viewGroupId}\nREST operation:get\nREST API query parameters:\n- viewGroupId: viewGroupId of viewgroup.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/network-device/{deviceId}/chassis\" with the GET operation is used to retrieve chassis details for a specific network device identified by its device ID. This endpoint allows users to obtain information about the physical chassis of a device, including details such as chassis type, serial number, power supply information, fan information, and other relevant information related to the hardware components of the device.\n\nFrom a user perspective, this query can be used to gather essential information about the chassis of a specific network device within the Cisco Catalyst Center environment. By providing the device ID as a parameter in the query path, users can retrieve detailed information about the physical structure and components of the specified device. This information can be valuable for network administrators and operators to maintain and troubleshoot network devices effectively. It can also be used for inventory management, monitoring hardware health, and planning for upgrades or replacements of network equipment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceId}/chassis\nREST operation:get\nREST API query parameters:\n- deviceId: Device ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "From a user perspective, this specific REST API query path in the Cisco Catalyst Center allows users to retrieve a list of all user-defined fields (UDFs) within the system. By making a GET request to this query path, users can obtain existing global UDFs. If no specific input is provided, the API fetches all the global UDFs. Users can also filter and search for UDFs based on either UDF Id(s) or UDF name(s), or both, by providing the relevant ids or names as query parameters.\n\nThis query can be valuable for users who need to manage and work with custom fields in the Catalyst Center. By accessing the list of UDFs, users can understand the structure and configuration of these fields within the system. They can use this information to tailor the network device information and attributes based on their organization's specific requirements. Additionally, users can leverage this query to ensure data consistency and accuracy by reviewing and potentially updating the UDF settings as needed.\n\nOverall, this API query empowers users to oversee and manipulate user-defined fields effectively within the Cisco Catalyst Center, enabling them to customize and optimize network device information to suit their operational needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/user-defined-field\nREST operation:get\nREST API query parameters:\n- id: Comma-seperated id(s) used for search/filtering. The query parameters should be used in the query. This query parameter is required. \n- name: Comma-seperated name(s) used for search/filtering. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "From a user perspective, this specific REST API query path in the Cisco Catalyst Center allows users to create a new global User Defined Field (UDF) using a POST request. User-Defined Fields are custom fields that users can assign to network devices to tailor and enhance the network device information based on their organization's specific requirements.\n\nBy using this API query, users who need to manage and work with custom fields in the Catalyst Center can create new UDFs for their devices. These custom fields can be populated with specific information that is relevant to the organization's network setup. Users can define the name, type, and other characteristics of the UDF through the POST request sent to the specified API query path.\n\nThis query empowers users to customize and optimize the network device information within the Catalyst Center, enabling them to better organize and categorize devices based on their unique needs. By creating new UDFs, users can ensure that the network information is structured in a way that aligns with their operational processes and workflows.\n\nOverall, this API query is valuable for users who want to enhance the management and organization of network devices within the Cisco Catalyst Center by creating and assigning custom user-defined fields to devices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/user-defined-field\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/discovery/count\" is used to retrieve the count of all available discovery jobs within the Cisco Catalyst Center. This endpoint allows users to obtain information on how many discovery tasks have been executed or are currently in progress.\n\nFrom a user perspective, this query can be utilized to monitor the number of discovery jobs that have been initiated within the Cisco Catalyst Center platform. By making a GET request to this endpoint, users can retrieve a numerical value indicating the total count of discovery jobs. This information can be valuable for tracking the volume of network devices being discovered, managing ongoing discovery tasks, and assessing the overall activity related to network discovery within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery/count\nREST operation:get\n</api-query>", "The query path \"/dna/intent/api/v1/event/webhook\" with the REST operation \"PUT\" is used for updating the destination of a webhook. \n\nFrom a user perspective, this query can be utilized to modify the endpoint where webhook notifications are sent. By sending a PUT request to this path with the updated webhook destination information in the request body, users can ensure that any events triggering the webhook will now be forwarded to the new specified URL or endpoint.\n\nFor example, if a user wants to switch the destination of webhook notifications from one system to another, they can make use of this API query. By providing the necessary request parameters in the body and setting the Content-Type header to 'application/json', users can seamlessly update their webhook configuration without the need for manual intervention.\n\nThis functionality enhances the flexibility and adaptability of webhook integrations within the Cisco Catalyst Center environment, allowing users to easily manage and control where event notifications are delivered.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/webhook\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/event/webhook\" with the REST operation \"GET\" is used to retrieve information about webhook destinations configured in the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be beneficial for users who want to:\n- Retrieve a list of webhook configurations and their destinations.\n- Review and monitor the current webhook configurations.\n- Manage, update, or troubleshoot webhook destinations.\n- Implement any necessary changes to the webhook configurations.\n\nBy sending a GET request to this path with the required query parameters like webhookIds, offset, limit, sortBy, and order, users can fetch specific webhook configurations based on their criteria. For example, users can retrieve a subset of webhook configurations, sort them by a specific field, and specify the order in which the results should be displayed.\n\nThis functionality allows users to have better control over their webhook configurations, ensuring that they are correctly set up to receive event notifications from the Cisco Catalyst Center. By utilizing this API query, users can efficiently manage their webhook destinations and ensure that important event notifications are delivered to the intended endpoints.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/webhook\nREST operation:get\nREST API query parameters:\n- webhookIds: List of webhook configurations. The query parameters should be used in the query. This query parameter is required. \n- offset: The number of webhook configuration's to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of webhook configuration's to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/event/webhook\" with the REST operation \"PUT\" is used for updating the destination of a webhook. From a user perspective, this query can be utilized to modify the endpoint where webhook notifications are sent. By sending a PUT request to this path with the updated webhook destination information in the request body, users can ensure that any events triggering the webhook will now be forwarded to the new specified URL or endpoint.\n\nFor example, if a user wants to switch the destination of webhook notifications from one system to another, they can make use of this API query. By providing the necessary request parameters in the body and setting the Content-Type header to 'application/json', users can seamlessly update their webhook configuration without the need for manual intervention. This functionality enhances the flexibility and adaptability of webhook integrations within the Cisco Catalyst Center environment, allowing users to easily manage and control where event notifications from the Cisco Catalyst Center are delivered.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/webhook\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/lan-automation/{id}\" with the PUT operation is used for LAN Automation Stop and Update Devices. This API allows users to stop LAN Automation and update the Loopback0 IP Address of devices discovered in the current session.\n\nFrom a user perspective, this query can be utilized in scenarios where a user needs to halt the LAN Automation process and make necessary updates to the Loopback0 IP Address of the devices. By providing the LAN Automation ID obtained from the \"/dna/intent/api/v1/lan-automation/status\" endpoint in the path parameter, users can use this API to specifically target and update the devices that are part of the LAN Automation process.\n\nBy including the required query parameter \"request\" in the body of the PUT request, users can provide the necessary details for stopping the LAN Automation and updating the Loopback0 IP Address. Additionally, setting the \"Content-Type\" header to 'application/json' ensures that the request body content type is correctly interpreted.\n\nOverall, this API query path provides users with the functionality to control and modify the LAN Automation process and device configuration as needed, enhancing the efficiency and flexibility of network management tasks within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation/{id}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- id: LAN Automation id can be obtained from /dna/intent/api/v1/lan-automation/status.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/lan-automation/{id}\" with the DELETE operation, is designed for LAN Automation Stop. By invoking this API, users can stop the LAN Automation process for a specific site. The LAN Automation ID, which can be obtained from the \"/dna/intent/api/v1/lan-automation/status\" endpoint, needs to be included in the path parameter.\n\nFrom a user perspective, this query can be used in situations where a user needs to pause the LAN Automation process and make changes or updates to the Loopback0 IP Address of the devices discovered during the current LAN Automation session. By providing the LAN Automation ID in the path parameter and including the required query parameter \"request\" in the body of the DELETE request, users can specify which devices to target for updates.\n\nBy sending this DELETE request, users can effectively halt the LAN Automation process for a specific site within the Cisco Catalyst Center environment, giving them the flexibility to manage and modify device configurations as needed. This API query enhances the network management capabilities within the Cisco Catalyst Center, allowing for efficient control over LAN Automation processes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation/{id}\nREST operation:delete\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- id: LAN Automation id can be obtained from /dna/intent/api/v1/lan-automation/status.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/template-programmer/template/deploy/status/{deploymentId}\" is used to retrieve the status of a template deployment in the Cisco Catalyst Center environment. This query endpoint allows users to check the progress and current status of a template deployment by providing the unique identifier deploymentId as a query parameter.\n\nFrom a user perspective, this query can be very beneficial in monitoring and understanding how a template deployment is progressing within the Cisco Catalyst Center. Users can use this query to gain insights into the deployment lifecycle of templates, such as whether the deployment is still in progress, completed successfully, or encountered any errors. By accessing this query path, users can track the status of their template deployments, ensure successful configuration changes across devices, and troubleshoot any issues that may arise during the deployment process.\n\nOverall, the query provides users with visibility and control over template deployments, enabling them to make informed decisions, ensure network stability, and manage their network configurations effectively within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/template/deploy/status/{deploymentId}\nREST operation:get\nREST API query parameters:\n- deploymentId: UUID of deployment to retrieve template deployment status. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/event/syslog-config\" with the POST operation is used to create a Syslog Destination in the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query can be used to configure where event logs generated by the Catalyst devices within the network are sent for monitoring, analysis, or archival purposes. By making a POST request to this endpoint with the necessary parameters included in the request body and setting the Content-Type header to 'application/json', users can define the Syslog server settings such as the IP address(es) of the destination server and other related configurations. \n\nThis functionality allows users to customize their Syslog configuration within the Catalyst Center platform, ensuring that all relevant event logs are efficiently forwarded to the designated destinations for further processing or storage. This capability enhances network monitoring and troubleshooting activities by centralizing event log management and analysis.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/syslog-config\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/event/syslog-config\" with the GET operation is used to retrieve information about Syslog Destinations configured in the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query can be used to:\n- Retrieve a list of configured Syslog Destinations along with their settings such as the IP address(es) of the destination server and the protocol used.\n- Review and monitor the current Syslog configurations to ensure logs are being sent to the correct destinations.\n- Manage, update, or troubleshoot Syslog configurations by viewing the existing settings.\n- Implement any necessary changes to the Syslog configurations, such as adding new destinations or modifying existing ones.\n\nBy making a GET request to this endpoint with the required parameters included in the query (such as configId, name, protocol, offset, limit, sortBy, order), users can access detailed information about their Syslog configurations within the Catalyst Center platform. This capability enables users to effectively monitor and manage the forwarding of event logs generated by Catalyst devices for enhanced network monitoring, analysis, and troubleshooting activities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/syslog-config\nREST operation:get\nREST API query parameters:\n- configId: Config id of syslog server. The query parameters should be used in the query. This query parameter is required. \n- name: Name of syslog server. The query parameters should be used in the query. This query parameter is required. \n- protocol: Protocol of syslog server. The query parameters should be used in the query. This query parameter is required. \n- offset: The number of syslog configuration's to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of syslog configuration's to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/event/syslog-config\" with the PUT operation is used to update Syslog Destinations in the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query can be used to modify the settings of where event logs generated by Catalyst devices within the network are sent for monitoring, analysis, or archival purposes. By making a PUT request to this endpoint with the necessary parameters included in the request body and setting the Content-Type header to 'application/json', users can seamlessly update their Syslog configuration without the need for manual intervention.\n\nUsers can update settings such as the IP address(es) of the destination server and other related configurations, allowing them to customize their Syslog configuration within the Catalyst Center platform. This capability ensures that all relevant event logs are efficiently forwarded to the designated destinations for further processing or storage, enhancing network monitoring and troubleshooting activities by centralizing event log management and analysis.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/syslog-config\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The given REST API query path \"/dna/intent/api/v1/app-policy-queuing-profile/{id}\" with the REST operation \"delete\" is used to delete an existing custom Application Policy Queuing Profile based on the provided ID.\n\nFrom a user perspective, this query can be utilized when a user wants to remove a specific custom queuing profile that has been previously created within the Cisco Catalyst Center platform. By sending a DELETE request to this query path and including the ID of the queuing profile to be deleted in the path parameter, users can effectively remove that specific profile from the system.\n\nFor example, if a user has created multiple custom queuing profiles for different applications or services and no longer needs a particular profile, they can use this query to delete that specific profile. By providing the ID of the profile to be deleted, the system will remove all associated configurations and settings related to that queuing profile, helping to clean up the application policies and optimize the network configurations within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/app-policy-queuing-profile/{id}\nREST operation:delete\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- id: Id of custom queuing profile to delete. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/sacct/{domain}/vacct/{name}/sync-result\" is used to get the sync result for a Virtual Account within the Cisco Catalyst Center. This query is specifically for retrieving a summary of devices that have been synced from the specified Smart Account Domain and Virtual Account using Plug and Play (PnP) capabilities.\n\nFrom a user perspective, this query can be used to check the synchronization status of devices that have been onboarded or provisioned within a specific Virtual Account. By providing the required parameters - the Smart Account Domain and the Virtual Account Name - users can make this API call to fetch detailed information on the devices that have been successfully synced or any potential sync issues encountered during the process.\n\nFor administrators or network operators managing a large number of devices across different Virtual Accounts, this query can provide valuable insights into the status of device provisioning operations, helping them ensure that devices are correctly onboarded and functioning as expected within the specified Virtual Account environment. Additionally, this information can assist in troubleshooting any synchronization issues that may arise during the device deployment process.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/sacct/{domain}/vacct/{name}/sync-result\nREST operation:get\nREST API query parameters:\n- domain: Smart Account Domain. The query parameters should be used in the path. This query parameter is required. \n- name: Virtual Account Name. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/{id}\" with the PUT operation is used for updating device details specified by the device ID in the Plug and Play (PnP) database.\n\nFrom a user perspective, this query can be used to make changes or updates to a specific device that has been onboarded in the PnP process. Users can provide the necessary request parameters in the body of the PUT request. By specifying the device ID in the path of the query, users can target a particular device for updates. The Content-Type header should be set to 'application/json' to indicate the format of the request body.\n\nFor example, a user may want to update the hostname, serial number, or other attributes of a device that has been onboarded using the PnP feature in Cisco Catalyst Center. By sending a PUT request to this API endpoint with the updated device information in the request body, users can modify the device details in the PnP database, ensuring that the device's information is accurate and up to date.\n\nOverall, this query provides a convenient way for users to manage and maintain the information of devices that are part of the PnP process within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/{id}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- id: id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/{id}\" with the GET operation is utilized to retrieve device details by specifying a unique device ID. This endpoint enables users to access specific information about a device registered within the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query can be beneficial in various scenarios. For instance, network administrators can utilize this endpoint to obtain detailed insights into a particular device's configuration, status, and other relevant attributes. By providing the device ID as a parameter in the query path, users can easily fetch essential details about the physical structure, components, and operational status of the specified device.\n\nMoreover, this query can aid in inventory management by allowing users to retrieve specific information about registered devices within the network. It can also facilitate troubleshooting activities by providing valuable data about the device's hardware components, which can help in diagnosing and resolving issues efficiently.\n\nOverall, the \"/dna/intent/api/v1/onboarding/pnp-device/{id}\" query path serves as a valuable resource for users to retrieve targeted information about individual devices registered in the Cisco Catalyst Center, enabling effective device management and maintenance within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/{id}\nREST operation:get\nREST API query parameters:\n- id: id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/{id}\" with the delete operation is used to delete a specific device entry from the Plug and Play (PnP) database within the Cisco Catalyst Center. By providing the device ID as a required parameter in the path, users can target and remove the device information associated with that particular ID from the PnP database.\n\nFrom a user perspective, this query can be valuable in scenarios where a device needs to be removed from the PnP process. For example, if a device is no longer in use, has been replaced, or needs to be reconfigured, users can utilize this query to delete the device entry. This action helps in maintaining an accurate and up-to-date inventory of devices in the PnP database.\n\nBy sending a DELETE request to this specific query path with the device ID specified, users can effectively trigger the deletion process, removing all related information and configurations associated with that device from the PnP database. This functionality streamlines device management processes and ensures that only relevant and active devices are maintained within the system.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/{id}\nREST operation:delete\nREST API query parameters:\n- id: id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path is \"/dna/intent/api/v1/authentication-policy-servers/{id}\" with the REST operation \"delete\". This query is specifically used to delete Authentication and Policy Server Access Configuration within the Cisco Catalyst Center environment. It is utilized to remove existing AAA/ISE server access configurations.\n\nFrom a user perspective, this query can be beneficial when there is a need to update or remove specific authentication and policy server configurations within the Catalyst Center platform. Users can make use of this API endpoint by sending a DELETE request to the specified path and including the unique identifier (ID) of the authentication and policy server they wish to delete. \n\nBy leveraging this query, users can efficiently manage their network security settings by removing outdated or unnecessary server configurations, ensuring that only relevant and up-to-date access policies are in place. This helps in maintaining the security and integrity of the network infrastructure managed through the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/authentication-policy-servers/{id}\nREST operation:delete\nREST API query parameters:\n- id: Authentication and Policy Server Identifier. Use 'Get Authentication and Policy Servers' intent API to find the identifier.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/authentication-policy-servers/{id}\" with the REST operation \"put\" is used to edit Authentication and Policy Server Access Configuration within the Cisco Catalyst Center environment. This API allows users to modify existing AAA/ISE server access configurations. To use this query, users need to provide the specific identifier (ID) of the authentication and policy server they wish to edit.\n\nFrom a user perspective, this query can be beneficial when there is a need to update or modify certain authentication and policy server configurations within the Catalyst Center platform. By sending a PUT request to the specified query path and providing the necessary modifications in the request body, users can efficiently manage their network security settings by adjusting the access policies of the servers.\n\nAfter making the necessary edits, users can further check the integration status by using the 'Cisco ISE Server Integration Status' Intent API. This ensures that the changes made to the authentication and policy server configurations are successfully implemented and integrated within the Catalyst Center environment, maintaining the security and functionality of the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/authentication-policy-servers/{id}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- id: Authentication and Policy Server Identifier. Use 'Get Authentication and Policy Servers' intent API to find the identifier.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The given REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/unclaim\" is used for the operation of Un-Claim Device, which involves un-claiming one or more devices with a specified workflow. This query is marked as deprecated, which means it may no longer be supported or recommended for use in newer versions of the API.\n\nFrom a user perspective, this query can be utilized to un-claim devices that are no longer needed or have been replaced within the network. By sending a POST request to this API path with the necessary request parameters, users can initiate the un-claiming process for selected devices. This action helps in removing the devices from the claimed status in the Plug and Play (PnP) database, allowing them to be managed or provisioned differently.\n\nThe use of this query can aid users in maintaining an accurate inventory of devices within the network and ensuring that the claimed devices reflect the current status and configurations accurately. By un-claiming devices that are no longer in use or have been replaced, users can streamline device management tasks and keep the network inventory up to date.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/unclaim\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/integration-settings/instances/itsm\" with a POST operation is used to create IT Service Management (ITSM) Integration settings within the Cisco Catalyst Center platform.\n\nFrom a user perspective, this query allows users to configure the integration of the Catalyst Center platform with ITSM solutions. By sending a POST request to this endpoint and providing the necessary parameters in the request body, users can define how the Catalyst Center platform interacts with ITSM systems for incident management, change management, problem management, approval chains, maintenance schedules, reporting, analytics, capacity planning, asset management, compliance control, and auditing.\n\nUsers can customize the integration settings to ensure seamless communication between the Catalyst Center platform and their ITSM solution, following the IT4IT\u2122 Reference Architecture standards for events, incidents, problems, and changes. This integration helps to enhance IT efficiency and automation by enabling the Catalyst Center platform to work cohesively with other IT systems via RESTful APIs.\n\nOverall, this query empowers users to streamline IT operations, improve workflow efficiency, and enhance IT service delivery by integrating the Catalyst Center platform with ITSM solutions effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/integration-settings/instances/itsm\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/module/{id}\" with the GET operation is designed to retrieve detailed module information of a network device based on the specified module ID. \n\nFrom a user perspective, this query path can be immensely useful for network administrators and operators within the Cisco Catalyst Center environment. By providing the specific module ID as a parameter in the query, users can access comprehensive details about the physical modules attached to the designated network device. This information can include specifics such as module type, status, firmware version, serial number, and other relevant attributes pertaining to the modules of the device.\n\nUsers can leverage this query for various purposes such as:\n\n1. **Maintenance and Troubleshooting**: Users can retrieve critical information about the modules installed in a network device, aiding in maintenance activities and troubleshooting efforts. This can help in identifying faulty modules or planning for upgrades.\n\n2. **Inventory Management**: By obtaining details of the modules through this query, users can effectively manage their inventory of modules across network devices. This can assist in tracking module types, quantities, and locations within the network infrastructure.\n\n3. **Hardware Health Monitoring**: The module information retrieved through this query can be utilized for monitoring the health and performance of hardware components within network devices. Users can proactively identify issues or anomalies related to modules.\n\n4. **Planning and Configuration**: Understanding the module details can assist users in planning for future expansions or modifications to the network infrastructure. It provides insights into the current configuration of modules in use.\n\nIn summary, this query path facilitates the retrieval of specific module information associated with a network device, offering valuable insights for effective network management, troubleshooting, inventory tracking, and overall maintenance of the network infrastructure within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/module/{id}\nREST operation:get\nREST API query parameters:\n- id: Module id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "From the provided context, the REST API query path \"/dna/intent/api/v1/image/importation\" with the HTTP GET operation is used to retrieve software image details from the Cisco Catalyst Center. This endpoint allows users to fetch a list of software images based on specified filter criteria.\n\nUsers can utilize this query to search for software images based on various parameters such as image UUID, name, family, application type, image integrity status, version, image series, image name, whether it is tagged as golden, recommended from cisco.com, latest from cisco.com, creation time, image size, sorting options, limit, and offset.\n\nBy specifying the desired query parameters, users can retrieve a filtered list of software images that match the specified criteria. This can be helpful for managing and organizing software images within the Catalyst Center, enabling users to easily identify and select the appropriate software images for deployment on network devices.\n\nOverall, this query path provides a convenient way for users to retrieve specific software image details from the Cisco Catalyst Center's image repository, facilitating efficient software image management and deployment processes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/image/importation\nREST operation:get\nREST API query parameters:\n- imageUuid: imageUuid. The query parameters should be used in the query. This query parameter is required. \n- name: name. The query parameters should be used in the query. This query parameter is required. \n- family: family. The query parameters should be used in the query. This query parameter is required. \n- applicationType: applicationType. The query parameters should be used in the query. This query parameter is required. \n- imageIntegrityStatus: imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED. The query parameters should be used in the query. This query parameter is required. \n- version: software Image Version. The query parameters should be used in the query. This query parameter is required. \n- imageSeries: image Series. The query parameters should be used in the query. This query parameter is required. \n- imageName: image Name. The query parameters should be used in the query. This query parameter is required. \n- isTaggedGolden: is Tagged Golden. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- isCCORecommended: is recommended from cisco.com. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- isCCOLatest: is latest from cisco.com. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- createdTime: time in milliseconds (epoch format). The query parameters should be used in the query. This query parameter is required. \n- imageSizeGreaterThan: size in bytes. The query parameters should be used in the query. This query parameter is required. \n- imageSizeLesserThan: size in bytes. The query parameters should be used in the query. This query parameter is required. \n- sortBy: sort results by this field. The query parameters should be used in the query. This query parameter is required. \n- sortOrder: sort order - 'asc' or 'des'. Default is asc. The query parameters should be used in the query. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v2/credential-to-site/{siteId}\" with the POST operation is used to assign a device credential to a specific site within the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized when there is a need to associate a specific device credential with a particular site in the network infrastructure managed by the Cisco Catalyst Center. This can be particularly useful in scenarios where security protocols or access controls require unique credentials for devices within different physical locations or logical groupings.\n\nBy making a POST request to this API endpoint with the required parameters, such as the siteId and the request body containing the necessary information about the credential, users can seamlessly assign the desired device credential to the specified site. This can streamline the management of credentials across different sites, ensuring that devices are appropriately authenticated and authorized based on their location within the network.\n\nOverall, this API query provides a straightforward way for users to manage and assign device credentials effectively within the Cisco Catalyst Center, enhancing security and access control measures in the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/credential-to-site/{siteId}\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- siteId: Site Id to assign credential.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path `/dna/intent/api/v1/event/snmp-config` with the POST operation is used to create an SNMP destination in the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized to configure SNMP settings for devices within the Catalyst Center platform. By sending a POST request to this endpoint with the required parameters in the request body, users can create new SNMP destinations for monitoring and managing network devices. \n\nUsers can specify details such as SNMP contact information, location, associated wireless LAN controller IP, interface count, line card count, managed status, memory size, uptime, device mode, and more in the request body to create the SNMP destination as per their requirements.\n\nOverall, this query provides users with the capability to efficiently set up SNMP configurations for better monitoring and management of their network devices through the Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/snmp-config\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path `/dna/intent/api/v1/event/snmp-config` with the PUT operation is used to update SNMP Destinations in the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query can be utilized to modify the SNMP settings for devices within the Catalyst Center platform. By sending a PUT request to this endpoint with the required parameters in the request body, users can update existing SNMP destinations to ensure accurate monitoring and management of network devices.\n\nUsers can specify details such as SNMP contact information, location, associated wireless LAN controller IP, interface count, line card count, managed status, memory size, uptime, device mode, and more in the request body to update the SNMP destination as per their requirements. \n\nOverall, this query provides users with the capability to efficiently adjust SNMP configurations for better monitoring and management of their network devices through the Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/snmp-config\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/event/event-series/count\" in the Cisco Catalyst Center is used to retrieve the count of published notifications or events within the system. This query provides users with information on the total number of notifications that have been generated based on the specified criteria.\n\nFrom a user perspective, this query can be valuable for monitoring and analyzing the volume and types of events occurring within the Cisco Catalyst Center environment. By specifying parameters such as eventIds, startTime, endTime, category, type, severity, domain, subDomain, and source, users can filter the notifications they are interested in and obtain a count of how many notifications meet those specific criteria.\n\nFor example, a user could use this query to track the number of notifications related to network security events (category: security), specific device types (domain: switches), or critical severity level events. By analyzing the count of notifications over time or based on different filters, users can gain insights into the activity and health of their network infrastructure, helping them to proactively manage and address any issues that may arise.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/event-series/count\nREST operation:get\nREST API query parameters:\n- eventIds: The registered EventId should be provided. The query parameters should be used in the query. This query parameter is required. \n- startTime: Start Time in milliseconds. The query parameters should be used in the query. This query parameter is required. \n- endTime: End Time in milliseconds. The query parameters should be used in the query. This query parameter is required. \n- category: Category. The query parameters should be used in the query. This query parameter is required. \n- type: Type. The query parameters should be used in the query. This query parameter is required. \n- severity: Severity. The query parameters should be used in the query. This query parameter is required. \n- domain: Domain. The query parameters should be used in the query. This query parameter is required. \n- subDomain: Sub Domain. The query parameters should be used in the query. This query parameter is required. \n- source: Source. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/integration-settings/instances/itsm/{instanceId}\" with the GET operation is used to retrieve IT Service Management (ITSM) Integration settings by a specific Instance Id. This query fetches the ITSM Integration setting configuration associated with the provided Instance Id.\n\nFrom a user perspective, this query can be utilized to access and view the specific ITSM Integration settings that have been configured within the Cisco Catalyst Center platform for a particular ITSM instance. By making a GET request to this endpoint and providing the Instance Id in the path, users can retrieve detailed information about how the Catalyst Center platform is integrated with the designated ITSM system. This information can include details such as the configuration for incident management, change management, problem management, approval chains, maintenance schedules, reporting, analytics, capacity planning, asset management, compliance control, and auditing within the ITSM integration.\n\nUsers can leverage this query to ensure that the integration settings between the Catalyst Center platform and their ITSM solution are correctly configured and aligned with their operational requirements. By retrieving these settings, users can verify the integration parameters, review the established connections, and troubleshoot any potential issues related to the ITSM integration within the Catalyst Center platform.\n\nOverall, this query empowers users to efficiently manage and monitor the integration between the Catalyst Center platform and their ITSM solution, enabling seamless communication, streamlined workflows, and enhanced IT service delivery through effective ITSM integration settings.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/integration-settings/instances/itsm/{instanceId}\nREST operation:get\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- instanceId: Instance Id of the Integration setting instance. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path is designed for updating IT Service Management (ITSM) Integration settings within the Cisco Catalyst Center platform. By utilizing a PUT operation on the path \"/dna/intent/api/v1/integration-settings/instances/itsm/{instanceId}\", users can modify and adjust the configuration of a specific ITSM Integration setting instance identified by the instanceId parameter.\n\nFrom a user perspective, this query allows users to make changes to the integration settings that govern how the Catalyst Center platform interacts with their ITSM solution. By sending a PUT request to this endpoint and providing the necessary parameters in the request body, users can update various aspects of the ITSM integration such as incident management, change management, problem management, approval chains, maintenance schedules, reporting, analytics, capacity planning, asset management, compliance control, and auditing.\n\nUsers may utilize this query when there is a need to update or customize the integration settings to align with evolving operational requirements, compliance standards, or changes in IT processes. By modifying the ITSM Integration settings through this API query, users can ensure that the Catalyst Center platform continues to communicate effectively with their ITSM solution, facilitating streamlined workflows, improved IT service delivery, and efficient IT operations.\n\nIn summary, this API query empowers users to manage and optimize the integration between the Cisco Catalyst Center platform and their ITSM solution by enabling them to update and configure the ITSM Integration settings according to their specific needs and preferences.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/integration-settings/instances/itsm/{instanceId}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- instanceId: Instance Id of the Integration setting instance. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/integration-settings/instances/itsm/{instanceId}\" with a DELETE operation is used to remove or delete a specific IT Service Management (ITSM) Integration setting instance within the Cisco Catalyst Center platform. This query is designed to allow users to delete a particular ITSM Integration setting configuration identified by the instanceId parameter.\n\nFrom a user perspective, this DELETE query can be useful in scenarios where a user wants to remove a specific ITSM Integration setting that is no longer needed or has become outdated. By sending a DELETE request to this endpoint with the corresponding instanceId, users can effectively remove the integration setting, thereby discontinuing the configuration that governs the communication between the Catalyst Center platform and their ITSM solution.\n\nThis query provides users with the flexibility to manage their ITSM Integration settings efficiently by allowing them to delete configurations that are no longer required or have been replaced by updated settings. By using this API query, users can maintain a clean and relevant set of ITSM Integration settings within the Catalyst Center platform, ensuring that only necessary and up-to-date configurations are in place to support their IT operations effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/integration-settings/instances/itsm/{instanceId}\nREST operation:delete\nREST API query parameters:\n- instanceId: Instance Id of the Integration setting instance. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path `/dna/intent/api/v1/global-credential/snmpv2-write-community` with the PUT operation is used to update the global SNMP write community in the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query allows users to modify the SNMP write community settings for devices within the Catalyst Center platform. By sending a PUT request to this endpoint with the required parameters in the request body, users can update the SNMP write community to ensure secure communication and management of network devices.\n\nUsers can specify details such as the SNMP write community string in the request body to customize the SNMP configuration according to their requirements. This query provides users with the capability to efficiently adjust SNMP settings for better monitoring and management of their network devices through the Catalyst Center platform, enhancing network security and control.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/snmpv2-write-community\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/global-credential/snmpv2-write-community\" with the POST operation is used to create a new SNMP write community credential in the Cisco Catalyst Center environment. This query allows users to add a global SNMP write community, which is crucial for secure communication and management of network devices.\n\nFrom a user perspective, this query can be used to update the SNMP write community settings for devices within the Catalyst Center platform. By sending a POST request to this endpoint with the required parameters in the request body, users can create a new SNMP write community credential. Users can specify details such as the SNMP write community string in the request body to customize the SNMP configuration according to their requirements.\n\nOverall, this query provides users with the capability to efficiently manage and secure their network devices by updating SNMP settings through the Catalyst Center platform. It enables users to enhance network security and control by ensuring proper SNMP configurations for monitoring and managing their devices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/snmpv2-write-community\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/lan-automation/updateDevice\" with the PUT operation is used for LAN Automation Device Update. This API allows users to update specific features related to LAN Automation devices. The supported features include updating the Loopback0 IP address, adding a link, and deleting a link.\n\nFrom a user perspective, this query can be used when there is a need to update the configuration of LAN Automation devices. By including the required query parameter \"request\" in the body of the PUT request, users can specify the details of the update they want to perform, such as modifying the Loopback0 IP address or adding/deleting links. Users can also set the \"Content-Type\" header to 'application/json' to ensure that the request body content type is correct.\n\nOverall, this API query provides users with the capability to manage and modify LAN Automation devices effectively within the Cisco Catalyst Center environment. It enables users to make specific updates to device configurations, enhancing network management tasks and improving network efficiency.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation/updateDevice\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: . The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- feature: Feature ID for update.Supported feature IDs are: LOOPBACK0_IPADDRESS_UPDATE, LINK_ADD and LINK_DELETE.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/tag\" with a POST request operation is used to create a tag with specified tag attributes in the Cisco Catalyst Center environment. Tags in Cisco Catalyst Center are used to categorize and organize network elements, such as devices, based on specific criteria or attributes. \n\nFrom a user perspective, this query can be used to efficiently manage and organize network elements. Users can create tags with specific attributes to group related devices together for easier management, monitoring, and configuration. For example, a network administrator can create a tag named \"Branch_Offices\" and assign specific switches or routers to this tag. This allows the administrator to apply configurations or policies to all devices within the \"Branch_Offices\" tag easily.\n\nIn summary, this query provides a user-friendly way to organize and categorize network elements by creating tags in the Cisco Catalyst Center, ultimately facilitating streamlined network management and operations within the environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/tag\" with a PUT operation is designed to update a specific tag in the Cisco Catalyst Center. Tags in the Catalyst Center are utilized to categorize and organize network elements, such as devices, based on specific criteria or attributes.\n\nFrom a user perspective, this query can be valuable for efficiently managing and organizing network elements. Users can update the attributes or criteria of a tag, ensuring that devices are appropriately categorized and grouped for easier management. By sending a PUT request with the necessary request body containing the updated tag information, users can modify the characteristics of a particular tag. This can help in ensuring that network elements are organized in a way that aligns with the network architecture and management requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/tag\" with a GET request operation is used to retrieve tags in the Cisco Catalyst Center based on specific filter criteria. Tags in the Catalyst Center are used to categorize and organize network elements like devices, according to defined attributes or criteria.\n\nFrom a user perspective, this query allows users to efficiently manage and organize network elements by fetching tags that meet certain filter criteria. By specifying parameters such as tag name, namespace, attributes, level, offset, limit, size, field, sortBy, order, and systemTag, users can retrieve tags that match their requirements. This can be valuable for network administrators to categorize devices, group them based on specific attributes, and streamline network management tasks.\n\nOverall, the \"/dna/intent/api/v1/tag\" query provides a user-friendly way for users to retrieve tags with specific attributes, facilitating the organization and management of network elements within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag\nREST operation:get\nREST API query parameters:\n- name: Tag name is mandatory when filter operation is used.. The query parameters should be used in the query. This query parameter is required. \n- additionalInfo.nameSpace: nameSpace. The query parameters should be used in the query. This query parameter is required. \n- additionalInfo.attributes: attributeName. The query parameters should be used in the query. This query parameter is required. \n- level: levelArg. The query parameters should be used in the query. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n- size: size in kilobytes(KB). The query parameters should be used in the query. This query parameter is required. \n- field: Available field names are :'name,id,parentId,type,additionalInfo.nameSpace,additionalInfo.attributes'. The query parameters should be used in the query. This query parameter is required. \n- sortBy: Only supported attribute is name. SortyBy is mandatory when order is used.. The query parameters should be used in the query. This query parameter is required. \n- order: Available values are asc and des. The query parameters should be used in the query. This query parameter is required. \n- systemTag: systemTag. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/event/subscription/count\" in the Cisco Catalyst Center is used to retrieve the count of event subscriptions within the system. This query provides users with information on the total number of event subscriptions that have been set up in the Catalyst Center environment.\n\nFrom a user perspective, this query can be valuable for monitoring and managing the event subscriptions configured within the Cisco Catalyst Center platform. By utilizing this query with the required query parameter eventIds, users can obtain a count of how many event subscriptions are associated with specific eventIds. This information can help users track the number of subscriptions set up for different types of events or notifications, allowing them to understand the level of monitoring and alerting in place for various aspects of the Catalyst Center environment.\n\nFor example, a user could use this query to determine the number of event subscriptions related to network security events, performance metrics, configuration changes, or any other specific events they are interested in monitoring. By analyzing the count of event subscriptions, users can assess the coverage and scope of their event monitoring strategy within the Catalyst Center, identify areas that may require additional subscriptions, and ensure comprehensive visibility into critical events within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription/count\nREST operation:get\nREST API query parameters:\n- eventIds: List of subscriptions related to the respective eventIds. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/file/{nameSpace}\" with the POST operation is used for uploading a new file within a specific namespace in the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query can be utilized to add or upload a file to a designated namespace within the Catalyst Center platform. Users can send a POST request to this endpoint with the file data in the request body and specify the namespace where they want the file to be uploaded. This feature can be useful for various purposes such as storing configuration files, firmware updates, scripts, or any other relevant files within the Catalyst Center for easy access and management.\n\nFor example, a network administrator may use this query to upload a new device configuration file to a specific namespace related to a network segment or location. This file can then be accessed and applied to devices within that namespace to ensure consistent configurations across the network.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/file/{nameSpace}\nREST operation:post\nREST API query parameters:\n- nameSpace: . The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/app-policy-queuing-profile\" with the REST operation \"get\" is used to retrieve information about existing Application Policy Queuing Profiles within the Cisco Catalyst Center platform. Users can use this query to fetch details about all existing queuing profiles or retrieve specific profiles by providing the name of the queuing profile as a query parameter.\n\nFrom a user perspective, this query can be beneficial when a user needs to access information about the queuing profiles configured in the Catalyst Center platform. By making a GET request to this query path and including the name of the desired queuing profile in the query parameters, users can retrieve details such as configurations, settings, and associated policies related to that specific queuing profile. This information can help users in managing and optimizing the application policies within their network infrastructure.\n\nOverall, the \"/dna/intent/api/v1/app-policy-queuing-profile\" query allows users to efficiently retrieve information about existing queuing profiles, enabling them to make informed decisions and adjustments to their network configurations based on the specific characteristics and requirements of each queuing profile.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/app-policy-queuing-profile\nREST operation:get\nREST API query parameters:\n- name: queuing profile name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/app-policy-queuing-profile\" with the POST operation allows users to create a new custom Application Policy Queuing Profile within the Cisco Catalyst Center platform. This feature enables users to define specific queuing profiles tailored to their network requirements and configurations.\n\nFrom a user perspective, this query can be utilized when a user needs to establish a customized queuing profile for applications within their network infrastructure. By sending a POST request to this query path and including the necessary parameters in the request body, users can create a new queuing profile with unique characteristics and settings. This functionality empowers users to optimize their network performance by defining queuing profiles that prioritize or allocate resources based on their application policies and requirements.\n\nOverall, the \"/dna/intent/api/v1/app-policy-queuing-profile\" query provides users with the capability to create personalized queuing profiles, enhancing their ability to manage and control application traffic within their network environment effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/app-policy-queuing-profile\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: content-type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/app-policy-queuing-profile\" with the PUT operation allows users to update an existing custom Application Policy Queuing Profile within the Cisco Catalyst Center platform. This feature enables users to modify the characteristics and settings of a queuing profile that has been previously created to better align with evolving network requirements and configurations.\n\nFrom a user perspective, this query can be utilized when a user needs to make changes or adjustments to an existing queuing profile tailored for specific applications within their network infrastructure. By sending a PUT request to this query path and including the necessary parameters in the request body, users can update the queuing profile with revised characteristics, priorities, resource allocations, or any other settings as needed. This functionality empowers users to fine-tune their network performance by modifying queuing profiles to better suit their current application policies and requirements.\n\nOverall, the \"/dna/intent/api/v1/app-policy-queuing-profile\" query with the PUT operation provides users with the capability to efficiently update and customize their existing queuing profiles within the Catalyst Center platform, ensuring that their network configurations remain optimized and aligned with their specific business needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/app-policy-queuing-profile\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: content-type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/event/subscription-details/syslog\", is used to retrieve detailed information about Syslog subscription details within the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query can be helpful in the following ways:\n- Viewing the list of subscription details for a specified connectorType (Syslog in this case).\n- Managing, updating, or troubleshooting Syslog configurations by accessing existing settings.\n- Implementing changes to Syslog configurations, such as adding new destinations or modifying existing ones.\n- Monitoring and reviewing the current Syslog configurations to ensure logs are being sent to the correct destinations.\n- Analyzing event subscriptions to assess the coverage and scope of event monitoring strategies within the Catalyst Center.\n- Identifying areas that may require additional subscriptions for comprehensive visibility into critical events.\n\nUsers can make a GET request to this endpoint with the required parameters like name, instanceId, offset, limit, sortBy, and order to retrieve specific Syslog subscription details tailored to their needs. This capability enhances network monitoring, troubleshooting, and management activities by providing centralized access to and control over Syslog configurations within the Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription-details/syslog\nREST operation:get\nREST API query parameters:\n- name: Name of the specific configuration. The query parameters should be used in the query. This query parameter is required. \n- instanceId: Instance Id of the specific configuration. The query parameters should be used in the query. This query parameter is required. \n- offset: The number of Syslog Subscription detail's to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of Syslog Subscription detail's to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/global-credential/netconf\" with the POST operation is used to create new Netconf credentials in the Cisco Catalyst Center environment. This query allows users to add global Netconf credentials, which are essential for secure communication and management of network devices that support the Netconf protocol.\n\nFrom a user perspective, this query can be utilized to update the Netconf credentials settings for devices within the Catalyst Center platform. By sending a POST request to this specific API endpoint with the required parameters in the request body, users can provide the necessary information such as the Netconf username, password, and any other relevant details required for authentication and communication via the Netconf protocol.\n\nUsers may need to authenticate themselves using appropriate authentication mechanisms, such as providing credentials or tokens in the request headers, to ensure secure access to the API. The response from this query will indicate whether the Netconf credentials creation was successful, allowing users to effectively manage and configure Netconf settings for their network devices through the Cisco Catalyst Center interface.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/netconf\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "<details>\n<summary>Click to expand: Description and User Perspective of the REST API Query</summary>\n\n### Description:\nThe provided REST API query path \"/dna/intent/api/v1/global-credential/netconf\" with the PUT operation is specifically designed to update the global Netconf credentials within the Cisco Catalyst Center environment. Netconf credentials are critical for secure communication and management of network devices that support the Netconf protocol. This query allows users to modify the Netconf credentials settings at a global level.\n\n### User Perspective:\nFrom a user perspective, this query can be utilized to manage and configure Netconf credentials for network devices within the Catalyst Center platform. Users can send a PUT request to the designated endpoint with the required parameters in the request body. By doing so, users can update information such as the Netconf username, password, and any other relevant authentication details necessary for secure communication via the Netconf protocol.\n\nUpon successful execution of the query, users will receive a response indicating the status of the Netconf credentials update. This allows users to effectively oversee and maintain the Netconf settings for their network devices through the user-friendly interface provided by the Cisco Catalyst Center.\n\nOverall, this API query facilitates the seamless management of Netconf credentials, ensuring secure and efficient communication with devices that support the Netconf protocol within the Catalyst Center environment.\n</details>\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/netconf\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/template-programmer/template/deploy\" is used for deploying a template in the Cisco Catalyst Center environment. This API endpoint allows users to deploy a specific version of a template to one or multiple devices managed by the Cisco DNA Center.\n\nFrom a user perspective, this query can be very beneficial for automating the deployment process of network configurations across various devices. Users can create configuration templates with specific settings, variables, and commands tailored to their network requirements. Once the templates are created and committed, users can utilize this API endpoint to deploy the template to the target devices.\n\nBy sending a POST request to this specific API query path, users can provide essential parameters in the request body. These parameters may include options such as whether to forcefully push the template, specify target devices for deployment, and any additional parameters required by the template.\n\nUtilizing this REST API query enables users to seamlessly initiate the deployment process, reducing the need for manual configuration tasks. It ensures consistency in applying network configurations across devices and can significantly streamline the network management process.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/template/deploy\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/client-detail\" is used to retrieve detailed information about a client in the network based on the client's MAC address at a specific point in time. This query requires two query parameters:\n\n1. macAddress: The MAC address of the client for which detailed information is requested.\n2. timestamp: The epoch time (in milliseconds) representing the specific point in time for which the client health data is needed.\n\nFrom a user perspective, this query can be used to gather specific details about a client device connected to the network. By providing the MAC address of the client and the timestamp, users can retrieve information such as the client's health status, connection details, and any relevant data associated with that client at the specified time. This information can be valuable for troubleshooting network issues, monitoring client activities, or analyzing network performance.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/client-detail\nREST operation:get\nREST API query parameters:\n- macAddress: MAC Address of the client. The query parameters should be used in the query. This query parameter is required. \n- timestamp: Epoch time(in milliseconds) when the Client health data is required. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path in the Cisco Catalyst Center is used to retrieve detailed information about a specific view within a given view group. By providing the unique viewGroupId and viewId as required query parameters, users can access comprehensive details specific to that particular view configuration. This query is essential for users who need to configure reports based on the information contained within a specific view.\n\nFrom a user perspective, this API query enables users to efficiently explore and understand the content and scope of different views within a designated view group. Users can use this query to access essential data visualizations, reports, or configurations stored within a specific view, helping them manage and organize data effectively. By being able to retrieve detailed information about a specific view, users can make informed decisions, analyze data insights, and generate accurate reports based on the information available within that view.\n\nIn summary, this API query enhances the user experience by providing a convenient way to retrieve detailed view information, facilitating better decision-making and effective utilization of the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/data/view-groups/{viewGroupId}/views/{viewId}\nREST operation:get\nREST API query parameters:\n- viewGroupId: viewGroupId of viewgroup. The query parameters should be used in the path. This query parameter is required. \n- viewId: view id of view. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/network-device/{id}\" with the DELETE operation, is used to delete a network device entry from the Cisco Catalyst Center based on the provided device ID. By sending a DELETE request to this endpoint with the device ID specified, users can trigger the deletion process, removing the device and all related information and configurations associated with it from the Catalyst Center.\n\nFrom a user perspective, this query can be valuable in scenarios where a network device is no longer in use, has been replaced, or needs to be reconfigured. By utilizing this query, users can ensure that their device inventory in the Catalyst Center remains accurate and up-to-date. This action helps in maintaining the cleanliness and efficiency of the network device management system.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{id}\nREST operation:delete\nREST API query parameters:\n- id: Device ID. The query parameters should be used in the path. This query parameter is required. \n- cleanConfig: cleanConfig. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n\n</api-query>", "This REST API query path `\"/dna/intent/api/v1/network-device/{id}\"` with the GET operation is designed for retrieving network device details based on a specific device ID. Users can provide the device ID as a parameter in the query path to fetch essential information about the specified network device, including details such as device type, status, IP address, firmware version, serial number, and other relevant attributes. \n\nFrom a user perspective, this query can be valuable for network administrators and operators within the Cisco Catalyst Center environment. By utilizing this query, users can efficiently access detailed information about individual network devices in their infrastructure. This can aid in tasks such as inventory management, troubleshooting, maintenance activities, monitoring hardware health, and planning for upgrades or replacements. \n\nAdditionally, users can leverage this query to gather specific insights about the physical structure, components, and operational status of a particular network device, enabling them to make informed decisions and ensure effective management of their network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{id}\nREST operation:get\nREST API query parameters:\n- id: Device ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/global-credential/snmpv3\" with the PUT operation is used to update the global SNMPv3 credentials in the Cisco Catalyst Center environment. This query allows users to modify the SNMPv3 credential settings, such as authentication type, passwords, username, privacy type, etc., on a global level.\n\nFrom a user perspective, this query can be utilized to update and manage SNMPv3 credentials across multiple devices within the Catalyst Center platform. By sending a PUT request to this endpoint with the required parameters in the request body, users can ensure that their SNMPv3 configuration is up-to-date and secure. This is crucial for monitoring and managing network devices effectively, as SNMPv3 provides enhanced security features compared to SNMPv2.\n\nUsers can customize the SNMPv3 settings based on their specific requirements, such as updating authentication and privacy passwords, changing usernames, or adjusting the encryption algorithm. By utilizing this query, users can maintain a secure and efficient network infrastructure within the Catalyst Center environment.\n\nOverall, this query empowers users to enhance the security and functionality of their network devices by enabling them to update and manage SNMPv3 credentials seamlessly through the Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/snmpv3\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path (\"/dna/intent/api/v1/global-credential/snmpv3\") with the POST operation is used to create SNMPv3 credentials in the Cisco Catalyst Center environment. SNMPv3 (Simple Network Management Protocol version 3) is a secure protocol that provides encryption and authentication features, making it a more robust option for managing network devices.\n\nFrom a user perspective, this query can be utilized to add or update SNMPv3 credentials on a global level within the Catalyst Center platform. Users can specify parameters such as authentication type (e.g., SHA), authentication password, SNMP mode (e.g., AUTHPRIV or NOAUTHNOPRIV), username, privacy type (e.g., AES128), and privacy password. By sending a POST request with the required parameters in the request body, users can ensure that their SNMPv3 credentials are correctly configured to securely monitor and manage their network devices.\n\nFor example, users can use this query to update SNMPv3 credentials for various devices, ensuring that the authentication and encryption settings are in line with security best practices. This query empowers users to customize SNMPv3 settings tailored to their specific network requirements, enhancing the overall security and efficiency of their network infrastructure.\n\nIn summary, the ability to create SNMPv3 credentials through this REST API query path enables users to strengthen the security of their network management processes within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/snmpv3\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-settings/savacct\" is used to add a Virtual Account in the Cisco Catalyst Center. This query involves registering a Smart Account, Virtual Account, and relevant server profile information with the PnP System and database. Additionally, the devices present in the registered virtual account are synchronized with the PnP database. The response payload from this query returns the newly created profile.\n\nFrom a user perspective, this query can be utilized by administrators or network operators who are managing a large number of devices across different Virtual Accounts. By providing the necessary parameters such as the Smart Account Domain and the Virtual Account Name, users can initiate this API call to retrieve detailed information on the devices that have been successfully synced or identify any potential synchronization issues that may have occurred during the process.\n\nThis query empowers users to gain valuable insights into the status of device provisioning operations within the specified Virtual Account environment. It aids in ensuring that devices are correctly onboarded and functioning as expected. Moreover, this information can be beneficial for troubleshooting any synchronization issues that may arise during the device deployment process, allowing for smoother device management and network operations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-settings/savacct\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-settings/savacct\" is used to update the Plug and Play (PnP) Server Profile within a registered Virtual Account in the Cisco Catalyst Center. This operation involves making modifications to the PnP Server profile, which includes details about the Smart Account, Virtual Account, and relevant server information stored in the PnP database. By sending a PUT request to this API endpoint with the required parameters in the request body, users can update and synchronize the server profile information for devices within the specified Virtual Account environment.\n\nFrom a user perspective, this query can be essential for ensuring that device provisioning operations are accurately managed within the Virtual Account setup. Users may need to update various attributes of devices that have been onboarded using the PnP feature in the Cisco Catalyst Center, such as the hostname, serial number, or other device details. By utilizing this API endpoint, users can efficiently modify the device information stored in the PnP database, thereby maintaining the accuracy and relevance of device data during the provisioning process.\n\nMoreover, by updating the PnP Server Profile through this query, users can troubleshoot any synchronization issues that may occur during the device deployment process. This functionality enables users to verify and manage the synchronization status of devices within the Virtual Account, ensuring that the devices are correctly onboarded and functioning as expected. Ultimately, this query empowers users to streamline device management, enhance network operations, and maintain the integrity of device information within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-settings/savacct\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device\" with the GET operation is used to retrieve a list of network devices managed by Cisco Catalyst Center. Users can specify various filter criteria such as hostname, management IP address, MAC address, location, serial number, software version, and more to narrow down the search results. Additionally, users can use wildcard characters like \".*\" to conduct more flexible searches based on the filter criteria.\n\nFrom a user perspective, this query can be valuable for network administrators, operators, and IT personnel who need to access detailed information about network devices within their infrastructure. By utilizing this query, users can efficiently retrieve essential details about network devices, such as device type, status, IP address, firmware version, serial number, and other relevant attributes. This information is crucial for network monitoring, troubleshooting, configuration management, and overall network maintenance tasks.\n\nUsers can leverage this query to filter and search for specific devices based on their unique identifiers or attributes, making it easier to manage and monitor the network environment effectively. Furthermore, users can also use the offset and limit parameters to control the number of devices returned in the query results, facilitating better data management and analysis based on their requirements.\n\nOverall, this REST API query path enables users to access a comprehensive list of network devices and their associated details, empowering them to make informed decisions, troubleshoot network issues efficiently, and ensure optimal performance and security of their network infrastructure within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device\nREST operation:get\nREST API query parameters:\n- hostname: hostname. The query parameters should be used in the query. This query parameter is required. \n- managementIpAddress: managementIpAddress. The query parameters should be used in the query. This query parameter is required. \n- macAddress: macAddress. The query parameters should be used in the query. This query parameter is required. \n- locationName: locationName. The query parameters should be used in the query. This query parameter is required. \n- serialNumber: serialNumber. The query parameters should be used in the query. This query parameter is required. \n- location: location. The query parameters should be used in the query. This query parameter is required. \n- family: family. The query parameters should be used in the query. This query parameter is required. \n- type: type. The query parameters should be used in the query. This query parameter is required. \n- series: series. The query parameters should be used in the query. This query parameter is required. \n- collectionStatus: collectionStatus. The query parameters should be used in the query. This query parameter is required. \n- collectionInterval: collectionInterval. The query parameters should be used in the query. This query parameter is required. \n- notSyncedForMinutes: notSyncedForMinutes. The query parameters should be used in the query. This query parameter is required. \n- errorCode: errorCode. The query parameters should be used in the query. This query parameter is required. \n- errorDescription: errorDescription. The query parameters should be used in the query. This query parameter is required. \n- softwareVersion: softwareVersion. The query parameters should be used in the query. This query parameter is required. \n- softwareType: softwareType. The query parameters should be used in the query. This query parameter is required. \n- platformId: platformId. The query parameters should be used in the query. This query parameter is required. \n- role: role. The query parameters should be used in the query. This query parameter is required. \n- reachabilityStatus: reachabilityStatus. The query parameters should be used in the query. This query parameter is required. \n- upTime: upTime. The query parameters should be used in the query. This query parameter is required. \n- associatedWlcIp: associatedWlcIp. The query parameters should be used in the query. This query parameter is required. \n- license.name: licenseName. The query parameters should be used in the query. This query parameter is required. \n- license.type: licenseType. The query parameters should be used in the query. This query parameter is required. \n- license.status: licenseStatus. The query parameters should be used in the query. This query parameter is required. \n- module+name: moduleName. The query parameters should be used in the query. This query parameter is required. \n- module+equpimenttype: moduleEqupimentType. The query parameters should be used in the query. This query parameter is required. \n- module+servicestate: moduleServiceState. The query parameters should be used in the query. This query parameter is required. \n- module+vendorequipmenttype: moduleVendorEquipmentType. The query parameters should be used in the query. This query parameter is required. \n- module+partnumber: modulePartNumber. The query parameters should be used in the query. This query parameter is required. \n- module+operationstatecode: moduleOperationStateCode. The query parameters should be used in the query. This query parameter is required. \n- id: Accepts comma separated ids and return list of network-devices for the given ids. If invalid or not-found ids are provided, null entry will be returned in the list.. The query parameters should be used in the query. This query parameter is required. \n- deviceSupportLevel: deviceSupportLevel. The query parameters should be used in the query. This query parameter is required. \n- offset: offset >= 1 [X gives results from Xth device onwards]. The query parameters should be used in the query. This query parameter is required. \n- limit: 1 <= limit <= 500 [max. no. of devices to be returned in the result]. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/network-device\" with the REST operation \"post\" is used to add a device with the given credentials to the Cisco Catalyst Center. This query allows users to seamlessly integrate new devices into their network infrastructure by providing the necessary information and authentication credentials.\n\nFrom a user perspective, this query can be used when there is a need to onboard a new network device into the Cisco Catalyst Center environment. Users can specify the device details such as hostname, serial number, product ID, and relevant AAA (Authentication, Authorization, and Accounting) credentials like username and password in the request body. By making a POST request to this API endpoint, users can initiate the process of adding the device to their network and ensuring that it is authenticated and authorized to operate within the network.\n\nThis query is particularly useful in scenarios where administrators need to automate the device onboarding process or when deploying new devices across their network. By utilizing this API query, users can efficiently manage and control the addition of devices to their network infrastructure while maintaining proper security measures through credential-based authentication.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device\" with the PUT operation is used to update the device details, such as credentials and management IP address, for a given device or a set of devices in the Cisco Catalyst Center. This query also triggers an inventory sync, ensuring that the information is up to date within the Cisco DNA Center environment.\n\nFrom a user perspective, this query is essential for managing device provisioning operations accurately within the Virtual Account setup. Users may need to update various attributes of devices that have been onboarded using the Plug and Play (PnP) feature in the Cisco Catalyst Center, such as hostname, serial number, or other device details. By utilizing this API endpoint, users can ensure that the device information in the DNA Center is accurate and synchronized with the actual devices in their network, facilitating efficient network management and operations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/network-device/{deviceUuid}/equipment\" with the GET operation is used to retrieve detailed information about the physical components of a specific network device identified by its unique device Uuid. This query allows users to fetch information regarding various types of equipment installed in the specified device, including Power Supply, Fan, Chassis, Backplane, Module, Processor, Other, and SFP.\n\nFrom a user perspective, this query can be utilized for various purposes such as maintenance, troubleshooting, inventory management, and network monitoring. Users, such as network administrators, operators, and IT personnel, can leverage this query to access critical details about the physical components of network devices. By providing the device Uuid and specifying the type of equipment, users can retrieve essential information about the modules, power supplies, fans, chassis, and other components present in the device.\n\nFor maintenance and troubleshooting purposes, this query can be valuable in identifying faulty components, planning for upgrades, and ensuring the proper functioning of network devices. It can also aid in inventory management by providing specific information about the hardware components installed in registered devices within the network.\n\nOverall, this query enhances the user's capability to gather detailed insights into the physical structure and components of network devices, enabling efficient maintenance, troubleshooting, and management of the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceUuid}/equipment\nREST operation:get\nREST API query parameters:\n- deviceUuid: DeviceUuid. The query parameters should be used in the path. This query parameter is required. \n- type: Type value can be PowerSupply, Fan, Chassis, Backplane, Module, PROCESSOR, Other, SFP. If no type is mentioned, All equipments are fetched for the device.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/network-device/{deviceUuid}/interface/poe-detail\" with the GET operation is designed to retrieve Power over Ethernet (POE) interface details for a specified network device. The deviceUuid parameter is mandatory and represents the unique identifier of the device for which you want to fetch POE interface information. Additionally, the interfaceNameList parameter, which is optional, allows you to specify the interface names for which you want to retrieve POE details.\n\nFrom a user perspective, this query can be highly beneficial for network administrators, operators, and IT personnel who need to manage, monitor, and troubleshoot network devices in their infrastructure. By leveraging this query, users can access crucial information about the POE interfaces of a specific device. This information can include details such as operational status, power usage, power capacity, connected devices, and any relevant configuration settings related to POE.\n\nUsers can utilize this query for various purposes such as:\n\n1. **Troubleshooting and Maintenance**: By retrieving detailed POE interface information, users can identify any issues or discrepancies with the power supply to connected devices and troubleshoot any power-related problems efficiently.\n\n2. **Inventory Management**: This query can help in maintaining an accurate inventory of network devices by providing insights into the POE capabilities and configurations of each device.\n\n3. **Network Monitoring**: Users can monitor the power usage and status of POE interfaces to ensure optimal performance and reliability of the network devices.\n\nOverall, this query enhances the visibility and control over the POE interfaces of network devices, enabling users to make informed decisions, streamline maintenance activities, and ensure the smooth operation of their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceUuid}/interface/poe-detail\nREST operation:get\nREST API query parameters:\n- deviceUuid: uuid of the device. The query parameters should be used in the path. This query parameter is required. \n- interfaceNameList: comma seperated interface names. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/app-policy-default\" is used to get the default application policy within the Cisco Catalyst Center platform. This query allows users to retrieve the default application policy settings that are applied to applications if specific policies are not explicitly defined for them.\n\nFrom a user perspective, this query can be beneficial in several scenarios. For instance, users can use this query to understand the baseline application policy configurations that are in place by default within the Catalyst Center platform. By making a GET request to this query path, users can retrieve information about the default policies that govern application behavior, quality of service (QoS), access control, and other relevant parameters.\n\nUnderstanding the default application policy is crucial as it provides insights into how applications are treated in the absence of customized policies. Users can use this information to compare and contrast default settings with their specific requirements, identify any gaps or inconsistencies, and make informed decisions on whether to retain the default policy or create custom policies tailored to their organization's needs.\n\nIn summary, the \"/dna/intent/api/v1/app-policy-default\" query empowers users to access and review the default application policy settings within the Cisco Catalyst Center, enabling them to make informed decisions regarding the management and optimization of application behavior in their network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/app-policy-default\nREST operation:get\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/data/reports/{reportId}\" with a DELETE operation is used to delete a scheduled report configuration within the Cisco Catalyst Center platform. The reportId parameter is required to be included in the path to specify which report configuration should be deleted. \n\nFrom a user perspective, this DELETE query can be beneficial in scenarios where a user wants to remove scheduled reports that are no longer needed or have become outdated. By sending a DELETE request to this endpoint with the corresponding reportId, users can effectively delete the scheduled report configuration along with any report executions associated with it. This capability allows users to efficiently manage their scheduled reports, ensuring that only relevant and up-to-date report configurations are retained in the Catalyst Center platform. \n\nIn summary, users can utilize this query to remove unnecessary or outdated scheduled reports, thereby maintaining a streamlined and accurate set of report configurations within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/data/reports/{reportId}\nREST operation:delete\nREST API query parameters:\n- reportId: reportId of report. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/data/reports/{reportId}\" with a GET operation is used to retrieve information about a scheduled report configuration within the Cisco Catalyst Center platform. The reportId parameter is required to be included in the path to specify which report configuration should be retrieved.\n\nFrom a user perspective, this GET query can be valuable in scenarios where a user needs to access details about a specific scheduled report configuration. By providing the reportId of the report they are interested in, users can retrieve information such as the configuration settings, schedule details, and any report executions associated with that particular report. This allows users to review and monitor the settings of their scheduled reports, ensuring they have accurate and up-to-date information for decision-making or reporting purposes.\n\nIn summary, by utilizing this query, users can effectively retrieve and view the details of scheduled report configurations, helping them to manage and maintain their reporting tasks within the Catalyst Center platform efficiently.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/data/reports/{reportId}\nREST operation:get\nREST API query parameters:\n- reportId: reportId of report. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The given REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/import\" with the POST operation is used to import devices in bulk to the Cisco Catalyst Center's Plug and Play (PnP) process. This query allows users to add multiple devices to the PnP process simultaneously, streamlining the device onboarding procedure.\n\nFrom a user perspective, this query can be utilized to efficiently import a large number of devices into the PnP process, thereby automating the provisioning and configuration tasks for these devices. By providing the necessary device information such as hostname, serial number, product ID, and other details in the request body as JSON data, users can trigger the import process. This bulk import functionality saves time and effort compared to adding devices individually.\n\nUsers can leverage this query to maintain an accurate inventory of devices within the network, ensuring that all devices are correctly onboarded and ready for deployment. By importing devices in bulk, users can expedite the provisioning process and ensure that all necessary configurations are applied to the newly added devices, enhancing network efficiency and management.\n\nOverall, the \"/dna/intent/api/v1/onboarding/pnp-device/import\" query provides a convenient way for users to scale their device onboarding operations within the Cisco Catalyst Center, enabling efficient management of a large number of devices in a streamlined manner.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/import\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "From a user perspective, the REST API query path \"/dna/intent/api/v1/onboarding/pnp-settings/vacct\" with the DELETE operation is used to deregister a Virtual Account in the Cisco Catalyst Center. This action involves removing the specified smart account and virtual account information, along with any associated device information, from the Plug and Play (PnP) System and database.\n\nUsers, such as administrators or network operators, can utilize this query to manage their device inventory effectively. For example, if a device is no longer in use, needs reconfiguration, or has been replaced, users can trigger the deletion process by sending a DELETE request to this query path with the device ID specified. This ensures that the device entry is removed from the PnP database, helping to maintain an accurate and up-to-date inventory of devices.\n\nBy providing the required parameters - the Smart Account Domain and the Virtual Account Name - users can initiate the API call to deregister the virtual account and retrieve detailed information about the deregistered smart and virtual account. This functionality empowers users to efficiently manage and modify device information stored in the PnP database, ensuring the accuracy and relevance of device data during the provisioning process.\n\nOverall, this query provides users with the capability to streamline device management, troubleshoot synchronization issues, and ensure that devices are correctly onboarded and functioning within the specified Virtual Account environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-settings/vacct\nREST operation:delete\nREST API query parameters:\n- domain: Smart Account Domain. The query parameters should be used in the query. This query parameter is required. \n- name: Virtual Account Name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/interface/{interfaceUuid}/operation\" with a POST operation is designed to clear the MAC address table on an individual port in the Cisco Catalyst Center. This query allows users to remove MAC addresses associated with a particular interface to manage network connectivity and security effectively.\n\nFrom a user perspective, this query can be utilized when there is a need to troubleshoot network connectivity issues related to specific devices connected to a particular port. By specifying the interface UUID in the path parameter and providing the operation as 'ClearMacAddress' in the request body, users can trigger the action to clear the MAC address table associated with that interface.\n\nFor example, if there are concerns about unauthorized devices accessing the network through a specific port, users can use this query to clear out any unknown MAC addresses and ensure that only authorized devices are connected. This helps in maintaining network integrity and security.\n\nAdditionally, the deploymentMode parameter allows users to choose between previewing the configuration change without actually pushing it to the device or deploying the configuration change immediately. This flexibility enables users to verify the intended action before applying it to the live network environment.\n\nOverall, this API query enhances network management capabilities within the Cisco Catalyst Center, providing users with the functionality to efficiently control LAN Automation processes and ensure network security and performance.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/{interfaceUuid}/operation\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: . The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- interfaceUuid: Interface Id. The query parameters should be used in the path. This query parameter is required. \n- deploymentMode: Preview/Deploy ['Preview' means the configuration is not pushed to the device. 'Deploy' makes the configuration pushed to the device]. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/site-health\" is used to retrieve overall health information for all sites within the Cisco Catalyst Center environment. This endpoint returns data related to the health status of different types of sites, such as areas or buildings. \n\nFrom a user perspective, this query can be utilized to obtain crucial insights into the health status of various sites within the network infrastructure. By specifying the site type (area or building), offset, limit, and timestamp parameters in the API query, users can retrieve detailed information about the health of their network sites. This information can include data on core, distribution, and access network health, as well as details on the health of wired and wireless clients and application health.\n\nUsers can leverage this API query to monitor the overall health of their network sites, identify potential issues, and take proactive measures to ensure the smooth functioning of their network infrastructure. By analyzing the health data returned by this query, users can make informed decisions regarding network optimization, troubleshooting, and maintenance activities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/site-health\nREST operation:get\nREST API query parameters:\n- siteType: site type: AREA or BUILDING (case insensitive). The query parameters should be used in the query. This query parameter is required. \n- offset: Offset of the first returned data set entry (Multiple of 'limit' + 1). The query parameters should be used in the query. This query parameter is required. \n- limit: Max number of data entries in the returned data set [1,50].  Default is 25. The query parameters should be used in the query. This query parameter is required. \n- timestamp: Epoch time(in milliseconds) when the Site Hierarchy data is required. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/task/count\" is used to fetch the count of tasks that meet specific criteria within the Cisco Catalyst Center. This endpoint allows users to retrieve the total number of tasks based on various parameters such as start time, end time, data, error code, service type, username, progress, error status, failure reason, and parent ID.\n\nFrom a user perspective, this query can be valuable for monitoring and analyzing the task activity within the Cisco Catalyst Center platform. By providing the necessary query parameters, users can retrieve the total count of tasks that match the specified criteria. This information can help users in tracking the progress of tasks, identifying any potential issues based on error codes or failure reasons, and gaining insights into the overall task activity within the system.\n\nUsers can integrate this query into their monitoring or reporting systems to keep track of task counts over time, ensuring efficient management of tasks and workflows within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/task/count\nREST operation:get\nREST API query parameters:\n- startTime: This is the epoch start time from which tasks need to be fetched. The query parameters should be used in the query. This query parameter is required. \n- endTime: This is the epoch end time upto which audit records need to be fetched. The query parameters should be used in the query. This query parameter is required. \n- data: Fetch tasks that contains this data. The query parameters should be used in the query. This query parameter is required. \n- errorCode: Fetch tasks that have this error code. The query parameters should be used in the query. This query parameter is required. \n- serviceType: Fetch tasks with this service type. The query parameters should be used in the query. This query parameter is required. \n- username: Fetch tasks with this username. The query parameters should be used in the query. This query parameter is required. \n- progress: Fetch tasks that contains this progress. The query parameters should be used in the query. This query parameter is required. \n- isError: Fetch tasks ended as success or failure. Valid values: true, false. The query parameters should be used in the query. This query parameter is required. \n- failureReason: Fetch tasks that contains this failure reason. The query parameters should be used in the query. This query parameter is required. \n- parentId: Fetch tasks that have this parent Id. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/site-health\" is used to retrieve overall health information for all sites within the Cisco Catalyst Center environment. This endpoint returns data related to the health status of different types of sites, such as areas or buildings.\n\nFrom a user perspective, this query can be utilized to obtain crucial insights into the health status of various sites within the network infrastructure. By specifying the site type (area or building), the user can retrieve information on the health of the core, distribution, and access networks, as well as details on the health of wired and wireless clients and application health. This data can help users monitor and assess the overall health and performance of their network infrastructure, enabling them to identify and address any potential issues or anomalies proactively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/site/count\nREST operation:get\nREST API query parameters:\n- id: Site instance UUID. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/api/v1/onboarding/pnp-device/authorize\" is utilized for authorizing one or more devices within the Cisco Catalyst Center. This query is essential for ensuring that the device is authorized to be used within the network, as it can only be authorized if the appropriate authorization settings are configured in the Device Settings.\n\nFrom a user perspective, this query can be utilized to automate the process of onboarding devices into the network. By providing the necessary device details such as hostname, serial number, product ID, and relevant AAA (Authentication, Authorization, and Accounting) credentials in the request body, users can initiate the process of adding the device to their network. This API query allows users to ensure that the device is authenticated and authorized to operate effectively within the network infrastructure.\n\nIn practical terms, administrators can make a POST request to this API endpoint with the required parameters to authorize devices in bulk, streamlining the onboarding process and ensuring that devices are correctly set up for network operation. This can be particularly useful in scenarios where a large number of devices need to be added to the network or when automation is required for efficient device management.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/api/v1/onboarding/pnp-device/authorize\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: . The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/network-device/{id}/vlan\" with the GET operation is designed to retrieve the VLAN information associated with a specific network device identified by its unique deviceUUID. The query allows users to get details about the VLAN configurations on the device's interfaces.\n\nFrom a user perspective, this query can be used to fetch the VLAN configurations present on a particular network device. By providing the deviceUUID parameter, users can specify which device they want to retrieve VLAN information for. Additionally, the interfaceType parameter allows users to filter the results based on the type of VLAN interfaces they are interested in.\n\nFor example, a network administrator can use this query to check the VLAN configurations on a specific switch or router to ensure proper segmentation of network traffic. By analyzing the VLAN information returned by this query, users can verify that the correct VLANs are assigned to different interfaces on the device, troubleshoot any VLAN-related issues, or make necessary changes to the VLAN configurations for network optimization.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{id}/vlan\nREST operation:get\nREST API query parameters:\n- id: deviceUUID. The query parameters should be used in the path. This query parameter is required. \n- interfaceType: Vlan associated with sub-interface. If no interfaceType mentioned it will return all types of Vlan interfaces. If interfaceType is selected but not specified then it will take default value.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/template-programmer/template\" with the PUT method is used for updating a template within the Cisco Catalyst Center environment. This API endpoint allows users to make changes to existing templates, enabling them to modify configurations, add new features, or update parameters without recreating the entire template from scratch.\n\nFrom a user perspective, this API query can be utilized to streamline the template management process. Users can send a PUT request to this endpoint with the necessary request parameters in the request body, specifying the updates they want to make to the template. By providing the required information, such as the template ID and the updated configuration details, users can efficiently modify templates within the DNA Center platform.\n\nFor example, a network administrator may want to update a template used for configuring VLAN settings on network devices. By using this API query, they can send a PUT request with the new VLAN configurations in the request body, triggering the update process for the specified template. This allows for quick and effective template maintenance and customization, ensuring that network configurations remain up-to-date and aligned with the organization's requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/template\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/template-programmer/template\" is used to get a list of available templates within the Cisco Catalyst Center environment. Users can query this endpoint to retrieve information about the templates that are available for configuration and deployment. The response will include details such as the names of the templates, their versions, and other relevant information based on the query parameters provided.\n\nFrom a user perspective, this query can be highly beneficial for network administrators and engineers who are managing network configurations within the Cisco Catalyst Center. By making a GET request to this API endpoint with the necessary query parameters such as projectId, softwareType, softwareVersion, productFamily, productSeries, productType, filterConflictingTemplates, tags, projectNames, unCommitted, and sortOrder, users can filter and retrieve specific templates that meet their criteria.\n\nFor example, a user can use this query to find templates that are specific to a certain project, software type, or device family. This level of granularity allows users to precisely select the templates that match their network requirements. By utilizing this query, users can efficiently browse through available templates, understand their capabilities, and choose the most suitable ones for deployment.\n\nOverall, this query provides users with a structured way to explore and access the templates stored within the Cisco Catalyst Center, enabling them to streamline the configuration and deployment process for their network devices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/template\nREST operation:get\nREST API query parameters:\n- projectId: Filter template(s) based on project UUID. The query parameters should be used in the query. This query parameter is required. \n- softwareType: Filter template(s) based software type. The query parameters should be used in the query. This query parameter is required. \n- softwareVersion: Filter template(s) based softwareVersion. The query parameters should be used in the query. This query parameter is required. \n- productFamily: Filter template(s) based on device family. The query parameters should be used in the query. This query parameter is required. \n- productSeries: Filter template(s) based on device series. The query parameters should be used in the query. This query parameter is required. \n- productType: Filter template(s) based on device type. The query parameters should be used in the query. This query parameter is required. \n- filterConflictingTemplates: Filter template(s) based on confliting templates. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- tags: Filter template(s) based on tags. The query parameters should be used in the query. This query parameter is required. \n- projectNames: Filter template(s) based on project names. The query parameters should be used in the query. This query parameter is required. \n- unCommitted: Filter template(s) based on template commited or not. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- sortOrder: Sort Order Ascending (asc) or Descending (des). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/certificate\" with the POST operation is used for importing a certificate in the Cisco Catalyst Center environment. This query allows users to upload a certificate to the Catalyst Center platform.\n\nFrom a user perspective, this query can be used when there is a need to import a certificate for various purposes such as securing communication channels, enabling secure connections, or authenticating devices within the Catalyst Center environment. Users can send a POST request to this endpoint with the necessary certificate data in the request body. The query parameters required for this operation include the content type for the request body, the private key password, and the list of users for whom the certificate is being imported.\n\nBy utilizing this query, users can easily manage and import certificates into the Catalyst Center platform, ensuring secure and encrypted communication channels for their network devices and services. This feature is essential for maintaining a secure and trusted network infrastructure within the Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/certificate\nREST operation:post\nREST API query parameters:\n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'multipart/form-data'. This query parameter is required. \n- pkPassword: Private Key Passsword. The query parameters should be used in the query. This query parameter is required. \n- listOfUsers: listOfUsers. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/custom-prompt\" is used for retrieving supported custom prompts within the Cisco DNA Center environment. Custom prompts are user-defined messages or alerts that can be configured to provide specific notifications or information based on predefined criteria set by the user.\n\nFrom a user perspective, this query can be beneficial for network administrators or operators who want to customize the messaging and alerting system within the Cisco Catalyst Center to suit their specific needs. By querying this endpoint, users can retrieve a list of supported custom prompts available in the system. This information can help users understand the range of customization options available for creating alerts, notifications, or messages tailored to their network environment.\n\nUsers can leverage this query to explore the different custom prompts provided by Cisco DNA Center, understand their capabilities, and potentially configure them to enhance their network monitoring and management processes. By utilizing this API query, users can have better control over the messaging system and ensure that important events or conditions are communicated effectively within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/custom-prompt\nREST operation:get\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/custom-prompt\" is used for saving custom prompts added by users in the Cisco DNA Center. Custom prompts are user-defined messages or alerts that can be configured to provide specific notifications or information based on predefined criteria set by the user. This API endpoint will always override existing prompts, so users need to provide all custom prompts in case of any update.\n\nFrom a user perspective, this query can be valuable for network administrators or operators who want to customize the messaging and alerting system within the Cisco Catalyst Center to suit their specific needs. By using this API, users can create and save custom messages or alerts that are important for their network monitoring and management processes.\n\nUsers can send a POST request to this API endpoint with the custom prompt details included in the request body. This allows them to define personalized alerts or messages that cater to their network requirements. By utilizing this API query, users have the flexibility to control the messaging system and ensure that relevant events or conditions are communicated effectively within their network infrastructure.\n\nOverall, this API query empowers users to tailor the alerting and messaging system in the Cisco DNA Center according to their preferences, enabling them to enhance network monitoring and management capabilities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/custom-prompt\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/tag/{id}/member/count\" with a GET request operation is used to retrieve the count of members within a specific tag identified by the tag ID. In the Cisco Catalyst Center environment, tags are used to categorize and organize network elements such as devices based on specific attributes or criteria.\n\nFrom a user perspective, this query can be beneficial for managing and organizing network elements efficiently. By obtaining the count of members within a tag, users can gain insights into the size of a particular group of devices associated with that tag. This information can help network administrators in monitoring, planning, and implementing changes across specific sets of devices, enabling streamlined network management within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag/{id}/member/count\nREST operation:get\nREST API query parameters:\n- id: Tag ID. The query parameters should be used in the path. This query parameter is required. \n- memberType: memberType. The query parameters should be used in the query. This query parameter is required. \n- memberAssociationType: memberAssociationType. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/data/reports\" is used to get a list of scheduled reports and report configurations within the Cisco Catalyst Center platform. This query allows users to retrieve information about the scheduled reports that have been configured in the system.\n\nFrom a user perspective, this query can be valuable in scenarios where a user needs to access a list of scheduled reports and their configurations. By providing the necessary query parameters such as viewGroupId and viewId, users can obtain details about the scheduled report configurations associated with specific view groups or views.\n\nBy utilizing this query, users can effectively manage their scheduled reports by reviewing the configurations, schedule details, and any report executions linked to those reports. This information can help users ensure that their scheduled reports are accurate, up-to-date, and relevant for decision-making or reporting purposes.\n\nIn summary, by using this query, users can access and view the details of their scheduled report configurations, enabling them to monitor and maintain their reporting tasks efficiently within the Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/data/reports\nREST operation:get\nREST API query parameters:\n- viewGroupId: viewGroupId of viewgroup for report. The query parameters should be used in the query. This query parameter is required. \n- viewId: viewId of view for report. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/data/reports\" in the Cisco Catalyst Center platform is used to create or schedule reports and report configurations. It allows users to manage their scheduled reports by reviewing configurations, schedule details, and report executions associated with specific view groups or views.\n\nFrom a user perspective, this query is beneficial when users need to access a list of scheduled reports and their configurations within the Catalyst Center platform. By providing the necessary query parameters such as viewGroupId and viewId, users can retrieve detailed information about their scheduled report configurations. This information enables users to monitor, maintain, and ensure the accuracy and relevance of their scheduled reports for decision-making and reporting purposes.\n\nOverall, this query empowers users to efficiently manage their reporting tasks by accessing and viewing the details of their scheduled report configurations, facilitating streamlined and accurate reporting within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/data/reports\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/data/view-groups\" in the Cisco Catalyst Center is used to retrieve a list of all view groups. This query provides a summary of all the view groups available within the platform.\n\nFrom a user perspective, this API query allows users to easily access and view a comprehensive list of all the view groups present in the Catalyst Center. By making a GET request to this endpoint, users can quickly understand the organization and categorization of views within the platform. This can help users in navigating through different view groups, identifying specific areas of interest, and accessing relevant data visualizations, reports, or configurations associated with each view group.\n\nUsers can benefit from this query by efficiently exploring the available view groups, understanding the scope of data within each group, and selecting the appropriate group to further analyze or work with. This can streamline the user's workflow by providing a clear overview of available resources and enhancing their ability to locate and utilize specific views for data analysis or reporting purposes.\n\nOverall, this API query enhances the user experience by simplifying the process of accessing and browsing through different view groups within the Cisco Catalyst Center, ultimately supporting effective data management and utilization within the platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/data/view-groups\nREST operation:get\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-workflow/{id}\" with the PUT operation is used for updating an existing Plug and Play (PnP) workflow within the Cisco Catalyst Center environment. This API endpoint allows users to make modifications to an already defined PnP workflow, enabling them to adjust configurations, update parameters, or make any necessary changes without starting the workflow creation process from the beginning.\n\nFrom a user perspective, this API query provides a straightforward way to manage and customize PnP workflows efficiently. Users can send a PUT request to this endpoint with the necessary request parameters in the request body, indicating the updates they wish to implement in the workflow. By providing the essential information such as the workflow ID and the revised workflow details, users can seamlessly alter existing PnP workflows within the Cisco Catalyst Center platform.\n\nFor example, a network administrator utilizing the Cisco Catalyst Center may need to update a PnP workflow used for automating device onboarding processes. By leveraging this API query, they can send a PUT request with the modified configurations or parameters, ensuring that the PnP workflow aligns with the current network requirements and operational needs. This capability not only saves time but also enhances the flexibility and adaptability of PnP workflows within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-workflow/{id}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- id: id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-workflow/{id}\" with the GET operation is used to retrieve a specific Plug and Play (PnP) workflow within the Cisco Catalyst Center environment. This query allows users to access details and configurations of a particular workflow by specifying its unique ID.\n\nFrom a user perspective, this query can be beneficial in scenarios where a user needs to view or reference a particular PnP workflow that has been previously set up. By providing the ID of the desired workflow, users can fetch information such as configurations, settings, and any other details associated with that workflow. This can help users in troubleshooting, monitoring, or simply understanding the setup of their PnP workflows within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-workflow/{id}\nREST operation:get\nREST API query parameters:\n- id: id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-workflow/{id}\" with the DELETE operation is used to delete a specific Plug and Play (PnP) workflow within the Cisco Catalyst Center environment. This query allows users to remove a workflow by specifying its unique ID.\n\nFrom a user perspective, this DELETE query can be valuable in situations where a user needs to remove a particular PnP workflow that is no longer needed or has become outdated. By providing the ID of the workflow to be deleted in the path parameter, users can trigger the deletion process. This action helps in managing workflows efficiently, ensuring that only relevant and up-to-date workflows exist in the system.\n\nFor example, if a network administrator wants to clean up unnecessary workflows, they can utilize this query to delete those workflows by specifying their IDs. This helps in keeping the PnP workflow configurations organized and relevant to the current network setup.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-workflow/{id}\nREST operation:delete\nREST API query parameters:\n- id: id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/eox-status/device\" with the operation \"get\" is used to retrieve the End of Life (EoX) status for all devices in the network. This query allows users to access information regarding Hardware End-of-life warnings, Software End-of-Life warnings, and Field Notices applicable to the devices in their network.\n\nFrom a user perspective, this query is valuable for network administrators, operators, and IT personnel responsible for managing and maintaining network devices. By making this query, users can easily obtain critical information about the EoX status of all devices in their network. This information can include details such as upcoming end-of-life dates for hardware and software components, recommended upgrades or replacements, and any relevant notices issued by Cisco regarding the devices.\n\nBy utilizing this query, users can stay proactive in planning for necessary upgrades or replacements to ensure the continued functionality and security of their network infrastructure. It enables users to have a comprehensive overview of the EoX status of all devices, allowing them to take appropriate actions to mitigate risks associated with outdated or unsupported hardware and software.\n\nOverall, this query enhances the visibility and awareness of EoX-related information for network devices, empowering users to make informed decisions, prioritize maintenance activities, and optimize the performance and longevity of their network equipment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/eox-status/device\nREST operation:get\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/event/subscription-details/email\" is used to retrieve detailed information about Email subscription details within the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query can be beneficial in various scenarios:\n1. **Viewing Subscription Details:** Users can access the list of subscription details specifically for Email notifications. This allows users to understand the current configurations and settings related to Email subscriptions.\n   \n2. **Management and Troubleshooting:** Users can manage, update, or troubleshoot Email notification configurations by examining the existing settings retrieved through this query. This can help in ensuring that Email notifications are properly configured and functioning as required.\n   \n3. **Customizing Subscription Details:** By providing parameters like name, instanceId, offset, limit, sortBy, and order, users can tailor the query to retrieve specific Email subscription details based on their requirements. This customization enhances the flexibility and precision of monitoring and managing Email notifications within the Catalyst Center platform.\n\n4. **Enhanced Network Monitoring:** The ability to access and review Email subscription details allows users to enhance their network monitoring activities. By understanding the Email notification configurations, users can stay informed about critical events and occurrences within their network infrastructure.\n\nOverall, this query empowers users to efficiently manage Email notification settings, troubleshoot issues, and ensure effective communication and alerting mechanisms within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription-details/email\nREST operation:get\nREST API query parameters:\n- name: Name of the specific configuration. The query parameters should be used in the query. This query parameter is required. \n- instanceId: Instance Id of the specific configuration. The query parameters should be used in the query. This query parameter is required. \n- offset: The number of Email Subscription detail's to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of Email Subscription detail's to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided API query path \"/dna/intent/api/v1/networkprofile/{networkProfileId}/site/{siteId}\" with the POST operation is used to associate a site to a network profile in Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized to manage the relation between sites and network profiles within the Cisco Catalyst Center environment. By specifying the networkProfileId and siteId in the path parameters, users can effectively configure and organize the network settings and attributes associated with a specific site under a designated network profile. \n\nThis API query allows users to streamline network management tasks by ensuring that network configurations, templates, and policies defined within a network profile are correctly applied to the corresponding site. By associating a site with a network profile, users can ensure consistency, efficiency, and accurate deployment of network resources across different sites within their Cisco Catalyst Center infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/networkprofile/{networkProfileId}/site/{siteId}\nREST operation:post\nREST API query parameters:\n- Content-Type: . The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- networkProfileId: Network-Profile Id to be associated. The query parameters should be used in the path. This query parameter is required. \n- siteId: Site Id to be associated. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/networkprofile/{networkProfileId}/site/{siteId}\" with the delete operation is designed to disassociate a site from a network profile within the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be extremely useful for network administrators or IT personnel who are managing a Cisco Catalyst Center infrastructure. By utilizing this query, users can effectively remove a site from a specific network profile, allowing for more granular control over the network configurations and policies that are applied to different sites.\n\nFor instance, if a particular site needs to be disconnected from a specific set of network configurations or policies defined within a network profile, this API query can be used to disassociate that site. This action can help in ensuring that network settings remain accurate and consistent across different sites within the infrastructure.\n\nOverall, this API query provides users with a way to streamline network management tasks, maintain network consistency, and ensure the efficient deployment of network resources within their Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/networkprofile/{networkProfileId}/site/{siteId}\nREST operation:delete\nREST API query parameters:\n- Content-Type: . The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- networkProfileId: Network-Profile Id to be associated. The query parameters should be used in the path. This query parameter is required. \n- siteId: Site Id to be associated. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This query path \"/dna/intent/api/v1/discovery/{startIndex}/{recordsToReturn}\" is used to retrieve a range of discovery records from the Cisco Catalyst Center API. It allows users to specify the start index and the number of records to return, providing a way to paginate through the list of discovery records.\n\nFrom a user perspective, this query can be beneficial when managing a large number of discovery records within the Cisco Catalyst Center. Users can use this query to fetch a subset of discovery records based on their specified range, making it easier to navigate through the data and retrieve the information they need.\n\nFor example, if a user wants to view 10 discovery records starting from the 5th record, they can make a GET request to \"/dna/intent/api/v1/discovery/5/10\" to fetch the required subset of records. This functionality enables users to efficiently handle and analyze the discovery data stored in the Cisco Catalyst Center, enhancing their overall experience with network device management and monitoring.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery/{startIndex}/{recordsToReturn}\nREST operation:get\nREST API query parameters:\n- startIndex: Start index. The query parameters should be used in the path. This query parameter is required. \n- recordsToReturn: Number of records to return. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/network-device-poller/cli/legit-reads\" in the Cisco Catalyst Center REST API is used to retrieve all the accepted keywords for the Command Line Interface (CLI) commands that can be executed using the Command Runner feature. \n\nFrom a user perspective, this query can be incredibly useful for network administrators and engineers who are managing network devices through the Cisco Catalyst Center. By making a GET request to this API endpoint, users can obtain a list of valid keywords that can be used in CLI commands when interacting with network devices. \n\nFor example, if a user wants to execute a show command on a network device to display specific information, they can first query this endpoint to retrieve the legitimate keywords that are accepted by the Command Runner for that particular device. This ensures that the user is using the correct syntax and options when crafting their CLI command, ultimately leading to successful execution and retrieval of the desired information from the network device. \n\nIn essence, this query provides users with valuable information that helps them construct precise and effective CLI commands when managing network devices within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device-poller/cli/legit-reads\nREST operation:get\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/interface/network-device/{deviceId}/{startIndex}/{recordsToReturn}\" with the GET operation is designed to retrieve a specified range of interfaces for a particular network device. The deviceId parameter is mandatory and represents the unique identifier of the device for which you want to fetch interface information. The startIndex parameter indicates the starting index of the interfaces to be retrieved, and the recordsToReturn parameter specifies the number of interface records to be returned.\n\nFrom a user perspective, this query can be used to fetch interface details for a specific network device within a specified range. For example, a network administrator can utilize this query to retrieve a subset of interfaces from a device, making it easier to manage and analyze a large number of interfaces. By providing the deviceId, startIndex, and recordsToReturn parameters, users can efficiently retrieve the required interface information and perform further operations such as monitoring, configuration, or troubleshooting on those interfaces.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/network-device/{deviceId}/{startIndex}/{recordsToReturn}\nREST operation:get\nREST API query parameters:\n- deviceId: Device ID. The query parameters should be used in the path. This query parameter is required. \n- startIndex: Start index. The query parameters should be used in the path. This query parameter is required. \n- recordsToReturn: Number of records to return. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/qos-device-interface-info\" with the POST operation allows users to create Quality of Service (QoS) Device Interface Information within the Cisco Catalyst Center platform. This functionality enables users to specify and configure QoS settings for network interfaces associated with specific network device IDs. Users can mark certain interfaces as Wide Area Network (WAN), associate WAN interfaces with a specific Service Provider (SP) Profile, and define shapers on WAN interfaces.\n\nFrom a user perspective, this query can be used when a user needs to set up specific QoS parameters for network interfaces to ensure optimal performance and efficient bandwidth utilization. By sending a POST request to this query path and including the necessary parameters in the request body, users can define QoS configurations for different interfaces based on their requirements and network design.\n\nFor example, a user may want to prioritize traffic on WAN interfaces for critical applications or services, allocate bandwidth resources efficiently, or implement traffic shaping to control the flow of data. By utilizing this query, users can customize QoS settings to meet their network's unique needs and enhance overall network performance and user experience.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/qos-device-interface-info\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: content-type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/qos-device-interface-info\" with the GET operation is used to retrieve Quality of Service (QoS) Device Interface Information within the Cisco Catalyst Center platform. This query allows users to get existing QoS device interface information either for all devices or for a specific network device ID.\n\nFrom a user perspective, this query can be utilized to view and manage QoS settings for network interfaces associated with a particular network device. By providing the networkDeviceId parameter, users can fetch details such as QoS configurations, policies, and settings applied to interfaces of the specified device. This information can be crucial for optimizing network performance, ensuring quality of service for specific applications or services, and controlling bandwidth allocation efficiently.\n\nUsers can leverage this query to customize QoS parameters according to their network requirements, prioritize critical traffic, and shape traffic flows effectively. By accessing and analyzing QoS device interface information, network administrators can fine-tune network settings to enhance overall performance, user experience, and application delivery within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/qos-device-interface-info\nREST operation:get\nREST API query parameters:\n- networkDeviceId: network device id. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/qos-device-interface-info\" with the PUT operation is used to update Quality of Service (QoS) Device Interface Information within the Cisco Catalyst Center platform. This query enables users to modify existing QoS settings associated with network device IDs. Users can adjust QoS configurations, policies, and settings for network interfaces to optimize network performance, ensure quality of service for specific applications or services, and efficiently allocate bandwidth resources.\n\nFrom a user perspective, this query allows network administrators to customize QoS parameters according to their network requirements. By providing the networkDeviceId parameter in the request, users can retrieve and update details related to QoS settings applied to interfaces of the specified network device. This information is essential for managing and fine-tuning network settings to enhance overall performance, user experience, and application delivery within the network infrastructure.\n\nIn summary, by utilizing this PUT operation, users can effectively manage QoS Device Interface Information, prioritize critical traffic, control bandwidth allocation, and shape traffic flows to meet the unique needs of their network, ultimately enhancing network performance and user satisfaction.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/qos-device-interface-info\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: content-type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/network-device/collection-schedule/global\" with the GET operation is designed to retrieve the polling interval configuration for all devices within the network managed by the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be used to access and view the current polling interval settings for all network devices at a global level. By making this query, users can efficiently gather information on how frequently the Catalyst Center polls each device for data updates and status checks. This data can be crucial for network administrators to ensure that the devices are being monitored regularly and that any changes or issues are detected promptly.\n\nUsers can utilize this query to review and potentially adjust the polling intervals for different devices based on their network monitoring requirements. By understanding and modifying these intervals, users can optimize the network monitoring process, improve data accuracy, and enhance the overall management and performance of the network infrastructure.\n\nIn summary, this REST API query path provides users with valuable insights into the polling interval settings across all network devices, allowing for effective monitoring and management of the network environment within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/collection-schedule/global\nREST operation:get\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/certificate-p12\" with the POST operation is used to import a PKCS#12 file into the Cisco Catalyst Center. This query allows users to securely upload a certificate file in the PKCS#12 format, which typically includes both the public key certificate and the associated private key.\n\nFrom a user perspective, this query can be utilized to add or update SSL/TLS certificates on the Cisco Catalyst Center. Users can upload their PKCS#12 certificate file along with the required information such as the P12 password, private key password, and the list of users associated with the certificate.\n\nBy making use of this API query, users can ensure that their Cisco Catalyst Center has the necessary certificates for secure communication over HTTPS, enabling encrypted connections and ensuring data integrity. This query streamlines the process of managing certificates within the Catalyst Center, facilitating secure communication and enhancing overall network security.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/certificate-p12\nREST operation:post\nREST API query parameters:\n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'multipart/form-data'. This query parameter is required. \n- p12Password: P12 Passsword. The query parameters should be used in the query. This query parameter is required. \n- pkPassword: Private Key Passsword. The query parameters should be used in the query. This query parameter is required. \n- listOfUsers: listOfUsers. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/floors/{floorId}/planned-access-points\" with the PUT operation is used to update planned access points for a specific floor within the Cisco Catalyst Center environment. This API endpoint enables users to make modifications to the planned access points on an existing floor map, including details such as planned radio settings and antenna configurations.\n\nFrom a user perspective, network administrators or IT personnel can utilize this API query to customize the placement and settings of access points within their network infrastructure. By sending a PUT request with the necessary parameters in the request body, users can update the planned access points with specific configurations tailored to their network requirements. This can include adjusting radio frequencies, antenna types, power levels, or other parameters to optimize the performance and coverage of wireless access points within the designated floor area.\n\nOverall, this query provides a convenient and efficient way for users to centrally manage and update the planned access points within their wireless network through the Catalyst Center platform, ensuring seamless connectivity and effective utilization of resources.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/floors/{floorId}/planned-access-points\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- floorId: The instance UUID of the floor hierarchy element. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/floors/{floorId}/planned-access-points\" with the GET operation, is designed to retrieve a list of Planned Access Points for a particular floor within the Cisco Catalyst Center environment. By specifying the floorId as a path parameter and providing additional query parameters like limit, offset, and radios, users can access details about the planned access points on a specific floor, including information about the planned radio settings.\n\nFrom a user perspective, network administrators or IT personnel can utilize this API query to view and analyze the planned access points on a specific floor within their wireless network infrastructure. By making a GET request to this endpoint with the necessary parameters, users can retrieve a detailed list of planned access points, along with their corresponding planned radio details.\n\nThis query can be particularly beneficial for users who need to review or verify the planned configurations of access points within a specific area or floor. It provides a convenient way to access essential information about the planned access points, aiding in network design, troubleshooting, or ensuring that the wireless infrastructure is set up according to the organization's requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/floors/{floorId}/planned-access-points\nREST operation:get\nREST API query parameters:\n- floorId: Floor Id. The query parameters should be used in the path. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n- radios: inlcude planned radio details. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n\n</api-query>", "From a user perspective, network administrators or IT personnel can utilize the provided REST API query path \"/dna/intent/api/v1/floors/{floorId}/planned-access-points\" with a POST operation to create planned access points for a specific floor within the Cisco Catalyst Center environment. By sending a POST request to this endpoint with the necessary parameters included in the request body, users can define and add new planned access points on an existing floor map. This includes specifying details such as planned radio settings and antenna configurations for the access points.\n\nThis query can be particularly useful when users need to plan and deploy new access points within a specific area or floor in their wireless network infrastructure. By using this API, administrators can efficiently customize and set up the planned access points according to the organization's requirements. This capability aids in ensuring optimal network design, troubleshooting, and alignment with the desired wireless infrastructure configurations.\n\nOverall, the ability to create planned access points using this API query provides users with a centralized and streamlined approach to managing access point deployments within their wireless network, enhancing connectivity and network efficiency.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/floors/{floorId}/planned-access-points\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- floorId: The instance UUID of the floor hierarchy element. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/image/importation/device-family-identifiers\" is a REST API endpoint in the Cisco Catalyst Center that allows users to retrieve Device Family Identifiers for all Device Families that can be used for tagging an image golden. \n\nFrom a user perspective, this query can be utilized to gather information about the Device Families available in the Catalyst Center for tagging images as golden. This can be useful for users who are managing operating system images of devices registered in the Cisco DNA Center. By making a GET request to this endpoint, users can receive a list of identifiers for different device families, which can then be used to associate specific images with the corresponding device families for image management purposes.\n\nUsers can integrate this API query into their applications or scripts to automate the process of tagging images as golden for different device families. This can streamline image management tasks and ensure that the correct images are distributed to the appropriate devices based on their families, ultimately enhancing the efficiency and accuracy of image deployment processes within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/image/importation/device-family-identifiers\nREST operation:get\nREST API query parameters:\n- Accept: MIME type / MIME subtype. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/network-device/sync\" with a PUT operation, is designed to synchronize devices in the Cisco Catalyst Center. By utilizing this query, users can trigger a synchronization process for the devices. The query offers a parameter called \"forceSync\" that allows users to control the priority of the synchronization task. If \"forceSync\" is set to false (default), the sync will run on a normal priority thread. If set to true, the sync will run on a high priority thread if available; otherwise, it will fail. Users can monitor the results of the synchronization process by checking the child task of each individual device.\n\nFrom a user perspective, this API query can be crucial for administrators or network operators managing a significant number of devices within their network infrastructure. By initiating this API call with the necessary parameters, users can ensure that all devices are correctly synchronized, onboarded, and functioning as expected in the designated network environment. It provides users with insights into the synchronization status of devices, helping them troubleshoot any issues that may occur during the device deployment process. By leveraging this query, users can maintain the integrity and efficiency of device management within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/sync\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- forceSync: forceSync. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/device-health\" with the GET operation is used to retrieve device health information from the Cisco Catalyst Center's DNA Assurance feature. This query provides insights into the health status of various devices within the network infrastructure.\n\nFrom a user perspective, network administrators and operators can utilize this query to monitor and analyze the health status of devices such as switches, routers, wireless controllers, and access points. By specifying parameters such as device role, site ID, health category, start time, end time, limit, and offset, users can generate detailed reports on the health of devices in the network.\n\nFor example, users can set the device role parameter to \"CORE\" to focus on core network devices, specify a site ID to analyze devices in a particular location, and set a health category to \"POOR\" to identify devices with poor health status. By providing the start and end time parameters, users can narrow down the timeframe for which they want to retrieve device health data.\n\nAdditionally, the limit parameter allows users to control the number of device entries returned in the response, while the offset parameter helps in navigating through large datasets by specifying the starting point of the returned data.\n\nOverall, this API query empowers users to proactively monitor the health of their network devices, identify potential issues, and take necessary actions to ensure optimal network performance and reliability.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-health\nREST operation:get\nREST API query parameters:\n- deviceRole: CORE, ACCESS, DISTRIBUTION, ROUTER, WLC, or AP (case insensitive). The query parameters should be used in the query. This query parameter is not required. \n- siteId: DNAC site UUID. The query parameters should be used in the query. This query parameter is not required. \n- health: DNAC health catagory: POOR, FAIR, or GOOD (case insensitive). The query parameters should be used in the query. This query parameter is not required. \n- startTime: UTC epoch time in milliseconds. The query parameters should be used in the query. This query parameter is required. \n- endTime: UTC epoch time in milliseconds. The query parameters should be used in the query. This query parameter is required. \n- limit: Max number of device entries in the response (default to 50. Max at 500). The query parameters should be used in the query. This query parameter is required. \n- offset: The offset of the first device in the returned data (Mutiple of 'limit' + 1). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-settings/savacct\" is used to add a Virtual Account in the Cisco Catalyst Center. This query involves registering a Smart Account, Virtual Account, and relevant server profile information with the PnP System and database. Additionally, the devices present in the registered virtual account are synchronized with the PnP database. The response payload from this query returns the newly created profile.\n\nFrom a user perspective, this query can be utilized by administrators or network operators who need to create a new Virtual Account within the Catalyst Center environment. By providing the necessary parameters such as the Smart Account Domain, Virtual Account Name, and other relevant server profile information, users can trigger this API call to set up a new Virtual Account and ensure that the associated devices are synchronized with the system. This query streamlines the process of adding and managing Virtual Accounts, making it easier for users to organize and provision devices within specific account structures.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-settings/sacct\nREST operation:get\n</api-query>", "This specific REST API query path `/dna/intent/api/v1/network-device-config` is used to get configuration archive details. It allows users to retrieve historical device configurations such as running configuration, startup configuration, and VLAN information based on specified criteria.\n\nFrom a user perspective, this query can be extremely useful for network administrators, operators, and IT personnel who need to access detailed information about network devices within their infrastructure. By utilizing this query, users can efficiently retrieve essential details about network devices, such as device type, status, IP address, firmware version, serial number, and other relevant attributes. This information is crucial for network monitoring, troubleshooting, configuration management, and overall network maintenance tasks.\n\nUsers can input various query parameters to filter the results based on their requirements. The required query parameters include:\n- `deviceId`: Comma-separated device IDs to fetch configurations for specific devices or all devices.\n- `fileType`: Type of configuration file (e.g., RUNNINGCONFIG or STARTUPCONFIG).\n- `createdTime`: Time criteria in milliseconds (supports logical filters GT, GTE, LT, LTE & BT).\n- `createdBy`: Filter configurations by creators such as SCHEDULED, USER, CONFIG_CHANGE_EVENT, etc.\n- `offset` and `limit`: For pagination purposes.\n\nBy providing the necessary parameters in the query, users can retrieve specific configuration archives of network devices, aiding in tasks such as auditing changes, comparing configurations, troubleshooting issues, and ensuring network compliance and security.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device-config\nREST operation:get\nREST API query parameters:\n- deviceId: comma separated device id for example cf35b0a1-407f-412f-b2f4-f0c3156695f9,aaa38191-0c22-4158-befd-779a09d7cec1 . if device id is not provided it will fetch for all devices. The query parameters should be used in the query. This query parameter is required. \n- fileType: Config File Type can be RUNNINGCONFIG or STARTUPCONFIG. The query parameters should be used in the query. This query parameter is required. \n- createdTime: Supported with logical filters GT,GTE,LT,LTE & BT : time in milliseconds (epoc format). The query parameters should be used in the query. This query parameter is required. \n- createdBy: Comma separated values for createdBy - SCHEDULED, USER, CONFIG_CHANGE_EVENT, SCHEDULED_FIRST_TIME, DR_CALL_BACK, PRE_DEPLOY. The query parameters should be used in the query. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/event/subscription/email\" is used to retrieve Email Event Subscriptions within the Cisco Catalyst Center environment. From a user perspective, this query can be beneficial in various scenarios:\n\n1. **Viewing Email Subscription Details:** Users can access the list of Email subscription details specifically for email notifications. This allows users to understand the current configurations and settings related to Email subscriptions.\n\n2. **Management and Troubleshooting:** Users can manage, update, or troubleshoot Email notification configurations by examining the existing settings retrieved through this query. This can help in ensuring that Email notifications are properly configured and functioning as required.\n\n3. **Customizing Subscription Details:** By providing parameters like name, instanceId, offset, limit, sortBy, and order, users can tailor the query to retrieve specific Email subscription details based on their requirements. This customization enables users to focus on specific subscriptions, making their monitoring and management tasks more efficient.\n\nOverall, this query path provides users with the ability to retrieve, analyze, and manage Email Event Subscriptions effectively within the Cisco Catalyst Center, ensuring proper monitoring and alerting mechanisms are in place for email notifications.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription/email\nREST operation:get\nREST API query parameters:\n- eventIds: List of email subscriptions related to the respective eventIds (Comma separated event ids). The query parameters should be used in the query. This query parameter is required. \n- offset: The number of Subscriptions's to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of Subscriptions's to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n- domain: List of email subscriptions related to the respective domain. The query parameters should be used in the query. This query parameter is required. \n- subDomain: List of email subscriptions related to the respective sub-domain. The query parameters should be used in the query. This query parameter is required. \n- category: List of email subscriptions related to the respective category. The query parameters should be used in the query. This query parameter is required. \n- type: List of email subscriptions related to the respective type. The query parameters should be used in the query. This query parameter is required. \n- name: List of email subscriptions related to the respective name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/event/subscription/email\" is used to create Email Event Subscriptions within the Cisco Catalyst Center environment. From a user perspective, this query can be beneficial in various scenarios:\n\n1. **Creating Email Event Subscriptions:** Users can utilize this query path to set up new Email subscriptions for specific events or notifications within the Catalyst Center environment. By defining the email addresses and events to be subscribed to, users can ensure they receive timely notifications and alerts via email for important network events.\n\n2. **Managing Email Subscriptions:** Users can manage their existing Email subscriptions by modifying or updating the email addresses or events associated with the subscriptions. This allows users to tailor their email notification preferences based on changing requirements or priorities.\n\n3. **Monitoring and Alerting:** By subscribing to relevant events, users can effectively monitor their network infrastructure and receive alerts via email for critical events or issues. This proactive approach enables users to stay informed about the status of their network and take necessary actions promptly.\n\nOverall, this query path empowers users to establish and customize Email event subscriptions, ensuring they receive timely notifications and alerts to effectively manage and monitor their network infrastructure within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription/email\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/event/subscription/email\" is used to manage Email Event Subscriptions within the Cisco Catalyst Center environment. From a user perspective, this query can be beneficial in various scenarios:\n\n1. **Creating Email Event Subscriptions:** Users can utilize this query path to set up new Email subscriptions for specific events or notifications within the Catalyst Center environment. By defining the email addresses and events to be subscribed to, users can ensure they receive timely notifications and alerts via email for important network events.\n\n2. **Managing Email Subscriptions:** Users can manage their existing Email subscriptions by modifying or updating the email addresses or events associated with the subscriptions. This allows users to tailor their email notification preferences based on changing requirements or priorities.\n\n3. **Monitoring and Alerting:** By subscribing to relevant events, users can effectively monitor their network infrastructure and receive alerts via email. This helps in staying informed about critical events and taking necessary actions promptly.\n\n4. **Customizing Subscription Details:** Users can customize the query parameters such as name, instanceId, offset, limit, sortBy, and order to retrieve specific Email subscription details based on their requirements. This customization capability enables users to effectively manage their event subscriptions.\n\nBy using this query path, users can ensure that their email notification configurations are set up correctly, manage their subscriptions efficiently, and stay informed about important network events through timely email alerts.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription/email\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/app-policy\" is used to retrieve all existing application policies within the Cisco Catalyst Center platform. This query allows users to access information about the application policies that are currently in place. Users can use this query to review, analyze, and understand the application policies defined within the Catalyst Center.\n\nFrom a user perspective, this query can be beneficial in various scenarios. Users can utilize this query to:\n\n1. Understand the current application policies: By retrieving all existing application policies, users can gain insights into how different applications are being managed and controlled within their network environment.\n\n2. Review policy scope: Users can specify the policy scope name as a query parameter to narrow down the search and focus on specific policy scopes or categories.\n\n3. Identify gaps or inconsistencies: Users can compare the existing application policies with the desired policies or industry best practices to identify any gaps or inconsistencies that need to be addressed.\n\n4. Make informed decisions: By reviewing the existing application policies, users can make informed decisions on whether to keep the current policies, modify them, or create new custom policies to better align with their organization's needs.\n\nIn summary, the \"/dna/intent/api/v1/app-policy\" query empowers users to access and review the application policies within the Cisco Catalyst Center, enabling them to manage, optimize, and customize the behavior of applications in their network environment effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/app-policy\nREST operation:get\nREST API query parameters:\n- policyScope: policy scope name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/discovery/{id}/summary\" is used to retrieve a summary of network devices from a discovery job in the Cisco Catalyst Center. This query allows users to access information about network devices that have been discovered based on specific filters and criteria.\n\nFrom a user perspective, this query can be utilized to:\n1. Retrieve a summary of network devices discovered during a specific discovery job identified by the Discovery ID.\n2. Filter and search for specific devices based on attributes such as IP address, ping status, SNMP status, CLI status, Netconf status, and HTTP status.\n3. Sort the list of discovered devices based on a specified criteria with options for ascending or descending order.\n4. Obtain information about the status of network devices discovered, allowing users to quickly identify devices that may require attention or further configuration.\n5. Monitor the progress and results of ongoing discovery tasks within the Cisco Catalyst Center environment.\n6. Utilize the retrieved summary of network devices to perform operations related to device management, monitoring, and configuration within the network infrastructure.\n7. Enhance network management efficiency by accessing a detailed list of discovered devices and their associated information for effective monitoring and analysis.\n\nOverall, this REST API query path provides users with the capability to retrieve essential details about discovered network devices from a specific discovery job, aiding in efficient network device management and monitoring within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery/{id}/summary\nREST operation:get\nREST API query parameters:\n- id: Discovery ID. The query parameters should be used in the path. This query parameter is required. \n- taskId: taskId. The query parameters should be used in the query. This query parameter is required. \n- sortBy: sortBy. The query parameters should be used in the query. This query parameter is required. \n- sortOrder: sortOrder. The query parameters should be used in the query. This query parameter is required. \n- ipAddress: ipAddress. The query parameters should be used in the query. This query parameter is required. \n- pingStatus: pingStatus. The query parameters should be used in the query. This query parameter is required. \n- snmpStatus: snmpStatus. The query parameters should be used in the query. This query parameter is required. \n- cliStatus: cliStatus. The query parameters should be used in the query. This query parameter is required. \n- netconfStatus: netconfStatus. The query parameters should be used in the query. This query parameter is required. \n- httpStatus: httpStatus. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/security-advisory/advisory/aggregate\" is used to retrieve a summary of security advisories on the network from the Cisco Catalyst Center. This query allows users to access an overview of security advisories detected on network devices.\n\nFrom a user perspective, this query can be utilized for the following purposes:\n1. Get a summary of security advisories present on the network for better understanding of potential security threats.\n2. Analyze the security posture of network devices by viewing aggregated security advisory information.\n3. Identify critical security vulnerabilities and take necessary actions to mitigate risks.\n4. Stay informed about the latest security advisories affecting the network infrastructure.\n5. Plan and prioritize security measures based on the severity and impact of advisories.\n\nOverall, this REST API query path provides users with valuable insights into security advisories detected on their network, enabling them to enhance the security posture and resilience of their IT infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/security-advisory/advisory/aggregate\nREST operation:get\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/interface/count\" with the GET operation is specifically designed to retrieve the count of interfaces for multiple devices within the Cisco Catalyst Center platform.\n\nFrom a user perspective, this query can be very helpful in scenarios where a network administrator needs to quickly obtain an overview of the number of interfaces across various devices in their network infrastructure. By making this API call, users can efficiently gather interface count data without the need to individually query each device separately.\n\nFor example, a user could utilize this query to monitor the growth of interfaces over time, compare the distribution of interfaces across different sites or device types, or simply have a comprehensive view of the total number of interfaces present in their network environment. This information can be valuable for capacity planning, troubleshooting, or assessing the overall network complexity.\n\nOverall, the \"/dna/intent/api/v1/interface/count\" query provides a convenient way for users to retrieve fundamental interface count information, enabling them to make informed decisions and effectively manage their network interfaces.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/count\nREST operation:get\n</api-query>", "The query path \"/dna/intent/api/v1/compliance/detail/count\" within the Cisco Catalyst Center is used to retrieve the count of compliance details based on specified criteria. This query provides users with information on the total number of compliance details that match the specified compliance type(s) and compliance status(es).\n\nFrom a user perspective, this query can be valuable for monitoring and analyzing the compliance status of network devices within the Cisco Catalyst Center environment. By specifying the compliance types and statuses as query parameters, users can retrieve the total count of compliance details that meet the specified criteria. This information can help users in tracking the compliance status of devices, identifying non-compliant devices, monitoring ongoing compliance assessments, and gaining insights into the overall compliance activity within the system.\n\nUsers can integrate this query into their compliance monitoring or reporting systems to keep track of compliance details over time, ensuring efficient management of compliance assessments and ensuring that network devices adhere to predefined compliance standards. By leveraging this API endpoint, users can effectively manage and maintain the compliance posture of their network infrastructure within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/compliance/detail/count\nREST operation:get\nREST API query parameters:\n- complianceType: Specify \"Compliance type(s)\" separated by commas. The Compliance type can be 'APPLICATION_VISIBILITY', 'EOX', 'FABRIC', 'IMAGE', 'NETWORK_PROFILE', 'NETWORK_SETTINGS', 'PSIRT', 'RUNNING_CONFIG', 'WORKFLOW'. . The query parameters should be used in the query. This query parameter is required. \n- complianceStatus: Specify \"Compliance status(es)\" separated by commas. The Compliance status can be 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS', 'NOT_AVAILABLE', 'NOT_APPLICABLE', 'ERROR'.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/client-health\" is used to retrieve Overall Client Health information from the Cisco Catalyst Center. This query returns information about the health of clients in the network, categorizing them based on their type (Wired and Wireless) at a specific point in time.\n\nFrom a user perspective, this query can be used to monitor the health and performance of clients connected to the network. By specifying a timestamp in epoch time, users can retrieve detailed information about the overall client health, including the count of clients categorized as good, bad, health score, and more. This data can help users identify any issues or anomalies related to client health in the network and take proactive measures to ensure smooth network operations.\n\nOverall, this query provides valuable insights into the health status of clients in the network, allowing users to monitor, analyze, and optimize the performance of their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/client-health\nREST operation:get\nREST API query parameters:\n- timestamp: Epoch time(in milliseconds) when the Client health data is required. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/file/namespace\" in the Cisco Catalyst Center is used to retrieve a list of available namespaces. This query returns a list of all the namespaces that are available within the platform.\n\nFrom a user perspective, this API query can be used to understand and access the different namespaces that are present within the Catalyst Center. By making a GET request to this endpoint, users can quickly retrieve a comprehensive list of namespaces. This can be valuable for users who need to work with or manipulate data within these namespaces, as it provides visibility into the organization and categorization of data within the Catalyst Center.\n\nUsers can utilize this query to gain insights into the structure and organization of data within the platform, facilitating easier data access, manipulation, and management. This information can be particularly useful for developers or administrators who need to interact with and manage data within specific namespaces in the Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/file/namespace\nREST operation:get\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/licenses/usage/smartAccount/{smart_account_id}/virtualAccount/{virtual_account_name}\" within the Cisco Catalyst Center is used to retrieve detailed information about the usage of licenses in a specified smart account and virtual account. This query allows users to obtain the count of purchased and in-use Cisco DNA and Network licenses within the specified accounts.\n\nFrom a user perspective, this query can be valuable for license management and monitoring purposes. Users, such as network administrators or IT managers, can leverage this API call to gain insights into the license usage within their organization. By providing the smart account ID and virtual account name as parameters, users can specifically target the license usage details of a particular smart account and virtual account.\n\nFor example, a user may want to track the utilization of purchased licenses in a specific virtual account to ensure compliance with licensing agreements or to optimize license allocation. By making a GET request to this API endpoint with the relevant parameters, users can retrieve information on the number of licenses purchased and the number currently in use within the specified accounts.\n\nOverall, this API query empowers users to efficiently manage and monitor their license resources within the Cisco Catalyst Center environment, enabling them to make informed decisions regarding license allocation and utilization.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/licenses/usage/smartAccount/{smart_account_id}/virtualAccount/{virtual_account_name}\nREST operation:get\nREST API query parameters:\n- smart_account_id: Id of smart account. The query parameters should be used in the path. This query parameter is required. \n- virtual_account_name: Name of virtual account. Putting \"All\" will give license term detail for all virtual accounts.. The query parameters should be used in the path. This query parameter is required. \n- device_type: Type of device like router, switch, wireless or ise. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/tag/{id}\" with the DELETE operation is used to delete a specific tag in the Cisco Catalyst Center based on the provided Tag ID (denoted by the {id} parameter in the path). Tags in the Catalyst Center are used to categorize and organize network elements, such as devices, based on specific criteria or attributes.\n\nFrom a user perspective, this query can be valuable for managing and organizing network elements efficiently. By deleting a tag, users can remove a specific categorization or organization structure that is no longer needed or relevant. This can help in cleaning up the network inventory, restructuring tags, or removing outdated organizational units.\n\nFor example, if a tag was created for a specific project that has been completed, users can use this query to delete the tag and its associated devices, removing any unnecessary clutter from the network inventory. Additionally, if the criteria for a tag have changed or if the tag is no longer required for management purposes, users can utilize this query to delete the tag and its contents, ensuring that the network organization remains streamlined and up to date.\n\nOverall, the DELETE query for tags in the Cisco Catalyst Center provides users with the capability to maintain a well-organized and relevant network inventory by allowing them to remove tags that are no longer needed or no longer align with the current network structure or management requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag/{id}\nREST operation:delete\nREST API query parameters:\n- id: Tag ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/tag/{id}\" with a GET request operation is used to retrieve a specific tag identified by the Tag ID. In the Cisco Catalyst Center environment, tags are used to categorize and organize network elements, such as devices, based on specific attributes or criteria.\n\nFrom a user perspective, this query can be utilized for various purposes:\n1. **Viewing Tag Details**: Users can retrieve detailed information about a specific tag by providing its ID. This can include the name, description, and any other attributes associated with the tag.\n   \n2. **Managing Tags**: Users can use this query to effectively manage and organize their network elements by accessing specific tags. They can ensure that devices are properly categorized and organized within the network infrastructure.\n\n3. **Integration with Other Systems**: This query can be integrated into other systems or scripts to automate tasks related to tags. For example, retrieving tag information for reporting purposes or automation workflows.\n\n4. **Troubleshooting and Maintenance**: Network administrators can use this query to troubleshoot issues or perform maintenance tasks on devices associated with a specific tag. By accessing tag details, they can identify and address any issues efficiently.\n\nOverall, the \"/dna/intent/api/v1/tag/{id}\" query provides users with a user-friendly way to retrieve specific tag information within the Cisco Catalyst Center, facilitating effective organization and management of network elements based on defined criteria.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag/{id}\nREST operation:get\nREST API query parameters:\n- id: Tag ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/security-advisory/advisory\" is used to retrieve a list of security advisories on the network from the Cisco Catalyst Center. This query allows users to access detailed information about security advisories detected on network devices. \n\nFrom a user perspective, this query can be utilized for various purposes, such as:\n1. Understanding the potential security threats present on the network by getting a comprehensive list of security advisories.\n2. Identifying critical security vulnerabilities and taking necessary actions to mitigate risks based on the advisories listed.\n3. Staying informed about the latest security advisories affecting the network infrastructure to proactively enhance security measures.\n4. Planning and prioritizing security measures based on the severity and impact of the advisories listed.\n5. Gaining insights into the security posture of network devices by viewing aggregated security advisory information.\n6. Making informed decisions regarding security measures and strategies based on the information provided in the security advisories list.\n\nOverall, this query provides users with valuable information about security advisories detected on their network, enabling them to enhance the security posture and resilience of their IT infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/security-advisory/advisory\nREST operation:get\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/template-programmer/template/preview\" with a PUT operation is used to preview a template within the Cisco Catalyst Center environment. When users make a request to this API endpoint, they can view a preview of the template before committing it for deployment to devices.\n\nFrom a user perspective, this query provides a valuable tool for ensuring the accuracy and functionality of a template before it is deployed to the network devices. By sending a PUT request to this API endpoint with the necessary query parameters in the request body, users can view a preview of the template's configuration, ensuring that it meets their requirements and is error-free. This preview functionality can help users identify any potential issues or errors in the template before actual deployment, thus minimizing the risk of misconfigurations and network disruptions.\n\nOverall, users can leverage this API query to gain confidence in the templates they are about to deploy, streamline the deployment process, and maintain the stability and reliability of their network configurations within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/template/preview\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/device-replacement/workflow\" is used to deploy a device replacement workflow in the Cisco Catalyst Center. This API is specifically designed to trigger an RMA (Return Merchandise Authorization) workflow that replaces a faulty device with a replacement device having the same configuration and images. \n\nFrom a user perspective, this query can be utilized to automate the process of replacing faulty devices within the network. By marking a device for replacement and triggering the replacement workflow through this API, users can ensure smooth and efficient device replacement procedures without the need for manual intervention. This automation helps in minimizing human errors, speeding up the recovery process, and maintaining network uptime by swiftly replacing faulty devices with minimal disruption.\n\nOverall, this API query simplifies the workflow for replacing faulty devices with the Cisco Catalyst Center, enabling users to manage device replacements effectively and ensuring that the network remains operational and up-to-date.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-replacement/workflow\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/snmp-property\" in the Cisco Catalyst Center REST API is used to retrieve SNMP properties associated with network devices. SNMP (Simple Network Management Protocol) is a widely used protocol for monitoring and managing network devices.\n\nFrom a user perspective, this query can be utilized to fetch SNMP-related information such as SNMP contact information, location, associated wireless LAN controller IP, interface count, line card count, managed status, memory size, uptime, device mode, and more. By accessing this query, users can gather essential SNMP details for their network devices, allowing them to effectively monitor and manage their infrastructure.\n\nAdditionally, users can leverage this query to update SNMP properties by providing specific details in the request body. For example, users can modify SNMP contact information, adjust the location of devices, update interface and line card counts, manage the device status, specify memory size, track uptime, set the device mode, and more. This flexibility empowers users to configure SNMP properties according to their monitoring and management requirements, thus enhancing the efficiency of their network operations.\n\nOverall, this query provides users with a way to access and manipulate SNMP properties, enabling them to optimize the monitoring and management of their network devices through the Cisco Catalyst Center platform. By utilizing this query, users can ensure that their SNMP configurations are aligned with their network needs, contributing to better network security, performance, and control.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/snmp-property\nREST operation:get\n</api-query>", "From a user perspective, the REST API query path \"/dna/intent/api/v1/snmp-property\" in the Cisco Catalyst Center allows users to retrieve SNMP properties associated with network devices. SNMP (Simple Network Management Protocol) is a widely used protocol for monitoring and managing network devices. \n\nThis query can be utilized to fetch SNMP-related information such as SNMP contact information, location, associated wireless LAN controller IP, interface count, line card count, managed status, memory size, uptime, and more. By accessing this endpoint, users can gather essential SNMP details for their network devices, enabling them to effectively monitor and manage their infrastructure.\n\nAdditionally, users can leverage this query to update SNMP properties by providing specific details in the request body. For example, users can modify SNMP contact information, adjust the location of devices, update interface and line card counts, manage the device status, specify memory size, track uptime, and more. This flexibility empowers users to configure SNMP properties according to their monitoring and management requirements, enhancing the efficiency of their network operations.\n\nOverall, this query provides users with a way to access and manipulate SNMP properties, enabling them to optimize the monitoring and management of their network devices through the Cisco Catalyst Center platform. By utilizing this query, users can ensure that their SNMP configurations are aligned with their network needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/snmp-property\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/events\" is used to retrieve the list of registered events based on provided eventIds or tags. Users can specify one or more eventIds or tags to filter the events they want to receive information on.\n\nFrom a user perspective, this query can be beneficial in various scenarios. For example:\n1. **Monitoring Event Subscriptions**: By providing specific eventIds, users can obtain a count of how many event subscriptions are associated with those eventIds. This helps users track the number of subscriptions set up for different types of events, enabling them to understand the level of monitoring and alerting in place for various aspects of the Catalyst Center environment.\n   \n2. **Filtering and Analyzing Events**: By using parameters like eventIds, tags, sortBy, and order, users can filter and sort the events based on specific criteria. For instance, users can filter events by category, severity, domain, or subDomain to focus on notifications that are relevant to their network environment.\n\n3. **Monitoring Network Health**: By analyzing the count of notifications over time or based on different filters, users can gain insights into the activity and health of their network infrastructure. This helps them proactively manage and address any issues that may arise.\n\n4. **Optimizing Event Management**: By understanding the distribution of events based on eventIds or tags, users can optimize their event management strategy, identify areas that may require more attention, and ensure comprehensive visibility into critical events within their network infrastructure.\n\nOverall, this query provides users with the flexibility to retrieve specific event information based on their requirements, enabling effective monitoring, analysis, and management of events within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/events\nREST operation:get\nREST API query parameters:\n- eventId: The registered EventId should be provided. The query parameters should be used in the query. This query parameter is required. \n- tags: The registered Tags should be provided. The query parameters should be used in the query. This query parameter is required. \n- offset: The number of Registries to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of Registries to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/tag/{id}/member\" with a PUT request operation is used to update the membership of a specific tag identified by the tag ID (denoted by {id} parameter in the path). Tags in Cisco Catalyst Center are utilized to categorize and organize network elements, such as devices, based on specific criteria or attributes.\n\nFrom a user perspective, this query can be valuable for managing and organizing network elements efficiently. By sending a PUT request with the necessary request body containing the updated tag information, users can modify the characteristics of a particular tag. This functionality can assist users in ensuring that network elements are organized in a way that aligns with the network architecture and management requirements. Users can add or retain specific members to the given input tags, allowing for targeted and precise management of network elements.\n\nThis query empowers users to dynamically adjust the composition of tags, ensuring that network resources are properly classified and managed according to changing requirements or network configurations. By leveraging this API endpoint, users can streamline their network management processes and enhance the organization and control of network elements within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag/member\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/file/namespace/{nameSpace}\" in the Cisco Catalyst Center is used to retrieve a list of available files within a specific namespace. This query returns a list of all the files that are present under the specified namespace. From a user perspective, this API query can be used to access and manage files within a particular namespace. By making a GET request to this endpoint and providing the namespace as a query parameter, users can easily retrieve a comprehensive list of files within that specific namespace.\n\nUsers can leverage this query to retrieve information about the files stored within a particular namespace, enabling them to view the existing files, understand their contents, and potentially perform further actions such as downloading or manipulating the files. This functionality is beneficial for users who need to work with files stored in different namespaces within the Catalyst Center, as it provides a convenient way to access and manage files efficiently.\n\nOverall, this API query enhances the user experience by offering a streamlined approach to retrieve a list of files within a specific namespace, facilitating effective file management within the Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/file/namespace/{nameSpace}\nREST operation:get\nREST API query parameters:\n- nameSpace: A listing of fileId's. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/tag/member/type\" with a GET request operation is used to retrieve the list of supported resource types for tags within the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query can be used in the following ways:\n1. **Tag Management**: Users can utilize this query to effectively manage and organize their network elements by accessing specific tags. By understanding the supported resource types, users can categorize devices based on these types, ensuring proper organization within the network infrastructure.\n   \n2. **Integration with Other Systems**: The query results can be integrated into other systems or scripts for automation purposes. For instance, users can retrieve tag resource types for reporting or automation tasks related to tags, streamlining network management processes.\n   \n3. **Customized Tag Retrieval**: By specifying parameters such as attributes, level, offset, limit, size, field, sortBy, order, and systemTag in the query, users can retrieve tags that match their specific requirements. This capability allows network administrators to categorize devices, group them based on attributes, and streamline network management tasks efficiently.\n\nIn summary, the \"/dna/intent/api/v1/tag/member/type\" query provides a user-friendly method for users to access and understand the supported resource types for tags in the Cisco Catalyst Center, enabling them to categorize and manage network elements effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag/member/type\nREST operation:get\n</api-query>", "The provided query path \"/dna/intent/api/v2/network/{siteId}\" with a POST operation is used to create network settings for various configurations such as DHCP, Syslog, SNMP, NTP, Network AAA, Client and Endpoint AAA, and DNS center server settings within the Cisco Catalyst Center platform.\n\nFrom a user perspective, this query can be utilized to define and customize network settings for a specific site identified by the \"siteId\" parameter. Users can input their desired configurations for DHCP, Syslog, SNMP, NTP, and other network-related parameters within the request body. By sending a POST request to this API endpoint with the necessary parameters, users can establish and tailor the network settings according to their requirements for efficient network management and monitoring.\n\nThis API query is valuable for network administrators and IT professionals who need to streamline the configuration and management of network settings within their Cisco Catalyst Center environment. By leveraging this query, users can easily set up and adjust various network parameters to ensure optimal performance and security of their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/network/{siteId}\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- siteId: Site Id to which site details to associate with the network settings.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v2/network/{siteId}\" with a PUT operation is used to update network settings for various configurations such as DHCP, Syslog, SNMP, NTP, Network AAA, Client and Endpoint AAA, and DNS center server settings within the Cisco Catalyst Center platform.\n\nFrom a user perspective, this query can be utilized to define and customize network settings for a specific site identified by the \"siteId\" parameter. Users can input their desired configurations for DHCP, Syslog, SNMP, NTP, and other network-related parameters within the request body. By sending a PUT request to this API endpoint with the necessary parameters, users can establish and tailor the network settings according to their requirements for efficient network management and monitoring.\n\nThis API query is valuable for network administrators and IT professionals who need to streamline the configuration and management of network settings within their Cisco Catalyst Center environment. By leveraging this query, users can maintain a secure and efficient network infrastructure within the Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/network/{siteId}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- siteId: Site Id to update the network settings which is associated with the site. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/security-advisory/device/{deviceId}/advisory\" is specifically used to retrieve a list of security advisories per device from the Cisco Catalyst Center. This query allows users to access detailed information about the security advisories that have been detected on a specific network device.\n\nFrom a user perspective, this query can be valuable for several purposes:\n\n1. **Security Threat Analysis**: Users can utilize this query to understand the potential security threats present on a specific network device by accessing a comprehensive list of security advisories related to that device.\n\n2. **Security Measures Planning**: Based on the information provided in the security advisories list, users can identify security measures and strategies to enhance the security posture of the specific device.\n\n3. **Vulnerability Mitigation**: By identifying critical security vulnerabilities through the list of advisories, users can take necessary actions to mitigate risks and ensure the device's security.\n\n4. **Stay Informed**: Users can stay informed about the latest security advisories affecting the specific network device, enabling proactive steps to maintain security.\n\n5. **Security Prioritization**: Users can plan and prioritize security measures based on the severity and impact of the advisories detected on the device.\n\nOverall, this REST API query path provides users with valuable insights into the security advisories detected on a specific network device, empowering them to enhance the security posture and resilience of that device within their IT infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/security-advisory/device/{deviceId}/advisory\nREST operation:get\nREST API query parameters:\n- deviceId: Device instance UUID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/integration-settings/itsm/instances\" with the GET operation is used to retrieve all ITSM Integration settings within the Cisco Catalyst Center platform. This query allows users to fetch and view the configurations related to the integration between the Catalyst Center platform and their IT Service Management (ITSM) solution.\n\nFrom a user perspective, this query is valuable for various purposes, such as:\n\n1. **Verification of Integration Parameters:** Users can use this query to verify that the integration settings between the Catalyst Center platform and their ITSM solution are correctly configured. By fetching these settings, users can ensure that the integration parameters align with their operational requirements.\n\n2. **Review of Established Connections:** The query enables users to review the established connections between the Catalyst Center platform and the ITSM solution. This helps in understanding how the two systems are communicating and sharing data.\n\n3. **Troubleshooting Integration Issues:** In case of any issues related to the ITSM integration within the Catalyst Center platform, users can use this query to troubleshoot and identify potential problems. By examining the ITSM Integration settings, users can pinpoint any misconfigurations or discrepancies causing integration issues.\n\n4. **Optimization of Integration:** Users can leverage this query to optimize their ITSM Integration settings as per evolving operational requirements, compliance standards, or changes in IT processes. By modifying the settings through this API query, users can ensure effective communication between the Catalyst Center platform and their ITSM solution, leading to streamlined workflows and improved IT service delivery.\n\n5. **Cleanup of Outdated Settings:** Users can also utilize this query to remove specific ITSM Integration settings that are no longer needed or have become outdated. By deleting configurations through this API query, users can maintain a relevant set of integration settings within the Catalyst Center platform.\n\nIn summary, this API query empowers users to efficiently manage, monitor, troubleshoot, and optimize the integration between the Cisco Catalyst Center platform and their IT Service Management solution, ensuring seamless communication and effective IT operations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/integration-settings/itsm/instances\nREST operation:get\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path `/dna/intent/api/v1/global-credential/snmpv2-write-community` with the PUT operation is used to update the global SNMP write community in the Cisco Catalyst Center environment. This query enables users to modify the SNMP write community settings for devices within the Catalyst Center platform. By sending a PUT request to this endpoint with the required parameters in the request body, users can update the SNMP write community to ensure secure communication and management of network devices.\n\nFrom a user perspective, this query allows users to customize the SNMP write community settings according to their requirements. By providing specific details in the request body, users can update attributes like the SNMP write community string to tailor the SNMP configuration for their network devices. This functionality empowers users to efficiently manage and secure their network infrastructure by staying in control of SNMP settings through the Catalyst Center platform.\n\nIn summary, by utilizing this API query, users can enhance network security, configure SNMP settings, and efficiently manage their network devices within the Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/snmpv2-read-community\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path (\"/dna/intent/api/v1/global-credential/snmpv2-read-community\") with the POST operation is used to create a new SNMP read community credential in the Cisco Catalyst Center environment. This query allows users to add a global SNMP read community, which is essential for secure communication and management of network devices.\n\nFrom a user perspective, this query can be used to update the SNMP read community settings for devices within the Catalyst Center platform. By sending a POST request to this endpoint with the required parameters in the request body, users can create a new SNMP read community credential. Users can specify details such as the SNMP read community string in the request body to customize the SNMP configuration according to their requirements.\n\nOverall, this query provides users with the capability to efficiently manage and secure their network devices by updating SNMP settings through the Catalyst Center platform. It enables users to enhance network security by controlling SNMP settings effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/snmpv2-read-community\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/device-replacement/workflow\" is used to deploy a device replacement workflow in the Cisco Catalyst Center. This API is specifically designed to trigger an RMA (Return Merchandise Authorization) workflow that replaces a faulty device with a replacement device having the same configuration and images.\n\nFrom a user perspective, this query can be utilized to automate the process of replacing faulty devices within the network. By marking a device for replacement using the appropriate API endpoints, users can initiate the workflow that facilitates the replacement of defective devices with new ones seamlessly. This automation helps in minimizing human error, speeding up the recovery process, and ensuring that the network remains operational with minimal disruptions.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-replacement\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/device-replacement\" is used to mark a device for replacement in the Cisco Catalyst Center. This API call allows users to flag a specific device as faulty and in need of replacement within the network infrastructure.\n\nFrom a user perspective, this query can be leveraged to automate the process of device replacement. By marking a device for replacement using this API, users can initiate workflows that facilitate the replacement of faulty devices with new ones. This automation helps in minimizing human error, speeding up the recovery process, and ensuring that the network remains operational with minimal disruptions.\n\nUsers can provide the serial number of the faulty device in the request body of the POST operation to mark the device for replacement. After marking the device, further actions like triggering the replacement workflow using the corresponding API endpoint can be performed to ensure a seamless device replacement process within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-replacement\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/device-replacement\" is used to mark a device for replacement in the Cisco Catalyst Center. This API call allows users to flag a specific device as faulty and in need of replacement within the network infrastructure. From a user perspective, this query can be leveraged to automate the process of device replacement. By marking a device for replacement using this API, users can initiate workflows that facilitate the replacement of faulty devices with new ones. By providing details such as the faulty device name, platform, serial number, replacement device platform, replacement status, and product family, users can precisely identify the device that needs replacement and ensure that the replacement process is carried out efficiently.\n\nBy utilizing the provided REST API query, users can streamline the device replacement process, minimize downtime, and maintain network reliability by swiftly replacing faulty devices. This automation helps in reducing human errors, expediting the recovery process, and ensuring that the network functions optimally with minimal disruptions.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-replacement\nREST operation:get\nREST API query parameters:\n- faultyDeviceName: Faulty Device Name. The query parameters should be used in the query. This query parameter is required. \n- faultyDevicePlatform: Faulty Device Platform. The query parameters should be used in the query. This query parameter is required. \n- replacementDevicePlatform: Replacement Device Platform. The query parameters should be used in the query. This query parameter is required. \n- faultyDeviceSerialNumber: Faulty Device Serial Number. The query parameters should be used in the query. This query parameter is required. \n- replacementDeviceSerialNumber: Replacement Device Serial Number. The query parameters should be used in the query. This query parameter is required. \n- replacementStatus: Device Replacement status [READY-FOR-REPLACEMENT, REPLACEMENT-IN-PROGRESS, REPLACEMENT-SCHEDULED, REPLACED, ERROR, NETWORK_READINESS_REQUESTED, NETWORK_READINESS_FAILED]. The query parameters should be used in the query. This query parameter is required. \n- family: List of families[Routers, Switches and Hubs, AP]. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy this field. SortBy is mandatory when order is used.. The query parameters should be used in the query. This query parameter is required. \n- sortOrder: Order on displayName[ASC,DESC]. The query parameters should be used in the query. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/discovery/{id}\" with the DELETE operation allows users to delete a specific discovery in the Cisco Catalyst Center platform. By including the Discovery ID as a required parameter in the path, users can stop the discovery process associated with that particular ID and remove it from the system.\n\nFrom a user perspective, this DELETE query can be valuable in scenarios where a discovery is no longer needed, has become outdated, or needs to be removed for any reason. Users can effectively manage their discovery processes by using this query to delete unnecessary or obsolete discoveries, ensuring that only relevant and up-to-date discovery information is retained in the Catalyst Center platform. This action helps in maintaining an accurate inventory of network devices and configurations, as well as optimizing the efficiency of the network management system.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery/{id}\nREST operation:delete\nREST API query parameters:\n- id: Discovery ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/discovery/{id}\" with the GET operation is used to retrieve a specific discovery in the Cisco Catalyst Center platform based on the provided Discovery ID. This query allows users to access detailed information about a particular discovery process that has been conducted within the network infrastructure.\n\nFrom a user perspective, this query can be utilized in various scenarios such as:\n\n1. **Viewing Discovery Details:** Users can retrieve comprehensive information about a specific discovery task by providing the unique Discovery ID. This can include details such as the devices discovered, the discovery start and end times, any errors encountered during the discovery process, and other relevant information.\n\n2. **Troubleshooting:** Users can use this query to troubleshoot any issues related to a particular discovery. By examining the details of a specific discovery, users can pinpoint potential problems, identify devices that may have failed to be discovered, and take necessary actions to rectify the issues.\n\n3. **Audit and Reporting:** This query can be used for audit purposes to track and document the history of discovery tasks within the Cisco Catalyst Center. Users can generate reports based on specific discovery IDs to analyze trends, monitor the progress of network discovery activities, and ensure that all devices are being accurately discovered and managed.\n\n4. **Integration with Other Systems:** In an automated environment, this query can be integrated with other systems or scripts to extract discovery data for further processing or analysis. This can streamline network management tasks and facilitate seamless communication between different tools and platforms.\n\nIn summary, the \"/dna/intent/api/v1/discovery/{id}\" GET query path provides users with a valuable tool to retrieve detailed information about specific discovery tasks within the Cisco Catalyst Center, enabling efficient network device management, troubleshooting, and monitoring capabilities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery/{id}\nREST operation:get\nREST API query parameters:\n- id: Discovery ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/data/api/v1/event/event-series/audit-log/summary\", is used to retrieve a summary of the Audit Log events from the Event-Hub within the Cisco Catalyst Center environment. From a user perspective, this query can be beneficial in several ways:\n\n1. **Viewing Audit Log Summary**: Users can access a summarized view of the Audit Log events based on specified parameters such as event name, category, severity, domain, sub-domain, source, user ID, time range, etc. This helps users quickly understand the overall status and trends of audit events within the Catalyst Center.\n\n2. **Filtering and Analyzing Events**: By utilizing parameters like event ID, category, severity, domain, sub-domain, etc., users can filter and analyze the Audit Log events to focus on specific types of notifications or incidents. This enables users to investigate and address critical events efficiently.\n\n3. **Monitoring Event Correlation**: Users can leverage the correlation ID parameter to track related events or activities within the Catalyst Center environment. This feature aids in understanding the context and relationships between different events.\n\n4. **System-Generated Event Filtering**: The 'isSystemEvents' parameter allows users to filter out system-generated audit logs if needed. This can help in distinguishing between user-initiated actions and system events for better analysis and response.\n\n5. **Time-Based Analysis**: By specifying the start and end time parameters in milliseconds since Epoch, users can analyze Audit Log events within a specific timeframe. This feature is useful for investigating incidents that occurred during a certain period.\n\nIn summary, this API query empowers users to access, analyze, and monitor Audit Log events effectively within the Cisco Catalyst Center, enabling them to maintain a secure and compliant network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/data/api/v1/event/event-series/audit-log/summary\nREST operation:get\nREST API query parameters:\n- parentInstanceId: Parent Audit Log record's instanceID.. The query parameters should be used in the query. This query parameter is required. \n- isParentOnly: Parameter to filter parent only audit-logs.. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- instanceId: InstanceID of the Audit Log.. The query parameters should be used in the query. This query parameter is required. \n- name: Audit Log notification event name.. The query parameters should be used in the query. This query parameter is required. \n- eventId: Audit Log notification's event ID. . The query parameters should be used in the query. This query parameter is required. \n- category: Audit Log notification's event category. Supported values: INFO, WARN, ERROR, ALERT, TASK_PROGRESS, TASK_FAILURE, TASK_COMPLETE, COMMAND, QUERY, CONVERSATION. The query parameters should be used in the query. This query parameter is required. \n- severity: Audit Log notification's event severity. Supported values: 1, 2, 3, 4, 5.. The query parameters should be used in the query. This query parameter is required. \n- domain: Audit Log notification's event domain.. The query parameters should be used in the query. This query parameter is required. \n- subDomain: Audit Log notification's event sub-domain.. The query parameters should be used in the query. This query parameter is required. \n- source: Audit Log notification's event source.. The query parameters should be used in the query. This query parameter is required. \n- userId: Audit Log notification's event userId.. The query parameters should be used in the query. This query parameter is required. \n- context: Audit Log notification's event correlationId.. The query parameters should be used in the query. This query parameter is required. \n- eventHierarchy: Audit Log notification's event eventHierarchy. Example: \"US.CA.San Jose\" OR \"US.CA\" OR \"CA.San Jose\" - Delimiter for hierarchy separation is \".\".. The query parameters should be used in the query. This query parameter is required. \n- siteId: Audit Log notification's siteId.. The query parameters should be used in the query. This query parameter is required. \n- deviceId: Audit Log notification's deviceId.. The query parameters should be used in the query. This query parameter is required. \n- isSystemEvents: Parameter to filter system generated audit-logs.. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- description: String full/partial search - (Provided input string is case insensitively matched for records).. The query parameters should be used in the query. This query parameter is required. \n- startTime: Start Time in milliseconds since Epoch Eg. 1597950637211 (when provided endTime is mandatory). The query parameters should be used in the query. This query parameter is required. \n- endTime: End Time in milliseconds since Epoch Eg. 1597961437211 (when provided startTime is mandatory). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This REST API query path `\"/dna/intent/api/v1/template-programmer/project/name/{projectName}/template/importtemplates\"` is used to import templates provided in the Data Transfer Object (DTO) under a specific project name in the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized when a user wants to import predefined templates into a specific project within the Cisco Catalyst Center environment. The user would need to provide the following information:\n\n1. **Request**: This should be the DTO containing the templates to be imported. It needs to be included in the body of the request.\n   \n2. **Content-Type**: This specifies the content type of the request body. The default value is `'application/json'`.\n\n3. **projectName**: The name of the project under which the templates need to be imported. This parameter should be included in the path of the query.\n\n4. **doVersion**: A boolean flag that determines whether a new version of a template should be created if the template already exists. If set to `true`, a new version will be created. If set to `false` and the template already exists, the operation will fail with a 'Template already exists' error. This parameter needs to be included in the query parameters.\n\nBy making a POST request to this query path with the necessary parameters, users can efficiently import templates into specific projects, ensuring that configurations are deployed accurately to the devices managed by Cisco DNA Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/project/name/{projectName}/template/importtemplates\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- projectName: Project name to create template under the project. The query parameters should be used in the path. This query parameter is required. \n- doVersion: If this flag is true then it creates a new version of the template with the imported contents in case if the templates already exists. \"\nIf this flag is false and if template already exists, then operation fails with 'Template already exists' error. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/image/importation/source/file\" with the POST operation is specifically designed to import a local software image into the Cisco Catalyst Center. This query allows users to fetch a software image from the local file system and upload it to the DNA Center for further management and distribution.\n\nFrom a user perspective, this query can be utilized to streamline the process of adding new software images to the Cisco Catalyst Center's image repository. Users can simply provide the path to the software image file on their local system through the query parameters. This can be particularly useful when users need to import new software images for deployment on network devices managed by the DNA Center.\n\nBy making use of this query, users can ensure that the software images they require are readily available within the Catalyst Center, enabling efficient software image management and deployment procedures. This can ultimately contribute to the smooth operation and maintenance of the network infrastructure by providing a centralized location for managing software images.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/image/importation/source/file\nREST operation:post\nREST API query parameters:\n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- isThirdParty: Third party Image check. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- thirdPartyVendor: Third Party Vendor. The query parameters should be used in the query. This query parameter is required. \n- thirdPartyImageFamily: Third Party image family. The query parameters should be used in the query. This query parameter is required. \n- thirdPartyApplicationType: Third Party Application Type. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/{deviceUuid}/line-card\" with the GET operation is specifically designed to retrieve Linecard details for a network device identified by its unique deviceUuid. \n\nFrom a user perspective, this query serves the purpose of obtaining detailed information about the line cards installed in a particular network device. The response to this query will include crucial details such as the serial number, part number, switch number, and slot number associated with the line cards present in the specified device.\n\nUsers, including network administrators, operators, and IT personnel, can leverage this query for various purposes such as:\n\n1. **Inventory Management**: Users can fetch specific details about the line cards within a network device, aiding in maintaining an accurate inventory of hardware components.\n\n2. **Troubleshooting**: Accessing information about the line cards can assist in troubleshooting network issues related to specific modules or slots.\n\n3. **Configuration Management**: Understanding the line card configurations can help in ensuring proper utilization of network resources and optimizing performance.\n\n4. **Expansion Planning**: By retrieving details about the line cards, users can plan for future network expansions or upgrades effectively.\n\nOverall, this API query provides users with essential insights into the line card components of a network device, enabling them to make informed decisions regarding network maintenance, troubleshooting, and optimization efforts.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceUuid}/line-card\nREST operation:get\nREST API query parameters:\n- deviceUuid: instanceuuid of device. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "From the provided context, the REST API query path \"/dna/intent/api/v1/global-credential/netconf\" with the POST operation is used to create new Netconf credentials in the Cisco Catalyst Center environment. Netconf is a network management protocol used for configuring network devices, and having the correct credentials is crucial for secure communication and management of devices that support the Netconf protocol.\n\nFrom a user perspective, this query can be utilized to add or update global Netconf credentials within the Cisco Catalyst Center platform. Users can send a POST request to this API endpoint with the required parameters, including the necessary information about the Netconf credential in the request body. By doing so, users can ensure that devices are properly authenticated and authorized to communicate using the Netconf protocol.\n\nThis API query enables users to manage and configure Netconf settings for their network devices efficiently through the Cisco Catalyst Center interface, ensuring secure and effective communication with devices supporting the Netconf protocol.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/global-credential\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v2/global-credential\" with the REST GET operation is used to retrieve all global credentials in the Cisco Catalyst Center environment. These global credentials are crucial for authenticating and authorizing the Catalyst Center to communicate with and manage network devices effectively.\n\nFrom a user perspective, this query can be beneficial in several scenarios:\n1. **Viewing Existing Credentials**: Users can use this query to list and view all the global credentials that have been configured in the Catalyst Center. This provides visibility into the types of credentials available and their associated details.\n\n2. **Credential Management**: Users can leverage this query to manage global credentials, such as updating, deleting, or modifying existing credentials. By retrieving all global credentials at once, users can efficiently navigate and make necessary changes to ensure proper device authentication.\n\n3. **Troubleshooting and Debugging**: In case of any issues related to credential authentication during device management tasks, users can use this query to check the status and details of all global credentials. This can aid in troubleshooting and identifying any credential-related issues that might be impacting device communication.\n\n4. **Automation and Integration**: For automation purposes, this query can be integrated into scripts or applications to fetch global credential details programmatically. This can streamline credential management processes and ensure consistency across the network environment.\n\nOverall, the \"/dna/intent/api/v2/global-credential\" query provides users with a comprehensive overview of all global credentials in the Cisco Catalyst Center, empowering them to effectively manage and troubleshoot device authentication processes within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/global-credential\nREST operation:get\n</api-query>", "The query path \"/dna/intent/api/v2/global-credential\" with the PUT operation is used to update global credentials in the Cisco Catalyst Center environment. Global credentials are essential for authenticating and authorizing the Catalyst Center to communicate with and manage network devices effectively. This query allows users to modify credential settings such as usernames, passwords, enable passwords, authentication types, etc., on a global level.\n\nFrom a user perspective, this query can be highly beneficial in various scenarios:\n1. **Updating Credential Information**: Users can utilize this query to update and manage global credential details. This can be especially useful when there is a need to change or rotate credentials for improved security.\n2. **Managing Device Authentication**: By updating global credentials, users can ensure that all devices within the network infrastructure are authenticated correctly, enhancing network security.\n3. **Troubleshooting and Maintenance**: Users can use this query to troubleshoot any credential-related issues that may be affecting device communication. By updating credentials as needed, users can maintain smooth network operations.\n4. **Automation and Integration**: For automation purposes, this query can be integrated into scripts or applications to update global credentials programmatically. This can streamline credential management processes and ensure consistency across the network environment.\n\nIn summary, the \"/dna/intent/api/v2/global-credential\" PUT query provides users with a robust tool to manage and update global credentials effectively within the Cisco Catalyst Center, contributing to enhanced network security and streamlined credential management practices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/global-credential\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/template-programmer/project\" is used to retrieve a list of projects within the Cisco Catalyst Center. Projects in this context refer to groupings of templates that help in organizing and managing configurations for network devices. These projects can include various templates for different types of devices and configurations.\n\nFrom a user perspective, this query can be utilized to view all the projects available within the Catalyst Center. Users can specify additional query parameters like the name of the project they are searching for and the sort order in which the projects should be displayed (ascending or descending). By making this API call, users can obtain information about the existing projects, which can be crucial for managing configurations and deployments effectively.\n\nFor example, a user could use this API query to search for a specific project by providing its name as a query parameter. This would help the user identify the project ID, which can then be used for further actions such as creating, editing, or assigning templates to that project. Overall, this API query provides users with visibility and control over the projects and templates stored within the Catalyst Center, enabling efficient management of network configurations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/project\nREST operation:get\nREST API query parameters:\n- name: Name of project to be searched. The query parameters should be used in the query. This query parameter is required. \n- sortOrder: Sort Order Ascending (asc) or Descending (des). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/template-programmer/project\" is used to retrieve a list of projects within the Cisco Catalyst Center. Projects in this context refer to groupings of templates that help in organizing and managing configurations for network devices. These projects can include various templates for different types of devices and configurations.\n\nFrom a user perspective, this query can be utilized to view all the projects available within the Catalyst Center. Users can specify additional query parameters like the name of the project they are searching for and the sort order in which the projects should be displayed (ascending or descending). By making this API call, users can obtain information about the existing projects, which can be crucial for managing configurations and deployments effectively.\n\nFor example, a user could use this API query to search for a specific project by providing its name as a query parameter. This would help the user identify the project ID, which can then be used for further actions such as creating, editing, or assigning templates to that project. Overall, this API query provides users with visibility and control over the projects and templates stored within the Catalyst Center, enabling efficient management of network configurations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/project\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/template-programmer/project\" with the PUT operation is used to update an existing project within the Cisco Catalyst Center environment. This API endpoint allows users to modify project configurations, update project parameters, or make any necessary changes to the existing project setup without having to recreate it from scratch.\n\nFrom a user perspective, this API query can be beneficial for network administrators or IT personnel who need to manage projects efficiently within the Catalyst Center. Users can send a PUT request with the updated project details in the request body, such as changes in project scope, configurations, or settings. By utilizing this API endpoint, users can ensure that their projects are up to date and aligned with the current network requirements and operational needs.\n\nOverall, this API query provides users with the flexibility to make modifications to existing projects, enabling them to adapt to evolving network configurations and streamline project management processes effectively within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/project\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/qos-device-interface-info/{id}\" with the DELETE operation is used to delete Quality of Service (QoS) Device Interface Information associated with a specific network device ID from the Cisco Catalyst Center platform.\n\nFrom a user perspective, this query can be utilized when network administrators need to remove all QoS device interface information related to a particular network device. By providing the network device ID as the required parameter in the path, users can trigger the deletion process, effectively removing all QoS settings, configurations, and policies associated with the specified device.\n\nThis functionality can be valuable in scenarios where a network device is being decommissioned, replaced, or reconfigured, and there is a need to clean up and remove any QoS-related information linked to that device from the Catalyst Center. By using this DELETE operation, users can maintain an accurate and up-to-date database of QoS device interface information within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/qos-device-interface-info/{id}\nREST operation:delete\nREST API query parameters:\n- id: Id of the qos device info, this object holds all qos device interface infos associate with network device id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/event/subscription\" is used to create event subscriptions within the Cisco Catalyst Center. This API endpoint allows users to subscribe their SubscriptionEndpoint to a list of registered events. By subscribing to events, users can set up notifications that trigger actions in response to specific events happening within the Catalyst Center environment.\n\nFrom a user perspective, this query can be used to establish event subscriptions for various purposes such as monitoring, automation, and ensuring network compliance. Users can specify the events they are interested in monitoring by providing the necessary parameters in the request body. By creating event subscriptions, users can stay informed about important events within their network infrastructure and take appropriate actions based on those events.\n\nFor example, users can create event subscriptions for events related to configuration changes, software upgrades, network security alerts, performance metrics, or any other critical events they want to track. By subscribing to specific events, users can proactively manage their network infrastructure, identify issues quickly, and automate responses to certain events.\n\nOverall, this API query path provides users with the capability to customize their event monitoring strategy within the Catalyst Center, ensuring they receive timely notifications and can respond effectively to important events happening in their network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path: \"/dna/intent/api/v1/event/subscription\" is used to create event subscriptions within the Cisco Catalyst Center environment. It enables users to subscribe their SubscriptionEndpoint to a list of registered events. By subscribing to events, users can set up notifications that trigger actions in response to specific events occurring within the Catalyst Center.\n\nFrom a user perspective, this query can be utilized for various purposes such as monitoring network events, configuration changes, or any other specific events of interest. Users can customize their event subscriptions based on the events they want to monitor and the actions they want to take in response to those events.\n\nBy using this API endpoint, users can ensure comprehensive visibility into critical events within their network infrastructure. They can track the number of event subscriptions associated with specific event IDs, allowing them to evaluate the coverage and scope of their event monitoring strategy. This helps users identify areas that may require additional subscriptions and ensure they have a robust monitoring and alerting system in place.\n\nOverall, this API query provides users with the flexibility to tailor their event subscriptions to meet their specific monitoring and notification needs within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/event/subscription\" is used for managing event subscriptions within the Cisco Catalyst Center environment. This API endpoint allows users to subscribe their SubscriptionEndpoint to a list of registered events. By subscribing to events, users can set up notifications that trigger actions in response to specific events happening within the Catalyst Center environment.\n\nFrom a user perspective, this query can be utilized to establish event subscriptions for various purposes such as monitoring network events, configuration changes, or any other specific events of interest. Users can customize their event subscriptions based on the events they want to monitor and the actions they want to take in response to those events. By using this API endpoint, users can ensure comprehensive visibility into critical events within their network infrastructure.\n\nUsers can also track the number of event subscriptions associated with specific event IDs, allowing them to evaluate the coverage and scope of their event monitoring strategy. This query gives users the ability to efficiently manage their event subscriptions, ensuring that they are properly set up to receive notifications and trigger necessary actions in response to events occurring within the Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription\nREST operation:delete\nREST API query parameters:\n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- subscriptions: List of EventSubscriptionId's for removal. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The \"/dna/intent/api/v1/event/subscription\" query path allows users to retrieve a list of event subscriptions within the Cisco Catalyst Center platform. Users can provide specific parameters such as eventIds, offset, limit, sortBy, and order to customize the results according to their requirements.\n\nFrom a user perspective, this query can be used for various purposes such as:\n\n1. Monitoring Network Events: Users can fetch a list of event subscriptions related to specific eventIds, enabling them to monitor network events effectively. By specifying the eventIds parameter, users can focus on monitoring events that are critical to their network operations.\n\n2. Evaluating Event Coverage: By utilizing the offset and limit parameters, users can control the number of subscriptions displayed in the result set. This feature allows users to evaluate the coverage and scope of their event monitoring strategy within the Catalyst Center platform.\n\n3. Analyzing Event Subscriptions: The sortBy and order parameters enable users to sort the event subscriptions based on specific criteria. Users can analyze the subscriptions by sorting them in ascending or descending order according to fields such as event type, severity, or timestamp.\n\n4. Customizing Monitoring Strategy: Users can customize their event subscriptions based on the events they want to monitor and the actions they want to take in response to those events. This query provides flexibility in tailoring event monitoring to meet specific network monitoring and management needs.\n\nOverall, this query path enhances network monitoring, troubleshooting, and management activities by providing users with centralized access to event subscriptions within the Catalyst Center platform. It empowers users to track, evaluate, and customize event subscriptions to ensure comprehensive visibility into critical events within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription\nREST operation:get\nREST API query parameters:\n- eventIds: List of subscriptions related to the respective eventIds. The query parameters should be used in the query. This query parameter is required. \n- offset: The number of Subscriptions's to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of Subscriptions's to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/diagnostics/system/health/count\" in the Cisco Catalyst Center is designed to provide users with the count of the latest system events. This API gives insights into the health of the core, distribution, and access networks, as well as details on the health of wired and wireless clients and application health. By fetching system events with specific domains and subdomains, users can monitor and assess the overall health and performance of their network infrastructure. This information enables users to proactively identify and address any potential issues or anomalies.\n\nFrom a user perspective, this query can be valuable for tracking the volume and types of system events occurring within the Cisco Catalyst Center environment. By specifying the domain and subdomain parameters, users can focus on specific areas of interest or concern within their network. The count of system events can help users understand the frequency and nature of events happening in their network, allowing them to take appropriate actions to ensure the smooth operation of their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/diagnostics/system/health/count\nREST operation:get\nREST API query parameters:\n- domain: Fetch system events with this domain. Possible values of domain are listed here : /dna/platform/app/consumer-portal/developer-toolkit/events. The query parameters should be used in the query. This query parameter is required. \n- subdomain: Fetch system events with this subdomain. Possible values of subdomain are listed here : /dna/platform/app/consumer-portal/developer-toolkit/events. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/interface/network-device/{deviceId}/{startIndex}/{recordsToReturn}\" with the GET operation is designed to retrieve a specified range of interfaces for a particular network device. The deviceId parameter is mandatory and represents the unique identifier of the device for which you want to fetch interface information. The startIndex parameter indicates the starting index of the interfaces to be retrieved, and the recordsToReturn parameter specifies the number of interface records to be returned. \n\nFrom a user perspective, this query can be used to fetch interface details for a specific network device within a specified range. For example, a network administrator can utilize this query to retrieve a subset of interfaces from a device, making it easier to manage and analyze a large number of interfaces. By providing the deviceId, startIndex, and recordsToReturn parameters, users can efficiently retrieve the required interface information and perform further operations such as monitoring, troubleshooting, or configuration management on the obtained data.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/network-device/{deviceId}/interface-name\nREST operation:get\nREST API query parameters:\n- deviceId: Device ID. The query parameters should be used in the path. This query parameter is required. \n- name: Interface name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/compliance/{deviceUuid}/detail\" within the Cisco Catalyst Center is designed to retrieve detailed compliance information for a specific network device identified by its unique device UUID. By specifying the device UUID, along with the compliance category, compliance type, and whether to include a diff list, users can access a comprehensive compliance report detailing various aspects such as compliance status, configuration, image, PSIRT, network settings, and more.\n\nFrom a user perspective, this query is valuable for network administrators and IT professionals responsible for ensuring that their network devices adhere to predefined compliance standards. By utilizing this query, users can closely monitor the compliance status of individual devices, identify non-compliant devices, track ongoing compliance assessments, and gain insights into the overall compliance activity within their network infrastructure.\n\nThis API query enables users to integrate compliance monitoring and reporting systems, facilitating efficient management of compliance assessments and ensuring that network devices meet the required compliance standards. By leveraging this query path, users can maintain the compliance posture of their network infrastructure effectively within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/compliance/{deviceUuid}/detail\nREST operation:get\nREST API query parameters:\n- deviceUuid: Device Id. The query parameters should be used in the path. This query parameter is required. \n- category: category can have any value among 'INTENT', 'RUNNING_CONFIG' , 'IMAGE' , 'PSIRT' , 'DESIGN_OOD' , 'EOX' , 'NETWORK_SETTINGS'. The query parameters should be used in the query. This query parameter is required. \n- complianceType: Specify \"Compliance type(s)\" separated by commas. The Compliance type can be 'APPLICATION_VISIBILITY', 'EOX', 'FABRIC', 'IMAGE', 'NETWORK_PROFILE', 'NETWORK_SETTINGS', 'PSIRT', 'RUNNING_CONFIG', 'WORKFLOW'. . The query parameters should be used in the query. This query parameter is required. \n- diffList: diff list [ pass true to fetch the diff list ]. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n\n</api-query>", "This specific REST API query path `/dna/intent/api/v1/network-device-config/write-memory` is used for committing device configurations. When this query is executed with a POST operation, it will commit the running configuration of a device to its startup configuration by issuing the equivalent of the \"write memory\" command on the device.\n\nFrom a user perspective, this query can be very useful for network administrators or engineers who need to ensure that any configuration changes made on a device are saved and persist across reboots. By sending a POST request to this API endpoint with the necessary parameters in the request body, users can trigger the device to save the current running configuration to its startup configuration, making the changes permanent.\n\nFor example, after making configuration changes to a network device using other API operations or tools, a user can use this endpoint to ensure those changes are saved and not lost in case of a reboot. This capability can help maintain consistency in device configurations and prevent any accidental loss of configurations due to unexpected events.\n\nOverall, this API query provides users with a convenient way to manage device configurations effectively and securely within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device-config/write-memory\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/licenses/device/summary\" is used to fetch a summary of the licenses associated with specific devices in the Cisco Catalyst Center. This query allows users to access essential information about the licensing status of devices based on specified filters and criteria.\n\nFrom a user perspective, this query can be beneficial in several ways:\n\n1. **Monitoring License Utilization**: Users can utilize this query to monitor and analyze the license usage of their devices. By fetching the license summary, users can keep track of the licenses that are in use, their expiration dates, and any potential compliance issues.\n\n2. **Managing License Inventory**: This query enables users to maintain an inventory of the licenses associated with their devices. Users can easily view the types of licenses in use, the number of licenses available, and quickly identify any shortages or excesses.\n\n3. **Ensuring Compliance**: By retrieving the license summary of devices, users can ensure that all devices are properly licensed and compliant with the necessary software requirements. Any discrepancies or violations can be identified through this summary.\n\n4. **Optimizing License Allocation**: Users can optimize their license allocation by examining the license summary. This can help in reallocating licenses to devices that require them the most, thereby maximizing the utilization of available licenses.\n\nIn conclusion, the \"/dna/intent/api/v1/licenses/device/summary\" query path is a valuable tool for users to manage and monitor the licensing status of their network devices efficiently.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/licenses/device/summary\nREST operation:get\nREST API query parameters:\n- page_number: Page number of response. The query parameters should be used in the query. This query parameter is required. \n- order: Sorting order. The query parameters should be used in the query. This query parameter is required. \n- sort_by: Sort result by field. The query parameters should be used in the query. This query parameter is required. \n- dna_level: Device Cisco DNA license level. The query parameters should be used in the query. This query parameter is required. \n- device_type: Type of device. The query parameters should be used in the query. This query parameter is required. \n- limit: Limit. The query parameters should be used in the query. This query parameter is required. \n- registration_status: Smart license registration status of device. The query parameters should be used in the query. This query parameter is required. \n- virtual_account_name: Name of virtual account. The query parameters should be used in the query. This query parameter is required. \n- smart_account_id: Id of smart account. The query parameters should be used in the query. This query parameter is required. \n- device_uuid: Id of device. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/global-credential/http-write\", with a POST operation is used to create HTTP write credentials in the Cisco Catalyst Center environment. These credentials are used for configuring and managing HTTP write access for various network devices and services.\n\nFrom a user perspective, this query can be utilized to add global HTTP write credentials, which can be crucial for performing configuration changes, network monitoring, and troubleshooting tasks across the network infrastructure. By sending a POST request with the necessary parameters, such as the username, password, port, and security settings, users can establish the required HTTP write access permissions.\n\nFor example, a network administrator or a developer can use this query to create HTTP write credentials for accessing and managing devices, services, or applications that require HTTP write permissions. By providing the appropriate credentials through this API query, users can enable secure communication and operations involving HTTP write actions within the Cisco Catalyst Center environment.\n\nOverall, this query path serves as a fundamental tool for managing HTTP write credentials centrally, ensuring secure and authorized access for users or systems interacting with the network infrastructure through HTTP protocols.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/http-write\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The given REST API query path \"/dna/intent/api/v1/global-credential/http-write\" with a PUT operation is specifically used to update global HTTP write credentials within the Cisco Catalyst Center environment. These credentials are crucial for configuring and managing HTTP write access for various network devices and services.\n\nFrom a user perspective, this API query allows users, such as network administrators or developers, to modify the global HTTP write credentials centrally. By providing the necessary parameters like username, password, port, and security settings in the request body, users can update the HTTP write credentials required for tasks like making configuration changes, monitoring network activities, or troubleshooting issues across the network infrastructure.\n\nThis query serves as a fundamental tool for managing HTTP write credentials securely and centrally, ensuring authorized access and enabling secure communication and operations involving HTTP write actions within the Cisco Catalyst Center environment. Users can utilize this query to maintain smooth network operations, troubleshoot credential-related issues, and automate credential management processes for consistency across the network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/http-write\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/authentication-policy-servers\" with a POST operation is used to add Authentication and Policy Server Access Configuration within the Cisco Catalyst Center environment. This API enables users to configure AAA/ISE server access settings, allowing them to define how devices authenticate and access network resources.\n\nFrom a user perspective, this query can be utilized when there is a need to set up or modify authentication and policy server configurations. By sending a POST request to the specified query path and providing the required details in the request body, users can easily configure the server access policies for their network devices. This can include specifying the type of protocol to be used (RADIUS, TACACS, or RADIUS_TACACS) and defining the server integration settings.\n\nAfter configuring the authentication and policy servers, users can further check the integration status by utilizing the 'Cisco ISE Server Integration Status' Intent API. If needed, users can also use the 'Accept Cisco ISE Server Certificate for Cisco ISE Server Integration' Intent API to accept the Cisco ISE certificate for proper integration. These steps ensure that the configured servers are correctly integrated and functioning within the Catalyst Center environment, maintaining the security and access control mechanisms of the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/authentication-policy-servers\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/authentication-policy-servers\" with the GET operation is used to retrieve information about Authentication and Policy Servers within the Cisco Catalyst Center environment. This query allows users to access details related to the configuration of authentication and policy servers, including settings such as primary or secondary roles, server states (INPROGRESS, ACTIVE, DELETED, RBAC-FAILURE, FAILED), and whether ISE (Identity Services Engine) integration is enabled.\n\nFrom a user perspective, this query can be utilized to view the current status and configurations of Authentication and Policy Servers within the Catalyst Center. Users can leverage this information to understand how devices authenticate and access network resources, ensuring that the access control mechanisms are correctly set up and functioning as intended. By specifying parameters such as isIseEnabled, state, and role, users can narrow down their search and retrieve specific details about the servers they are interested in.\n\nOverall, this query provides transparency and visibility into the authentication and policy server configurations, allowing users to monitor and manage these settings effectively to maintain network security and integrity within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/authentication-policy-servers\nREST operation:get\nREST API query parameters:\n- isIseEnabled: Valid values are : true, false. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- state: Valid values are: INPROGRESS, ACTIVE, DELETED, RBAC-FAILURE, FAILED. The query parameters should be used in the query. This query parameter is required. \n- role: Authentication and Policy Server Role (Example: primary, secondary). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/flow-analysis\" is used to retrieve all previous Pathtraces summary in the Cisco Catalyst Center. It returns a summary of all flow analyses that are stored in the system. Users can filter the results based on various specified parameters such as source IP address, destination IP address, source port, destination port, protocol, status, task ID, and more.\n\nFrom a user perspective, this query can be utilized to:\n\n1. Retrieve a summary of all previous path traces conducted in the Cisco Catalyst Center.\n2. Filter the path trace results based on specific criteria like source IP, destination IP, protocol, status, and time of analysis.\n3. Analyze the flow data to troubleshoot network issues like packet loss, traffic routing problems, or ACL-related issues.\n4. Monitor the network performance by examining historical path trace summaries.\n5. Use the retrieved information for network optimization, troubleshooting, and performance evaluation purposes.\n\nBy making use of the provided query parameters and sending a GET request to this API endpoint, users can efficiently retrieve and analyze the stored path trace summaries to gain insights into the network behavior and diagnose potential network anomalies.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/flow-analysis\nREST operation:get\nREST API query parameters:\n- periodicRefresh: Is analysis periodically refreshed?. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- sourceIP: Source IP address. The query parameters should be used in the query. This query parameter is required. \n- destIP: Destination IP adress. The query parameters should be used in the query. This query parameter is required. \n- sourcePort: Source port. The query parameters should be used in the query. This query parameter is required. \n- destPort: Destination port. The query parameters should be used in the query. This query parameter is required. \n- gtCreateTime: Analyses requested after this time. The query parameters should be used in the query. This query parameter is required. \n- ltCreateTime: Analyses requested before this time. The query parameters should be used in the query. This query parameter is required. \n- protocol: Protocol. The query parameters should be used in the query. This query parameter is required. \n- status: Status. The query parameters should be used in the query. This query parameter is required. \n- taskId: Task ID. The query parameters should be used in the query. This query parameter is required. \n- lastUpdateTime: Last update time. The query parameters should be used in the query. This query parameter is required. \n- limit: Number of resources returned. The query parameters should be used in the query. This query parameter is required. \n- offset: Start index of resources returned (1-based). The query parameters should be used in the query. This query parameter is required. \n- order: Order by this field. The query parameters should be used in the query. This query parameter is required. \n- sortBy: Sort by this field. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/flow-analysis\" is used to initiate a new Pathtrace in the Cisco Catalyst Center. This query allows users to start a flow analysis with options for periodic refresh and statistical data collection. \n\nFrom a user perspective, this query can be used to:\n\n1. Initiate a new flow analysis with specific parameters like source IP address, destination IP address, inclusions (such as INTERFACE-STATS, DEVICE-STATS, ACL-TRACE, QOS-STATS), and protocol.\n2. Receive a request ID and a task ID to monitor the progress and obtain results of the flow analysis.\n3. Follow the progress of the path trace and wait until the analysis is completed.\n4. Retrieve the path trace result by querying the API using the provided task ID.\n5. Filter and analyze the stored path trace summaries based on various parameters like source IP, destination IP, protocol, status, task ID, etc.\n6. Troubleshoot network issues, monitor performance, optimize network resources, and evaluate network behavior based on the historical path trace data.\n\nOverall, this REST API query path provides users with the functionality to perform detailed flow analysis in the Cisco Catalyst Center and gain insights into network behavior for effective network management and troubleshooting.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/flow-analysis\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/network-device/insight/{siteId}/device-link\" with the GET operation is used for the Inventory Insight Device Link Mismatch API. This query is designed to find all devices within a specified site that have link mismatches, specifically related to speed/duplex or VLAN configurations.\n\nFrom a user perspective, this query can be beneficial for network administrators or IT professionals who want to identify and resolve any discrepancies in link configurations that could potentially impact network performance and stability. By providing the siteId parameter, users can retrieve a list of devices within a particular site that have link mismatches. The offset and limit parameters allow users to paginate through the results if there are a large number of devices to review.\n\nAdditionally, the category parameter enables users to specify whether they are interested in speed/duplex mismatches or VLAN mismatches. The sortBy and order parameters provide flexibility in sorting the results based on specific criteria. Overall, this query empowers users to proactively address and rectify any link mismatches in their network infrastructure, ensuring optimal network operation.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/insight/{siteId}/device-link\nREST operation:get\nREST API query parameters:\n- siteId: siteId. The query parameters should be used in the path. This query parameter is required. \n- offset: Row Number.  Default value is 1. The query parameters should be used in the query. This query parameter is required. \n- limit: Default value is 500. The query parameters should be used in the query. This query parameter is required. \n- category: Links mismatch category.  Value can be speed-duplex or vlan.. The query parameters should be used in the query. This query parameter is required. \n- sortBy: Sort By. The query parameters should be used in the query. This query parameter is required. \n- order: Order.  Value can be asc or desc.  Default value is asc. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/system/api/v1/role\" with the PUT operation is used to update a role in the Cisco DNA Center System. Roles in the Cisco Catalyst Center define the permissions and access levels for different users within the system. By using this API endpoint, users can modify the settings and permissions associated with a specific role, such as changing the access rights, updating privileges, or adjusting role-based policies.\n\nFrom a user perspective, this query is valuable for administrators or IT personnel who are responsible for managing user roles and access control within the Cisco Catalyst Center environment. Users can leverage this API query to make changes to role configurations, ensuring that the right individuals have appropriate access to system resources and functionalities. For example, an administrator can use this query to update a role to grant additional permissions for a specific user or restrict access for security purposes.\n\nBy sending a PUT request to the \"/dna/system/api/v1/role\" endpoint with the necessary parameters in the request body, users can efficiently update role settings without manual intervention, thereby streamlining the role management process within the Cisco DNA Center System. This capability allows for effective role customization and adaptation based on evolving business requirements and organizational needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/role\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: The format of the payload. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/system/api/v1/role\" with the POST operation is used to add a new role in the Cisco DNA Center System. Roles in the Cisco Catalyst Center define the permissions and access levels for different users within the system. By using this API endpoint, users can create a new role with specific settings and permissions tailored to their organizational requirements.\n\nFrom a user perspective, this query is valuable for administrators or IT personnel who are responsible for managing user roles and access control within the Cisco Catalyst Center environment. Users can leverage this API query to define custom roles, set access rights, assign privileges, and establish role-based policies for different user groups or individuals.\n\nFor example, a user can utilize this query to create a new role with limited access for guest users, define a role with elevated privileges for network administrators, or establish specialized roles for specific departments within the organization. By sending a POST request to the \"/dna/system/api/v1/role\" endpoint with the necessary parameters in the request body, users can efficiently add new roles to the system, ensuring that users have appropriate access levels and permissions to perform their designated tasks.\n\nOverall, this API query enhances the role management capabilities within the Cisco DNA Center System, allowing users to tailor access control settings to meet their organization's security and operational requirements effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/role\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: The format of the payload. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "From the provided information, the REST API query path \"/dna/intent/api/v1/network-device-archive/cleartext\" with a POST operation is used for exporting device configurations. The purpose of this query is to export device configurations to an encrypted zip file for backup or archival purposes. \n\nFrom a user perspective, this API query can be utilized by network administrators or operators who need to regularly back up device configurations for disaster recovery, compliance, or auditing purposes. By making a POST request to this endpoint with the necessary query parameters in the request body (such as the specific devices for which configurations need to be exported), users can trigger the export process.\n\nThe exported configurations will be encrypted and compressed into a zip file, ensuring secure storage and efficient file management. This feature can be particularly useful in environments where network device configurations need to be backed up periodically to ensure quick restoration in case of any failures or changes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device-archive/cleartext\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: . The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/discovery\" with the POST operation is used to start a discovery process within the Cisco Catalyst Center. This query initiates a discovery with the given parameters, allowing users to identify and add network devices to the Cisco DNA Center for further management and operations.\n\nFrom a user perspective, this query can be valuable in the following ways:\n1. **Initiating Discoveries:** Users can use this query to kick off a network discovery process within the Cisco Catalyst Center. By providing the necessary parameters in the request body, users can start discovering network devices using different techniques such as IP Range, CDP, SNMP, SSH, NETCONF, among others.\n   \n2. **Automating Discovery Tasks:** Users can automate the process of discovering network devices by utilizing this query in scripts or integrated systems. This automation can help streamline network management tasks and ensure efficient device onboarding to the Cisco DNA Center.\n\n3. **Troubleshooting Discoveries:** In case of any issues or errors during the discovery process, users can utilize this query to restart or stop an existing discovery. By understanding the status and details of the discovery through this API, users can troubleshoot and resolve any potential problems encountered during the network device discovery.\n\n4. **Integrating with Other Systems:** Users can integrate this query with other systems or scripts to extract discovery data for further processing or analysis. This can facilitate seamless communication between different tools and platforms, enhancing overall network management capabilities.\n\nIn summary, the \"/dna/intent/api/v1/discovery\" POST query path provides users with a powerful tool to commence network discovery processes, automate device onboarding, troubleshoot discovery tasks, and integrate with external systems for enhanced network management within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/discovery\" with the PUT operation is used to update an existing discovery in the Cisco Catalyst Center. This query allows users to modify an ongoing discovery process by specifying the ID of the discovery that needs to be stopped or started. Users can change the state of the discovery, either stopping it or starting it based on their requirements.\n\nFrom a user perspective, this query can be valuable in the following ways:\n\n1. **Managing Discoveries:** Users can use this query to control the progress of discovery tasks within the Cisco Catalyst Center. By updating the state of a specific discovery, users can effectively manage their network device discovery processes and ensure they are running as intended.\n\n2. **Resolving Issues:** In case there are any issues with an ongoing discovery process, users can utilize this query to stop the discovery temporarily, make necessary adjustments, and then restart it to continue the discovery without any interruptions.\n\n3. **Customizing Discovery Operations:** Users can customize their discovery operations by using this query to start or stop discoveries based on specific criteria or requirements. This flexibility allows users to tailor the discovery process according to their network management needs.\n\n4. **Enhancing Efficiency:** By updating existing discoveries using this query, users can enhance the efficiency of their network management tasks. They can ensure that only relevant discoveries are active and optimize the network device discovery process for better resource utilization.\n\nOverall, this PUT operation for updating discoveries provides users with a flexible and efficient way to manage and control their network discovery processes within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/discovery/{id}\" with the DELETE operation allows users to delete a specific discovery in the Cisco Catalyst Center platform. By including the Discovery ID as a required parameter in the path, users can stop the discovery process associated with that particular ID and remove it from the system.\n\nFrom a user perspective, this DELETE query can be valuable in scenarios where a discovery is no longer needed, has become outdated, or needs to be removed for any reason. Users can effectively manage their discovery processes by using this query to delete unnecessary or obsolete discoveries, ensuring that only relevant and up-to-date discovery information is retained in the Catalyst Center platform. This action helps in maintaining an accurate inventory of network devices and configurations, as well as optimizing the efficiency of the network management system.\n\nBy utilizing this query, users can maintain control over the progress of discovery tasks within the Cisco Catalyst Center. It allows users to manage their network device discovery processes effectively and ensure they are running as intended. This query provides a way to troubleshoot and resolve any potential problems encountered during the network device discovery, enhancing the overall efficiency of network management tasks.\n\nAdditionally, users can integrate this DELETE query with other systems or scripts to extract discovery data for further processing or analysis, customize their discovery operations based on specific criteria, and enhance the efficiency of their network management tasks by ensuring only relevant discoveries are active and optimizing the overall network management process.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery\nREST operation:delete\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/interface/network-device/{deviceId}/count\" with the GET operation is used to retrieve the count of interfaces for a particular device within the Cisco Catalyst Center platform. By providing the deviceId parameter, users can get the total number of interfaces present on the specified network device.\n\nFrom a user perspective, this query can be beneficial for network administrators who need to quickly assess the number of interfaces on a specific device in their network environment. Users can utilize this API call to obtain a comprehensive overview of the interfaces without the necessity to query each interface individually. This information can be valuable for monitoring interface growth over time, comparing interface distributions across different sites or device types, and gaining insights into the network's overall complexity.\n\nIn summary, this API query enables users to efficiently gather interface count data for a particular device, which can be crucial for capacity planning, troubleshooting, and assessing network infrastructure complexity.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/network-device/{deviceId}/count\nREST operation:get\nREST API query parameters:\n- deviceId: Device ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/maps/import/{importContextUuid}\" with the DELETE operation is specifically designed to cancel an ongoing map import process within the Cisco Catalyst Center. This query is used to terminate a map import that was previously initiated, allowing the system to clean up cached resources related to that specific import data. By canceling the import, it ensures that the import cannot accidentally proceed or be approved at a later time.\n\nFrom a user perspective, this query can be valuable when a user needs to stop or abort a map import process for any reason. By providing the unique import context UUID that was generated during the initial import request, users can effectively halt the ongoing import operation. This feature is particularly useful when there is a need to cancel an import due to errors, changes in requirements, or any other unforeseen circumstances.\n\nBy utilizing this query, users can maintain control over the import processes within the Cisco Catalyst Center, ensuring that only the desired map imports are completed while avoiding any unwanted or mistaken imports. This functionality helps in streamlining the map management tasks and ensuring the accuracy and relevancy of imported map data within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/maps/import/{importContextUuid}\nREST operation:delete\nREST API query parameters:\n- importContextUuid: The unique import context UUID given by a previous call to Start Import API. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/count\" with the GET operation is utilized to retrieve the count of network devices based on specified filter criteria such as management IP address, MAC address, hostname, and location name within the Cisco Catalyst Center platform.\n\nFrom a user perspective, this query can be beneficial for network administrators who need to quickly assess the total number of network devices that meet specific criteria. By providing the required query parameters such as hostname, management IP address, MAC address, and location name, users can obtain an accurate count of devices that match the specified filters.\n\nUsers can leverage this query to efficiently monitor and manage their network infrastructure by gaining insights into the distribution of devices based on different attributes. For example, users can determine the number of devices with a particular hostname, management IP address, MAC address, or located in a specific area. This information can be valuable for network inventory management, troubleshooting, and ensuring network security by identifying and tracking devices within the network.\n\nOverall, this REST API query path simplifies the process of retrieving device counts based on specific criteria, enabling users to make informed decisions regarding network operations and maintenance.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/count\nREST operation:get\nREST API query parameters:\n- hostname: hostname. The query parameters should be used in the query. This query parameter is required. \n- managementIpAddress: managementIpAddress. The query parameters should be used in the query. This query parameter is required. \n- macAddress: macAddress. The query parameters should be used in the query. This query parameter is required. \n- locationName: locationName. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/maps/import/{importContextUuid}/perform\" with the POST operation is specifically designed to perform the import of a Map Archive within the Cisco Catalyst Center. This query is used to approve and execute the import process that was previously initiated using the Start Import API. By making this call, the system will proceed with importing the map data from the specified archive, potentially resulting in the replacement of existing Maps data for the defined site(s) within the archive.\n\nFrom a user perspective, this query is valuable when a user wants to finalize and execute a map import process within the Cisco Catalyst Center. By providing the unique import context UUID that was generated during the initial import request, users can confirm their intention to import the map data and allow the system to complete the import operation. This feature is particularly useful when users are confident in the data within the archive and are ready to update the map data in the system.\n\nIt's essential for users to first validate the pre-import validation output by checking the Map Archive Import Status using the /maps/import/{contextUuid}/status API to ensure that the data is correct and the import can proceed without issues. Once the validation is satisfactory, users can utilize this query to officially kickstart the import process.\n\nOverall, this query aids users in managing map data efficiently within the Cisco Catalyst Center, ensuring that the import process is controlled and deliberate, preventing any accidental or erroneous imports while maintaining the accuracy and relevancy of the map data within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/maps/import/{importContextUuid}/perform\nREST operation:post\nREST API query parameters:\n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- importContextUuid: The unique import context UUID given by a previous call of Start Import API. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/image/importation/golden\" with a POST operation is used to tag an image as a Golden Image within the Cisco Catalyst Center. When an image is tagged as Golden, it typically signifies that this image is a preferred or recommended version for deployment across network devices.\n\nFrom a user perspective, this query allows users to mark a specific software image as a Golden Image within the Catalyst Center. By specifying parameters such as imageSeries, imageName, and isTaggedGolden (with a default value of 'False'), users can effectively manage and organize their software images. Users can also indicate whether the image is recommended from cisco.com using the isCCORecommended parameter.\n\nThis query provides users with the ability to easily identify and select the appropriate software images for deployment on network devices. By tagging an image as Golden, users can ensure that this particular image is prioritized for deployment, providing a standardized and recommended software version for network operations.\n\nOverall, this query path enables users to streamline their software image management process within the Catalyst Center, ensuring that network devices are provisioned with the most suitable and recommended software versions.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/image/importation/golden\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Accept: MIME type / MIME subtype Consumed. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- Content-Type: MIME type / MIME subtype Produced. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/lan-automation/log/{id}\" with the GET operation is used to retrieve LAN Automation session logs based on a specific LAN Automation session ID. This API endpoint allows users to access detailed logs related to the LAN Automation process for a particular session.\n\nFrom a user perspective, this query can be very useful in troubleshooting and monitoring LAN Automation activities. By providing the LAN Automation session ID as the path parameter, users can retrieve logs that contain information about the devices involved, configurations applied, any errors encountered, and the overall status of the automation process.\n\nUsers can leverage this API query to gain insight into the progress and outcomes of LAN Automation sessions, aiding in identifying issues, analyzing device configurations, and ensuring that the automation process is running smoothly. Access to these detailed logs can facilitate better management of network resources and help optimize network operations within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation/log/{id}\nREST operation:get\nREST API query parameters:\n- id: LAN Automation session identifier.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/device-reboot/apreboot\" with the POST operation is used to reboot access points within the Cisco Catalyst Center environment. This API endpoint allows users to remotely initiate the reboot process for multiple access points simultaneously, with a maximum limit of 200 access points at a time.\n\nFrom a user perspective, network administrators or IT personnel who manage a network infrastructure that includes Cisco Catalyst access points can utilize this API query to efficiently perform mass reboots of access points. This can be particularly useful in scenarios where a reboot is required to troubleshoot connectivity issues, apply configuration changes, or ensure the stability and performance of the access points.\n\nBy sending a POST request to this API endpoint and including the necessary parameters in the request body, users can trigger the reboot action for a specified set of access points. This capability simplifies the task of managing access points across a network, reducing manual effort and potentially minimizing downtime by automating the reboot process.\n\nOverall, this query provides a convenient and centralized approach for users to remotely reboot multiple access points within their network infrastructure using the Catalyst Center platform, enhancing operational efficiency and network management capabilities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-reboot/apreboot\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content-Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/diagnostics/system/health\" in the Cisco Catalyst Center is used to retrieve the latest system events related to the health of the system. This API provides information on the overall health and performance of the network infrastructure, including details on core, distribution, and access networks, wired and wireless client health, and application health.\n\nFrom a user perspective, this query can be used to monitor the health of the network system, identify any potential issues or anomalies, and take proactive actions to ensure the smooth operation of the network infrastructure. Users can customize the query using parameters such as summary, domain, subdomain, limit, and offset to fetch specific system events based on their requirements. By leveraging this API query, users can stay informed about the health status of their network and promptly address any critical events that may impact the network's performance and reliability.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/diagnostics/system/health\nREST operation:get\nREST API query parameters:\n- summary: Fetch the latest high severity event. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- domain: Fetch system events with this domain. Possible values of domain are listed here : /dna/platform/app/consumer-portal/developer-toolkit/events. The query parameters should be used in the query. This query parameter is required. \n- subdomain: Fetch system events with this subdomain. Possible values of subdomain are listed here : /dna/platform/app/consumer-portal/developer-toolkit/events. The query parameters should be used in the query. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/dnac-release\" in the Cisco Catalyst Center REST API is used to retrieve information about the release summary of the Cisco DNA Center. This information includes details such as the API version, mandatory core packages required for installation or upgrade, optional packages, the name and version of the Cisco DNA Center, supported direct updates, and the tenant ID.\n\nFrom a user perspective, this query can be valuable for administrators or developers who are managing or developing applications that interact with the Cisco DNA Center. By querying this path, users can obtain essential information about the current release of the Cisco DNA Center, enabling them to ensure compatibility with their applications, understand the required packages for installation or upgrade, and stay informed about the available optional packages. This query can aid users in making informed decisions regarding their Cisco DNA Center deployment, upgrades, and overall management of the system.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/dnac-release\nREST operation:get\n</api-query>", "The provided query path \"/dna/intent/api/v2/wireless/accesspoint-configuration\" is used for configuring Access Points within the Cisco Catalyst Center platform. By making a POST request to this API endpoint and providing the necessary parameters in the request body, users can configure multiple access points with required options such as SSID settings, security configurations, radio settings, etc. \n\nFrom a user perspective, this query allows network administrators or IT personnel to easily manage and customize the settings of access points within their network infrastructure. Users can define specific configurations for each access point, ensuring optimal performance and security. By utilizing this API endpoint, users can streamline the process of configuring and maintaining access points across their network, saving time and effort. \n\nOverall, this query provides a convenient and efficient way for users to centrally manage their wireless access points within the Catalyst Center platform, ensuring a seamless and tailored wireless network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/wireless/accesspoint-configuration\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/onboarding/pnp-device/site-claim\" with the REST operation \"post\" is used to claim a device to a site within the Cisco Catalyst Center. This query is part of the device onboarding process and is essential for integrating new devices into the network infrastructure managed by the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be used when a user wants to assign a specific device to a particular site within the network infrastructure. By making this API call, users can claim a device based on the DNA-C Site-based design process, ensuring that the device is correctly associated with the appropriate site.\n\nDepending on the device platform, certain parameters are required for the claim process. For example, for Default/StackSwitch devices, parameters like imageInfo and configInfo are necessary, while for AccessPoints, rfProfile is required. This API query allows users to provide the essential information needed to successfully claim a device to a site.\n\nOverall, this API query streamlines the device onboarding process, making it easier for users to manage and assign devices within the Cisco Catalyst Center environment efficiently. It enhances network management capabilities and ensures that devices are correctly provisioned and associated with the appropriate sites.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/site-claim\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path `/dna/intent/api/v2/site` is used in the Cisco Catalyst Center to retrieve information about sites within the network infrastructure. The purpose of this query is to allow users to get details about one or more sites by specifying parameters such as site name hierarchy, site ID, and site type.\n\nFrom a user perspective, this query can be utilized to perform the following actions:\n1. **Get Site Details**: Users can retrieve information about a specific site or a list of sites within the network infrastructure by providing parameters such as site name hierarchy, site ID, and site type. This can be helpful in obtaining a comprehensive view of the network's physical structure.\n   \n2. **Site Pagination**: Users can specify an offset and limit to paginate through a large number of sites. This enables users to retrieve site information in manageable chunks, especially when dealing with a large number of sites.\n\n3. **Filtering by Site Type**: Users can filter the site information based on the type of site, such as area, building, or floor. This allows for targeted retrieval of specific types of sites within the network.\n\n4. **Assess Site Health**: By retrieving site information, users can assess the health of each site, including core, distribution and access network health, wired and wireless client health, as well as application health. This can aid in monitoring and maintaining the overall health of the network infrastructure.\n\nIn summary, this API query provides users with the capability to access detailed information about sites within the Cisco Catalyst Center, facilitating better management, monitoring, and optimization of the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/site\nREST operation:get\nREST API query parameters:\n- groupNameHierarchy: Site name hierarchy (E.g. Global/USA/CA). The query parameters should be used in the query. This query parameter is required. \n- id: Site Id. The query parameters should be used in the query. This query parameter is required. \n- type: Site type (Acceptable values: area, building, floor). The query parameters should be used in the query. This query parameter is required. \n- offset: Offset/starting index for pagination. The query parameters should be used in the query. This query parameter is required. \n- limit: Number of sites to be listed. Default and max supported value is 500. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v2/sp-profile/{spProfileName}\" with the DELETE operation is designed to delete a Service Provider Profile (QoS) within the Cisco Catalyst Center platform. This API call allows users to remove a specific QoS profile that has been previously configured in the system.\n\nFrom a user perspective, this query can be utilized when there is a need to clean up and remove any QoS-related information associated with a particular service provider profile. By providing the name of the SP profile to be deleted as the required parameter in the path, users can trigger the deletion process, effectively removing all QoS settings, configurations, and policies linked to that specific profile.\n\nFor example, if a network device is being decommissioned, replaced, or reconfigured, and there is a need to remove the QoS settings associated with it, users can make use of this DELETE operation to ensure that the system database remains accurate and up-to-date without any obsolete QoS configurations.\n\nBy using this query, users can maintain a clean and optimized environment by removing unnecessary QoS profiles and configurations, ultimately enhancing network performance and management within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/sp-profile/{spProfileName}\nREST operation:delete\nREST API query parameters:\n- spProfileName: SP profile name. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/lan-automation/status/{id}\" with the GET operation is designed to retrieve the LAN Automation session status based on a given LAN Automation session ID. This API query provides users with information on the progress and outcome of LAN Automation sessions.\n\nFrom a user perspective, this query can be utilized to track the status of LAN Automation sessions in real-time. By providing the LAN Automation session ID as a path parameter in the query, users can retrieve detailed information such as device configurations applied, any errors encountered, and the overall status of the automation process. This can help users monitor the success of LAN Automation activities, troubleshoot any issues that may arise, and ensure that the automation process is running smoothly.\n\nOverall, leveraging this API query enables users to gain insights into the LAN Automation process, facilitating better management of network resources and optimization of network operations within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation/status/{id}\nREST operation:get\nREST API query parameters:\n- id: LAN Automation session identifier.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/topology/vlan/vlan-names\" with the GET operation is used to retrieve VLAN details and specifically returns a list of VLAN names. This query is designed to provide users with information about the VLAN configurations in the network, enabling them to understand how network traffic is segmented based on VLANs.\n\nFrom a user perspective, this query can be beneficial in various scenarios such as network monitoring, troubleshooting, and configuration management. Users, especially network administrators, can utilize this query to:\n\n1. **View VLAN Configurations**: Users can fetch a list of VLAN names present in the network, allowing them to have an overview of the VLAN setup across different devices.\n\n2. **Troubleshooting**: In case of network issues related to VLAN configurations, users can use this query to check the VLAN names and verify if the correct VLANs are assigned to interfaces, potentially identifying misconfigurations.\n\n3. **Network Segmentation**: By examining the VLAN names returned by this query, users can ensure proper segmentation of network traffic based on VLANs, enhancing network security and efficiency.\n\n4. **Configuration Validation**: Users can validate the VLAN configurations on specific devices or segments of the network, ensuring that the intended VLAN setup is in place and functioning correctly.\n\nOverall, this query provides users with valuable insights into the VLAN structure of their network, aiding in network monitoring, troubleshooting, and ensuring proper network segmentation.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/topology/vlan/vlan-names\nREST operation:get\n</api-query>", "This specific REST API query path \"/dna/intent/api/v2/applications\" with the PUT operation is used to edit existing applications within the Cisco Catalyst Center platform. Users can modify the attributes of an application, such as its name and other relevant details, by sending a PUT request with the desired changes in the request body.\n\nFrom a user perspective, this query provides a convenient way to manage and organize applications based on specific requirements and preferences. Users can customize application attributes to align with their network policies and business objectives effectively. By utilizing this query, users can ensure that applications are configured and structured according to their needs, enhancing overall network performance and efficiency.\n\nUsers can leverage this query to make modifications to existing applications, update their attributes, and tailor them to suit evolving network requirements. This functionality empowers users to maintain an organized and optimized application environment within the Cisco Catalyst Center, enabling them to adapt their network configurations as needed.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/applications\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: content-type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v2/applications\" is used to retrieve information about applications within the Cisco Catalyst Center platform. From a user perspective, this query can be used to fetch details about specific applications by providing the name of the application as a query parameter. Users can also specify the starting point for the results using the offset parameter and limit the number of items returned on a single page using the limit parameter.\n\nBy utilizing this query, users can efficiently retrieve information about applications stored in the Catalyst Center platform, which can be beneficial for managing and configuring applications and their associated policies within the network. This query provides users with the ability to access and manipulate application data to align with their organization's business intent and network-specific configurations.\n\nOverall, this query empowers users to access detailed information about applications, enabling them to make informed decisions and optimizations within their network environment based on the retrieved data.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/applications\nREST operation:get\nREST API query parameters:\n- attributes: Attributes to retrieve, valid value application. The query parameters should be used in the query. The default value is 'application'. This query parameter is required. \n- name: The application name. The query parameters should be used in the query. This query parameter is required. \n- offset: The starting point or index from where the paginated results should begin.. The query parameters should be used in the query. The default value is '1'. This query parameter is required. \n- limit: The limit which is the maximum number of items to include in a single page of results, max value 500. The query parameters should be used in the query. The default value is '500'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v2/applications\" with a POST operation is used to create new applications within the Cisco Catalyst Center platform. This functionality allows users to define and customize applications based on their specific requirements and preferences.\n\nFrom a user perspective, this query can be utilized to create new custom applications tailored to the needs of an organization. By making a POST request to this query path and providing the necessary parameters in the request body, users can define new applications with unique attributes and policies. Users can specify details such as the name of the application and any other relevant information to create a customized application set that aligns with their network policies and business objectives.\n\nOverall, this query empowers users to efficiently manage and organize applications within the Cisco Catalyst Center, enabling them to create custom application sets that meet their organization's specific needs and enhance network functionality.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/applications\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: content-type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v2/global-credential/{id}\" with the REST operation \"delete\" is used to delete a specific global credential in the Cisco Catalyst Center environment. Global credentials play a crucial role in authenticating and authorizing the Catalyst Center to communicate with and manage network devices effectively. By deleting a global credential, users can remove outdated or unnecessary credential information from the system, which can help in maintaining security and reducing clutter within the credential management system.\n\nFrom a user perspective, this query can be useful in scenarios such as:\n\n1. **Credential Management**: Users can utilize this query to remove outdated or unused global credentials, ensuring that only necessary and up-to-date credentials are stored in the system. This helps in maintaining a clean and organized credential repository.\n\n2. **Security Enhancement**: By deleting unused or compromised credentials, users can enhance the security posture of the network environment. Eliminating unnecessary credentials reduces the attack surface and minimizes the risk of unauthorized access.\n\n3. **Troubleshooting**: In cases where a particular credential is causing issues or conflicts within the network infrastructure, users can delete the problematic credential using this query to troubleshoot and resolve authentication-related issues effectively.\n\n4. **Compliance and Governance**: Deleting obsolete credentials aligns with best practices for compliance and governance standards. By ensuring that only authorized and relevant credentials are retained, organizations can adhere to security policies and regulatory requirements.\n\nIn summary, the \"/dna/intent/api/v2/global-credential/{id}\" delete query provides users with a straightforward method to remove specific global credentials from the Cisco Catalyst Center, contributing to enhanced security, streamlined credential management, and efficient troubleshooting processes within the network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/global-credential/{id}\nREST operation:delete\nREST API query parameters:\n- id: Global Credential id\t. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "In the provided context, the REST API query path \"/dna/intent/api/v1/floors/{floorId}/planned-access-points/{plannedAccessPointUuid}\" with the operation \"delete\" is used to delete a specific planned access point from an existing floor map within the Cisco Catalyst Center environment. This API endpoint allows users to remove a planned access point along with its associated planned radio and antenna details by providing the unique identifier (UUID) of the access point to be deleted.\n\nFrom a user perspective, network administrators or IT personnel can utilize this API query to manage and maintain the planned access points within their wireless network infrastructure. By making a DELETE request to this endpoint with the necessary parameters (floorId and plannedAccessPointUuid) included in the path, users can effectively remove a particular planned access point from a specific floor.\n\nThis functionality can be beneficial in scenarios where a planned access point is no longer needed, requires replacement, or was configured incorrectly. By using this API query, users can ensure that the floor maps and wireless network configurations are up to date and accurately reflect the actual deployment of access points.\n\nOverall, the delete planned access point API query provides users with the capability to maintain the accuracy and efficiency of their wireless network infrastructure within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/floors/{floorId}/planned-access-points/{plannedAccessPointUuid}\nREST operation:delete\nREST API query parameters:\n- floorId: The instance UUID of the floor hierarchy element. The query parameters should be used in the path. This query parameter is required. \n- plannedAccessPointUuid: The instance UUID of the planned access point to delete. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/template-programmer/project/name/exportprojects\" is used to export projects based on specific criteria or project names within the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized when a user wants to download project information or data for backup, sharing, or further analysis. Users can specify the project names or criteria they want to export. \n\nFor example, a user might want to export all projects with a specific name pattern or export a single project by providing its exact name. By using this API call, users can retrieve detailed information about the projects, which may include templates, configurations, or other project-related data. \n\nThe exported projects can then be used for reference, documentation, or restoration purposes. This API query provides users with the flexibility to extract project data based on their specific needs, enhancing the overall management and organization of projects within the Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/project/name/exportprojects\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/system/api/v1/user/{userId}\" with the DELETE operation is used to delete a user from the Cisco DNA Center System. By sending a DELETE request to this endpoint with the specific user ID provided, users can initiate the deletion process, removing the user and all associated information from the Catalyst Center.\n\nFrom a user perspective, this query can be valuable in scenarios where a user account is no longer required, needs to be removed for security reasons, or if the user no longer needs access to the Cisco DNA Center System. Network administrators or system administrators can utilize this API to effectively manage user accounts within the system, ensuring that only authorized users have access to the platform. By providing the user ID in the request, users can securely delete user accounts, maintaining the integrity and security of the DNA Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/user/{userId}\nREST operation:delete\nREST API query parameters:\n- userId: The id of the user to be deleted. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/onboarding/pnp-settings/sacct/{domain}/vacct\" is used to retrieve a list of Virtual Accounts associated with a specified smart account domain in the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized by administrators or network operators who are managing a large number of devices across different Virtual Accounts. By providing the required parameter - the Smart Account Domain, users can initiate this API call to retrieve detailed information on the virtual accounts linked to the specified smart account. \n\nThis query empowers users to gain insights into the distribution of devices across Virtual Accounts, enabling them to effectively manage and monitor device provisioning operations within their organization. It facilitates the identification of any synchronization issues that may have occurred during the device onboarding process, allowing users to troubleshoot and ensure that all devices are correctly provisioned within their respective Virtual Accounts. \n\nOverall, this query streamlines the process of Virtual Account management within the Catalyst Center environment, providing users with valuable information to optimize device provisioning and synchronization across different Virtual Accounts.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-settings/sacct/{domain}/vacct\nREST operation:get\nREST API query parameters:\n- domain: Smart Account Domain. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path, \"/dna/intent/api/v1/event/subscription/syslog\", is used to update the Syslog Event Subscription endpoint for a list of registered events within the Cisco Catalyst Center environment. This endpoint allows users to modify the Syslog subscription configurations, such as adding new destinations, updating existing ones, or making any necessary changes to the Syslog event monitoring setup.\n\nFrom a user perspective, utilizing this query can be beneficial in several ways:\n1. **Managing Syslog Configurations**: Users can update and maintain their Syslog configurations by modifying the list of registered events, ensuring that logs are being sent to the correct destinations.\n   \n2. **Monitoring Syslog Subscriptions**: Users can review the current Syslog configurations to monitor the events being subscribed to, assess the coverage and scope of event monitoring strategies, and identify any areas that may require additional subscriptions for comprehensive visibility into critical events.\n\n3. **Customizing Event Subscriptions**: Users can tailor their event subscriptions based on specific events they want to monitor and the actions they want to take in response to those events. This customization enables users to ensure comprehensive visibility into critical events within their network infrastructure.\n\n4. **Troubleshooting and Enhancing Visibility**: By updating Syslog subscriptions through this API endpoint, users can troubleshoot any issues related to event monitoring and enhance their network visibility by tracking the number of event subscriptions associated with specific event IDs. \n\nIn summary, this API query empowers users to efficiently manage and update their Syslog event subscriptions, ensuring that they have the necessary visibility and control over critical events within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription/syslog\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/event/subscription/syslog\" is specifically used to create a Syslog Event Subscription within the Cisco Catalyst Center environment. This endpoint allows users to update the Syslog subscription endpoint for a list of registered events. By utilizing this query, users can modify their Syslog subscription configurations, such as adding new destinations, updating existing ones, or making any necessary changes to their Syslog event monitoring setup.\n\nFrom a user perspective, this query can be beneficial in several ways:\n1. **Managing Syslog Configurations**: Users can update and maintain their Syslog configurations by modifying the list of registered events, ensuring that logs are being sent to the correct destinations.\n2. **Monitoring Syslog Subscriptions**: Users can review the current Syslog configurations to monitor the events being subscribed to, assess the coverage and scope of event monitoring strategies, and identify any areas that may require additional subscriptions for comprehensive visibility into critical events.\n3. **Customizing Event Subscriptions**: Users can tailor their event subscriptions based on specific events they want to monitor and the actions they want to take in response to those events. This customization enables users to ensure comprehensive visibility into critical events within their network infrastructure.\n4. **Troubleshooting and Enhancing Visibility**: By updating Syslog subscriptions through this API endpoint, users can troubleshoot any issues related to event monitoring and enhance their network visibility by tracking the number of event subscriptions associated with specific event IDs.\n\nIn summary, this API query empowers users to efficiently manage and update their Syslog event subscriptions, ensuring that they have the necessary visibility and control over critical events within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription/syslog\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/event/subscription/syslog\" is used to retrieve Syslog Event Subscriptions in the Cisco Catalyst Center environment. This query allows users to get a list of Syslog subscriptions based on provided parameters such as eventIds, offset, limit, sortBy, order, domain, subDomain, category, type, and name.\n\nFrom a user perspective, this query can be used in various scenarios:\n1. **Managing Syslog Configurations**: Users can update and maintain their Syslog configurations by modifying the list of registered events, ensuring that logs are being sent to the correct destinations.\n   \n2. **Monitoring Syslog Subscriptions**: Users can review the current Syslog configurations to monitor the events being subscribed to, assess the coverage and scope of event monitoring strategies, and identify any areas that may require additional subscriptions for comprehensive visibility into critical events.\n\n3. **Customizing Event Subscriptions**: Users can tailor their event subscriptions based on specific events they want to monitor and the actions they want to take in response to those events. This customization enables users to ensure comprehensive visibility into critical events within their network infrastructure.\n\n4. **Troubleshooting and Enhancing Visibility**: By updating Syslog subscriptions through this API endpoint, users can troubleshoot any issues related to event monitoring and enhance their network visibility by tracking the number of event subscriptions associated with specific event IDs.\n\nIn summary, this API query empowers users to efficiently manage and update their Syslog event subscriptions, ensuring that they have the necessary visibility and control over critical events within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription/syslog\nREST operation:get\nREST API query parameters:\n- eventIds: List of subscriptions related to the respective eventIds (Comma separated event ids). The query parameters should be used in the query. This query parameter is required. \n- offset: The number of Subscriptions's to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of Subscriptions's to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n- domain: List of subscriptions related to the respective domain. The query parameters should be used in the query. This query parameter is required. \n- subDomain: List of subscriptions related to the respective sub-domain. The query parameters should be used in the query. This query parameter is required. \n- category: List of subscriptions related to the respective category. The query parameters should be used in the query. This query parameter is required. \n- type: List of subscriptions related to the respective type. The query parameters should be used in the query. This query parameter is required. \n- name: List of subscriptions related to the respective name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "From the provided context, the specific REST API query path \"/dna/system/api/v1/user\" with the POST operation is used to add a new user to the Cisco DNA Center System. This endpoint allows network administrators or system administrators to create user accounts within the system, granting access to authorized individuals.\n\nFrom a user perspective, this query is beneficial for administrators or IT personnel responsible for managing user accounts in the Cisco DNA Center System. By sending a POST request to this endpoint with the required parameters in the request body (such as user details and permissions), users can efficiently add new users to the system. This capability enables organizations to control access to the platform, ensuring that only authorized individuals have the necessary permissions to interact with the Cisco Catalyst Center.\n\nOverall, this API query enhances user management capabilities within the Cisco DNA Center System, allowing users to create and manage user accounts effectively to maintain the security and integrity of the platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/user\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/system/api/v1/user\" with the GET operation is used to retrieve information about all users within the Cisco DNA Center System. This query provides a list of users who have accounts in the system, along with their associated details.\n\nFrom a user perspective, this API query can be valuable for network administrators or system administrators who need to manage user accounts within the Cisco DNA Center System. By querying this path, users can view all existing user accounts, their roles, permissions, and other relevant information. This can help administrators in tasks such as user access management, monitoring user activity, and ensuring proper user authentication and authorization within the system.\n\nUsers can utilize this query to obtain a comprehensive overview of all users registered in the Cisco DNA Center, facilitating user account management and ensuring secure access control. This information can be crucial for maintaining the integrity and security of the system by allowing administrators to track user accounts and ensure that only authorized individuals have access to the platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/user\nREST operation:get\nREST API query parameters:\n- invokeSource: The source that invokes this API. The value of this query parameter must be set to \"external\".. The query parameters should be used in the query. This query parameter is required. \n- authSource: The source that authenticates the user. The value of this query parameter can be set to \"internal\" or \"external\". If not provided, then all users will be returned in the response.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/system/api/v1/user\" with the PUT operation is used to update a user in the Cisco DNA Center System. This API endpoint allows administrators to modify existing user accounts within the system, for example, changing user details, permissions, or roles.\n\nFrom a user perspective, this query can be beneficial for administrators or IT personnel responsible for managing user accounts in the Cisco DNA Center System. Users can utilize this API to update user information, adjust permissions, or modify roles as needed. By sending a PUT request to this endpoint with the required parameters in the request body, users can efficiently update user accounts within the system, ensuring that user information is accurate and up to date.\n\nOverall, this API query enhances the user management capabilities within the Cisco DNA Center System, enabling users to effectively manage and update user accounts to maintain a secure and well-organized environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/user\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The given query path \"/dna/intent/api/v1/network-device/{deviceId}/stack\" with the REST operation \"get\" is used to retrieve stack details for a specific device in the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query can be highly beneficial for network administrators and operators who need to manage and troubleshoot network devices within their infrastructure. By providing the device ID as a parameter in the query path, users can retrieve comprehensive information about the stacking configuration of the specified device. This information can include details such as the stacking protocol being used, member devices in the stack, stack master information, stack topology, and any relevant status or health indicators related to the stack.\n\nBy leveraging this query, users can gain insights into how the devices are interconnected and organized within a stack configuration. This can be crucial for understanding the overall network architecture, ensuring redundancy and high availability, and troubleshooting any stack-related issues effectively. Additionally, having access to detailed stack information can aid in capacity planning, maintenance activities, and optimizing the performance of the stacked devices in the network.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceId}/stack\nREST operation:get\nREST API query parameters:\n- deviceId: Device ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/interface/ospf\" with the GET operation is specifically designed to fetch OSPF (Open Shortest Path First) interfaces. When this query is executed, it returns a list of interfaces that have OSPF enabled on them.\n\nFrom a user perspective, this query can be utilized to gather information about the interfaces in a network device that are configured to use OSPF routing protocol. This can be particularly useful for network administrators who want to retrieve a specific subset of interfaces that are using OSPF for routing purposes. By making this API call, users can easily identify which interfaces have OSPF enabled, allowing them to manage and troubleshoot OSPF configurations more effectively.\n\nFor example, a network administrator may use this query to quickly retrieve a list of OSPF-enabled interfaces on a device for monitoring, troubleshooting, or making configuration changes specific to OSPF routing. By obtaining this information, users can gain insights into the OSPF setup on their network devices and ensure proper routing functionality within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/ospf\nREST operation:get\n</api-query>", "The provided REST API query path \"/dna/intent/api/v2/networkDevices/{deviceId}/interfaces/query\" with the POST operation is designed to retrieve Interface Stats for a specific network device. This query allows users to obtain detailed statistics related to the interfaces of the given device such as traffic data, error rates, packet loss, etc.\n\nFrom a user perspective, this query can be very useful for network administrators and engineers who need to monitor the performance and status of individual interfaces on a network device. By specifying the deviceId of the target device in the path parameter and providing the necessary request body with required query parameters, users can retrieve comprehensive interface statistics without the need to manually query each interface separately.\n\nUsers can leverage this API call to gain insights into the network device's interface performance, identify potential issues or bottlenecks, and make informed decisions for optimizing network operations. This information is valuable for troubleshooting, capacity planning, performance monitoring, and overall network management.\n\nOverall, this API query empowers users to efficiently gather interface statistics for a specific device, facilitating better network monitoring and management practices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/networkDevices/{deviceId}/interfaces/query\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- deviceId: Network Device Id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/qos-device-interface-info-count\" with the GET operation is used to retrieve the number of existing QoS device interface information groups by network device ID within the Cisco Catalyst Center platform. This query provides users with a way to view the distribution and quantity of QoS configurations, policies, and settings applied to interfaces of different network devices.\n\nFrom a user perspective, this query can be valuable for network administrators and engineers who need to have an overview of the QoS configurations and settings across their network infrastructure. By utilizing this query, users can quickly assess the number of QoS device interface information entries associated with each network device, helping them understand the QoS implementation across the network.\n\nUsers can leverage this query to identify potential areas for QoS optimization, ensure quality of service for specific applications or services by analyzing the distribution of QoS settings, and efficiently manage bandwidth allocation by having insights into the QoS configurations applied to various network devices. Additionally, this information can aid in troubleshooting QoS-related issues, tracking changes in QoS settings over time, and making informed decisions for improving network performance and user experience.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/qos-device-interface-info-count\nREST operation:get\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/events/count\" is used to retrieve the count of registered events based on the provided eventIds or tags. Users can specify one or more eventIds or tags to filter the events they want to receive information on. This query is essential for users who want to track the number of subscriptions set up for different types of events or notifications within the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query can be beneficial in various scenarios:\n\n1. **Monitoring Event Subscriptions**: By providing specific eventIds, users can obtain a count of how many event subscriptions are associated with those eventIds. This information can help users track the number of subscriptions set up for different types of events, enabling them to understand the level of monitoring and alerting in place for various aspects of the Catalyst Center environment.\n\n2. **Filtering and Analyzing Events**: Users can use parameters like eventIds, tags, sortBy, and order to filter and sort events based on specific criteria. For example, users can filter events by category, severity, domain, or subDomain to focus on notifications that are relevant to their operations. The count provided by this query can help users assess the coverage and scope of their event monitoring strategy within the Catalyst Center platform.\n\nBy utilizing this API query, users can gain insights into the distribution and management of event subscriptions, allowing them to tailor their monitoring and alerting strategies effectively within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/events/count\nREST operation:get\nREST API query parameters:\n- eventId: The registered EventId should be provided. The query parameters should be used in the query. This query parameter is required. \n- tags: The registered Tags should be provided. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/onboarding/pnp-workflow/{id}\", with the GET operation, is used to retrieve a specific Plug and Play (PnP) workflow within the Cisco Catalyst Center environment. By providing the unique ID of the desired workflow as a query parameter, users can fetch information such as configurations, settings, and any other details associated with that particular workflow.\n\nFrom a user perspective, this query can be beneficial in scenarios where a user needs to reference or view a specific PnP workflow that has been set up within the Cisco Catalyst Center platform. It allows users to access detailed information about the workflow, aiding in troubleshooting, monitoring, or simply understanding the setup of their PnP workflows more effectively. This query provides a convenient way for users to retrieve specific workflow details, enhancing their capability to manage and maintain the PnP workflows within the system efficiently.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-workflow/count\nREST operation:get\nREST API query parameters:\n- name: Workflow Name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/network-device/user-defined-field/{id}\" with the DELETE operation is used to delete an existing Global User-Defined-Field in the Cisco Catalyst Center. By specifying the User-Defined-Field ID in the request, users can trigger the deletion process, removing the specific User-Defined-Field and all associated information from the Catalyst Center.\n\nFrom a user perspective, this query can be valuable in scenarios where a User-Defined-Field is no longer required, needs to be removed for organizational reasons, or if there are changes in the network device configurations that require the deletion of certain User-Defined-Fields. By providing the required User-Defined-Field ID in the request, users can securely delete the User-Defined-Field, ensuring that the Catalyst Center's configuration remains accurate and up-to-date.\n\nOverall, this API query provides users with the capability to manage and maintain the User-Defined-Fields effectively within the Catalyst Center environment, enabling them to streamline configurations and optimize the network setup accordingly.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/user-defined-field/{id}\nREST operation:delete\nREST API query parameters:\n- id: UDF id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/network-device/user-defined-field/{id}\" with the PUT operation is used to update an existing Global User-Defined-Field in the Cisco Catalyst Center. By specifying the User-Defined-Field ID in the request, users can trigger the update process, modifying the specific User-Defined-Field with new information or attributes while retaining its identity within the Catalyst Center.\n\nFrom a user perspective, this query is valuable when there is a need to modify the attributes or details of an existing User-Defined-Field. Users can use this API to update the User-Defined-Field with new values, such as changing the name, type, or other characteristics of the field. This functionality enables users to adapt the custom fields to reflect changes in their organization's network setup or operational requirements effectively.\n\nOverall, this API query empowers users to manage and maintain the User-Defined-Fields efficiently within the Catalyst Center, ensuring that the network device information is accurately customized to suit their specific needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/user-defined-field/{id}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- id: UDF id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/network-health\" in the Cisco Catalyst Center is used to retrieve Overall Network Health information. This query provides information about the health status of the network infrastructure categorized by different device categories such as Access, Distribution, Core, Router, and Wireless at a specific point in time.\n\nFrom a user perspective, this query can be used to monitor the overall health and performance of different device categories within the network. Users can specify a timestamp in UTC format to retrieve detailed information regarding the health status of each device category at a specific moment. By analyzing the data returned from this query, users can identify any issues or anomalies in the network health, enabling them to take proactive measures to ensure smooth network operations.\n\nThis query is beneficial for network administrators and IT professionals who need to have a comprehensive understanding of the health status of various device categories within their network infrastructure. It allows users to monitor, analyze, and optimize the performance of the network by providing valuable insights into the health of different device categories.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-health\nREST operation:get\nREST API query parameters:\n- timestamp: UTC timestamp of network health data in milliseconds. The query parameters should be used in the query. This query parameter is not required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/global-credential/{globalCredentialId}\" with the PUT operation is used to update global credentials in the Cisco Catalyst Center environment. Global credentials play a vital role in authenticating and authorizing the Catalyst Center to communicate with and manage network devices effectively. This query allows users to modify credential settings such as usernames, passwords, enable passwords, authentication types, etc., on a global level.\n\nFrom a user perspective, this query can be highly beneficial:\n\n1. **Updating Credential Information**: Users can utilize this query to update and manage global credential details. This can be especially useful when there is a need to change or rotate credentials for improved security.\n\n2. **Managing Device Authentication**: By updating global credentials, users can ensure that all devices within the network infrastructure are authenticated correctly, enhancing network security.\n\n3. **Troubleshooting and Maintenance**: Users can use this query to troubleshoot any credential-related issues that may be affecting device communication. By updating credentials as needed, users can maintain smooth network operations.\n\n4. **Automation and Integration**: For automation purposes, this query can be integrated into scripts or applications to update global credentials programmatically. This can streamline credential management processes and ensure consistency across the network environment.\n\nIn summary, the PUT query for global credentials provides users with the capability to update, manage, and maintain credential information crucial for secure and efficient device communication within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/{globalCredentialId}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- globalCredentialId: Global credential Uuid. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/global-credential/{globalCredentialId}\" with the REST operation \"delete\" is used to delete a specific global credential in the Cisco Catalyst Center environment. Global credentials are crucial for authenticating and authorizing the Catalyst Center to communicate with and manage network devices effectively.\n\nFrom a user perspective, this query provides a straightforward method to remove outdated or unnecessary credential information from the system. By deleting global credentials, users can enhance security, streamline credential management, and troubleshoot authentication-related issues effectively within the network environment.\n\nUsers can utilize this query in scenarios such as:\n\n1. **Credential Management**: Removing outdated or unused global credentials to ensure that only necessary and up-to-date credentials are stored in the system, maintaining a clean and organized credential repository.\n   \n2. **Security Enhancement**: Deleting unused or compromised credentials to enhance the security posture of the network environment by reducing the attack surface and minimizing the risk of unauthorized access.\n\n3. **Troubleshooting**: Deleting problematic credentials causing issues or conflicts within the network infrastructure to troubleshoot and resolve authentication-related issues effectively.\n   \n4. **Compliance and Governance**: Aligning with best practices for compliance and governance standards by deleting obsolete credentials.\n\nIn summary, this query assists users in maintaining security, managing credentials efficiently, and ensuring that only authorized and relevant credentials are retained within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/{globalCredentialId}\nREST operation:delete\nREST API query parameters:\n- globalCredentialId: ID of global-credential. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v2/application-policy-application-set-count\" in the Cisco Catalyst Center is used to retrieve the count of all existing application sets. This query provides users with information on the total number of application sets that have been created within the Catalyst Center environment.\n\nFrom a user perspective, this query can be valuable for monitoring and managing the application sets configured within the Cisco Catalyst Center platform. By making a GET request to this endpoint with the required query parameter \"scalableGroupType\" set to 'APPLICATION_GROUP', users can retrieve a numerical value indicating the total count of application sets.\n\nUsers can utilize this information to track the number of application sets in their environment, manage the configurations of different application sets, analyze the distribution of applications across various sets, and evaluate the overall complexity of application policies within the network infrastructure.\n\nIn summary, this API query enables users to efficiently gather data on the count of application sets, which can be essential for maintaining and optimizing application policies in the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/application-policy-application-set-count\nREST operation:get\nREST API query parameters:\n- scalableGroupType: Scalable group type to retrieve, valid value APPLICATION_GROUP. The query parameters should be used in the query. The default value is 'APPLICATION_GROUP'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/system/api/v1/roles\" with the GET operation is used to retrieve information about all the roles defined in the Cisco DNA Center System. Roles in the Cisco Catalyst Center play a crucial role in defining the permissions and access levels for different users within the system. By querying this API endpoint, users can access a list of all existing roles along with their associated settings and permissions.\n\nFrom a user perspective, this query is valuable for system administrators or IT personnel who are responsible for managing user roles and access control within the Cisco DNA Center System. By using this API query, users can gain insights into the available roles, understand the specific permissions assigned to each role, and ensure that the access levels are appropriately configured to meet their organization's security and operational requirements.\n\nOverall, this API query enhances role management capabilities within the Cisco DNA Center System, allowing users to effectively monitor and configure role-based access control settings to maintain a secure and well-organized system environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/roles\nREST operation:get\nREST API query parameters:\n- invokeSource: The source that invokes this API. The value of this header must be set to \"external\".. The query parameters should be used in the header. The default value is 'external'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/flow-analysis/{flowAnalysisId}\" is specifically used to retrieve the result of a previously requested flow analysis by its unique Flow Analysis ID. This query helps users fetch detailed information about a specific flow analysis that has been initiated in the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized to follow up on a previously requested flow analysis and obtain specific details and outcomes. Users can use this query to:\n\n1. Retrieve Detailed Analysis: Users can obtain detailed information about a specific flow analysis by providing its Flow Analysis ID. This can include data such as source IP address, destination IP address, path trace results, status, and more.\n\n2. Monitor Progress: Users can monitor the progress of a flow analysis and check if the analysis is completed or still ongoing. By querying with the Flow Analysis ID, users can track the status of the analysis.\n\n3. Troubleshooting: This query can be used for troubleshooting network issues by analyzing the results of the flow analysis. Users can identify network behavior, performance issues, and potential bottlenecks through the detailed information provided by the query.\n\n4. Historical Data Analysis: Users can access historical data from previous flow analyses stored in the system by providing the respective Flow Analysis ID. This can help in comparing different network behaviors over time and making informed decisions for network optimization.\n\nIn summary, this specific REST API query path allows users to retrieve and analyze the results of a previously requested flow analysis in the Cisco Catalyst Center, providing valuable insights for network management and troubleshooting purposes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/flow-analysis/{flowAnalysisId}\nREST operation:get\nREST API query parameters:\n- flowAnalysisId: Flow analysis request id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/flow-analysis/{flowAnalysisId}\" is specifically used to delete a flow analysis request by its unique Flow Analysis ID. This query allows users to remove a specific flow analysis that was previously initiated in the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be used for the following purposes:\n1. Clean Up: Users can delete unwanted or completed flow analysis requests to declutter the system and manage resources efficiently.\n2. Error Correction: In case a flow analysis request was initiated incorrectly or needs to be re-done, users can delete the existing request using this query and start a fresh analysis.\n3. Resource Management: Deleting unnecessary flow analysis requests can help in optimizing storage space and maintaining a clean database of only relevant and current analysis records.\n\nOverall, the delete operation using this API query path provides users with the capability to manage their flow analysis requests effectively by removing unwanted or no longer needed analyses from the system.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/flow-analysis/{flowAnalysisId}\nREST operation:delete\nREST API query parameters:\n- flowAnalysisId: Flow analysis request id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The \"/dna/system/api/v1/event/artifact\" query path in the Cisco Catalyst Center REST API is used to retrieve a list of artifacts based on the provided query parameters. These artifacts are related to events and can include information such as event name, description, event ID, type, and category.\n\nFrom a user perspective, this query can be utilized for various purposes such as:\n\n1. Monitoring Network Events: By specifying the eventIds parameter, users can focus on monitoring specific events that are critical to their network operations. This allows users to stay updated on important events happening within their network environment.\n\n2. Evaluating Event Coverage: The offset and limit parameters enable users to control the number of artifacts displayed in the result set. This feature helps users evaluate the coverage and scope of their event monitoring strategy within the Catalyst Center platform.\n\n3. Analyzing Event Subscriptions: The sortBy and order parameters allow users to sort the artifacts based on specific fields. This functionality can help users analyze their event subscriptions effectively and understand the order in which artifacts are displayed.\n\nOverall, this query provides users with a way to access and manage artifacts related to events within the Catalyst Center platform, facilitating better monitoring, analysis, and decision-making processes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/event/artifact\nREST operation:get\nREST API query parameters:\n- eventIds: List of eventIds. The query parameters should be used in the query. This query parameter is required. \n- tags: Tags defined. The query parameters should be used in the query. This query parameter is required. \n- offset: Record start offset. The query parameters should be used in the query. This query parameter is required. \n- limit: # of records to return in result set. The query parameters should be used in the query. This query parameter is required. \n- sortBy: Sort by field. The query parameters should be used in the query. This query parameter is required. \n- order: sorting order (asc/desc). The query parameters should be used in the query. This query parameter is required. \n- search: findd matches in name, description, eventId, type, category. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-settings\" is used to retrieve Plug and Play (PnP) global settings within the Cisco Catalyst Center platform. This query allows users to access and manage PnP settings at a global level, providing essential configuration options for network device onboarding and provisioning processes.\n\nFrom a user perspective, this query enables users to view and modify global PnP settings such as Netconf credentials, authentication details, and server profiles. By sending a GET request to this endpoint, users can retrieve the current global PnP settings for their network devices. This information can be crucial for network administrators and IT professionals to ensure secure communication and efficient provisioning of devices within the Catalyst Center.\n\nUsers can utilize this query to update and customize PnP settings based on their network requirements. For example, they can adjust authentication credentials, server profiles, or other configurations to align with their organization's security policies and operational needs. By understanding and managing these global settings, users can streamline the device onboarding process, troubleshoot synchronization issues, and maintain the accuracy of device data stored in the PnP database.\n\nOverall, this API query provides a convenient way for users to access and manage essential PnP settings globally, facilitating smoother device provisioning and network management within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-settings\nREST operation:get\n</api-query>", "This API query path, \"/dna/intent/api/v1/onboarding/pnp-settings\", is used to retrieve and update Plug and Play (PnP) global settings within the Cisco Catalyst Center platform. It allows users to access and manage PnP settings at a global level, providing essential configuration options for network device onboarding and provisioning processes.\n\nFrom a user perspective, this query enables users to view the current global PnP settings such as Netconf credentials, authentication details, and server profiles. Users can then modify these settings based on their network requirements. For example, they can adjust authentication credentials, server profiles, or other configurations to align with their organization's security policies and operational needs.\n\nBy sending a PUT request with the updated configurations or parameters in the request body, users can efficiently modify the global PnP settings, ensuring that the PnP workflow aligns with the current network requirements and operational needs. This capability not only saves time but also enhances the flexibility and adaptability of PnP workflows within the Cisco Catalyst Center environment.\n\nOverall, this API query provides users with a convenient way to manage essential PnP settings globally, facilitating smoother device provisioning and network management within the Cisco Catalyst Center environment. It allows users to streamline the device onboarding process, troubleshoot synchronization issues, and maintain the accuracy of device data stored in the PnP database.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-settings\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/tag/count\" with a GET request operation is used to retrieve the count of tags based on specific criteria within the Cisco Catalyst Center. Tags are essential for categorizing and organizing network elements like devices based on attributes or criteria, enabling efficient network management.\n\nFrom a user perspective, this query is valuable for various purposes:\n1. **Tag Management**: Users can retrieve the count of tags matching specific criteria, helping in organizing and categorizing network elements effectively.\n2. **Insights**: By knowing the count of tags meeting certain attributes, users gain insights into the distribution of network elements based on those criteria.\n3. **Network Planning**: Understanding the tag count can aid in planning network changes, monitoring tag growth, and assessing the impact of changes on specific groups of devices.\n\nBy leveraging the \"/dna/intent/api/v1/tag/count\" query, users can conveniently access tag count information, allowing for better network organization and management within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag/count\nREST operation:get\nREST API query parameters:\n- name: tagName. The query parameters should be used in the query. This query parameter is required. \n- nameSpace: nameSpace. The query parameters should be used in the query. This query parameter is required. \n- attributeName: attributeName. The query parameters should be used in the query. This query parameter is required. \n- size: size in kilobytes(KB). The query parameters should be used in the query. This query parameter is required. \n- systemTag: systemTag. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path (\"/dna/intent/api/v2/service-provider\") with the PUT operation is used to update the Service Provider Profile (QoS) within the Cisco Catalyst Center platform. This query allows users to modify and adjust the settings, configurations, and policies related to the Quality of Service (QoS) provided by a specific service provider.\n\nFrom a user perspective, this query can be utilized when there is a need to update or fine-tune the QoS settings associated with a particular service provider profile. For example, if there are changes in the network requirements, application policies, or QoS priorities, users can send a PUT request to this query path and include the necessary parameters in the request body to update the QoS settings accordingly. By using this query, users can ensure that the network performance is optimized, and the QoS configurations are aligned with their specific business needs.\n\nOverall, this API query provides users with the capability to efficiently manage and customize the QoS settings for service provider profiles within the Cisco Catalyst Center, allowing them to adapt and optimize network performance based on evolving requirements and configurations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/service-provider\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path (\"/dna/intent/api/v2/service-provider\") with the POST operation is used to create a Service Provider Profile (QoS) within the Cisco Catalyst Center platform. This query allows users to define and set up QoS settings specifically tailored for service providers, enabling them to adapt and optimize network performance based on evolving requirements and configurations.\n\nFrom a user perspective, this query can be utilized when there is a need to create a new Service Provider Profile with customized QoS settings for a specific service provider within the Catalyst Center platform. Users can send a POST request to this query path and include the necessary parameters in the request body to define the QoS parameters associated with the service provider.\n\nBy using this query, users can efficiently establish QoS profiles that align with the service provider's requirements, ensuring optimal network performance and resource allocation based on the specific needs of that provider. Overall, this API query empowers users to configure and manage QoS settings tailored for service providers effectively within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/service-provider\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v2/service-provider\" with the GET operation is used to retrieve Service Provider details related to Quality of Service (QoS) settings within the Cisco Catalyst Center platform. This query allows users to access information regarding the QoS configurations and profiles specifically tailored for service providers.\n\nFrom a user perspective, this query can be beneficial when there is a need to retrieve and review the QoS settings established for service providers within the Catalyst Center platform. Users can utilize this query to gather insights into the QoS parameters defined for different service providers, enabling them to understand how network performance and resource allocation are optimized to meet the requirements and configurations of each service provider.\n\nBy using this query, users can access detailed information about the QoS profiles configured for service providers, ensuring that the network is tailored to deliver the necessary quality of service for each provider's specific needs. This information can further aid users in managing and troubleshooting QoS-related issues, monitoring changes in QoS settings over time, and making informed decisions to enhance network performance and user experience within a service provider context.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/service-provider\nREST operation:get\n</api-query>", "The given query path \"/dna/intent/api/v1/event/email-config\" with the REST operation \"PUT\" is designed for updating the email configuration within the Cisco Catalyst Center. This API endpoint enables users to modify the settings related to email notifications, specifically focusing on the destination where email notifications are sent.\n\nFrom a user perspective, this query can be utilized to customize and manage email notification settings within the Catalyst Center platform. By sending a PUT request to this path and providing the necessary parameters in the request body, users can update the email destination details. For example, users can specify a new email address or SMTP server where notifications should be sent. This flexibility allows users to tailor the email notification configuration according to their specific requirements.\n\nOverall, this API query empowers users to efficiently manage and control the email notification system within the Cisco Catalyst Center, ensuring that critical events and alerts are appropriately communicated through email notifications.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/email-config\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/event/email-config\" with the REST operation \"POST\" is used to create an Email Destination configuration within the Cisco Catalyst Center environment. This API endpoint allows users to specify and configure the email address or SMTP server where notifications should be sent. By sending a POST request with the necessary parameters in the request body, users can create new email destination settings tailored to their specific requirements.\n\nFrom a user perspective, this query can be used in the following ways:\n1. **Setting up Email Destinations:** Users can utilize this query to define new email destinations for receiving notifications within the Catalyst Center environment. By specifying the email addresses or SMTP servers, users can ensure that critical events and alerts are sent to the appropriate destinations.\n   \n2. **Customizing Email Notification Configuration:** Users can tailor the email notification configuration by creating new email destinations using this query. This customization feature enables users to control where notifications are sent, ensuring that the right individuals or teams receive timely alerts.\n\n3. **Enhancing Notification Management:** By utilizing this query to create email destinations, users can efficiently manage and control the email notification system in the Catalyst Center platform. This capability empowers users to streamline the handling of notifications and ensure that important messages reach the intended recipients.\n\nOverall, the \"/dna/intent/api/v1/event/email-config\" query provides users with the flexibility to customize their email notification settings, improving the overall management of critical event alerts within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/email-config\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/event/email-config\" with the REST operation \"GET\" is used to retrieve Email Destination configuration details within the Cisco Catalyst Center environment. This API endpoint allows users to fetch information about the email addresses or SMTP servers configured to receive notifications.\n\nFrom a user perspective, this query can be utilized in the following ways:\n\n1. **Viewing Email Destination Configuration:** Users can access the current email destination settings to understand where notifications and alerts are being sent.\n   \n2. **Verification and Monitoring:** Users can use this query to verify the existing email destinations and ensure that notifications are being sent to the correct recipients.\n   \n3. **Troubleshooting:** In case of issues with email notifications, users can retrieve the configured email destination details to troubleshoot and identify any misconfigurations.\n   \n4. **Integration and Reporting:** By retrieving email destination details, users can integrate this information into their reporting systems to keep track of notification recipients and ensure proper communication channels.\n\nOverall, this query provides users with visibility and control over the email notification configuration in the Cisco Catalyst Center, enabling efficient management and monitoring of critical events and alerts.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/email-config\nREST operation:get\n</api-query>", "This query path \"/dna/intent/api/v1/compliance/{deviceUuid}\" in the Cisco Catalyst Center is used to retrieve the compliance status of a specific network device identified by its unique device UUID. By providing the device UUID as a query parameter, users can access information about whether the device is compliant or non-compliant with predefined compliance standards.\n\nFrom a user perspective, this query is valuable for network administrators and IT professionals responsible for ensuring that their network devices meet compliance requirements. Users can utilize this query to monitor the compliance status of individual devices, identify any non-compliant devices that may need attention, track ongoing compliance assessments, and gain insights into the overall compliance activity within their network infrastructure.\n\nBy integrating this query into their compliance monitoring or reporting systems, users can effectively manage compliance assessments and ensure that their network devices adhere to the required standards. This API query provides a convenient way to maintain the compliance posture of the network infrastructure within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/compliance/{deviceUuid}\nREST operation:get\nREST API query parameters:\n- deviceUuid: Device Id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/functional-capability/{id}\" with the GET operation is designed for retrieving functional capability information based on the specified Functional Capability UUID (id). \n\nFrom a user perspective, this query path allows users to access detailed information about the functional capabilities associated with a specific network device within the Cisco Catalyst Center environment. By providing the unique Functional Capability UUID as a parameter in the query, users can retrieve specific details regarding the capabilities and features of the network device. This information can include aspects such as supported protocols, services, interfaces, and other functional attributes.\n\nUsers can leverage this query to gain insights into the capabilities of individual network devices, which can be valuable for network administrators and operators when planning and managing network configurations. Understanding the functional capabilities of devices can assist in optimizing network performance, ensuring compatibility with other devices or services, and making informed decisions about network design and deployment strategies.\n\nOverall, this query path enables users to retrieve essential information about the functional capabilities of network devices, empowering them to effectively manage and utilize their network infrastructure within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/functional-capability/{id}\nREST operation:get\nREST API query parameters:\n- id: Functional Capability UUID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/network-device/{id}/brief\", is used to retrieve a brief summary of device information for a specific device ID within the Cisco Catalyst Center. When this query is executed, it returns essential details about the device such as the hostname and management IP address.\n\nFrom a user perspective, this query can be valuable for network administrators, operators, and IT personnel who need to access quick insights into specific network devices within their infrastructure. By providing the device ID as a parameter in the query path, users can easily fetch important details about the targeted device, helping in tasks such as monitoring, troubleshooting, and configuration management.\n\nUsers can utilize this query to efficiently gather information about individual network devices, aiding in tasks like inventory management, network monitoring, and device-specific troubleshooting. It provides a convenient way to access crucial device details in a summarized format, allowing users to quickly grasp key information about a particular device without the need for extensive data retrieval.\n\nOverall, this query enhances network management efficiency by providing a concise overview of device information, facilitating better decision-making, and enabling users to perform targeted actions related to device management and monitoring within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{id}/brief\nREST operation:get\nREST API query parameters:\n- id: Device ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/network-device/{id}/collection-schedule\", with the GET operation is used to retrieve the polling interval for a specific network device identified by its unique device ID.\n\nFrom a user perspective, this query can be extremely useful for network administrators and operators. By providing the device ID as a parameter in the query path, users can easily retrieve crucial information about the polling interval set for a particular network device. This information is essential for monitoring the device's status, collecting data at regular intervals, and ensuring timely updates on device health and performance.\n\nUsers can leverage this query to effectively manage and optimize network resources by adjusting the polling interval based on the specific requirements of each device. For example, they can set different polling intervals for critical devices that require frequent monitoring compared to less critical devices. This can help in proactive troubleshooting, identifying potential issues early, and ensuring smooth network operations.\n\nIn summary, this API query path empowers users to fetch and customize the polling interval for individual network devices, enabling efficient network monitoring, maintenance, and performance optimization.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{id}/collection-schedule\nREST operation:get\nREST API query parameters:\n- id: Device ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/onboarding/pnp-workflow\", with the POST operation is used to add a new Plug and Play (PnP) Workflow along with relevant tasks into the PnP database within the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized when a user wants to create a new workflow for automating device onboarding processes. By sending a POST request with the necessary parameters in the request body, users can define a new PnP workflow tailored to their specific network requirements. This capability allows users to design custom workflows efficiently and seamlessly integrate them into the Cisco Catalyst Center platform for managing device onboarding operations.\n\nBy leveraging this API query, users can enhance the automation capabilities of the Catalyst Center, streamline device provisioning processes, and ensure consistent and standardized onboarding procedures across their network infrastructure. This adds flexibility and scalability to the device onboarding workflows within the Cisco Catalyst Center environment, enabling users to effectively manage and optimize their network operations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-workflow\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/onboarding/pnp-workflow/{id}\", with the GET operation, is used to retrieve a specific Plug and Play (PnP) workflow within the Cisco Catalyst Center environment. By providing the unique ID of the desired workflow as a query parameter, users can fetch information such as configurations, settings, and any other details associated with that particular workflow. \n\nFrom a user perspective, this query can be beneficial in scenarios where a user needs to reference or view a specific PnP workflow that has been set up within the Cisco Catalyst Center platform. It allows users to access detailed information about the workflow, aiding in troubleshooting, monitoring, or simply understanding the setup of their PnP workflows more effectively. This query provides a convenient way for users to retrieve specific workflow details, enhancing their capability to manage and maintain the PnP workflows within the system efficiently.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-workflow\nREST operation:get\nREST API query parameters:\n- limit: Limits number of results. The query parameters should be used in the query. This query parameter is required. \n- offset: Index of first result. The query parameters should be used in the query. This query parameter is required. \n- sort: Comma seperated lost of fields to sort on. The query parameters should be used in the query. This query parameter is required. \n- sortOrder: Sort Order Ascending (asc) or Descending (des). The query parameters should be used in the query. This query parameter is required. \n- type: Workflow Type. The query parameters should be used in the query. This query parameter is required. \n- name: Workflow Name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This REST API query path, \"/dna/intent/api/v1/licenses/smartAccount/{smart_account_id}/virtualAccounts\", is used to retrieve details about virtual accounts linked to a specific smart account within the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be valuable for administrators or network operators who are managing a large number of devices distributed across different virtual accounts. By providing the smart account ID as a parameter in the query, users can access information on the distribution of devices across virtual accounts. This allows users to effectively monitor and manage device provisioning operations within their organization.\n\nAdditionally, this query enables users to identify any synchronization issues that may have occurred during the device onboarding process. By retrieving detailed information about virtual accounts, users can troubleshoot any potential synchronization issues, ensuring that all devices are correctly provisioned within their respective virtual accounts.\n\nOverall, this query empowers users to streamline device management, troubleshoot synchronization issues, and ensure the accuracy and relevance of device data within the specified virtual account environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/licenses/smartAccount/{smart_account_id}/virtualAccounts\nREST operation:get\nREST API query parameters:\n- smart_account_id: Id of smart account. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/event/event-series\" in the Cisco Catalyst Center is used to retrieve a list of Published Notifications based on specific criteria. Users can filter notifications by providing parameters such as eventIds, startTime, endTime, category, type, severity, domain, subDomain, source, tags, namespace, siteId, offset, limit, sortBy, and order. \n\nFrom a user perspective, this query can be utilized in several ways:\n1. **Monitoring Notifications:** Users can track and analyze the notifications they are interested in by specifying filters such as category (e.g., security), severity level, domain (e.g., switches), or specific types of events. By examining the list of notifications over time, users can gain insights into network events and trends.\n  \n2. **Managing Email Notification Configurations:** Users can use this query to manage, update, or troubleshoot Email notification configurations. By examining existing settings retrieved through this query, users can ensure that Email notifications are properly configured and functioning as required.\n\n3. **Customizing Subscription Details:** By providing parameters like offset, limit, sortBy, and order, users can tailor the query to retrieve specific Email subscription details based on their requirements. This customization allows users to access relevant information and adjust their Email notification preferences accordingly.\n\nOverall, this query empowers users to efficiently monitor notifications, manage Email notification configurations, and customize subscription details within the Catalyst Center platform, enhancing their overall network monitoring and management capabilities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/event-series\nREST operation:get\nREST API query parameters:\n- eventIds: The registered EventId should be provided. The query parameters should be used in the query. This query parameter is required. \n- startTime: Start Time in milliseconds. The query parameters should be used in the query. This query parameter is required. \n- endTime: End Time in milliseconds. The query parameters should be used in the query. This query parameter is required. \n- category: Category. The query parameters should be used in the query. This query parameter is required. \n- type: Type. The query parameters should be used in the query. This query parameter is required. \n- severity: Severity. The query parameters should be used in the query. This query parameter is required. \n- domain: Domain. The query parameters should be used in the query. This query parameter is required. \n- subDomain: Sub Domain. The query parameters should be used in the query. This query parameter is required. \n- source: Source. The query parameters should be used in the query. This query parameter is required. \n- offset: Start Offset. The query parameters should be used in the query. This query parameter is required. \n- limit: # of records. The query parameters should be used in the query. This query parameter is required. \n- sortBy: Sort By column. The query parameters should be used in the query. This query parameter is required. \n- order: Ascending/Descending order [asc/desc]. The query parameters should be used in the query. This query parameter is required. \n- tags: Tags. The query parameters should be used in the query. This query parameter is required. \n- namespace: Namespace. The query parameters should be used in the query. This query parameter is required. \n- siteId: Site Id. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This REST API query path \"/dna/intent/api/v1/network-device/{id}/meraki-organization\" with the GET operation is specifically designed to retrieve the list of organizations associated with a Meraki dashboard for a network device identified by its unique ID.\n\nFrom a user perspective, this query path can be utilized to efficiently manage and monitor network devices within the Cisco Catalyst Center environment. By providing the ID of a particular network device, users can retrieve the list of organizations associated with that device in the Meraki dashboard. This information can be valuable for network administrators who need to streamline their operations by categorizing and applying configurations or policies to devices within specific organizations.\n\nFor example, a user can use this query to view all the organizations related to a particular network device, allowing them to easily manage configurations or policies across multiple devices within those organizations. This can simplify tasks such as applying firmware updates, monitoring device health, or setting up specific network policies tailored to different organizations within the Meraki dashboard.\n\nIn summary, this query enhances the user experience by providing a seamless way to access and manage organization information related to network devices in the Meraki dashboard, ultimately facilitating more efficient network management and configuration processes within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{id}/meraki-organization\nREST operation:get\nREST API query parameters:\n- id: id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "From a user perspective, this specific REST API query path `/dna/intent/api/v1/network-device/{networkDeviceId}/config` in the Cisco Catalyst Center is incredibly useful for network administrators, operators, and IT personnel. By using this query, users can easily retrieve the configuration details of a specific network device identified by its unique networkDeviceId. \n\nImagine a scenario where a network administrator needs to access the configuration details of a particular network device for troubleshooting or monitoring purposes. By providing the networkDeviceId as a parameter in the query path, the administrator can efficiently fetch crucial information such as QoS configurations, policies, settings applied to interfaces, VLAN information, running configuration, or startup configuration of the targeted device.\n\nThis query enables users to customize Quality of Service (QoS) parameters according to their network requirements, prioritize critical traffic, control bandwidth allocation efficiently, and optimize network performance. It also allows for auditing changes, comparing configurations, troubleshooting issues, ensuring network compliance, and enhancing network security.\n\nOverall, this REST API query provides a convenient and powerful way for users to access detailed device configuration information, aiding in tasks such as inventory management, network monitoring, troubleshooting, and configuration management within their Cisco Catalyst Center infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{networkDeviceId}/config\nREST operation:get\nREST API query parameters:\n- networkDeviceId: networkDeviceId. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/interface/isis\" with the REST operation \"get\" is used to retrieve information about ISIS (Intermediate System to Intermediate System) enabled interfaces within the Cisco Catalyst Center platform. ISIS is a routing protocol used in computer networks to establish and maintain routing information. By making this API call, users can obtain a list of interfaces that have ISIS enabled, allowing them to view the current status and configurations related to ISIS within the Catalyst Center environment.\n\nFrom a user perspective, this query can be valuable for network administrators and engineers who are responsible for managing the routing protocols and network configurations within the Cisco Catalyst Center. Users can leverage this query to:\n\n1. **Monitor ISIS Enabled Interfaces**: By retrieving the list of interfaces with ISIS enabled, users can monitor and ensure that the ISIS configuration is correctly applied to the intended interfaces. This helps in maintaining a stable and efficient routing environment within the network.\n\n2. **Troubleshoot ISIS Configuration**: In case of any issues or discrepancies related to ISIS configurations, users can use this query to gather detailed information about the ISIS-enabled interfaces. This information can aid in troubleshooting and resolving any routing problems efficiently.\n\n3. **Verify ISIS Integration**: Users can use this query to verify the integration of ISIS within the Catalyst Center platform. By confirming which interfaces have ISIS enabled, users can ensure that the routing protocol is correctly integrated into the network infrastructure.\n\nOverall, this API query provides users with visibility into the ISIS configurations and enables them to manage, monitor, and troubleshoot routing-related aspects within the Cisco Catalyst Center platform effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/isis\nREST operation:get\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device-config/task\" with the operation \"get\" is used to retrieve configuration task details from the Cisco Catalyst Center. This query specifically returns the result details of a configuration task identified by a specified task Id.\n\nFrom a user perspective, this query can be utilized to monitor and track the progress and outcome of configuration tasks performed on network devices managed by the Cisco Catalyst Center. By providing the parentTaskId as a query parameter, users can retrieve detailed information such as the task's status, start and end times, progress percentage, service type, and any potential errors.\n\nUsers can incorporate this API query into their applications or scripts to automate the monitoring of configuration tasks, ensuring efficient management and troubleshooting of network devices within their infrastructure. By leveraging this query, users can gain insights into the success or failure of configuration tasks, facilitating proactive actions to maintain network stability and security.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device-config/task\nREST operation:get\nREST API query parameters:\n- parentTaskId: task Id. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "From a user perspective, this specific REST API query path \"/dna/intent/api/v1/lan-automation/updateDevice\" with the PUT operation allows users to update specific features related to LAN Automation devices within the Cisco Catalyst Center platform. Users can modify details such as the Loopback0 IP address, add or delete links, and update interface settings like VLAN membership, Voice VLAN, and interface admin status.\n\nBy sending a PUT request to this API endpoint with the necessary information in the request body, users can make targeted updates to devices in the LAN Automation environment. This enables users to ensure that device configurations are accurate and up to date, improving network management and device performance.\n\nOverall, this query provides users with the capability to efficiently adjust LAN Automation device configurations, making it easier to manage and optimize network devices within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/{interfaceUuid}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: . The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- interfaceUuid: Interface ID. The query parameters should be used in the path. This query parameter is required. \n- deploymentMode: Preview/Deploy ['Preview' means the configuration is not pushed to the device. 'Deploy' makes the configuration pushed to the device]. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/diagnostics/system/performance/history\" in the Cisco Catalyst Center is designed to retrieve historical performance indicators for the system. Users can specify the key performance indicator (KPI) they are interested in (such as CPU, memory, or network), along with the start and end times for the historical data they want to retrieve. The data can be fetched for the last three months.\n\nFrom a user perspective, this API query can be utilized to analyze the past performance of the network system based on specific KPIs. Users can monitor trends, identify patterns, and compare performance metrics over time to gain insights into the system's health and performance. By leveraging this query, users can make informed decisions, detect potential issues, and take proactive measures to optimize the network infrastructure.\n\nOverall, this API query provides users with valuable historical data that can aid in monitoring, analyzing, and optimizing the performance of their network system within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/diagnostics/system/performance/history\nREST operation:get\nREST API query parameters:\n- kpi: Fetch historical data for this kpi. Valid values: cpu,memory,network. The query parameters should be used in the query. This query parameter is required. \n- startTime: This is the epoch start time in milliseconds from which performance indicator need to be fetched. The query parameters should be used in the query. This query parameter is required. \n- endTime: This is the epoch end time in milliseconds upto which performance indicator need to be fetched. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/interface/{interfaceUuid}/legit-operation\" with the GET operation is designed to retrieve the legitimate operations and properties valid for a specific interface within the Cisco Catalyst Center platform.\n\nFrom a user perspective, this query can be used to gather detailed information about a particular network interface. By providing the interface UUID as a query parameter in the path, users can fetch a list of all legitimate operations and properties applicable to that specific interface. This information can be beneficial for network administrators and engineers who need to understand the capabilities and configuration options available for a particular interface.\n\nUsers can leverage this API call to perform tasks such as:\n\n1. Obtaining a comprehensive overview of the properties and operations available for a specific interface without the need to query each property individually.\n2. Understanding the valid operations that can be performed on the interface, enabling efficient management and configuration.\n3. Troubleshooting interface-related issues by identifying the legitimate operations supported by the interface.\n4. Making informed decisions regarding interface configurations based on the available properties and operations.\n\nIn summary, this API query provides users with the necessary insights to effectively manage and configure network interfaces within the Cisco Catalyst Center platform by listing all legitimate operations and properties for a specific interface.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/{interfaceUuid}/legit-operation\nREST operation:get\nREST API query parameters:\n- interfaceUuid: Interface ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/network-device/config/count\" with the GET operation is used to retrieve the count of device configurations within the Cisco Catalyst Center platform. This query allows users to obtain the total number of device configurations present in the network.\n\nFrom a user perspective, this query can be valuable for network administrators who need to quickly assess the volume of device configurations across their network infrastructure. By making this API call, users can efficiently gather information on the number of configurations without the need to inspect each device individually. This can be beneficial for tasks such as auditing configuration changes, monitoring configuration growth over time, or ensuring consistency and compliance across devices.\n\nOverall, this API query provides users with a straightforward way to obtain an overview of the number of device configurations, aiding in network management, troubleshooting, and maintaining configuration standards within the network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/config/count\nREST operation:get\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/global-credential/http-read\" with a PUT operation is specifically designed to update global HTTP read credentials within the Cisco Catalyst Center environment. These credentials are essential for configuring and managing HTTP read access for various network devices and services.\n\nFrom a user perspective, this API query enables users, such as network administrators or developers, to centrally modify the global HTTP read credentials. By providing the necessary parameters like username, password, port, and security settings in the request body, users can update the HTTP read credentials required for tasks such as monitoring network activities, accessing device information, or troubleshooting issues across the network infrastructure.\n\nThis query serves as a fundamental tool for securely managing HTTP read credentials in a centralized manner, ensuring authorized access and facilitating secure communication and operations involving HTTP read actions within the Cisco Catalyst Center environment. It allows users to maintain and update these credentials as needed to support network operations effectively.\n\nOverall, the ability to update global HTTP read credentials using this PUT query provides users with the flexibility to manage and secure access to network resources efficiently, ensuring smooth network operations and enhancing network security.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/http-read\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/global-credential/http-read\" with a POST operation is specifically designed to create HTTP read credentials within the Cisco Catalyst Center environment. These credentials are crucial for configuring and managing HTTP read access for various network devices and services.\n\nFrom a user perspective, this API query allows users, such as network administrators or developers, to add global HTTP read credentials. By including the necessary parameters such as the username, password, port, and security settings in the request body, users can establish the required HTTP read access permissions. \n\nFor instance, a network administrator can utilize this query to create HTTP read credentials for tasks like monitoring network activities, accessing device information, or troubleshooting issues across the network infrastructure. By sending a POST request with the relevant details, users can ensure secure communication and operations involving HTTP read actions within the Cisco Catalyst Center environment.\n\nOverall, this API query provides users with the capability to manage HTTP read credentials effectively, enabling authorized access and facilitating secure interactions with network resources.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/http-read\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/system/api/v1/role/permissions\" with the GET operation is used to retrieve permissions for a specific role within the Cisco DNA Center System. Roles in the Cisco Catalyst Center are essential for defining the permissions and access levels granted to different users within the system. By querying this API endpoint, users can obtain detailed information about the permissions associated with a particular role, including the specific access rights, privileges, and policies assigned to that role.\n\nFrom a user perspective, this query is valuable for system administrators or IT personnel who are responsible for managing and configuring user roles and access control within the Cisco DNA Center System. By utilizing this API query, users can gain insights into the permissions granted to a specific role, ensuring that users have the appropriate access levels to perform their designated tasks effectively. This information can help administrators make informed decisions about role assignments, access control settings, and policy enforcement within the system.\n\nOverall, the \"/dna/system/api/v1/role/permissions\" query enhances role management capabilities within the Cisco DNA Center System, allowing users to tailor permissions and access control settings to align with their organization's security and operational requirements efficiently.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/role/permissions\nREST operation:get\n</api-query>", "The specific REST API query path \"/dna/data/api/v1/event/event-series/audit-logs\" is designed to retrieve detailed Audit Log records from the Event-Hub within the Cisco Catalyst Center environment. This API query allows users to access specific Audit Log events based on various parameters such as event name, category, severity, domain, sub-domain, source, user ID, time range, and more.\n\nFrom a user perspective, this API query enables the following functionalities:\n\n1. **Viewing Audit Log Summary**: Users can obtain a summarized view of Audit Log events by specifying parameters such as event name, category, severity, domain, sub-domain, source, user ID, time range, and more. This summary view helps users analyze Audit Log events within a specific timeframe, aiding in incident investigation and trend analysis.\n\n2. **Filtering and Analyzing Events**: By utilizing parameters like event ID, category, severity, domain, sub-domain, etc., users can filter and analyze Audit Log events to focus on specific types of notifications or incidents. This feature allows users to efficiently investigate and address critical events.\n\n3. **Monitoring Event Correlation**: The correlation ID parameter can be used to track related events, allowing users to monitor event correlations and understand the relationships between different Audit Log events.\n\nIn essence, this API query empowers users to access, analyze, and monitor Audit Log events effectively within the Cisco Catalyst Center, enabling them to maintain a secure and compliant network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/data/api/v1/event/event-series/audit-logs\nREST operation:get\nREST API query parameters:\n- parentInstanceId: Parent Audit Log record's instanceID.. The query parameters should be used in the query. This query parameter is required. \n- instanceId: InstanceID of the Audit Log.. The query parameters should be used in the query. This query parameter is required. \n- name: Audit Log notification event name.. The query parameters should be used in the query. This query parameter is required. \n- eventId: Audit Log notification's event ID. . The query parameters should be used in the query. This query parameter is required. \n- category: Audit Log notification's event category. Supported values: INFO, WARN, ERROR, ALERT, TASK_PROGRESS, TASK_FAILURE, TASK_COMPLETE, COMMAND, QUERY, CONVERSATION. The query parameters should be used in the query. This query parameter is required. \n- severity: Audit Log notification's event severity. Supported values: 1, 2, 3, 4, 5.. The query parameters should be used in the query. This query parameter is required. \n- domain: Audit Log notification's event domain.. The query parameters should be used in the query. This query parameter is required. \n- subDomain: Audit Log notification's event sub-domain.. The query parameters should be used in the query. This query parameter is required. \n- source: Audit Log notification's event source.. The query parameters should be used in the query. This query parameter is required. \n- userId: Audit Log notification's event userId.. The query parameters should be used in the query. This query parameter is required. \n- context: Audit Log notification's event correlationId.. The query parameters should be used in the query. This query parameter is required. \n- eventHierarchy: Audit Log notification's event eventHierarchy. Example: \"US.CA.San Jose\" OR \"US.CA\" OR \"CA.San Jose\" - Delimiter for hierarchy separation is \".\".. The query parameters should be used in the query. This query parameter is required. \n- siteId: Audit Log notification's siteId.. The query parameters should be used in the query. This query parameter is required. \n- deviceId: Audit Log notification's deviceId.. The query parameters should be used in the query. This query parameter is required. \n- isSystemEvents: Parameter to filter system generated audit-logs.. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- description: String full/partial search - (Provided input string is case insensitively matched for records).. The query parameters should be used in the query. This query parameter is required. \n- offset: Position of a particular Audit Log record in the data. . The query parameters should be used in the query. This query parameter is required. \n- limit: Number of Audit Log records to be returned per page.. The query parameters should be used in the query. This query parameter is required. \n- startTime: Start Time in milliseconds since Epoch Eg. 1597950637211 (when provided endTime is mandatory). The query parameters should be used in the query. This query parameter is required. \n- endTime: End Time in milliseconds since Epoch Eg. 1597961437211 (when provided startTime is mandatory). The query parameters should be used in the query. This query parameter is required. \n- sortBy: Sort the Audit Logs by certain fields. Supported values are event notification header attributes.. The query parameters should be used in the query. This query parameter is required. \n- order: Order of the sorted Audit Log records. Default value is desc by timestamp. Supported values: asc, desc.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "<query>\n  This specific REST API query path allows users to retrieve details of a given template by providing its unique templateId (UUID). By using this query, users can access information about a specific template, including its configurations, variables, and any associated metadata. The query also provides the option to specify the latestVersion flag to retrieve the most recent version of the template. This query path is particularly useful for users who need to review or audit the details of a specific template, track its version history, and ensure they are working with the latest template version available in the Cisco Catalyst Center environment.\n</query>\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/template/{templateId}\nREST operation:get\nREST API query parameters:\n- templateId: TemplateId(UUID) to get details of the template. The query parameters should be used in the path. This query parameter is required. \n- latestVersion: latestVersion flag to get the latest versioned template. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/template-programmer/template/{templateId}\" with the DELETE operation is used to delete a specific template in the Cisco Catalyst Center based on the provided templateId (UUID) parameter in the path. This query allows users to remove a template from the system.\n\nFrom a user perspective, this DELETE query can be valuable for template management within the Cisco Catalyst Center. Users can utilize this query to remove templates that are no longer needed, have become outdated, or need to be replaced with updated versions. By deleting templates, users can ensure that only relevant and up-to-date configurations are maintained within the system, leading to efficient network management practices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/template/{templateId}\nREST operation:delete\nREST API query parameters:\n- templateId: templateId(UUID) of template to be deleted. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "From a user perspective, the REST API query path \"/dna/intent/api/v1/licenses/smartAccount/virtualAccount/deregister\" with the PUT operation is used to deregister device(s) from CSSM (Cisco Smart Software Manager) within the Cisco Catalyst Center environment. This action involves removing device registration information from the Cisco Smart Software Manager, effectively disassociating the specified devices from the CSSM.\n\nUsers, such as administrators or network operators, can utilize this query to manage their device licenses and registration efficiently. For instance, if a device is no longer in use, needs to be replaced, or is being reconfigured, users can trigger the deregistration process by sending a PUT request to this query path with the required parameters specified in the request body. By providing the necessary information, such as the Smart Account ID, Virtual Account ID, and device details, users can initiate the API call to deregister the device(s) from the CSSM.\n\nOverall, this query empowers users to maintain an accurate inventory of licensed devices, ensuring that only active and relevant devices are associated with the CSSM. This functionality streamlines device management processes, helps in troubleshooting synchronization issues, and ensures that devices are correctly managed within the specified Smart and Virtual Account environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/licenses/smartAccount/virtualAccount/deregister\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "<details>\n  <summary>Click to expand: Query Details and User Perspective</summary>\n  \n### Query Details:\n- **Query Path:** \"/dna/intent/api/v1/network-device/{deviceUuid}/poe\"\n- **REST Operation:** GET\n- **Description:** This query is used to retrieve Power over Ethernet (POE) details for a specific network device identified by its UUID. It returns information about the POE interfaces of the device, including operational status, power usage, capacity, connected devices, and relevant configurations.\n\n### User Perspective:\nFrom a user perspective, this query can be highly beneficial for network administrators, operators, and IT personnel who manage network devices. Users can leverage this query for various purposes such as:\n1. **Troubleshooting and Maintenance:** Identify power-related issues and troubleshoot efficiently.\n2. **Inventory Management:** Maintain accurate records of network devices' POE capabilities.\n3. **Network Monitoring:** Ensure optimal power usage and performance of devices.\n\nBy utilizing this query, users gain visibility and control over POE interfaces, enabling informed decisions, streamlined maintenance, and efficient network operation.\n</details>\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceUuid}/poe\nREST operation:get\nREST API query parameters:\n- deviceUuid: uuid of the device. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/module/count\" with the GET operation is specifically designed to retrieve the count of modules installed in network devices managed by the Cisco Catalyst Center platform. \n\nFrom a user perspective, this query can be valuable for network administrators who need to quickly assess the number of modules present in their network devices. By providing the required query parameters such as deviceId, nameList, vendorEquipmentTypeList, partNumberList, and operationalStateCodeList, users can retrieve detailed information about the modules installed in specific devices. This can help in inventory management, troubleshooting, and ensuring that the network devices are properly equipped with the necessary modules for optimal performance.\n\nBy making a GET request to this API query path, users can efficiently gather module count data, which can aid in making informed decisions when it comes to managing and maintaining network devices within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/module/count\nREST operation:get\nREST API query parameters:\n- deviceId: deviceId. The query parameters should be used in the query. This query parameter is required. \n- nameList: nameList. The query parameters should be used in the query. This query parameter is required. \n- vendorEquipmentTypeList: vendorEquipmentTypeList. The query parameters should be used in the query. This query parameter is required. \n- partNumberList: partNumberList. The query parameters should be used in the query. This query parameter is required. \n- operationalStateCodeList: operationalStateCodeList. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/image/distribution\" with the POST operation is intended to trigger software image distribution within the Cisco Catalyst Center. This query allows users to distribute a software image to a specific device in their network. \n\nFrom a user perspective, this query can be utilized to efficiently manage and deploy software images on network devices managed by the DNA Center. Users can provide the path to the software image file on their local system through the query parameters. This is particularly useful when users need to import new software images for deployment. \n\nBy using this query, users can ensure that the software images they require are readily available within the Catalyst Center, simplifying the software image management and deployment procedures. Ultimately, this query contributes to the smooth operation and maintenance of network devices by enabling users to easily distribute and update software images on their devices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/image/distribution\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/template-programmer/project/{projectId}\" with the DELETE operation is used to delete a specific project within the Cisco Catalyst Center environment. Users can delete a project by providing the projectId (UUID) as a required parameter in the path.\n\nFrom a user perspective, this DELETE query can be valuable in scenarios where a project is no longer needed, has been completed, or needs to be removed for any reason. By sending a DELETE request to this specific query path with the project ID specified, users can effectively trigger the deletion process, removing all related information, configurations, and associated templates or workflows linked to that project from the Catalyst Center system.\n\nThis functionality streamlines project management tasks by allowing users to clean up their project list, ensuring that only relevant and active projects are maintained within the Catalyst Center platform. Additionally, it helps in maintaining a well-organized workspace by removing unnecessary projects and freeing up resources for ongoing projects and new initiatives.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/project/{projectId}\nREST operation:delete\nREST API query parameters:\n- projectId: projectId(UUID) of project to be deleted. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/template-programmer/project/{projectId}\" with the GET operation is designed to retrieve the details of a particular project within the Cisco Catalyst Center environment. Users can access information about a specific project by providing the projectId (UUID) as a required parameter in the path.\n\nFrom a user perspective, this GET query can be beneficial when users need to gather detailed information about a specific project stored in the Catalyst Center. Users may utilize this query to retrieve data such as project templates, configurations, or any other project-related information linked to the project identified by its unique projectId. This functionality allows users to review, document, or refer to project details, aiding in tasks like project management, documentation, and restoration of projects if needed.\n\nFor instance, a user could use this API query to retrieve details of a project for auditing purposes, to review configurations, or to understand the structure of a particular project within the Catalyst Center. By leveraging this query, users can effectively access and analyze project-specific information, enhancing their ability to manage and organize projects efficiently in the Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/project/{projectId}\nREST operation:get\nREST API query parameters:\n- projectId: projectId(UUID) of project to get project details. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/data/reports/{reportId}/executions\" with a GET operation is used to retrieve all execution details for a given report within the Cisco Catalyst Center platform. Users can obtain information such as the status, start time, end time, and any other relevant details of each execution related to a specific report.\n\nFrom a user perspective, this query can be valuable in scenarios where a user needs to monitor and track the progress of report executions. By providing the reportId parameter in the query, users can fetch detailed information about all executions associated with a particular report. This can help users ensure that their reports are running as expected, identify any issues or delays in executions, and overall have better visibility into the performance of their scheduled reports.\n\nIn summary, by utilizing this query, users can effectively retrieve and review the execution details of their scheduled reports, enabling them to make informed decisions and take necessary actions based on the outcome of each report execution.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/data/reports/{reportId}/executions\nREST operation:get\nREST API query parameters:\n- reportId: reportId of report. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/{deviceUuid}/supervisor-card\" with the GET operation allows users to retrieve detailed information about the supervisor card of a network device identified by its unique deviceUuid.\n\nFrom a user perspective, this query can be used for various purposes such as:\n\n1. **Inventory Management**: Users, including network administrators, operators, and IT personnel, can utilize this query to fetch specific details about the supervisor card within a network device. This information can be valuable for maintaining an accurate inventory of hardware components and tracking the status of supervisor cards across the network.\n\n2. **Troubleshooting**: Accessing information about the supervisor card can assist in troubleshooting network issues related to the supervisory module. Users can identify details such as serial number, part number, switch number, and slot number, which can aid in diagnosing and resolving problems efficiently.\n\nBy providing the deviceUuid parameter in the query path, users can retrieve precise details about the supervisor card of a designated network device, enabling them to make informed decisions regarding maintenance, upgrades, or replacements of the supervisory module.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceUuid}/supervisor-card\nREST operation:get\nREST API query parameters:\n- deviceUuid: instanceuuid of device. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "<detail>\nThe provided REST API query path \"/dna/intent/api/v1/app-policy-queuing-profile/{id}\" with the REST operation \"delete\" is used to delete an existing custom Application Policy Queuing Profile based on the provided ID. This functionality allows users to remove specific queuing profiles that have been previously created within the Cisco Catalyst Center platform.\n\nFrom a user perspective, this query can be utilized when a user wants to remove a custom queuing profile that is no longer needed or needs to be updated. By sending a DELETE request to this query path and including the ID of the queuing profile to be deleted, users can effectively trigger the deletion process, removing all related information and configurations associated with that queuing profile from the system. This action helps in maintaining a clean and optimized set of application policies within the network infrastructure.\n</detail>\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/applications/{id}\nREST operation:delete\nREST API query parameters:\n- id: Id of custom application to delete. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/licenses/device/count\" with the GET operation is used to retrieve the count of managed devices based on specified criteria within the Cisco Catalyst Center platform. By providing parameters such as device type, smart license registration status, Cisco DNA license level, virtual account name, and smart account ID, users can obtain the total number of managed devices that meet the specified requirements.\n\nFrom a user perspective, this query can be valuable for network administrators and IT personnel who need to have a clear overview of the number of managed devices that fall under specific categories or criteria. Users can utilize this query to monitor the distribution of devices based on device types, license levels, registration statuses, virtual account affiliations, and smart account associations. \n\nBy making this API call, users can efficiently gather insights into their network infrastructure, track device counts based on different attributes, and ensure proper management and compliance with licensing requirements. This information can aid in decision-making processes, resource allocation, and overall network monitoring and maintenance efforts.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/licenses/device/count\nREST operation:get\nREST API query parameters:\n- device_type: Type of device. The query parameters should be used in the query. This query parameter is required. \n- registration_status: Smart license registration status of device. The query parameters should be used in the query. This query parameter is required. \n- dna_level: Device Cisco DNA License Level. The query parameters should be used in the query. This query parameter is required. \n- virtual_account_name: Virtual account name. The query parameters should be used in the query. This query parameter is required. \n- smart_account_id: Smart account id. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/event/subscription/rest\", is used to create REST/webhook event subscriptions within the Cisco Catalyst Center environment. It allows users to subscribe their SubscriptionEndpoint to a list of registered events. By subscribing to events, users can set up notifications that trigger actions in response to specific events occurring within the Catalyst Center. \n\nFrom a user perspective, this query can be utilized for various purposes such as monitoring network events, configuration changes, or any other specific events of interest. Users can customize their event subscriptions based on the events they want to monitor and the actions they want to take in response to those events. By using this API endpoint, users can ensure comprehensive visibility into critical events within their network infrastructure. \n\nThe API query parameters for this REST operation include the request body parameter where users specify the details of the event subscriptions they want to create, and the Content-Type header parameter which should be set to 'application/json' as the default value.\n\nOverall, this API query enables users to manage event subscriptions effectively and tailor their event monitoring strategies according to their specific needs and preferences within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription/rest\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/event/subscription/rest\", is used to update REST/webhook event subscriptions within the Cisco Catalyst Center environment. It allows users to subscribe their SubscriptionEndpoint to a list of registered events. By subscribing to events, users can set up notifications that trigger actions in response to specific events occurring within the Catalyst Center.\n\nFrom a user perspective, this query can be utilized for various purposes such as monitoring network events, configuration changes, or any other specific events of interest. Users can customize their event subscriptions based on the events they want to monitor and the actions they want to take in response to those events. By using this API endpoint, users can ensure comprehensive visibility into critical events within their network infrastructure. They can track the number of event subscriptions associated with specific event IDs, allowing them to evaluate the coverage and scope of their event monitoring strategy.\n\nIn summary, this API query empowers users to efficiently manage and update their event subscriptions, ensuring that they have the necessary visibility and control over critical events within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription/rest\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Content Type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The specific REST API query path, \"/dna/intent/api/v1/event/subscription/rest\", is used to retrieve REST/webhook event subscriptions within the Cisco Catalyst Center environment. This query allows users to get a list of Rest/Webhook Subscriptions based on the provided query parameters. \n\nFrom a user perspective, this query can be utilized for various purposes such as monitoring network visibility by tracking the number of event subscriptions associated with specific event IDs. Users can use this query to understand the subscriptions set up in the Catalyst Center, manage their event notifications, and ensure that they are receiving relevant alerts for specific events of interest. \n\nBy making use of this API query path, users can effectively manage their event subscriptions, ensure proper monitoring mechanisms are in place, and take necessary actions in response to critical events occurring within their network infrastructure. The query parameters provided allow users to customize the results based on event IDs, domains, sub-domains, categories, types, names, sorting, and ordering.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription/rest\nREST operation:get\nREST API query parameters:\n- eventIds: List of subscriptions related to the respective eventIds (Comma separated event ids). The query parameters should be used in the query. This query parameter is required. \n- offset: The number of Subscriptions's to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of Subscriptions's to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n- domain: List of subscriptions related to the respective domain. The query parameters should be used in the query. This query parameter is required. \n- subDomain: List of subscriptions related to the respective sub-domain. The query parameters should be used in the query. This query parameter is required. \n- category: List of subscriptions related to the respective category. The query parameters should be used in the query. This query parameter is required. \n- type: List of subscriptions related to the respective type. The query parameters should be used in the query. This query parameter is required. \n- name: List of subscriptions related to the respective name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/lan-automation/log\" with the GET operation allows users to retrieve LAN Automation session logs. These logs contain valuable information about the devices involved, configurations applied, errors encountered, and the overall status of the automation process. \n\nFrom a user perspective, this query can be utilized to monitor the progress and outcomes of LAN Automation sessions. By specifying the starting index (offset) and the number of sessions to retrieve (limit) using the query parameters, users can access detailed logs that help in identifying issues, analyzing device configurations, and ensuring the smooth running of the automation process. \n\nBy leveraging this API query, users can gain insights into LAN Automation activities, troubleshoot any issues that arise, and optimize network operations by better managing network resources. Overall, accessing these detailed logs enhances the user's ability to monitor and improve the LAN automation process within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation/log\nREST operation:get\nREST API query parameters:\n- offset: Starting index of the LAN Automation session. Minimum value is 1.. The query parameters should be used in the query. This query parameter is required. \n- limit: Number of LAN Automation sessions to be retrieved. Limit value can range between 1 to 10.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/global-credential/cli\" with the POST operation is used to create CLI credentials in the Cisco Catalyst Center environment. These CLI credentials are essential for enabling telnet and SSH access to network devices, providing options such as username, password, and enable password.\n\nFrom a user perspective, this query can be used to set up and manage CLI credentials for network devices efficiently. Users can input the necessary information such as username, password, enable password, comments, and description in the request body in JSON format. By making a POST request to this endpoint, users can add global CLI credentials to the Catalyst Center, which can then be utilized for device communication and management.\n\nThis query can be particularly useful for tasks such as:\n1. **Initial Setup**: Users can use this query to establish CLI credentials for various network devices in the Catalyst Center, ensuring secure access.\n2. **Credential Management**: Users can update or modify CLI credentials as needed, allowing for seamless device communication.\n3. **Troubleshooting**: By creating or updating CLI credentials, users can troubleshoot any credential-related issues affecting device connectivity.\n4. **Automation**: This query can be integrated into automation scripts or applications to streamline the process of creating and managing CLI credentials across the network environment.\n\nIn summary, the \"/dna/intent/api/v1/global-credential/cli\" POST query provides a straightforward way for users to create CLI credentials within the Cisco Catalyst Center, enhancing network security and management capabilities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/cli\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/global-credential/cli\" with the PUT operation is used to update global CLI credentials in the Cisco Catalyst Center environment. This query allows users to modify existing CLI credentials, including settings such as usernames, passwords, enable passwords, comments, and descriptions at a global level.\n\nFrom a user perspective, this query can be used to update CLI credentials for network devices efficiently. Users can make a PUT request with the necessary information in the request body in JSON format to update the global CLI credentials in the Catalyst Center. By updating CLI credentials, users can ensure secure access to network devices, troubleshoot any credential-related issues affecting device communication, and integrate the update process into automation scripts or applications to streamline credential management across the network environment.\n\nIn summary, this API query path provides users with the capability to centrally manage and update CLI credentials for network devices in the Cisco Catalyst Center, enhancing security, troubleshooting capabilities, and automation possibilities in network operations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential/cli\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/lan-automation\" with the POST operation is used to start LAN Automation for a specific site within the Cisco Catalyst Center environment. When users invoke this API, they initiate the process of LAN Automation, which involves automating the configuration of LAN networks within the designated site.\n\nFrom a user perspective, this query is essential for automating the setup and configuration of LAN networks, saving time and effort that would otherwise be spent on manual configurations. By providing the necessary request parameters in the body of the POST request, users can trigger the LAN Automation process for the specified site.\n\nUsers can benefit from this API by streamlining the deployment of LAN networks, ensuring consistency in configurations, and reducing the likelihood of errors that may arise during manual configuration tasks. The LAN Automation process can help in quickly setting up network infrastructure, applying standardized configurations, and improving overall network efficiency.\n\nOverall, using this API query empowers users to kickstart the LAN Automation process seamlessly, enabling them to efficiently manage and optimize LAN networks within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: . The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/file/{fileId}\" with the GET operation allows users to download a file specified by its unique fileId. The fileId is a required query parameter that should be included in the path to identify the specific file that needs to be downloaded.\n\nFrom a user perspective, this query path can be very useful when users need to retrieve a particular file stored within the Cisco Catalyst Center. For example, users may want to download a configuration file, a software update, or a log file for further analysis or archival purposes. By providing the correct fileId in the query, users can efficiently retrieve the exact file they are looking for.\n\nOverall, this query provides a straightforward and direct way for users to access and download specific files from the Cisco Catalyst Center, enhancing their ability to manage and work with files stored within the system.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/file/{fileId}\nREST operation:get\nREST API query parameters:\n- fileId: File Identification number. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/image/importation/golden/site/{siteId}/family/{deviceFamilyIdentifier}/role/{deviceRole}/image/{imageId}\" with the GET operation is used to retrieve the Golden Tag status of a specific image within the Cisco Catalyst Center.\n\nFrom a user perspective, this query allows users to check whether a particular software image has been tagged as a Golden Image. Golden Images typically represent preferred or recommended versions of software for deployment across network devices. By specifying the site ID, device family identifier, device role, and image ID, users can retrieve information on whether the image has been designated as a Golden Image. This can help users identify and prioritize software images for deployment based on their importance or recommendation within the network infrastructure.\n\nOverall, this query provides users with a way to efficiently manage and organize software images within the Catalyst Center by distinguishing and highlighting specific images as Golden, ensuring they are prioritized for deployment across the network.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/image/importation/golden/site/{siteId}/family/{deviceFamilyIdentifier}/role/{deviceRole}/image/{imageId}\nREST operation:get\nREST API query parameters:\n- Accept: MIME type / MIME subtype Consumed. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- siteId: Site Id in uuid format. Set siteId as -1 for Global site.. The query parameters should be used in the path. This query parameter is required. \n- deviceFamilyIdentifier: Device family identifier e.g. : 277696480-283933147, e.g. : 277696480. The query parameters should be used in the path. This query parameter is required. \n- deviceRole: Device Role. Permissible Values : ALL, UNKNOWN, ACCESS, BORDER ROUTER, DISTRIBUTION and CORE.. The query parameters should be used in the path. This query parameter is required. \n- imageId: Image Id in uuid format.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path in the Cisco Catalyst Center is used to delete the Golden Tag for a particular image. The query is designed to remove the designation of a software image as a Golden Image, which is typically a recommended version for deployment across network devices.\n\nFrom a user perspective, this query provides a way to manage and organize software images within the Catalyst Center by removing the Golden designation from a specific image. Users can specify the site ID, device family identifier, device role, and image ID to target the exact image they want to modify. By deleting the Golden Tag, users can signify that this particular image is no longer considered a preferred version for deployment.\n\nOverall, this query empowers users to make dynamic adjustments to the status of software images within the Catalyst Center, ensuring that only the most relevant and preferred versions are tagged as Golden Images for deployment across their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/image/importation/golden/site/{siteId}/family/{deviceFamilyIdentifier}/role/{deviceRole}/image/{imageId}\nREST operation:delete\nREST API query parameters:\n- Accept: MIME type / MIME subtype Consumed. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- siteId: Site Id in uuid format. Set siteId as -1 for Global site.. The query parameters should be used in the path. This query parameter is required. \n- deviceFamilyIdentifier: Device family identifier e.g. : 277696480-283933147, e.g. : 277696480. The query parameters should be used in the path. This query parameter is required. \n- deviceRole: Device Role. Permissible Values : ALL, UNKNOWN, ACCESS, BORDER ROUTER, DISTRIBUTION and CORE.. The query parameters should be used in the path. This query parameter is required. \n- imageId: Image Id in uuid format.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "From a user perspective, the specific REST API query path \"/dna/intent/api/v2/template-programmer/project\" with the GET operation allows users to retrieve details of one or multiple projects stored within the Cisco Catalyst Center environment. Users can specify the project they want to retrieve information about by providing the project's ID or name as required parameters in the query.\n\nThis query can be valuable for users who need to access detailed information about specific projects for various purposes such as auditing, reviewing configurations, understanding project structures, or documentation. By utilizing this API query, users can efficiently manage and organize projects within the Catalyst Center environment.\n\nUsers can leverage additional query parameters like sorting order, offset, and limit to customize the results according to their requirements. This query empowers users to extract project data based on their specific needs, enhancing project management and organization within the Catalyst Center.\n\nIn summary, this API query provides users with visibility and control over their projects and associated information, enabling them to effectively manage configurations, deployments, and project-related tasks within the Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/template-programmer/project\nREST operation:get\nREST API query parameters:\n- id: Id of project to be searched. The query parameters should be used in the query. This query parameter is required. \n- name: Name of project to be searched. The query parameters should be used in the query. This query parameter is required. \n- offset: Index of first result. The query parameters should be used in the query. This query parameter is required. \n- limit: Limits number of results. The query parameters should be used in the query. This query parameter is required. \n- sortOrder: Sort Order Ascending (asc) or Descending (dsc). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/network-device/{deviceId}/user-defined-field\", with the DELETE operation is designed to remove a User-Defined-Field (UDF) from a specific device within the Cisco Catalyst Center. Users can trigger this operation by providing the UUID of the device and the name of the UDF to be deleted as query parameters.\n\nFrom a user perspective, this query can be valuable in scenarios where a User-Defined-Field is no longer needed for organizational reasons or if changes in network device configurations require the deletion of certain UDFs. By using this API query, users can securely delete the specified UDF, ensuring that the Catalyst Center's configuration remains accurate and up-to-date.\n\nOverall, this API query provides users with the capability to efficiently manage and maintain User-Defined-Fields within the Catalyst Center, enabling them to streamline configurations and optimize the network setup according to their specific needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceId}/user-defined-field\nREST operation:delete\nREST API query parameters:\n- deviceId: UUID of device from which UDF has to be removed. The query parameters should be used in the path. This query parameter is required. \n- name: Name of UDF to be removed. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "From a user perspective, this specific REST API query path in the Cisco Catalyst Center allows users to update an existing Global User-Defined-Field. By specifying the User-Defined-Field ID in the request, users can trigger the update process, modifying the specific User-Defined-Field with new information or attributes while retaining its identity within the Catalyst Center. \n\nThis functionality is valuable when there is a need to modify the attributes or details of an existing User-Defined-Field. Users can use this API to update the User-Defined-Field with new values, such as changing the name, type, or other characteristics of the field. This empowers users to adapt the custom fields to reflect changes in their organization's network setup or operational requirements effectively.\n\nOverall, this API query enables users to manage and maintain the User-Defined-Fields efficiently within the Catalyst Center, ensuring that the fields can be populated with specific information that is relevant to the organization's network setup. Users can define the name, type, and other characteristics of the UDF through the PUT request sent to the specified API query path. This query empowers users to customize and optimize the network device information within the Catalyst Center, enabling them to better organize and categorize devices based on their unique needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceId}/user-defined-field\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- deviceId: UUID of device to which UDF has to be added. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/topology/site-topology\" in the Cisco Catalyst Center API is used to retrieve the site topology information. This API call returns details about the sites in Cisco DNA Center and their hierarchy related to the Global site. It provides a structured view of how different sites are connected within the network infrastructure.\n\nFrom a user perspective, this query can be used to:\n\n1. Understand Site Hierarchy: Users can retrieve information about the sites in the network and their relationships in terms of hierarchy. This can help in visualizing the overall network structure and understanding the connections between different sites.\n\n2. Monitor Site Health: By obtaining site topology information, users can assess the health of each site in terms of core, distribution, and access network health, as well as wired and wireless client health. This enables users to monitor and maintain the health of the network infrastructure effectively.\n\n3. Plan Network Expansion: The site topology information can assist users in planning network expansion or modifications by providing a clear view of existing site connections and hierarchies. This can aid in making informed decisions about network scalability and growth.\n\n4. Troubleshooting: Users can utilize the site topology data for troubleshooting network issues by identifying potential connectivity problems or bottlenecks between different sites. This can help in resolving issues efficiently and ensuring smooth network operations.\n\nOverall, the \"/dna/intent/api/v1/topology/site-topology\" query provides users with valuable insights into the site topology of the network, facilitating better network management, monitoring, and planning activities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/topology/site-topology\nREST operation:get\n</api-query>", "The \"/dna/intent/api/v1/maps/supported-access-points\" query is used to retrieve a list of supported access point types and valid antenna pattern names that can be used for each access point. This information is valuable for network administrators or IT personnel who are planning and deploying new access points within a specific area or floor in their wireless network infrastructure.\n\nFrom a user perspective, this query can be utilized to view and analyze the planned access points on a specific floor within the wireless network infrastructure. By sending a GET request to this endpoint with the necessary parameters, users can obtain a detailed list of planned access points along with their respective planned radio details. This API query is particularly beneficial for users who need to review or verify the planned configurations of access points within their network.\n\nWith this query, users can customize and set up access points according to the organization's requirements, ensuring optimal network design, troubleshooting, and alignment with the desired wireless infrastructure. By leveraging this API endpoint, users can efficiently configure and maintain access points across their network, saving time and effort in managing their wireless access points within the Catalyst Center platform. Ultimately, this query provides a convenient and efficient way for users to centrally manage their wireless access points and ensure a seamless wireless network operation.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/maps/supported-access-points\nREST operation:get\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/discovery/{id}/job\" with the GET operation is specifically designed to retrieve a list of discovery jobs associated with a particular Discovery ID within the Cisco Catalyst Center platform. \n\nFrom a user perspective, this query can be used in the following ways:\n\n1. **Viewing Discovery Job Details:** Users can utilize this query to access detailed information about the specific discovery jobs that have been executed under a particular Discovery ID. This information may include details such as the devices discovered, start and end times of the discovery job, any errors encountered during the process, and other relevant data.\n\n2. **Troubleshooting:** In case of any issues or errors related to a specific discovery job, users can leverage this query to troubleshoot the problem effectively. By examining the details of individual discovery jobs, users can identify devices that may have failed to be discovered, pinpoint potential issues, and take necessary actions to resolve them.\n\n3. **Monitoring Discovery Activities:** This query enables users to monitor the progress and status of discovery jobs associated with a specific Discovery ID. By retrieving the list of discovery jobs, users can track the ongoing discovery tasks, manage the discovered devices, and assess the overall activity related to network discovery within the Cisco Catalyst Center environment.\n\n4. **Integration with Other Systems:** Users can integrate the output of this query with other systems or scripts to extract discovery job data for further analysis or processing. This integration can facilitate seamless communication between different tools and platforms, streamline network management tasks, and enhance overall efficiency in network device management.\n\nIn summary, the \"/dna/intent/api/v1/discovery/{id}/job\" query path serves as a valuable tool for users to retrieve comprehensive information about specific discovery jobs within the Cisco Catalyst Center, enabling efficient network device management, troubleshooting capabilities, monitoring of discovery activities, and integration with external systems for enhanced functionality.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery/{id}/job\nREST operation:get\nREST API query parameters:\n- id: Discovery ID. The query parameters should be used in the path. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n- ipAddress: ipAddress. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/device-replacement/count\" is used to retrieve the count of replacement devices based on the specified replacement status. This query allows users to get information about the number of devices that are either ready for replacement, in the process of replacement, scheduled for replacement, already replaced, or encountered an error during the replacement process.\n\nFrom a user perspective, this query can be valuable for monitoring and managing the device replacement process within the network infrastructure. By specifying the replacement status in the query parameters, users can fetch the count of devices falling under each replacement status category. This information can help users to track the progress of device replacements, identify any potential issues or errors during the replacement process, and ensure that the network is maintained efficiently with up-to-date and functional devices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-replacement/count\nREST operation:get\nREST API query parameters:\n- replacementStatus: Device Replacement status list[READY-FOR-REPLACEMENT, REPLACEMENT-IN-PROGRESS, REPLACEMENT-SCHEDULED, REPLACED, ERROR]. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/licenses/smartAccount/virtualAccount/{virtual_account_name}/register\" with the PUT operation is used for device registration in CSSM (Cisco Smart Software Manager) within the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query allows users, such as administrators or network operators, to register device(s) with CSSM. By providing the necessary information, like the Smart Account ID, Virtual Account ID, and device details in the request body, users can trigger the registration process for the specified device(s). This action associates the devices with the CSSM, enabling users to efficiently manage their device licenses and registrations.\n\nThis query empowers users to maintain an accurate inventory of licensed devices, ensuring that only active and relevant devices are associated with the CSSM. It streamlines device management processes, aids in troubleshooting synchronization issues, and ensures that devices are correctly managed within the specified Smart and Virtual Account environment.\n\nOverall, users can utilize this API query to facilitate the registration of devices with CSSM, enabling seamless device management and ensuring proper licensing and registration within the Cisco Catalyst Center ecosystem.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/licenses/smartAccount/virtualAccount/{virtual_account_name}/register\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- virtual_account_name: Name of virtual account. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/reset\" is used for resetting a device in the Cisco Catalyst Center. This operation is specifically aimed at recovering a device from a Workflow Execution Error state. When a device encounters errors during a workflow execution, using this API call allows users to reset the device and bring it back to a functional state within the network.\n\nFrom a user perspective, this query can be utilized to handle troubleshooting scenarios where a device gets stuck in an error state during an onboarding process. By making a POST request to \"/dna/intent/api/v1/onboarding/pnp-device/reset\" with the necessary request body content containing the device information, users can trigger the reset operation for the device experiencing issues.\n\nBy leveraging this API call, users can automate the recovery process for devices facing workflow execution errors, ensuring that the devices are back online and functioning correctly without manual intervention. This API query streamlines the device recovery workflow, minimizes downtime, and helps maintain network stability by efficiently resolving device errors within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/reset\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/task/{taskId}\" with the operation \"get\" is used to retrieve a specific task by its unique identifier (UUID) in the Cisco Catalyst Center. This endpoint allows users to fetch detailed information about a task that has been executed or is currently in progress within the Catalyst environment.\n\nFrom a user perspective, this query can be beneficial in several scenarios. Users can utilize this query to:\n\n1. **Track Task Progress**: By providing the task ID, users can monitor the progress of a specific task, such as device provisioning, configuration deployment, software updates, or any other operation managed by the Cisco Catalyst Center.\n\n2. **Retrieve Task Details**: Users can obtain comprehensive details related to a particular task, including the status, timestamp of the last update, tenant ID associated with the task, and the parent task ID if applicable.\n\n3. **Troubleshooting and Analysis**: In case of task failures or unexpected behavior, users can fetch task details using this query to investigate the root cause, analyze errors, and take necessary actions to rectify the issues.\n\n4. **Automation and Integration**: Developers and administrators can integrate this query into their automation scripts or monitoring tools to fetch real-time task information, automate task tracking, and streamline operational workflows within the Cisco Catalyst Center.\n\nOverall, the \"/dna/intent/api/v1/task/{taskId}\" query path provides users with a convenient way to access task-specific information, enabling efficient management and oversight of tasks performed within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/task/{taskId}\nREST operation:get\nREST API query parameters:\n- taskId: UUID of the Task. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/vacct-sync\" is used to synchronize virtual account devices within the Cisco Catalyst Center. This API call synchronizes device information from the specified Smart Account and Virtual Account with the PnP (Plug and Play) database. By initiating this API call, users can retrieve detailed information on the devices that have been successfully synced or identify any potential synchronization issues that may have occurred during the process.\n\nFrom a user perspective, this query is utilized by administrators or network operators who are managing a large number of devices across different Virtual Accounts. By providing the necessary parameters such as the Smart Account Domain and the Virtual Account Name, users can trigger this API call to gain insights into the status of device provisioning operations. This includes information on devices that have been successfully synced, as well as any synchronization issues that need to be addressed.\n\nUsers can leverage this query to streamline device management, troubleshoot synchronization issues, and ensure that devices are correctly onboarded and functioning within the specified Virtual Account environment. It empowers users to efficiently manage and modify device information stored in the PnP database, ensuring the accuracy and relevance of device data during the provisioning process.\n\nOverall, this API query plays a crucial role in ensuring the smooth operation of device provisioning within Virtual Accounts, providing users with valuable insights into the synchronization status of devices and facilitating effective device management within their organization.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/vacct-sync\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "<query_description>\nThe provided REST API query path \"/dna/intent/api/v1/discovery/{id}/job\" with the GET operation is specifically designed to retrieve a list of discovery jobs associated with a particular Discovery ID within the Cisco Catalyst Center platform. From a user perspective, this query can be used in the following ways:\n1. Viewing Discovery Job Details: Users can utilize this query to access detailed information about the specific discovery jobs that have been executed under a particular Discovery ID. This information may include details such as the devices discovered, start and end times of the discovery job, any errors encountered during the process, and other relevant data.\n2. Troubleshooting: In case of any issues or errors related to a specific discovery job, users can leverage this query to troubleshoot the problem effectively. By examining the details of individual discovery jobs, users can identify devices that may have failed to be discovered, pinpoint potential issues, and take necessary actions to resolve them.\n3. Monitoring Discovery Activities: This query enables users to monitor the progress and status of discovery jobs associated with a specific Discovery ID. By retrieving the list of discovery jobs, users can track the ongoing discovery tasks, manage the discovered devices, and assess the overall activity related to network discovery within the Cisco Catalyst Center environment.\n4. Integration with Other Systems: Users can integrate the output of this query with other systems or scripts to extract discovery job data for further analysis or processing. This integration can facilitate seamless communication between different tools and platforms, streamline network management tasks, and enhance overall efficiency in network device management.\nIn summary, the \"/dna/intent/api/v1/discovery/{id}/job\" query path serves as a valuable tool for users to retrieve comprehensive information about specific discovery jobs within the Cisco Catalyst Center, enabling efficient network device management.\n</query_description>\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery/job\nREST operation:get\nREST API query parameters:\n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n- ipAddress: ipAddress. The query parameters should be used in the query. This query parameter is required. \n- name: name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/lan-automation/status\" with the GET operation is designed to retrieve the LAN Automation session status. This query allows users to check the progress and outcome of LAN Automation sessions. Users can specify the starting index and the number of sessions to retrieve using the offset and limit query parameters, respectively.\n\nFrom a user perspective, this API query is valuable for tracking the status of LAN Automation sessions in real-time. By providing the necessary offset and limit parameters in the query, users can retrieve detailed information such as device configurations applied, any errors encountered during the automation process, and the overall status of the session. This information helps users monitor the success of LAN Automation activities, troubleshoot issues, and ensure a smooth automation process.\n\nUsing this API query, users can gain insights into the LAN Automation process, enabling better management of network resources and optimization of network operations. It provides a way to monitor the progress and outcomes of LAN Automation sessions, aiding in identifying issues, analyzing device configurations, and ensuring the efficiency of the automation process within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation/status\nREST operation:get\nREST API query parameters:\n- offset: Starting index of the LAN Automation session. Minimum value is 1.. The query parameters should be used in the query. This query parameter is required. \n- limit: Number of LAN Automation sessions to be retrieved. Limit value can range between 1 to 10.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/data/api/v1/event/event-series/audit-log/parent-records\" is designed to retrieve Parent Audit Log Event instances from the Event-Hub within the Cisco Catalyst Center environment. This API query allows users to access specific Parent Audit Log events based on various parameters such as event name, category, severity, domain, sub-domain, source, user ID, time range, and more.\n\nFrom a user perspective, this API query enables the following functionalities:\n\n1. **Viewing Parent Audit Log Events**: Users can retrieve Parent Audit Log Event instances based on specified parameters to get a detailed view of the parent records related to audit events.\n\n2. **Filtering and Analyzing Events**: By utilizing parameters like event ID, category, severity, domain, sub-domain, etc., users can filter and analyze Parent Audit Log events to focus on specific types of audit events.\n\n3. **Monitoring Event Correlation**: Users can use the correlation ID parameter to track related events, enabling them to monitor event correlations and understand the relationships between different Parent Audit Log events.\n\nThis API query is valuable for users who need to access and analyze Parent Audit Log events within the Cisco Catalyst Center, aiding in incident investigations, compliance monitoring, and overall network security management.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/data/api/v1/event/event-series/audit-log/parent-records\nREST operation:get\nREST API query parameters:\n- instanceId: InstanceID of the Audit Log.. The query parameters should be used in the query. This query parameter is required. \n- name: Audit Log notification event name.. The query parameters should be used in the query. This query parameter is required. \n- eventId: Audit Log notification's event ID. . The query parameters should be used in the query. This query parameter is required. \n- category: Audit Log notification's event category. Supported values: INFO, WARN, ERROR, ALERT, TASK_PROGRESS, TASK_FAILURE, TASK_COMPLETE, COMMAND, QUERY, CONVERSATION. The query parameters should be used in the query. This query parameter is required. \n- severity: Audit Log notification's event severity. Supported values: 1, 2, 3, 4, 5.. The query parameters should be used in the query. This query parameter is required. \n- domain: Audit Log notification's event domain.. The query parameters should be used in the query. This query parameter is required. \n- subDomain: Audit Log notification's event sub-domain.. The query parameters should be used in the query. This query parameter is required. \n- source: Audit Log notification's event source.. The query parameters should be used in the query. This query parameter is required. \n- userId: Audit Log notification's event userId.. The query parameters should be used in the query. This query parameter is required. \n- context: Audit Log notification's event correlationId.. The query parameters should be used in the query. This query parameter is required. \n- eventHierarchy: Audit Log notification's event eventHierarchy. Example: \"US.CA.San Jose\" OR \"US.CA\" OR \"CA.San Jose\" - Delimiter for hierarchy separation is \".\".. The query parameters should be used in the query. This query parameter is required. \n- siteId: Audit Log notification's siteId.. The query parameters should be used in the query. This query parameter is required. \n- deviceId: Audit Log notification's deviceId.. The query parameters should be used in the query. This query parameter is required. \n- isSystemEvents: Parameter to filter system generated audit-logs.. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- description: String full/partial search - (Provided input string is case insensitively matched for records).. The query parameters should be used in the query. This query parameter is required. \n- offset: Position of a particular Audit Log record in the data. . The query parameters should be used in the query. This query parameter is required. \n- limit: Number of Audit Log records to be returned per page.. The query parameters should be used in the query. This query parameter is required. \n- startTime: Start Time in milliseconds since Epoch Eg. 1597950637211 (when provided endTime is mandatory). The query parameters should be used in the query. This query parameter is required. \n- endTime: End Time in milliseconds since Epoch Eg. 1597961437211 (when provided startTime is mandatory). The query parameters should be used in the query. This query parameter is required. \n- sortBy: Sort the Audit Logs by certain fields. Supported values are event notification header attributes.. The query parameters should be used in the query. This query parameter is required. \n- order: Order of the sorted Audit Log records. Default value is desc by timestamp. Supported values: asc, desc.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/network-device/{deviceUuid}/interface/{interfaceUuid}/neighbor\" with the GET operation is designed to retrieve detailed information about the connected device on a specific interface of a network device. \n\nFrom a user perspective, this query can be used to gather information about the neighboring device connected to a particular interface of a network device. By providing the unique identifiers (UUIDs) of the device and the interface, users can fetch details such as the device type, IP address, MAC address, and other relevant information of the neighboring device. This information is valuable for network troubleshooting, monitoring, and inventory management purposes. \n\nFor example, network administrators can use this query to quickly identify and verify the connected devices on specific interfaces, helping them to ensure proper network connectivity and configuration. This data can also aid in maintaining accurate network documentation and optimizing network performance.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceUuid}/interface/{interfaceUuid}/neighbor\nREST operation:get\nREST API query parameters:\n- deviceUuid: instanceuuid of Device. The query parameters should be used in the path. This query parameter is required. \n- interfaceUuid: instanceuuid of interface. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/discovery/{id}/network-device/count\" with the GET operation is used to retrieve the count of network devices discovered within a specific discovery task identified by the Discovery ID. \n\nFrom a user perspective, this query can be beneficial in the following ways:\n\n1. **Monitoring Network Devices:** Users can utilize this query to monitor the total number of network devices discovered as part of a specific discovery task. This information can help users track the progress of device discovery activities within their network infrastructure.\n\n2. **Resource Planning:** Knowing the count of network devices discovered can assist users in resource planning and allocation based on the scale of the network. It provides insights into the volume of devices being discovered and helps in managing network resources effectively.\n\n3. **Verification:** Users can use this query to verify the success of a discovery task by checking the count of discovered devices against expectations. Any discrepancies in the count can indicate potential issues with the discovery process.\n\n4. **Integration with Automation:** The count of network devices obtained from this query can be integrated into automation scripts or tools to trigger subsequent actions based on the number of devices discovered. This can streamline network management tasks and improve operational efficiency.\n\nOverall, this REST API query path enables users to retrieve essential information about the number of network devices discovered within a specific discovery task, facilitating effective network monitoring, management, and troubleshooting activities within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery/{id}/network-device/count\nREST operation:get\nREST API query parameters:\n- id: Discovery ID. The query parameters should be used in the path. This query parameter is required. \n- taskId: taskId. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/discovery/{id}/network-device/{startIndex}/{recordsToReturn}\" with the GET operation is used to retrieve a range of network devices discovered for a specific discovery task identified by the Discovery ID. This query allows users to specify the start index and the number of records to return, providing a way to paginate through the list of discovered devices.\n\nFrom a user perspective, this query can be beneficial in various ways:\n1. **Monitoring Network Devices:** Users can utilize this query to monitor the network devices discovered within a specific discovery task. It helps in tracking the progress of device discovery activities within their network infrastructure.\n2. **Resource Planning:** Knowing the count and details of discovered network devices can assist users in resource planning and allocation based on the scale of the network.\n3. **Verification:** Users can use this query to verify the success of a discovery task by checking the count and details of discovered devices against expectations.\n\nFor example, if a user wants to view a specific range of discovered devices starting from a particular index, they can make a GET request with the specified Discovery ID, start index, and number of records to return. This functionality enables users to efficiently handle and analyze the discovered devices stored in the Cisco Catalyst Center, enhancing their network device management experience.\n\nOverall, this API query path facilitates effective network monitoring, management, and troubleshooting activities within the Cisco Catalyst Center environment by providing users with the ability to retrieve specific ranges of discovered devices based on their requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery/{id}/network-device/{startIndex}/{recordsToReturn}\nREST operation:get\nREST API query parameters:\n- id: Discovery ID. The query parameters should be used in the path. This query parameter is required. \n- startIndex: Start index. The query parameters should be used in the path. This query parameter is required. \n- recordsToReturn: Number of records to return. The query parameters should be used in the path. This query parameter is required. \n- taskId: taskId. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/system/api/v1/auth/token\" is used for authentication purposes in the Cisco Catalyst Center. When a user makes a POST request to this endpoint, it allows them to obtain an access token. This access token is crucial as it needs to be included as the value of the X-Auth-Token HTTP header for all subsequent API calls to the Cisco DNA Center. The token obtained from this API call remains valid for 1 hour before it expires.\n\nFrom a user perspective, this query can be utilized to authenticate and obtain the necessary token required for accessing and interacting with the Cisco DNA Center APIs securely. By sending a POST request to this endpoint with the appropriate credentials (username and password) included in the request header using either Basic auth or AES key encryption, the user will receive a valid access token in response. This token can then be used in the X-Auth-Token header of subsequent API requests to authenticate and authorize them to interact with different functionalities and resources within the Cisco Catalyst Center. This process ensures that only authenticated users with the valid token can access and perform actions via the APIs, adding an extra layer of security to the system.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/auth/token\nREST operation:post\nREST API query parameters:\n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- Authorization: API supports both Basic auth and AES key encryption as Authorization token in header. AES key encryption is optional and can be enabled under DNAC System configuration. For Basic Auth: Authorization header is Base64 encoded string of \"username:password\", For example Authorization header will contain \u201cBasic YWRtaW46TWFnbGV2MTIz\u201d, where YWRtaW46TWFnbGV2MTIz is the Base64 encoded string. For AES key encryption, Authorization header is Base64 encoded string of AES key. For example Authorization header will contain \"CSCO-AES-256 credentials=2k/wGz48lp3ma9sM+2xiyQ==\", where \"2k/wGz48lp3ma9sM+2xiyQ==\" is base64 encoded string of 256 bits AES key encrypted \"username:password\".. The query parameters should be used in the header. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/site-member/{id}/member\", is used to retrieve a list of devices that are assigned to a particular site within the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be extremely beneficial for network administrators or IT professionals who are responsible for managing and monitoring devices within their network infrastructure. By providing the Site Id as a query parameter, users can specify the site they are interested in and retrieve a list of devices assigned to that specific site. \n\nAdditionally, the query allows for pagination by using the \"offset\" and \"limit\" parameters, enabling users to control the number of devices displayed on each page and navigate through large lists of devices easily. The \"memberType\" parameter ensures that only network devices are returned in the query response.\n\nMoreover, the \"level\" parameter offers the flexibility to specify the depth of the site hierarchy to consider when listing devices. This can be particularly useful for users managing complex network structures with multiple levels of site organization.\n\nOverall, this API query provides a convenient and efficient way for users to access detailed information about the devices assigned to a specific site, facilitating better network management, troubleshooting, and ensuring proper device allocation within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/site-member/{id}/member\nREST operation:get\nREST API query parameters:\n- id: Site Id. The query parameters should be used in the path. This query parameter is required. \n- offset: Offset/starting index for pagination. The query parameters should be used in the query. This query parameter is required. \n- limit: Number of devices to be listed. Default and max supported value is 500. The query parameters should be used in the query. This query parameter is required. \n- memberType: Member type (This API only supports the 'networkdevice' type). The query parameters should be used in the query. This query parameter is required. \n- level: Depth of site hierarchy to be considered to list the devices. If the provided value is -1, devices for all child sites will be listed.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/template-programmer/project/{projectId}/template\" with a POST operation is used to create a template within a specific project identified by the projectId in the Cisco Catalyst Center. \n\nFrom a user perspective, this API query allows users to programmatically create new templates tailored for specific network devices or configurations within a designated project. Users can customize the template content by providing the necessary request body parameters, such as template name, configuration settings, variables, or any other template-specific details. By specifying the projectId where the template should be created, users can organize and categorize their templates efficiently within different projects for better management and deployment.\n\nIn practical scenarios, users may utilize this API query when they need to automate the creation of new templates for different network devices, services, or scenarios. For example, a network administrator can use this API to generate templates for configuring switches, routers, or access points with predefined settings, simplifying the deployment process across their network infrastructure. This API operation streamlines template creation tasks, enhances consistency in configurations, and boosts operational efficiency within the Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/project/{projectId}/template\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- projectId: UUID of the project in which the template needs to be created. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/system/api/v1/users/external-servers\" with the GET operation is used to retrieve information about external authentication servers within the Cisco Catalyst Center environment. This query allows users to access details related to the configuration of external authentication servers, such as LDAP servers, RADIUS servers, or any other external authentication sources that are integrated with the Catalyst Center for user authentication.\n\nFrom a user perspective, this query can be used to view the list of external authentication servers configured in the Catalyst Center. Users can leverage this information to understand which external servers are being used for authentication purposes, their configurations, and any associated settings. This can help users ensure that the authentication process is properly set up and functioning correctly, as well as troubleshoot any issues related to external authentication sources.\n\nBy providing the \"invokeSource\" query parameter with the value of \"external,\" users can specifically retrieve information about external authentication servers, distinguishing them from internal authentication sources within the Catalyst Center. This query provides transparency and visibility into the external authentication server configurations, empowering users to manage and monitor these settings effectively to maintain secure access control mechanisms in the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/users/external-servers\nREST operation:get\nREST API query parameters:\n- invokeSource: The source that invokes this API. The value of this query parameter must be set to \"external\".. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/app-policy-intent\" is used for creating, updating, or deleting application policies within the Cisco Catalyst Center platform. \n\nFrom a user perspective, this query can be utilized in various scenarios to manage application policies effectively. Users can create new application policies tailored to their organization's specific needs, update existing policies to align with evolving requirements, or delete policies that are no longer needed. By making a POST request to this query path and providing the necessary parameters in the request body, users can interact with application policies in a flexible and customizable manner. \n\nUsers can leverage this query to establish application policies that reflect their business intent and translate it into network-specific configurations. This allows for the optimization and customization of application behavior within the network environment. Additionally, users can use this query to ensure that applications are managed and controlled efficiently, aligning with industry best practices and organizational requirements. \n\nIn summary, the \"/dna/intent/api/v1/app-policy-intent\" query empowers users to access, create, update, and delete application policies within the Cisco Catalyst Center, enabling them to effectively manage and configure application behavior in their network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/app-policy-intent\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: content-type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/lan-automation/count\" with the GET operation is designed to retrieve the total count of LAN Automation sessions. This query is useful for obtaining an overview of the number of LAN Automation sessions that have been initiated or are currently active within the Cisco Catalyst Center environment.\n\nFrom a user perspective, this API query can be utilized to gather statistical data regarding the volume of LAN Automation sessions being processed. By making use of this query, users can understand the workload and volume of automation tasks being handled by the Catalyst Center. This information can be beneficial for capacity planning, resource allocation, and overall monitoring of LAN automation activities.\n\nUsers can incorporate this API query into their monitoring or reporting systems to keep track of the total count of LAN Automation sessions over time. By analyzing this data, users can identify trends in the utilization of LAN automation capabilities and make informed decisions to optimize their network automation processes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation/count\nREST operation:get\n</api-query>", "The specific REST API query path \"/dna/intent/api/v2/template-programmer/template\" is used to retrieve details of available templates within the Cisco Catalyst Center environment. Users can query this endpoint to get information about the templates that are accessible for configuration and deployment. The response includes details such as template names, versions, and other relevant information based on the provided query parameters.\n\nFrom a user perspective, this query can be highly beneficial. Users can leverage this API query to explore the templates available for deployment, assisting them in selecting the appropriate template for their network configuration needs. By specifying query parameters like template name, project ID, software type, version, device family, and other relevant filters, users can narrow down their search and retrieve specific templates that meet their criteria.\n\nAdditionally, users can utilize this query to review the attributes of the templates, including configurations, variables, and tags associated with each template. This information can help users make informed decisions about which templates to use based on their network requirements.\n\nBy making a GET request to this API endpoint with the required query parameters, users can obtain a list of templates that match their specified criteria. This can streamline the template selection process, ensuring that users have access to the necessary templates for efficient and error-free configuration deployment within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/template-programmer/template\nREST operation:get\nREST API query parameters:\n- id: Id of template to be searched. The query parameters should be used in the query. This query parameter is required. \n- name: Name of template to be searched. The query parameters should be used in the query. This query parameter is required. \n- projectId: Filter template(s) based on project id. The query parameters should be used in the query. This query parameter is required. \n- projectName: Filter template(s) based on project name. The query parameters should be used in the query. This query parameter is required. \n- softwareType: Filter template(s) based software type. The query parameters should be used in the query. This query parameter is required. \n- softwareVersion: Filter template(s) based softwareVersion. The query parameters should be used in the query. This query parameter is required. \n- productFamily: Filter template(s) based on device family. The query parameters should be used in the query. This query parameter is required. \n- productSeries: Filter template(s) based on device series. The query parameters should be used in the query. This query parameter is required. \n- productType: Filter template(s) based on device type. The query parameters should be used in the query. This query parameter is required. \n- filterConflictingTemplates: Filter template(s) based on confliting templates. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- tags: Filter template(s) based on tags. The query parameters should be used in the query. This query parameter is required. \n- unCommitted: Return uncommitted template. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- sortOrder: Sort Order Ascending (asc) or Descending (dsc). The query parameters should be used in the query. This query parameter is required. \n- allTemplateAttributes: Return all template attributes. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- includeVersionDetails: Include template version details. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- offset: Index of first result. The query parameters should be used in the query. This query parameter is required. \n- limit: Limits number of results. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/wireless/accesspoint-configuration/summary\" in the Cisco Catalyst Center's REST API is designed to retrieve a summary of access point configurations. This query allows users to query specific information about access point configurations based on the ethernet MAC address of the access point.\n\nFrom a user perspective, network administrators or IT personnel can utilize this API query to access a summarized view of the configurations of wireless access points within their network infrastructure. By making a GET request to this endpoint and providing the ethernet MAC address of the access point as a required query parameter, users can retrieve key details such as SSID settings, security configurations, radio settings, and other relevant information for the specified access point.\n\nThis query is particularly beneficial for users who need to quickly access and review the configuration details of individual access points within their network. It provides a convenient way to gather essential information about access point settings, aiding in network management, troubleshooting, and ensuring optimal performance and security of the wireless network infrastructure managed through the Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/accesspoint-configuration/summary\nREST operation:get\nREST API query parameters:\n- key: The ethernet MAC address of Access point. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/network-device/insight/{siteId}/insecure-connection\" is used to retrieve devices that have been added to the Cisco DNA Center with SNMP v3 DES encryption that is considered insecure. The siteId parameter is mandatory for this query, allowing users to specify a particular site for which they want to retrieve information about devices with insecure SNMP v3 DES connections. Additionally, the query supports optional parameters such as offset, limit, sortBy, and order to customize the results.\n\nFrom a user perspective, this query can be valuable for network administrators or security personnel who want to identify and address security vulnerabilities related to SNMP v3 DES encryption within their network infrastructure. By providing the siteId parameter, users can focus on devices within a specific site, making it easier to manage and prioritize security updates. The offset and limit parameters enable users to navigate through the results effectively, especially if there are a large number of devices to review. Sorting options provided by the sortBy and order parameters offer flexibility in organizing and analyzing the retrieved data based on specific criteria. Ultimately, this query helps users enhance the security posture of their network environment by identifying and addressing devices with insecure SNMP v3 DES connections.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/insight/{siteId}/insecure-connection\nREST operation:get\nREST API query parameters:\n- siteId: siteId. The query parameters should be used in the path. This query parameter is required. \n- offset: Row Number.  Default value is 1. The query parameters should be used in the query. This query parameter is required. \n- limit: Default value is 500. The query parameters should be used in the query. This query parameter is required. \n- sortBy: Sort By. The query parameters should be used in the query. This query parameter is required. \n- order: Order. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "From the provided context, the REST API query path \"/dna/intent/api/v1/network-device/{deviceid}/management-address\" with the PUT operation is specifically used to update the management IP address of a network device in the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query can be utilized when there is a need to change the management IP address of a specific network device. Users can send a PUT request to this API endpoint with the updated IP address specified in the request body. By providing the device's UUID in the path as the deviceid parameter, users can target the specific device that needs its management IP address updated.\n\nThis functionality is crucial for network administrators and operators who need to make changes to the network device configurations, ensuring that the devices are correctly managed and accessible within the network infrastructure. By using this API query, users can seamlessly update the management IP address of devices, leading to accurate network monitoring, management, and streamlined operations within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{deviceid}/management-address\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- deviceid: The UUID of the device whose management IP address is to be updated.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/maps/import/start\" with the POST operation is designed to trigger the initiation of a map archive import process within the Cisco Catalyst Center. This query allows users to start importing map data from a tar.gz file containing the necessary map descriptor file (MapsImportExport.xml) and associated images.\n\nFrom a user perspective, this query can be utilized when a user wants to begin the process of importing map data into the Cisco Catalyst Center. By sending a POST request to this endpoint with the required parameters, users can kickstart the import process, allowing the system to extract and load the map data from the provided archive file. This action is essential for updating or adding new map data to the Catalyst Center, ensuring that the network's visualization and mapping information are up to date.\n\nBy using this query, users can efficiently manage their map data within the Catalyst Center, facilitating the integration of new map information or modifications to existing maps. It streamlines the map management process, enabling users to import map data accurately while maintaining the integrity of their network infrastructure's mapping components.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/maps/import/start\nREST operation:post\nREST API query parameters:\n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'multipart/form-data'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/topology/physical-topology\" in the Cisco Catalyst Center API is used to retrieve the raw physical topology of a network. This API call returns detailed information about the physical connections between nodes in the network, including nodes and links. The physical topology provided by this query shows the raw layout of the network, illustrating how different network devices are physically connected to each other.\n\nFrom a user perspective, this query can be used for various purposes such as:\n\n1. Network Visualization: Users can gain insights into how network devices are physically interconnected, allowing them to visualize the physical layout of the network infrastructure.\n\n2. Troubleshooting: By obtaining the physical topology, users can identify any physical connectivity issues, troubleshoot network problems, and ensure that devices are correctly connected.\n\n3. Network Planning: Users can use the physical topology information to plan network expansions, changes, or upgrades by understanding the current physical layout of the network and how new devices can be integrated.\n\n4. Network Monitoring: Monitoring the physical connections between devices can help users ensure network stability, optimize performance, and detect any potential bottlenecks or points of failure.\n\nOverall, the \"physical-topology\" query provides a valuable tool for network administrators, engineers, and operators to better understand and manage the physical infrastructure of their network.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/topology/physical-topology\nREST operation:get\nREST API query parameters:\n- nodeType: nodeType. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/lan-automation/log/{id}/{serialNumber}\" with the GET operation is specifically designed to retrieve LAN Automation session logs for individual devices. This API query requires two main parameters:\n1. **id**: This parameter represents the LAN Automation session identifier. It is essential for specifying the specific LAN Automation session for which logs need to be retrieved.\n2. **serialNumber**: This parameter denotes the device serial number for which logs are required. It helps in fetching logs related to a particular device within the specified LAN Automation session.\n\nAdditionally, there is a query parameter:\n- **logLevel**: This parameter allows users to filter the logs based on different levels such as ERROR, INFO, WARNING, TRACE, CONFIG, and ALL. Specifying 'ALL' will display all logs except CONFIG logs. If you wish to view CONFIG logs along with the rest, you can leave this parameter blank.\n\nFrom a user perspective, this API query is valuable for troubleshooting and monitoring LAN Automation activities at an individual device level. By providing the LAN Automation session ID and the device serial number, users can access detailed logs containing information about the devices involved, configurations applied, errors encountered, and the overall status of the automation process.\n\nUsers can leverage this query to gain insights into the progress and outcomes of LAN Automation sessions, helping them identify issues, analyze device configurations, and ensure the smooth running of the automation process. Access to these logs can enhance network resource management and aid in optimizing network operations.\n\nOverall, this API query provides users with a way to delve into the specifics of LAN Automation for individual devices, enabling better monitoring, troubleshooting, and management within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation/log/{id}/{serialNumber}\nREST operation:get\nREST API query parameters:\n- id: LAN Automation session identifier.. The query parameters should be used in the path. This query parameter is required. \n- serialNumber: Device serial number.. The query parameters should be used in the path. This query parameter is required. \n- logLevel: Supported levels are ERROR, INFO, WARNING, TRACE, CONFIG and ALL. Specifying ALL will display device specific logs with the exception of CONFIG logs. In order to view CONFIG logs along with the remaining logs, please leave the query parameter blank.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/template-programmer/template/exporttemplates\" is used to export templates based on specific criteria or template IDs within the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be valuable when a user needs to download template information for various purposes such as backup, sharing, or further analysis. Users can specify the criteria or template IDs they are interested in to export the relevant templates. For example, a user might want to export templates with specific attributes like template name, project ID, software type, version, device family, or other relevant filters. By utilizing this query, users can efficiently retrieve the necessary templates that meet their configuration requirements.\n\nIn summary, this API query allows users to export templates based on specified criteria, enabling them to access the needed templates for network configuration deployment, management, and analysis within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/template/exporttemplates\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/buildings/{buildingId}/planned-access-points\" with the GET operation is used to retrieve a list of Planned Access Points for a specific building within the Cisco Catalyst Center environment. By specifying the buildingId as a path parameter and providing additional query parameters like limit, offset, and radios, users can access details about the planned access points in that building, including information about the planned radio settings.\n\nFrom a user perspective, network administrators or IT personnel can utilize this API query to view and analyze the planned access points within a specific building in their wireless network infrastructure. By making a GET request to this endpoint with the required parameters, users can retrieve a detailed list of planned access points, along with their corresponding planned radio details.\n\nThis query can be particularly beneficial for users who need to review or confirm the planned configurations of access points within a specific building. It can help users in customizing and setting up access points according to the organization's requirements, ensuring an optimal network design and troubleshooting potential issues related to access points within that building.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/buildings/{buildingId}/planned-access-points\nREST operation:get\nREST API query parameters:\n- buildingId: Building Id. The query parameters should be used in the path. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n- radios: inlcude planned radio details. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/network-device/config/count\" with the GET operation is used to retrieve the count of device configurations within the Cisco Catalyst Center platform. This query allows users to obtain the total number of device configurations present in the network.\n\nFrom a user perspective, this query can be valuable for network administrators who need to quickly assess the volume of device configurations across their network infrastructure. By making this API call, users can efficiently gather information on the number of configurations without the need to inspect each device individually. This can be beneficial for tasks such as auditing configuration changes, monitoring configuration growth over time, or ensuring consistency and compliance across devices.\n\nOverall, this API query provides users with a straightforward way to obtain an overview of the number of device configurations, aiding in network management, troubleshooting, and maintaining configuration standards within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/config\nREST operation:get\n</api-query>", "The query path \"/dna/system/api/v1/event/artifact/count\" in the Cisco Catalyst Center REST API is used to retrieve the count of registered event artifacts based on the provided eventIds or tags. This query is essential for users who want to track the number of subscriptions set up for different types of events or notifications within the Catalyst Center environment.\n\nFrom a user perspective, this query can be beneficial in various scenarios, such as:\n\n1. Monitoring Event Subscriptions: By providing specific eventIds, users can obtain a count of how many event subscriptions are associated with those eventIds. This information can help users track the number of subscriptions set up for different types of events, enabling them to understand the level of monitoring and alerting in place for various aspects of the Catalyst Center environment.\n\n2. Filtering and Analyzing Events: Users can use parameters like eventIds or tags to filter the events they want to receive information on. This allows users to focus on specific types of events or notifications and analyze them more effectively.\n\n3. Insights and Network Planning: By knowing the count of tags meeting certain attributes, users gain insights into the distribution of network elements based on those criteria. This information can aid in network planning, monitoring tag growth, and assessing the impact of changes on specific groups of devices within the Catalyst Center environment.\n\nOverall, this query provides users with valuable information about the number of event artifacts associated with specific eventIds or tags, allowing for better monitoring, analysis, and planning within the Cisco Catalyst Center ecosystem.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/event/artifact/count\nREST operation:get\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/interface/{id}\", with the GET operation is designed to retrieve detailed information about a specific interface based on its unique Interface ID. \n\nFrom a user perspective, this query can be utilized to fetch interface details for a specific network device. For example, a network administrator can use this query to retrieve information about a particular interface, such as its properties, configuration, and operational capabilities. By providing the Interface ID as a query parameter in the path, users can efficiently access the desired interface's information without the need to query each interface individually.\n\nThis query can be valuable for network administrators and engineers who need to understand the characteristics and functionalities of a specific interface. Users can leverage this API call to perform tasks such as obtaining a comprehensive overview of the interface properties, understanding valid operations that can be performed on the interface, and assessing the configuration options available for that interface.\n\nIn summary, this API query enables users to retrieve detailed interface information for a specific network device based on the provided Interface ID, helping them manage and analyze interfaces more effectively within their network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/{id}\nREST operation:get\nREST API query parameters:\n- id: Interface ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/topology/l2/{vlanID}\" with the GET operation is used to retrieve Layer 2 network topology details based on a specified VLAN ID. The query parameter \"vlanID\" represents the VLAN name for which the Layer 2 network topology details are being requested.\n\nFrom a user perspective, this query can be utilized in various scenarios such as network monitoring, troubleshooting, and configuration management. Users, particularly network administrators, can benefit from this query in the following ways:\n\n1. **View VLAN Configurations**: Users can fetch Layer 2 network topology details for a specific VLAN, providing an overview of how devices are interconnected within that VLAN.\n   \n2. **Troubleshooting**: In case of network issues related to a specific VLAN, users can use this query to analyze the Layer 2 topology and identify any potential misconfigurations or connectivity issues within that VLAN.\n\n3. **Network Segmentation**: By examining the Layer 2 network topology for a particular VLAN, users can ensure proper network segmentation based on VLANs, which is crucial for network security and traffic management.\n\n4. **Configuration Validation**: Users can validate the Layer 2 network topology against their expected VLAN configurations, ensuring that the network is structured as intended and functions correctly.\n\nOverall, this query provides users with valuable insights into how devices are interconnected within a specific VLAN, helping them in effectively managing, monitoring, and troubleshooting their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/topology/l2/{vlanID}\nREST operation:get\nREST API query parameters:\n- vlanID: Vlan Name for e.g Vlan1, Vlan23 etc. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/interface/network-device/{deviceId}\", with the GET operation is designed to retrieve interface information for a specific network device based on the provided Device ID. \n\nFrom a user perspective, this query can be used to fetch detailed interface information for a specific network device. For instance, a network administrator can utilize this query to retrieve a list of interfaces associated with a particular device, allowing them to manage and analyze the interfaces efficiently. By specifying the Device ID as a query parameter in the path, users can retrieve all relevant interface details in one go without the need to query each interface individually.\n\nThis API query can be valuable for network administrators and engineers who need to understand the interfaces' characteristics, configurations, and operational capabilities within a network environment. Users can leverage this query to monitor interface growth, compare interface distributions across different sites or device types, troubleshoot network issues, optimize network performance, and make informed decisions regarding network operations. \n\nIn summary, this API query provides a convenient way for users to access comprehensive interface information for a specific network device, enabling them to effectively manage and analyze interfaces within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/network-device/{deviceId}\nREST operation:get\nREST API query parameters:\n- deviceId: Device ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/image/importation/source/url\" with the POST operation is specifically designed to import a software image into the Cisco Catalyst Center from a remote file system using a URL for HTTP/FTP. This query allows users to fetch a software image from a remote location and upload it to the DNA Center for further management and distribution.\n\nFrom a user perspective, this query can be used to streamline the process of importing new software images into the Cisco Catalyst Center's image repository. Users can provide the URL of the software image they want to import through the query parameters. This can be particularly useful when users need to add new software images for deployment on network devices managed by the DNA Center.\n\nBy utilizing this query, users can ensure that the required software images are readily available within the Catalyst Center, enabling efficient software image management and deployment procedures. This process ultimately contributes to the smooth operation and maintenance of the network infrastructure by providing a centralized location for managing software images.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/image/importation/source/url\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- scheduleAt: Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional) . The query parameters should be used in the query. This query parameter is required. \n- scheduleDesc: Custom Description (Optional). The query parameters should be used in the query. This query parameter is required. \n- scheduleOrigin: Originator of this call (Optional). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/system/api/v1/event/config/connector-types\" is used to get the list of connector types available within the Cisco Catalyst Center system. Connector types in this context refer to the various types of connectors that can be used to integrate or connect different systems, applications, or devices within the Cisco Catalyst Center ecosystem.\n\nFrom a user perspective, this query can be extremely useful for developers, system administrators, or IT personnel who are responsible for managing and integrating different components within the Cisco Catalyst Center. By making this API call, users can retrieve a comprehensive list of available connector types, which can help them understand the integration capabilities and options available to them. This information is essential for planning, configuring, and implementing various integrations within the Cisco Catalyst Center environment.\n\nHaving access to the list of connector types can enable users to make informed decisions about how to best connect and utilize different systems and tools within the Cisco Catalyst Center. It provides clarity on the available integration options and helps streamline the process of setting up and managing these integrations effectively. Ultimately, this query empowers users to enhance the functionality and interoperability of their Cisco Catalyst Center environment by leveraging the appropriate connector types for their specific needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/event/config/connector-types\nREST operation:get\n</api-query>", "The REST API query path \"/dna/intent/api/v1/licenses/smartAccounts\" is used to retrieve details about Smart Accounts within the Cisco Catalyst Center. It allows users, such as administrators or network operators, to access information regarding the Smart Accounts configured in the system.\n\nFrom a user perspective, this query can be valuable for individuals responsible for managing licenses and device provisioning across different Smart Accounts. By making a GET request to this API endpoint, users can obtain comprehensive information about the Smart Accounts present in the system. This data may include details such as the Smart Account name, ID, associated licenses, usage statistics, and any additional relevant information related to licensing within the organization.\n\nBy leveraging this query, users can gain insights into the distribution of licenses, track license usage, ensure compliance with licensing agreements, and optimize license allocation across various Smart Accounts. This API call enables users to have a consolidated view of the Smart Accounts and their licensing information, facilitating efficient license management and allocation strategies within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/licenses/smartAccounts\nREST operation:get\n</api-query>", "This specific REST API query path `/dna/intent/api/v1/dnacaap/management/execution-status/{executionId}` is used to retrieve the execution details of a Business API within the Cisco Catalyst Center. The `executionId` parameter is required to specify the particular execution of the API for which details are being requested.\n\nFrom a user perspective, this API query can be very useful for monitoring and managing LAN Automation activities within the network infrastructure. By making a GET request to this endpoint with a specific `executionId`, users can retrieve detailed information about the automation process, such as device configurations applied, any errors encountered, and the overall status of the execution. \n\nUsers can utilize this query to troubleshoot any issues that may arise during the automation process, monitor the success of LAN Automation activities, and ensure that the automation process is running smoothly. By gaining insights into the execution details of Business APIs, users can make informed decisions to optimize their network automation processes, better manage network resources, and enhance network operations within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/dnacaap/management/execution-status/{executionId}\nREST operation:get\nREST API query parameters:\n- executionId: Execution Id of API. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/lan-automation/sessions\" in the Cisco Catalyst Center REST API is used to retrieve information about LAN Automation active sessions. This API query allows users to access details regarding the ongoing LAN Automation processes within the network infrastructure.\n\nFrom a user perspective, this query can be beneficial for monitoring the progress and outcomes of LAN Automation sessions in real-time. By invoking this API, users can obtain information such as the devices involved in the automation process, configurations that have been applied, any errors encountered during the automation, and the overall status of the automation process. This data can help users track the success of LAN Automation activities, troubleshoot any issues that may arise, and ensure that the automation process is functioning smoothly.\n\nUsers can leverage this query to gain insights into the LAN Automation process, enabling them to better manage network resources and optimize network operations within the Cisco Catalyst Center environment. By accessing detailed session information, users can analyze device configurations, identify potential issues, and take necessary actions to improve the efficiency of LAN automation activities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/lan-automation/sessions\nREST operation:get\n</api-query>", "The provided query path \"/dna/intent/api/v1/topology/l3/{topologyType}\" in the Cisco Catalyst Center API is used to retrieve Layer 3 network topology details based on the specified routing protocol (topologyType). This query allows users to view how Layer 3 devices are interconnected in the network based on the routing protocol configured, such as OSPF or ISIS.\n\nFrom a user perspective, this query can be beneficial in several scenarios, such as:\n\n1. **Network Monitoring**: Users can use this query to monitor the Layer 3 network topology and understand the routing paths taken by devices in the network.\n\n2. **Troubleshooting**: In case of routing issues or network outages related to a specific routing protocol, users can utilize this query to analyze the Layer 3 topology and identify any potential routing misconfigurations or connectivity problems.\n\n3. **Network Optimization**: By examining the Layer 3 network topology, users can optimize the routing paths, improve network performance, and ensure efficient data transmission within the network.\n\nOverall, this query provides users, especially network administrators and engineers, with valuable insights into the Layer 3 network infrastructure, enabling them to better manage, monitor, and troubleshoot their network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/topology/l3/{topologyType}\nREST operation:get\nREST API query parameters:\n- topologyType: Type of topology(OSPF,ISIS,etc). The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v2/application-policy-application-set/{id}\" with the REST operation \"delete\" is designed to delete an existing custom application set within the Cisco Catalyst Center platform based on the provided ID. \n\nFrom a user perspective, this query can be utilized when a user wants to remove a specific custom application set that has been previously created within the Catalyst Center. By sending a DELETE request to this query path and including the ID of the application set to be deleted in the path, users can effectively trigger the deletion process, removing all related information and configurations associated with that application set from the system. This action helps users in managing their application policies efficiently by allowing them to delete configurations that are no longer required or have become outdated.\n\nOverall, this query provides users with the flexibility to manage their custom application sets within the Catalyst Center platform, enabling them to clean up unnecessary configurations and maintain an optimized set of application policies aligned with their organization's needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/application-policy-application-set/{id}\nREST operation:delete\nREST API query parameters:\n- id: Id of custom application set to delete. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/device-reboot/apreboot/status\" with the GET operation is used to retrieve the status of Access Point reboot tasks within the Cisco Catalyst Center environment. This query allows users to check the outcome of access point reboot requests that have been initiated previously.\n\nFrom a user perspective, this query can be beneficial for network administrators or IT personnel who have triggered reboot tasks for access points and want to monitor the progress and completion status of those tasks. By providing the \"parentTaskId\" as a required query parameter, users can specify the task ID of the access point reboot request for which they want to retrieve the status.\n\nUpon making the GET request to this endpoint with the appropriate parameters, users can obtain detailed information regarding whether the access point reboot task associated with the provided task ID has been completed successfully, encountered any errors, or is still in progress. This status feedback can help users ensure that the reboot actions have been executed as intended and troubleshoot any issues that may have arisen during the reboot process.\n\nOverall, this query provides a convenient way for users to track and verify the results of access point reboot tasks, allowing them to maintain the stability and performance of their network infrastructure effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-reboot/apreboot/status\nREST operation:get\nREST API query parameters:\n- parentTaskId: task id of ap reboot request. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/tag/{id}/member/{memberId}\" with the DELETE operation is used to remove a specific member from a tag within the Cisco Catalyst Center. Tags in the Catalyst Center are utilized to categorize and organize network elements, such as devices, based on specific criteria or attributes.\n\nFrom a user perspective, this query can be valuable for managing and organizing network elements efficiently. By using this API endpoint, users can remove a particular member from a tag, which can help in keeping the tag structure up-to-date and relevant to the network organization. This capability allows users to maintain a clean and organized inventory of network elements by removing specific members from tags as needed. This can assist in ensuring that the network is properly categorized and managed according to the user's requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/tag/{id}/member/{memberId}\nREST operation:delete\nREST API query parameters:\n- id: Tag ID. The query parameters should be used in the path. This query parameter is required. \n- memberId: TagMember id to be removed from tag. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/network-device/tenantinfo/macaddress\" with the GET operation is used to retrieve information about devices registered for WSA (Web Security Appliance) notifications. The endpoint requires query parameters such as the device's serial number and MAC address for fetching the relevant details.\n\nFrom a user perspective, this query can be utilized to identify and manage devices within a network that are configured to receive WSA notifications. By providing the serial number or MAC address of a specific device, users can retrieve essential information related to that device, such as its status, configuration, and possibly its specific settings for receiving WSA notifications.\n\nFor network administrators or security personnel, this query can aid in monitoring and managing devices with specific security configurations or requirements. It can be particularly useful in ensuring that critical devices are set up to receive important security notifications from the Web Security Appliance.\n\nOverall, this query provides users with a targeted way to access details about devices registered for WSA notifications, enabling them to efficiently manage their network security and ensure that the necessary devices are appropriately configured to receive relevant security alerts.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/tenantinfo/macaddress\nREST operation:get\nREST API query parameters:\n- serialNumber: Serial number of the device. The query parameters should be used in the query. This query parameter is required. \n- macaddress: Mac addres of the device. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This query path allows users to retrieve a list of interfaces for a specified device management IP address. By providing the IP address as a query parameter in the path, users can efficiently fetch interface details for a specific network device. This API query can be valuable for network administrators and engineers who need to understand the characteristics, configurations, and operational capabilities of interfaces within a network environment.\n\nFrom a user perspective, this query can be used to fetch interface details for a specific network device within a specified range. For example, a network administrator can utilize this query to retrieve a subset of interfaces from a device, making it easier to manage and analyze a large number of interfaces. By providing the IP address of the device, users can efficiently retrieve the required interface information and perform further operations such as monitoring interface growth, comparing interface distributions across different sites or device types, troubleshooting network issues, or optimizing network performance.\n\nOverall, this API query provides users with a convenient way to access comprehensive interface information for a specific network device, enabling them to effectively manage and analyze interfaces within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface/ip-address/{ipAddress}\nREST operation:get\nREST API query parameters:\n- ipAddress: IP address of the interface. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/device-detail\" is used to retrieve detailed network device information based on the provided parameters like MAC address, device name, or UUID at a particular point in time. This query allows users to access critical details about a specific network device, including functional capabilities, interfaces, device configuration, certificate validation status, modules, and VLAN data associated with specified interfaces.\n\nFrom a user perspective, this query can be beneficial for various purposes such as:\n\n1. **Maintenance and Troubleshooting**: Users can obtain specific information about a network device by providing its MAC address, device name, or UUID. This can aid in maintenance activities, troubleshooting efforts, and identifying any issues with the device.\n\n2. **Network Monitoring**: Users can retrieve detailed network device information to monitor the performance and status of devices connected to the network. This can help in maintaining network health and identifying any potential bottlenecks or connectivity issues.\n\n3. **Inventory Management**: By using this query, users can gather comprehensive data about network devices, including their configurations and connected interfaces. This information is helpful for keeping track of devices in the network inventory and ensuring accurate documentation.\n\n4. **Configuration Analysis**: Users can analyze the configuration details of specific network devices by retrieving device-specific information like modules, VLAN data, and interfaces. This can assist in optimizing network configurations and ensuring proper network setup.\n\nOverall, the \"/dna/intent/api/v1/device-detail\" query provides users with a valuable tool to access detailed network device information, facilitating various network management tasks, troubleshooting activities, and enhancing overall network performance.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-detail\nREST operation:get\nREST API query parameters:\n- timestamp: UTC timestamp of device data in milliseconds. The query parameters should be used in the query. This query parameter is not required. \n- identifier: One of \"macAddress\", \"nwDeviceName\", \"uuid\" (case insensitive). The query parameters should be used in the query. This query parameter is required. \n- searchBy: MAC Address, device name, or UUID of the network device. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/site-config-preview\" with a POST operation is used for triggering a preview of the site-based Day 0 Configuration in the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be used to ensure that the configuration changes planned for a specific site within the network are accurate and error-free before they are actually applied to the devices. By sending a POST request with the necessary query parameters in the request body, users can request a preview of the configuration changes that will be pushed out to the devices associated with the specified site.\n\nThis API query can be beneficial for users in streamlining the deployment of LAN networks by allowing them to review and validate the changes to be made, ensuring consistency in configurations across devices, and reducing the potential for errors that may arise during manual configuration tasks. By previewing the configurations, users can have more confidence in the changes being made and can troubleshoot any issues proactively before applying them to the live network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/site-config-preview\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "From a user perspective, the specific REST API query path \"/dna/intent/api/v1/network-device/brief\" with the PUT operation is used to update the device role within the Cisco Catalyst Center platform. Users can utilize this query to modify the role of a device, specifying whether it functions as an access device, core device, distribution device, or border router.\n\nFor example, if a user wants to change the role of a specific network device from an access device to a distribution device within the Cisco Catalyst Center, they can send a PUT request to this API endpoint with the necessary information in the request body. This action allows users to accurately reflect the actual role and function of the device within the network infrastructure.\n\nOverall, this API query provides users with the capability to manage and assign appropriate roles to devices, ensuring clarity in the network infrastructure's hierarchy and functionality. By updating device roles through this API endpoint, users can streamline network management processes and optimize network operations within the Cisco DNA Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/brief\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/system/api/v1/role/{roleId}\" with the DELETE operation is used to delete a specific role in the Cisco DNA Center System. Roles in the Cisco Catalyst Center define the permissions and access levels for different users within the system. By utilizing this API endpoint, users can remove a role, thereby revoking the associated permissions, access rights, and policies assigned to that role.\n\nFrom a user perspective, this query is valuable for system administrators or IT personnel who are responsible for managing and configuring user roles and access control within the Cisco DNA Center System. Users can initiate the deletion process by sending a DELETE request to the endpoint with the specific roleId provided. This capability allows for efficient role management, ensuring that only necessary roles are maintained in the system, and unnecessary or outdated roles are removed.\n\nOverall, this API query enhances the role management capabilities within the Cisco DNA Center System, enabling users to maintain an organized and secure access control structure tailored to their organizational requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/system/api/v1/role/{roleId}\nREST operation:delete\nREST API query parameters:\n- roleId: The Id of the role to be deleted. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This query path allows users to retrieve a network device by specifying its IP address. By providing the IP address as a query parameter in the path, users can efficiently fetch details about the network device associated with that specific IP address, such as its type, status, configurations, and operational capabilities.\n\nFrom a user perspective, this query can be used to quickly access information about a particular network device solely based on its IP address. For example, a network administrator can use this query to identify a device, check its status, troubleshoot potential network issues related to that device, or ensure that the device is properly configured. This capability can greatly aid in network management tasks, allowing users to target specific devices for monitoring, maintenance, or troubleshooting without needing to search through extensive lists of network devices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/ip-address/{ipAddress}\nREST operation:get\nREST API query parameters:\n- ipAddress: Device IP address. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/licenses/smartAccount/{smart_account_id}/virtualAccount/{virtual_account_name}/device/transfer\" with the POST operation is specifically used for transferring device(s) from one virtual account to another within the same smart account within Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized by administrators or network operators who are managing devices across different virtual accounts and need to reorganize the distribution of devices. By providing the required parameters such as the smart account ID, the name of the target virtual account, and the necessary device transfer details in the body of the request, users can trigger this API call to efficiently move devices between virtual accounts.\n\nThis capability enables users to effectively manage the allocation and provisioning of devices within different virtual accounts, ensuring that the devices are correctly positioned to align with the organization's structure or operational needs. This query provides a convenient way to maintain device organization within Cisco Catalyst Center without the need for manual intervention, streamlining device management processes for administrators and enhancing operational efficiency.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/licenses/smartAccount/{smart_account_id}/virtualAccount/{virtual_account_name}/device/transfer\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- smart_account_id: Id of smart account. The query parameters should be used in the path. This query parameter is required. \n- virtual_account_name: Name of target virtual account. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/claim\" is used for the operation of claiming one or more devices in the Cisco Catalyst Center with a specified workflow. This query allows users to claim devices within the network, associating them with the appropriate workflows or configurations.\n\nFrom a user perspective, this query can be utilized when a user wants to onboard new devices into the network infrastructure managed by the Cisco Catalyst Center. By sending a POST request to this API path with the necessary request parameters in the body, users can trigger the process of claiming devices to a specific workflow or configuration.\n\nIn practical scenarios, users can automate the process of claiming devices by providing the essential information required for the claim process, such as device IDs, configuration parameters, serial numbers, etc. By utilizing this API query, users can streamline the device onboarding process, ensure devices are correctly associated with the desired workflows, and effectively manage the network infrastructure.\n\nOverall, this API query simplifies the process of claiming devices within the Cisco Catalyst Center, enabling users to efficiently onboard new devices and integrate them into the network infrastructure with ease.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/claim\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/nodes-config\" in the Cisco Catalyst Center REST API is utilized to retrieve detailed information about the current configuration of nodes managed by Cisco DNA Center. This includes essential details such as the API version, node name, NTP server, intracluster link, LACP mode, network static routes, DNS server, subnet mask, host IP, default gateway, and interface information.\n\nFrom a user perspective, this query can be extremely valuable for network administrators and developers who are responsible for managing the Cisco DNA Center environment. By querying this path, users can gain insight into the current configuration settings of their network nodes, which is crucial for ensuring proper network operation, troubleshooting issues, and making informed decisions about network configurations.\n\nUsers can leverage the information obtained from this query to verify the current settings of their network nodes, troubleshoot connectivity issues related to NTP servers, DNS servers, or default gateways, and ensure that the network is correctly configured with the appropriate IP addresses, subnet masks, and interface details. Additionally, this query can aid users in maintaining accurate documentation of their network configuration and facilitating efficient network management processes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/nodes-config\nREST operation:get\n</api-query>", "This REST API query path \"/dna/intent/api/v1/network-device/serial-number/{serialNumber}\" with the GET operation is specifically designed to retrieve information about a network device based on its serial number. The API will return details of the network device if the provided serial number matches any of the serial numbers collected in the system.\n\nFrom a user perspective, this query can be highly beneficial for tasks such as:\n\n1. **Device Identification:** Users can use this query to identify a specific network device by searching for it using its serial number. This can be particularly useful in large network environments where numerous devices are deployed, helping users pinpoint and retrieve information about a particular device quickly.\n\n2. **Status Checking:** By inputting the serial number of a device, users can check its status, including details such as its current operational status, connectivity, and any associated alerts or warnings. This can aid in proactive monitoring and troubleshooting of devices within the network.\n\n3. **Configuration Details:** The query can provide users with essential configuration details of a network device associated with the provided serial number. This can include information on device settings, firmware version, hardware modules, and other relevant attributes that are crucial for network management and maintenance.\n\n4. **Troubleshooting:** When facing network issues or device malfunctions, users can leverage this query to retrieve specific information about the problematic device using its serial number. This helps in diagnosing and troubleshooting network problems efficiently.\n\nOverall, this query enhances the network management capabilities of users by offering a targeted and efficient method to retrieve detailed information about network devices based on their serial numbers.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/serial-number/{serialNumber}\nREST operation:get\nREST API query parameters:\n- serialNumber: Device serial number. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/data/reports/{reportId}/executions/{executionId}\" with a GET operation is used to download the content of a report execution within the Cisco Catalyst Center platform. This query allows users to retrieve the detailed information of a specific report execution by providing the reportId and executionId parameters in the path.\n\nFrom a user perspective, this query can be valuable when users need to access the content and details of a particular report execution that has been previously executed. By specifying the reportId and executionId, users can obtain information such as the status, start time, end time, and any other relevant details associated with that specific report execution. Users can save the response to a file by converting the response data into a blob and setting the file format available from the content-disposition response header. This allows users to store and analyze the report content offline or share it with other stakeholders as needed. \n\nOverall, this query provides users with the ability to retrieve and download the content of a specific report execution, enabling them to review, analyze, and take necessary actions based on the outcome of that report execution.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/data/reports/{reportId}/executions/{executionId}\nREST operation:get\nREST API query parameters:\n- reportId: reportId of report. The query parameters should be used in the path. This query parameter is required. \n- executionId: executionId of report execution. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/ise-integration-status\" with the GET operation is specifically designed to check the integration status of Cisco Identity Services Engine (ISE) servers within the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query can be utilized to ensure that the configured ISE servers are properly integrated and functioning within the Catalyst Center platform. Users can access this information to verify that the integration of ISE servers is successful, which is crucial for maintaining the security and access control mechanisms of the network infrastructure.\n\nBy sending a GET request to this API endpoint, users can retrieve details such as the current status of ISE server integration, any error messages or warnings that need attention, and overall health indicators of the integration process. This information allows users to troubleshoot any issues related to the integration of ISE servers, ensuring that the network's security and access control functionalities are operating as intended.\n\nIn summary, by utilizing the \"/dna/intent/api/v1/ise-integration-status\" query, users can proactively monitor the integration status of Cisco ISE servers within the Catalyst Center environment, enabling them to maintain a secure and efficiently functioning network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/ise-integration-status\nREST operation:get\n</api-query>", "The REST API query path \"/dna/intent/api/v1/compliance/count\" within the Cisco Catalyst Center is designed to provide users with the total count of compliance details based on specified criteria. By specifying the compliance types and statuses as query parameters, users can retrieve the total count of compliance details that meet the specified criteria. This query is valuable for monitoring and analyzing the compliance status of network devices within the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query can be used in several ways:\n\n1. Monitoring Compliance Status: Users can use this query to track the compliance status of devices, identify non-compliant devices, and monitor ongoing compliance assessments. This information helps users ensure that their network devices adhere to predefined compliance standards.\n\n2. Integration with Monitoring Systems: Users can integrate this query into their compliance monitoring or reporting systems to keep track of compliance details over time. By doing so, users can effectively manage compliance assessments and ensure that their network devices meet the required standards.\n\n3. Automating Compliance Management: The count of compliance details obtained from this query can be integrated into automation scripts or tools to trigger subsequent actions based on compliance statuses. This can streamline compliance management tasks and improve operational efficiency.\n\n4. Identifying Compliance Issues: Discrepancies in the count of compliance details can indicate potential issues with compliance status. By using this query, users can quickly identify any compliance issues that may require attention.\n\nOverall, this REST API query path provides users with essential information to manage and maintain the compliance posture of their network infrastructure within the Cisco Catalyst Center platform effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/compliance/count\nREST operation:get\nREST API query parameters:\n- complianceStatus: Specify \"Compliance status(es)\" separated by commas. The Compliance status can be 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS', 'NOT_AVAILABLE', 'NOT_APPLICABLE', 'ERROR'.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/maps/import/{importContextUuid}/status\" is used to retrieve the status of a map archive import operation within the Cisco Catalyst Center. This query allows users to check the progress and outcome of an ongoing or recently initiated map import process.\n\nFrom a user perspective, this query is beneficial in the following ways:\n1. **Validation of Import**: Users can validate the pre-import data by checking the Map Archive Import Status using this API. It provides insights into the validation results and a preview of what will be imported.\n   \n2. **Monitoring Import Progress**: Users can track the status of the import process, whether it is pending, in progress, or completed. This helps users stay informed about the ongoing activities related to map data import.\n\n3. **Review Import Results**: Upon completion of the import process, this API offers a post-import summary of what was performed during the operation. Users can review this summary to ensure that the import was successful and verify the changes made to the map data.\n\nOverall, this query assists users in efficiently managing map data within the Cisco Catalyst Center by providing real-time updates on the import process. Users can use this information to make informed decisions regarding their map data and ensure that the import operation meets their expectations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/maps/import/{importContextUuid}/status\nREST operation:get\nREST API query parameters:\n- importContextUuid: The unique import context UUID given by a previous and recent call to maps/import/start API. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/functional-capability\" with the GET operation is designed to retrieve functional capability information for specific network devices within the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query allows users to access detailed information about the functional capabilities associated with a particular network device. By providing the device ID and function name as parameters in the query, users can retrieve specific details regarding the capabilities and features of the network device. \n\nThis information can include details such as supported protocols, services, interfaces, and other functional attributes of the device. Users, such as network administrators and operators, can leverage this query to gain insights into the capabilities of individual network devices. Understanding the functional capabilities of devices can be valuable for tasks such as network configuration planning, monitoring, and management.\n\nBy utilizing this query, users can efficiently gather important details about network devices, aiding in tasks like inventory management, network monitoring, troubleshooting, and configuration management. It provides a convenient way to access crucial device details in a summarized format, allowing users to make informed decisions regarding the management and maintenance of network devices within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/functional-capability\nREST operation:get\nREST API query parameters:\n- deviceId: Accepts comma separated deviceid's and return list of functional-capabilities for the given id's. If invalid or not-found id's are provided, null entry will be returned in the list.. The query parameters should be used in the query. This query parameter is required. \n- functionName: functionName. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/security-advisory/device/{deviceId}\", with the operation \"get\", is designed to retrieve a list of advisory IDs for a specific device identified by its unique device ID.\n\nFrom a user perspective, this query can be utilized to gather important security advisory information related to a particular device in an enterprise network. By providing the device's UUID as a parameter in the query path, users can efficiently fetch details about any existing security advisories or vulnerabilities associated with that device. This can aid users in assessing the potential risks posed by the device, understanding any security patches or updates that may be required, and taking proactive measures to enhance the overall security posture of the network.\n\nOverall, this query provides a convenient way for network administrators or security teams to stay informed about security advisories specific to individual devices, enabling them to prioritize and address security issues effectively within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/security-advisory/device/{deviceId}\nREST operation:get\nREST API query parameters:\n- deviceId: Device instance UUID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/licenses/device/{device_uuid}/details\" is used to retrieve detailed license information of a specific device within the Cisco Catalyst Center platform. By providing the device UUID (unique identifier) as a parameter in the query path, users can access comprehensive details about the licensing status of the targeted device.\n\nFrom a user perspective, this query can be beneficial in various ways:\n1. **Monitoring License Utilization**: Users can utilize this query to monitor and analyze the license usage of their devices to ensure efficient allocation and utilization of licenses.\n   \n2. **Managing License Inventory**: It enables users to maintain an inventory of licenses associated with their devices, allowing them to view the types of licenses in use and identify any shortages or excesses.\n\n3. **Ensuring Compliance**: By retrieving detailed license information, users can ensure that their devices are properly licensed and compliant with software requirements, aiding in decision-making processes and resource allocation.\n\n4. **Optimizing License Allocation**: Users can optimize their license allocation by examining detailed license information. This can help in reallocating licenses to devices that require them the most, maximizing the utilization of available licenses.\n\nIn conclusion, this query path provides users with a valuable tool to manage and monitor the licensing status of individual devices efficiently within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/licenses/device/{device_uuid}/details\nREST operation:get\nREST API query parameters:\n- device_uuid: Id of device. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/task/{taskId}\" with the operation \"get\" is used to retrieve a specific task by its unique identifier (UUID) in the Cisco Catalyst Center. This endpoint allows users to fetch detailed information about a task that has been executed or is currently in progress within the Catalyst environment.\n\n**User Perspective:**\nUsers can benefit from this query in several scenarios, such as:\n\n1. **Track Task Progress**: By providing the task ID, users can monitor the status of a particular task. This can help users keep track of the execution progress, whether the task has been completed successfully, is still in progress, or has encountered any errors.\n\n2. **Investigate Task Details**: Users can use this query to investigate the root cause of issues, analyze errors, and take necessary actions to rectify any problems related to the task.\n\n3. **Automation and Integration**: Developers and administrators can integrate this query into their automation scripts or monitoring tools to fetch real-time task information. This can help automate task tracking, streamline operational workflows, and enhance system monitoring within the Cisco Catalyst Center environment.\n\nIn summary, the \"/dna/intent/api/v1/task/{taskId}\" query path provides users with a convenient way to access task-specific information, track task progress, investigate task details, and automate task monitoring and management processes within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/task/operation/{operationId}/{offset}/{limit}\nREST operation:get\nREST API query parameters:\n- operationId: operationId. The query parameters should be used in the path. This query parameter is required. \n- offset: Index, minimum value is 0. The query parameters should be used in the path. This query parameter is required. \n- limit: The maximum value of {limit} supported is 500. <br/> Base 1 indexing for {limit}, minimum value is 1. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/integrate-ise/{id}\" with the PUT operation is specifically designed to allow users to accept the Cisco ISE Server Certificate for Cisco ISE Server Integration within the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query can be used to ensure that the Cisco ISE server certificate is properly accepted for integration purposes. Users can provide the necessary request parameters in the body of the PUT request to accept the certificate. The \"id\" parameter in the path should be the Cisco ISE Server Identifier, which can be obtained using the 'Get Authentication and Policy Servers' intent API.\n\nBy executing this query, users can effectively manage the integration of Cisco ISE servers within the Catalyst Center platform, ensuring secure and efficient functioning of the network infrastructure. This action is crucial for maintaining proper security and access control mechanisms within the network environment. Additionally, users can utilize the 'Cisco ISE Server Integration Status' Intent API to check the integration status and retry the integration if needed, thereby ensuring the seamless operation of the integrated servers.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/integrate-ise/{id}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- id: Cisco ISE Server Identifier. Use 'Get Authentication and Policy Servers' intent API to find the identifier.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/compliance\" in the Cisco Catalyst Center REST API is used to retrieve compliance status information for devices within a network infrastructure. Users can specify the compliance status(es) they are interested in (such as 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS', 'NOT_AVAILABLE', 'NOT_APPLICABLE', 'ERROR') and provide the Device IDs they want to check compliance for using the \"complianceStatus\" and \"deviceUuid\" query parameters respectively.\n\nFrom a user perspective, this query can be utilized in several ways:\n1. **Monitoring Compliance Status:** Users can track the compliance status of individual devices, identify non-compliant devices, and monitor ongoing compliance assessments to ensure that network devices adhere to predefined compliance standards.\n2. **Integration with Monitoring Systems:** By integrating this query into compliance monitoring or reporting systems, users can keep track of compliance details over time, effectively managing compliance assessments to meet required standards.\n3. **Automating Compliance Management:** The count of compliance details obtained from this query can be used in automation scripts or tools to trigger actions based on compliance statuses, streamlining compliance management tasks and enhancing operational efficiency.\n4. **Identifying Compliance Issues:** Discrepancies in compliance details can indicate potential issues, allowing users to quickly address any compliance-related issues that may require attention.\n\nOverall, this query provides valuable information for network administrators and IT professionals responsible for maintaining compliance within their network infrastructure. By closely monitoring compliance status, identifying issues, and integrating compliance monitoring into existing systems, users can effectively manage and maintain compliance within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/compliance\nREST operation:get\nREST API query parameters:\n- complianceStatus: Specify \"Compliance status(es)\" separated by commas. The Compliance status can be 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS', 'NOT_AVAILABLE', 'NOT_APPLICABLE', 'ERROR'.. The query parameters should be used in the query. This query parameter is required. \n- deviceUuid: Comma separated 'Device Ids'. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "From a user perspective, the REST API query path \"/dna/intent/api/v1/onboarding/pnp-device\" with the GET operation is designed to retrieve a list of devices from the Plug & Play service within the Cisco Catalyst Center. Users can leverage this query to filter and search for specific devices based on their unique identifiers or attributes such as serial number, state, onboarding state, name, PID, source, workflow ID, workflow name, smart account ID, virtual account ID, last contact status, MAC address, hostname, or site name.\n\nBy utilizing the query parameters like limit, offset, sort, and sortOrder, users can control the number of results, index of the first result, sorting criteria, and the order of sorting. This allows users to efficiently manage and monitor their network environment by accessing a comprehensive list of network devices and their associated information.\n\nAdditionally, the endpoint supports pagination and sorting, enabling users to navigate through large lists of devices easily and organize the retrieved data based on specific criteria. This functionality is beneficial for network administrators and IT professionals who need to efficiently manage and monitor a large number of devices within their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device\nREST operation:get\nREST API query parameters:\n- limit: Limits number of results. The query parameters should be used in the query. This query parameter is required. \n- offset: Index of first result. The query parameters should be used in the query. This query parameter is required. \n- sort: Comma seperated list of fields to sort on. The query parameters should be used in the query. This query parameter is required. \n- sortOrder: Sort Order Ascending (asc) or Descending (des). The query parameters should be used in the query. This query parameter is required. \n- serialNumber: Device Serial Number. The query parameters should be used in the query. This query parameter is required. \n- state: Device State. The query parameters should be used in the query. This query parameter is required. \n- onbState: Device Onboarding State. The query parameters should be used in the query. This query parameter is required. \n- name: Device Name. The query parameters should be used in the query. This query parameter is required. \n- pid: Device ProductId. The query parameters should be used in the query. This query parameter is required. \n- source: Device Source. The query parameters should be used in the query. This query parameter is required. \n- workflowId: Device Workflow Id. The query parameters should be used in the query. This query parameter is required. \n- workflowName: Device Workflow Name. The query parameters should be used in the query. This query parameter is required. \n- smartAccountId: Device Smart Account. The query parameters should be used in the query. This query parameter is required. \n- virtualAccountId: Device Virtual Account. The query parameters should be used in the query. This query parameter is required. \n- lastContact: Device Has Contacted lastContact > 0. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n- macAddress: Device Mac Address. The query parameters should be used in the query. This query parameter is required. \n- hostname: Device Hostname. The query parameters should be used in the query. This query parameter is required. \n- siteName: Device Site Name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The given REST API query path \"/dna/intent/api/v1/onboarding/pnp-device\" with the POST operation is used to add a device to the Plug and Play (PnP) database within the Cisco Catalyst Center. This functionality allows users to seamlessly incorporate new devices into their network infrastructure by storing relevant device information in the PnP database. \n\nFrom a user perspective, this query can be utilized when there is a need to onboard a new device into the PnP process. Users can provide the necessary device details, such as serial number, device name, product ID, etc., in the request body. By sending a POST request to this specific query path, users can efficiently add a device to the PnP database, enabling the device provisioning and configuration tasks to be streamlined. \n\nOverall, this API query provides users with a convenient method to manage device onboarding operations within the Cisco Catalyst Center, ensuring that new devices are seamlessly integrated into the network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path `/dna/intent/api/v1/network-device/file` in the Cisco Catalyst Center is designed for exporting a selected network device list to a file. \n\nFrom a user perspective, this query can be incredibly useful for network administrators, operators, and IT personnel who need to manage and analyze network devices efficiently. By utilizing this query, users can export a list of specific network devices to a file, which can then be used for various purposes such as inventory management, auditing, troubleshooting, or reporting. \n\nFor example, a network administrator may want to export a list of all network devices in a particular location or with a specific configuration for documentation or to perform bulk configurations. By utilizing this query, the user can export the desired network device list to a file format such as JSON, CSV, or any other supported file format, making it easier to work with the data in external tools or platforms.\n\nOverall, this REST API query provides users with a convenient way to extract essential information about network devices and streamline network management tasks effectively.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/file\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/module\" with the GET operation is designed to retrieve detailed module information of a network device based on the specified device ID. From a user perspective, this query path can be immensely useful for network administrators and operators within the Cisco Catalyst Center environment. By providing the specific device ID as a parameter in the query, users can access comprehensive details about the physical modules attached to the designated network device. \n\nThis information can include specifics such as module type, status, firmware version, serial number, and other relevant attributes pertaining to the modules of the device. Users can leverage this query for various purposes such as maintenance and troubleshooting, inventory management, hardware health monitoring, and network monitoring.\n\nBy making a GET request to this API query path, users can efficiently gather module data, aiding in tasks like maintenance activities, inventory management, troubleshooting efforts, and ensuring that network devices are properly equipped with the necessary modules for optimal performance. This query provides a convenient way to access crucial module details in a summarized format, enabling users to make informed decisions when managing and maintaining network devices within the Cisco Catalyst Center infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/module\nREST operation:get\nREST API query parameters:\n- deviceId: deviceId. The query parameters should be used in the query. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n- nameList: nameList. The query parameters should be used in the query. This query parameter is required. \n- vendorEquipmentTypeList: vendorEquipmentTypeList. The query parameters should be used in the query. This query parameter is required. \n- partNumberList: partNumberList. The query parameters should be used in the query. This query parameter is required. \n- operationalStateCodeList: operationalStateCodeList. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/licenses/term/smartAccount/{smart_account_id}/virtualAccount/{virtual_account_name}\" is used to retrieve details about the license terms associated with a specific smart account and virtual account in the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized for various purposes:\n1. **Monitoring License Details**: Users can leverage this query to access specific information about the terms and conditions of the licenses linked to their smart account and virtual account. This includes details such as license expiration dates, usage limits, and any additional terms that govern the license agreements.\n   \n2. **Managing License Inventory**: By using this query, users can effectively manage their license inventory for the identified smart and virtual accounts. They can gain insights into the types of licenses in use, available license quantities, and quickly identify any discrepancies or surplus licenses within the accounts.\n\n3. **Ensuring Compliance**: The query enables users to verify that all devices associated with the specified smart and virtual accounts are appropriately licensed and compliant with the required software regulations. By accessing the license term details, users can identify any potential compliance issues and take necessary actions to rectify them.\n\n4. **Optimizing License Allocation**: Users can optimize their license allocation strategies by examining the license term details provided by this query. This information can assist in reallocating licenses to devices where they are most needed, thereby enhancing the efficient utilization of available licenses across the accounts.\n\nIn summary, this query path serves as a valuable tool for users to gain insights into their license terms, manage their inventory effectively, ensure compliance with licensing requirements, and optimize the allocation of licenses within their smart and virtual accounts in the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/licenses/term/smartAccount/{smart_account_id}/virtualAccount/{virtual_account_name}\nREST operation:get\nREST API query parameters:\n- smart_account_id: Id of smart account. The query parameters should be used in the path. This query parameter is required. \n- virtual_account_name: Name of virtual account. Putting \"All\" will give license term detail for all virtual accounts.. The query parameters should be used in the path. This query parameter is required. \n- device_type: Type of device like router, switch, wireless or ise. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "From the provided context, the query path \"/dna/intent/api/v2/applications-count\" in the Cisco Catalyst Center is used to retrieve the count of all existing applications. This query allows users to obtain information on the total number of applications that have been created within the Catalyst Center environment.\n\nFrom a user perspective, this query can be valuable for monitoring and managing the applications configured within the Cisco Catalyst Center platform. By making a GET request to this endpoint with the required query parameter \"scalableGroupType\" set to 'APPLICATION', users can retrieve a numerical value indicating the total count of applications. Users can utilize this information to track the number of applications in their environment, manage the configurations of different applications, analyze the distribution of applications across various sets, and evaluate the overall complexity of application policies within the network infrastructure.\n\nIn summary, this API query enables users to efficiently gather data on the count of applications, which is essential for maintaining and optimizing application policies in the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/applications-count\nREST operation:get\nREST API query parameters:\n- scalableGroupType: scalable group type to retrieve, valid value APPLICATION. The query parameters should be used in the query. The default value is 'APPLICATION'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/eox-status/summary\" with the operation \"get\" is used to retrieve the End of Sale (EoX) summary for all devices in the network. This query enables users to access a consolidated overview of the EoX status of all devices present in their network.\n\nFrom a user perspective, this query is valuable for network administrators, operators, and IT personnel responsible for managing and maintaining network infrastructure. By making this query, users can easily obtain critical information about the EoX status of all devices in their network. This information can include details such as upcoming end-of-life dates for hardware and software components, recommended upgrades or replacements, and any relevant notices issued by Cisco regarding the devices.\n\nBy utilizing this query, users can stay proactive in planning for necessary upgrades or replacements to ensure the continued functionality and security of their network infrastructure. It enables users to have a comprehensive overview of the EoX status of all devices, allowing them to take appropriate actions to mitigate risks associated with outdated or unsupported hardware and software.\n\nOverall, this query enhances the visibility and awareness of EoX-related information for network devices, empowering users to make informed decisions, prioritize maintenance activities, and optimize the performance and longevity of their network equipment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/eox-status/summary\nREST operation:get\n</api-query>", "The provided query path \"/dna/intent/api/v1/assign-device-to-site/{siteId}/device\" with the POST operation is used to assign unassigned devices to a specific site within the Cisco Catalyst Center. This API query is designed to streamline the process of associating devices with their respective locations in the network infrastructure. It does not relocate already assigned devices to different sites.\n\nFrom a user perspective, this query can be very helpful in scenarios where new devices have been discovered but have not been assigned to any site yet. By providing the siteId parameter in the path and the necessary device information in the request body, users can conveniently assign these devices to the desired site. This process ensures that devices are correctly placed within the network hierarchy, allowing for better organization, management, and monitoring of the network infrastructure.\n\nOverall, this API query simplifies the task of assigning devices to sites, thereby enhancing network administration efficiency and ensuring proper device allocation within the network managed by the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/assign-device-to-site/{siteId}/device\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __runsync: Enable this parameter to execute the API and return a response synchronously. The query parameters should be used in the header. The default value is 'False'. This query parameter is required. \n- __persistbapioutput: Persist bapi sync response. The query parameters should be used in the header. The default value is 'True'. This query parameter is required. \n- __runsynctimeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated. The query parameters should be used in the header. The default value is '55'. This query parameter is required. \n- siteId: Site id to which site the device to assign. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/history\" with the GET operation is specifically designed to retrieve the history of a device during the Plug and Play (PnP) onboarding process. This query allows users to view the historical data associated with a specific device by providing its serial number as a required parameter. \n\nFrom a user perspective, this query can be extremely useful in several scenarios:\n\n1. **Device Tracking:** Users can track the history of a device by leveraging its serial number. This feature can aid in understanding the onboarding journey of the device, including past configurations, updates, and any issues encountered during the onboarding process.\n\n2. **Diagnostic Purposes:** By accessing the device history, users can diagnose and troubleshoot network problems efficiently. The historical data can provide valuable insights into the device's performance, configurations, and any changes that might have occurred over time.\n\n3. **Audit Trail:** The device history retrieved through this query can serve as an audit trail for compliance purposes. Users can review past activities and changes made to the device, ensuring transparency and accountability in network management.\n\n4. **Performance Analysis:** Users can analyze the historical data to assess the device's performance trends, identify patterns, and optimize network operations based on past onboarding experiences.\n\nOverall, this query empowers users to access detailed information about a device's onboarding history, enabling them to make informed decisions, troubleshoot effectively, and enhance the overall network management capabilities within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/history\nREST operation:get\nREST API query parameters:\n- serialNumber: Device Serial Number. The query parameters should be used in the query. This query parameter is required. \n- sort: Comma seperated list of fields to sort on. The query parameters should be used in the query. This query parameter is required. \n- sortOrder: Sort Order Ascending (asc) or Descending (des). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/template-programmer/template/version\" with the POST operation is designed to version the current contents of a template within the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query allows users to manage and track the versions of a specific template. By providing the unique templateId (UUID) of the desired template, users can retrieve all the versions associated with that template. Users can use this query to view the history of changes made to the template over time, track its evolution, review past modifications, and ensure they are working with the most up-to-date version.\n\nAdditionally, users can utilize the \"doVersion\" flag to specify whether a new version of the template should be created with the imported contents if the template already exists. This provides users with control over the versioning process and ensures that they have accurate and updated templates for deployment. \n\nOverall, this query empowers users to effectively manage their templates, track version history, and ensure they are always using the latest template version available in the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/template/version\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/network-device-poller/cli/read-request\" in the Cisco Catalyst Center REST API is used for running read-only commands on network devices to retrieve their real-time configurations. This query allows users to submit requests for read-only Command Line Interface (CLI) operations to gather information from the devices.\n\nFrom a user perspective, this query provides a way for network administrators and engineers to remotely access and retrieve real-time device configurations without making any changes to the configuration settings. By sending a POST request to this API endpoint with the desired read-only CLI commands specified in the request body, users can fetch information such as device status, version details, interface configurations, and more from multiple network devices at once.\n\nBy utilizing this query, users can automate the process of collecting real-time data from network devices, which can be helpful for monitoring and troubleshooting purposes. This feature can save time and effort for network management tasks, as users can retrieve the required information efficiently without manually accessing each device individually.\n\nOverall, the \"/dna/intent/api/v1/network-device-poller/cli/read-request\" query enhances the network management experience by providing a streamlined method for executing read-only CLI commands on network devices managed within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device-poller/cli/read-request\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/app-policy-queuing-profile-count\" with the REST operation \"get\" is used to retrieve the total count of all existing Application Policy Queuing Profiles within the Cisco Catalyst Center platform. This query path allows users to fetch information about the number of queuing profiles configured in the Catalyst Center environment.\n\nFrom a user perspective, this query can be valuable when users need to understand the overall scope of queuing profiles present in their network infrastructure. By making a GET request to this query path, users can retrieve a numerical value indicating the total count of application policy queuing profiles. This information can help users in tracking the quantity of queuing profiles, managing configurations for different profiles, assessing the distribution of profiles across various sets, and evaluating the complexity of application policies within the network.\n\nOverall, the \"/dna/intent/api/v1/app-policy-queuing-profile-count\" query empowers users to efficiently gather essential information about the existing queuing profiles, allowing them to make informed decisions and optimizations related to their network configurations based on the total count of application policy queuing profiles available.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/app-policy-queuing-profile-count\nREST operation:get\n</api-query>", "The provided query path \"/dna/intent/api/v1/dnac-packages\" in the Cisco Catalyst Center REST API is used to retrieve a summary of Cisco DNA Center Packages. This information includes details such as the name and version of packages installed on the DNA Center.\n\nFrom a user perspective, administrators or developers can utilize this query to obtain essential information about the current packages installed on the Cisco DNA Center. By querying this path, users can ensure compatibility with their applications, understand the required packages for installation or upgrade, and stay informed about the available optional packages. This query can assist users in making informed decisions regarding their Cisco DNA Center deployment, upgrades, and overall management of the system. \n\nOverall, this query provides crucial insights into the package versions and names installed on the Cisco DNA Center, enabling users to effectively manage and maintain their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/dnac-packages\nREST operation:get\n</api-query>", "From a user perspective, the REST API query path \"/dna/intent/api/v1/interface\" with the GET operation allows users to retrieve all available interfaces for a specific device within the Cisco Catalyst Center platform. By using this query, network administrators can easily obtain a comprehensive overview of the interfaces without the need to query each interface individually, making it convenient for monitoring interface growth over time, comparing interface distributions across different sites or device types, and gaining insights into the network's overall complexity.\n\nUsers can specify parameters such as offset, limit, lastInputTime, and lastOutputTime to filter the results and retrieve the desired interface information efficiently. This query can help users manage and analyze a large number of interfaces by fetching details for a specific network device within a specified range. By providing the necessary parameters, users can retrieve the required interface information and perform further operations like monitoring interface growth, comparing interface distributions, troubleshooting, capacity planning, or assessing the network's complexity.\n\nIn summary, this API query provides users with a convenient way to gather interface count data for a particular device, enabling them to make informed decisions and effectively manage their network interfaces.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/interface\nREST operation:get\nREST API query parameters:\n- offset: Offset. The query parameters should be used in the query. This query parameter is required. \n- limit: Limit. The query parameters should be used in the query. This query parameter is required. \n- lastInputTime: Last Input Time. The query parameters should be used in the query. This query parameter is required. \n- lastOutputTime: Last Output Time. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/onboarding/pnp-device/count\" with the GET operation is used to retrieve the count of PnP (Plug and Play) devices based on specified filter criteria within the Cisco Catalyst Center platform. This query is particularly helpful for network administrators who need to manage and onboard devices efficiently.\n\nFrom a user perspective, this query allows users to specify filter criteria such as device serial number, device state, onboarding state, device name, product ID, source, workflow ID, workflow name, smart account ID, virtual account ID, and last contact status. By providing these query parameters, users can accurately count the PnP devices that meet the specified criteria.\n\nUsers can utilize this query to streamline the onboarding process by gaining insights into the total number of devices that match specific attributes. For example, users can determine the number of devices in a particular state, devices associated with a specific workflow, or devices that have had recent contact. This information can help in organizing and managing PnP devices effectively.\n\nFurthermore, the device count obtained from this query can assist users in pagination, allowing them to navigate through large sets of data by understanding the distribution of devices based on different parameters. This can aid in optimizing device management tasks and ensuring a smooth onboarding process.\n\nIn conclusion, the \"/dna/intent/api/v1/onboarding/pnp-device/count\" query path serves as a valuable tool for network administrators to retrieve accurate device counts based on specific filter criteria, facilitating efficient device management and onboarding processes within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/onboarding/pnp-device/count\nREST operation:get\nREST API query parameters:\n- serialNumber: Device Serial Number. The query parameters should be used in the query. This query parameter is required. \n- state: Device State. The query parameters should be used in the query. This query parameter is required. \n- onbState: Device Onboarding State. The query parameters should be used in the query. This query parameter is required. \n- name: Device Name. The query parameters should be used in the query. This query parameter is required. \n- pid: Device ProductId. The query parameters should be used in the query. This query parameter is required. \n- source: Device Source. The query parameters should be used in the query. This query parameter is required. \n- workflowId: Device Workflow Id. The query parameters should be used in the query. This query parameter is required. \n- workflowName: Device Workflow Name. The query parameters should be used in the query. This query parameter is required. \n- smartAccountId: Device Smart Account. The query parameters should be used in the query. This query parameter is required. \n- virtualAccountId: Device Virtual Account. The query parameters should be used in the query. This query parameter is required. \n- lastContact: Device Has Contacted lastContact > 0. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/security-advisory/advisory/{advisoryId}/device\" with the operation \"get\" is used to retrieve a list of devices associated with a specific security advisory in the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be beneficial for network administrators or IT personnel who are managing network security and need to identify devices that are affected by a particular security advisory. By providing the advisory ID as a parameter in the query, users can obtain a comprehensive list of devices that are related to that specific advisory. This information can help in quickly identifying and addressing security vulnerabilities across the network.\n\nUsers can leverage this query to filter and search for specific devices based on their unique identifiers or attributes, making it easier to manage and monitor the network environment effectively. Additionally, users can use parameters like offset and limit to control the number of devices returned in the query results, facilitating better data management and analysis based on their requirements.\n\nOverall, this query path assists users in accessing a detailed list of network devices associated with a particular security advisory, enabling them to efficiently handle security vulnerabilities and ensure the overall security posture of their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/security-advisory/advisory/{advisoryId}/device\nREST operation:get\nREST API query parameters:\n- advisoryId: Advisory ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/network-device/{id}/wireless-info\" in the Cisco Catalyst Center is designed to retrieve detailed information about the wireless LAN controller associated with a specific network device identified by its unique device ID.\n\nFrom a user perspective, network administrators and operators can utilize this query to gather essential details about the wireless LAN controller of a particular network device within the Cisco Catalyst Center environment. By providing the device ID as a parameter in the query path, users can retrieve information such as the configuration, status, and settings of the wireless LAN controller. This information can be valuable for managing, monitoring, and troubleshooting the wireless network infrastructure effectively.\n\nUsers can leverage this query to gain insights into the wireless network setup, analyze the performance of the wireless LAN controller, ensure proper configurations, and troubleshoot any issues related to wireless connectivity. It can also aid in inventory management by providing a comprehensive view of the wireless components associated with the network device.\n\nOverall, this query path offers a convenient way for users to access specific details about the wireless LAN controller of a network device, empowering them to optimize wireless network performance and ensure seamless connectivity for users and devices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{id}/wireless-info\nREST operation:get\nREST API query parameters:\n- id: Device ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/discovery/{id}/network-device\" with the GET operation is used to retrieve the network devices discovered for a specific discovery task identified by the Discovery ID. Users can obtain the Discovery ID by using the \"Get Discoveries by range\" API. This query allows users to access information about the network devices that have been discovered as part of a particular discovery process within the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query can be beneficial in several ways:\n\n1. **Monitoring Network Devices:** Users can utilize this query to monitor and view the network devices discovered for a specific discovery task. By accessing this information, users can keep track of the devices that have been successfully discovered, aiding in network monitoring and management activities.\n\n2. **Troubleshooting:** In case of any issues or errors related to the discovery process, users can leverage this query to troubleshoot effectively. By examining the details of the discovered devices and associated information, users can identify any devices that may have failed to be discovered or diagnose any potential issues within the network.\n\n3. **Resource Planning:** Knowing the network devices that have been discovered can assist users in resource planning and allocation. By obtaining insights into the volume of devices discovered, users can better manage network resources and plan for any required expansions or optimizations.\n\nOverall, this API query path provides users with a valuable tool to access detailed information about the network devices discovered within specific discovery tasks in the Cisco Catalyst Center, enabling effective network monitoring, troubleshooting, and resource planning capabilities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/discovery/{id}/network-device\nREST operation:get\nREST API query parameters:\n- id: Discovery ID. The query parameters should be used in the path. This query parameter is required. \n- taskId: taskId. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/task/{taskId}/tree\", is used to retrieve a task with its children tasks based on their unique identifiers (UUIDs) in the Cisco Catalyst Center. The endpoint returns a hierarchical tree structure that includes the specified task and its related sub-tasks.\n\nFrom a user perspective, this query can be utilized in various scenarios:\n1. **Task Hierarchy Visualization**: Users can use this query to visualize the parent-child relationship between tasks, helping them understand dependencies and the overall structure of tasks within the Catalyst environment.\n   \n2. **Detailed Task Analysis**: By obtaining the task tree, users can delve into the details of individual tasks and their progress status, aiding in comprehensive analysis and troubleshooting of task execution.\n\n3. **Efficient Task Management**: Having access to the task tree enables users to efficiently manage and prioritize tasks by understanding the dependencies and order of execution.\n\n4. **Automation Integration**: Developers and administrators can integrate this query into automation scripts or monitoring tools to automate the retrieval of task hierarchies, facilitating real-time tracking and operational workflows within the Catalyst Center.\n\nIn summary, the \"/dna/intent/api/v1/task/{taskId}/tree\" query path offers users a convenient way to explore task relationships, analyze task details, enhance task management, and automate task-related processes within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/task/{taskId}/tree\nREST operation:get\nREST API query parameters:\n- taskId: UUID of the Task. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/eox-status/device/{deviceId}\" with the operation \"get\" is used to retrieve the End of Life (EoX) status for a specific device in the network. This query allows users to access information regarding Hardware End-of-life warnings, Software End-of-Life warnings, and Field Notices applicable to the device identified by its UUID.\n\nFrom a user perspective, this query is valuable for network administrators, operators, and IT personnel responsible for managing and maintaining specific network devices. By making this query, users can easily obtain critical information about the EoX status of a particular device. This information can include details such as upcoming end-of-life dates for hardware and software components, recommended upgrades or replacements specifically for the device, and any relevant notices issued by Cisco regarding that device.\n\nBy utilizing this query, users can stay proactive in planning for necessary upgrades or replacements for the specific device to ensure its continued functionality and security. This query enhances the visibility and awareness of EoX-related information at a granular level, empowering users to make informed decisions and take actions tailored to the needs of individual network devices.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/eox-status/device/{deviceId}\nREST operation:get\nREST API query parameters:\n- deviceId: Device instance UUID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/image/activation/device\" with the POST operation is intended to trigger software image activation within the Cisco Catalyst Center. This query allows users to activate a software image on a specific device in their network. \n\nFrom a user perspective, this query can be used to ensure that the desired software image is activated on the designated device, enabling the device to run on the updated software version. This process is crucial for maintaining the security, performance, and functionality of network devices. Users can provide the necessary device UUID and image UUID in the request body to initiate the activation process. \n\nBy utilizing this query, users can streamline the software image management process, ensuring that devices in their network are running on the latest software versions with enhanced features, bug fixes, and security patches. This can lead to improved network reliability and performance. \n\nOverall, this query empowers users to efficiently manage software image activation for their network devices through the Catalyst Center's API, contributing to smoother operations and enhanced security within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/image/activation/device\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n- Client-Type: Client-type (Optional). The query parameters should be used in the header. This query parameter is required. \n- Client-Url: Client-url (Optional). The query parameters should be used in the header. This query parameter is required. \n- scheduleValidate: scheduleValidate, validates data before schedule (Optional). The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n\n</api-query>", "The given query path \"/dna/intent/api/v1/wireless/accesspoint-configuration/details/{task_id}\" in the Cisco Catalyst Center is for retrieving the result of an Access Point Configuration task. This API endpoint allows users to query the details of a specific task related to access point configuration.\n\nFrom a user perspective, network administrators or IT personnel can utilize this query to retrieve detailed information about the configuration task associated with a specific access point. By providing the task_id parameter in the query path, users can get insights into the status, progress, and outcome of the configuration task for the access point.\n\nThis query can be valuable for users who need to monitor the completion status of access point configuration tasks, troubleshoot any issues that may arise during the configuration process, and ensure that the access points are properly set up according to the desired configurations. It offers a convenient way to track and manage access point configurations within the Catalyst Center platform, facilitating efficient network management and maintenance.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/accesspoint-configuration/details/{task_id}\nREST operation:get\nREST API query parameters:\n- task_id: task id information of ap config. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/maps/export/{siteHierarchyUuid}\" with a POST operation is used to export a Map archive in an XML interchange format along with the associated images in the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be valuable when a user wants to back up or transfer map data and associated images to another system or for archival purposes. By providing the unique siteHierarchyUuid of the site hierarchy element to export, users can specify which maps and associated images they want to include in the export process. This feature is especially useful when users need to share map data with colleagues, migrate data to a different system, or simply keep a copy of the map archive for reference.\n\nBy sending a POST request to this endpoint with the required parameters, users can initiate the export process, allowing the system to generate an XML file containing the map data and associated images. This action is essential for preserving map information and ensuring data integrity within the Catalyst Center. \n\nOverall, this query empowers users to efficiently manage their map data within the Cisco Catalyst Center by providing a method to export maps in a standardized format that can be easily shared or stored for future use.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/maps/export/{siteHierarchyUuid}\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'text/plain'. This query parameter is required. \n- siteHierarchyUuid: The site hierarchy element UUID to export, all child elements starting at this hierarchy element will be included. Limited to a hierarchy that contains 500 or fewer maps.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path `/dna/intent/api/v1/event/api-status/{executionId}` is used to retrieve the status of events API calls within the Cisco Catalyst Center. The `executionId` parameter is mandatory as it specifies the unique execution ID for which the status of the events API is being requested.\n\nFrom a user perspective, this API query is valuable for monitoring and managing events within the network infrastructure. Users can make a GET request to this endpoint with a specific `executionId` to fetch detailed information about the status of events API calls. This includes details such as whether the API calls were successful, any errors encountered during execution, and the overall status of the events.\n\nUsers can utilize this query to troubleshoot any issues related to events API calls, track the success rate of these calls, and ensure the smooth functioning of event-based processes within the Cisco Catalyst Center environment. By having access to detailed status information, users can make informed decisions to optimize event handling, improve network operations, and enhance the overall efficiency of event-driven activities.\n\nIn summary, this API query provides users with real-time status updates on events API calls, enabling them to effectively monitor and manage event-related processes within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/api-status/{executionId}\nREST operation:get\nREST API query parameters:\n- executionId: Execution ID. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/autocomplete\" with the GET operation is designed to retrieve device values that match fully or partially an attribute. Users can specify various attributes like vrfName, management IP address, hostname, MAC address, software version, and more to search for specific devices. The query allows wildcard searches using \".*\" for more flexible matching.\n\nFrom a user perspective, this query can be very helpful for quickly identifying devices based on specific attributes or patterns. For example, a user can search for devices with a particular management IP address, MAC address, or software version by providing those values in the query parameters. By using this query, users can efficiently filter and locate devices that meet certain criteria without having to sift through an extensive list of network devices manually.\n\nOverall, this API query enhances network management tasks by enabling users to pinpoint and retrieve device information that aligns with their specified attributes, facilitating effective monitoring, troubleshooting, and maintenance activities within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/autocomplete\nREST operation:get\nREST API query parameters:\n- vrfName: vrfName. The query parameters should be used in the query. This query parameter is required. \n- managementIpAddress: managementIpAddress. The query parameters should be used in the query. This query parameter is required. \n- hostname: hostname. The query parameters should be used in the query. This query parameter is required. \n- macAddress: macAddress. The query parameters should be used in the query. This query parameter is required. \n- family: family. The query parameters should be used in the query. This query parameter is required. \n- collectionStatus: collectionStatus. The query parameters should be used in the query. This query parameter is required. \n- collectionInterval: collectionInterval. The query parameters should be used in the query. This query parameter is required. \n- softwareVersion: softwareVersion. The query parameters should be used in the query. This query parameter is required. \n- softwareType: softwareType. The query parameters should be used in the query. This query parameter is required. \n- reachabilityStatus: reachabilityStatus. The query parameters should be used in the query. This query parameter is required. \n- reachabilityFailureReason: reachabilityFailureReason. The query parameters should be used in the query. This query parameter is required. \n- errorCode: errorCode. The query parameters should be used in the query. This query parameter is required. \n- platformId: platformId. The query parameters should be used in the query. This query parameter is required. \n- series: series. The query parameters should be used in the query. This query parameter is required. \n- type: type. The query parameters should be used in the query. This query parameter is required. \n- serialNumber: serialNumber. The query parameters should be used in the query. This query parameter is required. \n- upTime: upTime. The query parameters should be used in the query. This query parameter is required. \n- role: role. The query parameters should be used in the query. This query parameter is required. \n- roleSource: roleSource. The query parameters should be used in the query. This query parameter is required. \n- associatedWlcIp: associatedWlcIp. The query parameters should be used in the query. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/compliance/detail\" in the Cisco Catalyst Center REST API allows users to retrieve detailed compliance information based on specified criteria. Users can specify the compliance type(s) and compliance status(es) as query parameters to fetch compliance details for network devices. By providing the compliance type (e.g., 'NETWORK_PROFILE', 'IMAGE', 'FABRIC') and compliance status (e.g., 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS'), users can obtain relevant compliance data for analysis.\n\nFrom a user perspective, this query is valuable for monitoring and managing the compliance status of network devices within the Cisco Catalyst Center environment. Users can track compliance status, identify non-compliant devices, monitor ongoing compliance assessments, and gain insights into overall compliance activity by utilizing this query. \n\nThis query can be used in several ways by users:\n1. **Monitoring Compliance Status:** Users can track the compliance status of devices and ensure they adhere to predefined compliance standards.\n2. **Integration with Monitoring Systems:** Users can integrate this query into their compliance monitoring or reporting systems to keep track of compliance details over time.\n3. **Automating Compliance Management:** The obtained compliance details can be used in automation scripts to trigger actions based on compliance statuses, streamlining compliance management tasks.\n4. **Identifying Compliance Issues:** Discrepancies in compliance details can indicate potential issues, allowing users to address compliance-related issues promptly.\n\nBy effectively utilizing this query, users can manage compliance assessments, maintain compliance standards, and ensure the network devices operate in accordance with the required standards.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/compliance/detail\nREST operation:get\nREST API query parameters:\n- complianceType: Specify \"Compliance type(s)\" in commas. The Compliance type can be 'NETWORK_PROFILE', 'IMAGE', 'FABRIC', 'APPLICATION_VISIBILITY', 'FABRIC', RUNNING_CONFIG', 'NETWORK_SETTINGS', 'WORKFLOW' , 'EOX'.. The query parameters should be used in the query. This query parameter is required. \n- complianceStatus: Specify \"Compliance status(es)\" in commas. The Compliance status can be 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS', 'NOT_AVAILABLE', 'NOT_APPLICABLE', 'ERROR'.. The query parameters should be used in the query. This query parameter is required. \n- deviceUuid: Comma separated \"Device Id(s)\". The query parameters should be used in the query. This query parameter is required. \n- offset: offset/starting row. The query parameters should be used in the query. This query parameter is required. \n- limit: Number of records to be retrieved. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific query path \"/dna/intent/api/v1/global-credential\" with the REST operation \"get\" is used to retrieve global credentials in the Cisco Catalyst Center environment. These global credentials are crucial for authenticating and authorizing the Catalyst Center to communicate with and manage network devices effectively. \n\nFrom a user perspective, this query can be beneficial in several scenarios:\n1. **Viewing Existing Credentials**: Users can use this query to list and view all the global credentials available in the Catalyst Center.\n2. **Troubleshooting**: Users can utilize this query to troubleshoot any credential-related issues that may be affecting device communication. By checking the status and details of all global credentials, users can identify and resolve any authentication issues.\n3. **Automation and Integration**: This query can be integrated into scripts or applications for automation purposes. Users can fetch global credential details programmatically, facilitating streamlined credential management processes and ensuring consistency across the network environment.\n\nOverall, this query provides users with the necessary information to manage and troubleshoot device authentication processes within the network infrastructure efficiently.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-credential\nREST operation:get\nREST API query parameters:\n- credentialSubType: Credential type as CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY / SNMPV3 / HTTP_WRITE / HTTP_READ / NETCONF. The query parameters should be used in the query. This query parameter is required. \n- sortBy: sortBy. The query parameters should be used in the query. This query parameter is required. \n- order: order. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "From a user perspective, the REST API query path \"/dna/intent/api/v2/network\" in the Cisco Catalyst Center allows users to retrieve various network settings such as SNMP, NTP, Network AAA, Client and Endpoint AAA, and DNS server settings. Users can specify the siteId parameter to get the network settings associated with a specific site, making it a targeted and customizable query.\n\nThis query can be beneficial for network administrators and IT professionals who need to access and manage network configurations within their Cisco Catalyst Center infrastructure. By utilizing this query, users can retrieve important details related to SNMP configurations, network authentication, client and endpoint settings, and DNS server configurations. This information can be vital for tasks such as network monitoring, troubleshooting, compliance checking, and enhancing network security.\n\nOverall, this REST API query provides a convenient and efficient way for users to access and manage various network settings within their Cisco Catalyst Center environment, enabling them to maintain a secure and optimized network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v2/network\nREST operation:get\nREST API query parameters:\n- siteId: Site Id to get the network settings associated with the site.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/task\", is used to fetch tasks from the Cisco Catalyst Center based on specified filter criteria. Users can retrieve task(s) that meet specific conditions such as start and end time, data content, error code, service type, username, progress status, error status, failure reason, parent ID, etc.\n\nFrom a user perspective, this query can be beneficial in various ways:\n1. **Task Tracking**: Users can track the progress of tasks by filtering based on criteria like start and end time, progress status, error code, and failure reason.\n2. **Error Investigation**: Users can fetch tasks with specific error codes or failure reasons to analyze and troubleshoot issues.\n3. **Monitoring and Reporting**: By fetching tasks within a defined time range and with specific attributes, users can monitor task activity and generate reports for further analysis.\n4. **Automation**: Developers and administrators can integrate this query into automation scripts or monitoring tools to automate the retrieval of task information based on predefined criteria.\n\nOverall, the \"/dna/intent/api/v1/task\" query path provides users with a flexible and efficient way to access and manage tasks within the Cisco Catalyst Center environment, enabling task tracking, error investigation, monitoring, and automation of task-related processes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/task\nREST operation:get\nREST API query parameters:\n- startTime: This is the epoch start time from which tasks need to be fetched. The query parameters should be used in the query. This query parameter is required. \n- endTime: This is the epoch end time upto which audit records need to be fetched. The query parameters should be used in the query. This query parameter is required. \n- data: Fetch tasks that contains this data. The query parameters should be used in the query. This query parameter is required. \n- errorCode: Fetch tasks that have this error code. The query parameters should be used in the query. This query parameter is required. \n- serviceType: Fetch tasks with this service type. The query parameters should be used in the query. This query parameter is required. \n- username: Fetch tasks with this username. The query parameters should be used in the query. This query parameter is required. \n- progress: Fetch tasks that contains this progress. The query parameters should be used in the query. This query parameter is required. \n- isError: Fetch tasks ended as success or failure. Valid values: true, false. The query parameters should be used in the query. This query parameter is required. \n- failureReason: Fetch tasks that contains this failure reason. The query parameters should be used in the query. This query parameter is required. \n- parentId: Fetch tasks that have this parent Id. The query parameters should be used in the query. This query parameter is required. \n- offset: offset. The query parameters should be used in the query. This query parameter is required. \n- limit: limit. The query parameters should be used in the query. This query parameter is required. \n- sortBy: Sort results by this field. The query parameters should be used in the query. This query parameter is required. \n- order: Sort order - asc or dsc. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/issues\" with the GET operation is used to retrieve a list of global issues, issues for a specific device, or issues for a specific client device's MAC address from the Cisco Catalyst Center. This query allows users to fetch information about various network-related issues, their statuses, priorities, and whether they are AI-driven.\n\nFrom a user perspective, this query can be utilized by network administrators or IT professionals to monitor and manage issues within their network infrastructure. By specifying parameters such as startTime, endTime, siteId, deviceId, macAddress, priority, issueStatus, and aiDriven, users can narrow down the search results to focus on specific issues that require attention.\n\nFor example, a user could use this query to identify all active issues within a certain time frame for a particular site or device. Additionally, users can filter the results based on the priority of the issues or whether they are AI-driven, allowing for targeted troubleshooting and resolution efforts.\n\nOverall, this query path provides a convenient way for users to access detailed information about network issues, prioritize their resolution, and ensure the overall health and performance of the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/issues\nREST operation:get\nREST API query parameters:\n- startTime: Starting epoch time in milliseconds of query time window. The query parameters should be used in the query. This query parameter is required. \n- endTime: Ending epoch time in milliseconds of query time window. The query parameters should be used in the query. This query parameter is required. \n- siteId: Assurance UUID value of the site in the issue content. The query parameters should be used in the query. This query parameter is required. \n- deviceId: Assurance UUID value of the device in the issue content. The query parameters should be used in the query. This query parameter is required. \n- macAddress: Client's device MAC address of the issue (format xx:xx:xx:xx:xx:xx). The query parameters should be used in the query. This query parameter is required. \n- priority: The issue's priority value: P1, P2, P3, or P4 (case insensitive) (Use only when macAddress and deviceId are not provided). The query parameters should be used in the query. This query parameter is required. \n- issueStatus: The issue's status value: ACTIVE, IGNORED, RESOLVED (case insensitive). The query parameters should be used in the query. This query parameter is required. \n- aiDriven: The issue's AI driven value: YES or NO (case insensitive) (Use only when macAddress and deviceId are not provided). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/event/subscription-details/rest\" is used to retrieve detailed information about Rest/Webhook subscription details within the Cisco Catalyst Center environment. This query provides users with a list of Rest/Webhook subscription details based on the specified query parameters.\n\nFrom a user perspective, this query can be beneficial in various scenarios, such as:\n\n1. **Viewing Subscription Details:** Users can access the list of subscription details specific to Rest/Webhook subscriptions. This allows users to understand the current configurations and settings related to these subscriptions.\n\n2. **Managing Configurations:** Users can use this query to manage, update, or troubleshoot Rest/Webhook configurations by accessing existing settings. This can help in ensuring that the subscriptions are correctly set up and functioning as intended.\n\n3. **Monitoring Events:** By retrieving Rest/Webhook subscription details, users can monitor network events effectively. They can track the number of event subscriptions associated with specific configurations, helping them to stay informed about critical events within the Catalyst Center environment.\n\n4. **Implementing Changes:** Users can utilize this query to implement changes to their Rest/Webhook subscriptions as needed. By accessing detailed subscription information, users can make informed decisions about modifying their event monitoring and notification settings.\n\nIn essence, this query empowers users to have better visibility and control over their Rest/Webhook subscriptions within the Cisco Catalyst Center, enabling them to effectively manage their event monitoring processes and ensure timely responses to network events.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/event/subscription-details/rest\nREST operation:get\nREST API query parameters:\n- name: Name of the specific configuration. The query parameters should be used in the query. This query parameter is required. \n- instanceId: Instance Id of the specific configuration. The query parameters should be used in the query. This query parameter is required. \n- offset: The number of Rest/Webhook Subscription detail's to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of Rest/Webhook Subscription detail's to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/diagnostics/system/performance\" in the Cisco Catalyst Center is designed to retrieve aggregated performance indicators for the system. Users can specify the key performance indicator (KPI) they are interested in (such as CPU, memory, or network), along with the start and end times for the historical data they want to retrieve. The data can be fetched for the last three months. \n\nFrom a user perspective, this API query can be utilized to analyze the past performance of the network system based on specific KPIs. Users can monitor trends, identify patterns, and compare performance metrics over time to gain insights into the system's health and performance. By leveraging this query, users can make informed decisions, detect potential issues, and take proactive measures to optimize the network infrastructure. \n\nOverall, this API query provides users with valuable historical data that can aid in monitoring, analyzing, and optimizing the performance of their network system within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/diagnostics/system/performance\nREST operation:get\nREST API query parameters:\n- kpi: Valid values: cpu,memory,network. The query parameters should be used in the query. This query parameter is required. \n- function: Valid values: sum,average,max. The query parameters should be used in the query. This query parameter is required. \n- startTime: This is the epoch start time in milliseconds from which performance indicator need to be fetched. The query parameters should be used in the query. This query parameter is required. \n- endTime: This is the epoch end time in milliseconds upto which performance indicator need to be fetched. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network-device/{startIndex}/{recordsToReturn}\" with the GET operation is used to retrieve a range of network devices. It allows users to specify the start index and the number of records to return, enabling pagination through the list of network devices. This query is beneficial for monitoring network devices, filtering and searching for specific devices based on unique identifiers, managing and analyzing network environments effectively.\n\nFrom a user perspective, this query can be used for tasks such as:\n1. Monitoring network devices: Users can retrieve a subset of network devices based on pagination requirements, making it easier to manage a large number of devices.\n2. Searching for specific devices: Users can search for devices based on their start index and the number of records to return, allowing for targeted device retrieval.\n3. Data analysis: By specifying the pagination range, users can easily analyze and work with the network device data in chunks, facilitating efficient data management and analysis.\n\nOverall, this REST API query path provides users with the flexibility to access network device information in a controlled and organized manner, enhancing network monitoring and management capabilities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network-device/{startIndex}/{recordsToReturn}\nREST operation:get\nREST API query parameters:\n- startIndex: Start index [>=1]. The query parameters should be used in the path. This query parameter is required. \n- recordsToReturn: Number of records to return [1<= recordsToReturn <= 500]. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This REST API query path `\"/dna/intent/api/v1/template-programmer/project/importprojects\"` is used to import projects provided in the Data Transfer Object (DTO) in the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized when a user wants to import projects with predefined templates into the Catalyst Center environment. The user needs to include the DTO containing the projects to be imported in the body of the request. Additionally, the user should specify the `Content-Type` of the request body, where the default value is `'text/plain'`. The user also needs to provide the `doVersion` flag, which determines whether a new version of a template should be created if it already exists. If this flag is set to `false` and the template already exists, the operation will fail with a 'Template already exists' error. \n\nBy using this API call, users can efficiently import multiple projects with their associated templates into the Catalyst Center, allowing for easier project management and configuration deployment. This query provides users with the flexibility to streamline the import process and maintain consistency while organizing projects and templates within the Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/template-programmer/project/importprojects\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'text/plain'. This query parameter is required. \n- doVersion: If this flag is true then it creates a new version of the template with the imported contents in case if the templates already exists. \"\nIf this flag is false and if template already exists, then operation fails with 'Template already exists' error. The query parameters should be used in the query. The default value is 'False'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/compliance/\" in the Cisco Catalyst Center REST API is used to run compliance checks for device(s) within a network infrastructure. Users can specify the compliance status(es) they are interested in (such as 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS', 'NOT_AVAILABLE', 'NOT_APPLICABLE', 'ERROR') and provide the Device IDs they want to check compliance for using the \"complianceStatus\" and \"deviceUuid\" query parameters respectively.\n\nFrom a user perspective, this query is valuable for network administrators and IT professionals responsible for ensuring that their network devices adhere to predefined compliance standards. By utilizing this query, users can closely monitor the compliance status of individual devices, identify non-compliant devices, track ongoing compliance assessments, and gain insights into the overall compliance activity within their network infrastructure.\n\nUsers can integrate this query into their compliance monitoring or reporting systems to keep track of compliance details over time, effectively managing compliance assessments and ensuring that their network devices meet the required standards. This can be achieved by specifying the compliance status and device IDs as query parameters to retrieve the total count of compliance details that meet the specified criteria, aiding in tracking compliance status, identifying non-compliant devices, monitoring ongoing compliance assessments, and gaining insights into the overall compliance activity within the system.\n\nOverall, this API query enables users to monitor and manage the compliance status of network devices within the Cisco Catalyst Center environment, providing valuable insights and facilitating efficient compliance management within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/compliance/\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- Content-Type: Request body content type. The query parameters should be used in the header. The default value is 'application/json'. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/dna-event/snmp-config\" is utilized to retrieve SNMP configurations or SNMP destinations within the Cisco Catalyst Center environment. \n\nFrom a user perspective, this query can be used to access and manage SNMP settings for network devices. By sending a GET request to this endpoint with the required parameters such as configId, offset, limit, sortBy, and order, users can retrieve specific SNMP configurations stored within the Catalyst Center platform. \n\nUsers can leverage this query to view details such as SNMP contact information, location, associated wireless LAN controller IP, interface count, line card count, managed status, memory size, uptime, device mode, and more for their network devices. Additionally, users can use this query to update SNMP properties by providing specific details in the request body, allowing them to modify SNMP settings to ensure accurate monitoring and management of their infrastructure.\n\nOverall, this query provides users with the capability to efficiently access and manipulate SNMP configurations for better monitoring and management of their network devices through the Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/dna-event/snmp-config\nREST operation:get\nREST API query parameters:\n- configId: List of SNMP configurations. The query parameters should be used in the query. This query parameter is required. \n- offset: The number of SNMP configuration's to offset in the resultset whose default value 0. The query parameters should be used in the query. This query parameter is required. \n- limit: The number of SNMP configuration's to limit in the resultset whose default value 10. The query parameters should be used in the query. This query parameter is required. \n- sortBy: SortBy field name. The query parameters should be used in the query. This query parameter is required. \n- order: order(asc/desc). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/global-pool\" with the PUT operation allows users to update the global pool configuration within the Cisco Catalyst Center environment. The global pool is a central repository of IP addresses or other resources that can be dynamically allocated to different devices or services within the network.\n\nFrom a user perspective, this query can be utilized to manage and update the pool of available resources efficiently. Users can send a PUT request with the updated global pool details in the request body, such as adding new IP addresses, modifying existing resource allocations, or deleting outdated resources. By using this API endpoint, users can ensure that the network resources are effectively managed and allocated as per the current network requirements and operational needs.\n\nOverall, this API query provides users with the flexibility to make real-time adjustments to the global pool configuration, enabling them to optimize resource utilization, prevent IP address conflicts, and maintain network stability. It empowers users to adapt to evolving network demands and ensure smooth network operations by efficiently managing available resources.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-pool\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/global-pool\" with the GET operation is used to retrieve information about the global pool within the Cisco Catalyst Center environment. The global pool serves as a central repository of IP addresses or other resources that can be dynamically allocated to various devices or services across the network.\n\nFrom a user perspective, this query allows users to fetch details about the global pool configuration, such as IP address ranges, gateways, DHCP server IPs, DNS server IPs, etc. Users can specify query parameters like offset and limit to control the number of global pools to be retrieved. By making a GET request to this API endpoint, users can efficiently monitor and manage the available resources within the global pool.\n\nAdditionally, users can use this API query to gather real-time information about the global pool, which can aid in making informed decisions regarding resource allocation, network design, and ensuring that the network resources are effectively managed based on the current operational requirements. This API endpoint provides users with the flexibility to access and manipulate global pool information programmatically, enabling them to streamline network resource management processes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-pool\nREST operation:get\nREST API query parameters:\n- offset: offset/starting row. The query parameters should be used in the query. This query parameter is required. \n- limit: No of Global Pools to be retrieved. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/global-pool\" with the POST operation is used to create a global pool within the Cisco Catalyst Center environment. A global pool acts as a centralized repository of IP addresses or other network resources that can be dynamically allocated to different devices or services across the network.\n\nFrom a user perspective, this API query allows users to define and set up a global pool by providing details such as IP address ranges, DNS server IPs, gateway information, and other resource allocations. Users can send a POST request with the required parameters in the request body to create a new global pool or modify an existing one. This flexibility enables users to configure network resources based on current operational needs and requirements.\n\nBy utilizing this API endpoint, users can ensure efficient management and allocation of network resources, optimize resource utilization, prevent conflicts, and maintain network stability. It empowers users to adapt to evolving network demands and ensures smooth network operations by effectively managing available resources through the creation and configuration of global pools.\n\nOverall, this API query provides users with a programmatic way to manage global pool information, enabling streamlined network resource management processes and real-time adjustments to global pool configurations as needed.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-pool\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __persistbapioutput: \tPersist bapi sync response. The query parameters should be used in the header. The default value is 'true'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/applications-count\" in the Cisco Catalyst Center is used to retrieve the count of all existing applications within the Catalyst Center environment. This query provides users with information on the total number of applications that have been created. \n\nFrom a user perspective, this query can be valuable for monitoring and managing the applications configured within the Cisco Catalyst Center platform. By making a GET request to this endpoint with the required query parameter \"scalableGroupType\" set to 'APPLICATION', users can retrieve a numerical value indicating the total count of applications. \n\nUsers can utilize this information to track the number of applications in their environment, manage the configurations of different applications, analyze the distribution of applications across various sets, and evaluate the overall complexity of application policies within the network infrastructure. This API query enables users to efficiently gather data on the count of applications, which is essential for maintaining and optimizing application policies in the Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/applications-count\nREST operation:get\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/business/sda/hostonboarding/access-point\" with the operation \"delete\" is used to delete port assignments for access points in the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized to remove port assignments for access points within the SDA Fabric. By providing the required query parameters \"deviceManagementIpAddress\" and \"interfaceName\" in the query, users can effectively delete the port assignment associated with a specific access point. \n\nThis functionality can be valuable in scenarios where there is a need to reconfigure or decommission an access point within the SDA Fabric. By triggering the delete operation, users can remove the existing port assignment, which may be necessary for network optimization, troubleshooting, or restructuring purposes. \n\nOverall, by using this delete query, network administrators or IT personnel can manage and maintain the port assignments for access points in the SDA Fabric, ensuring proper network configuration and optimization within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/hostonboarding/access-point\nREST operation:delete\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n- interfaceName: interfaceName. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/business/sda/hostonboarding/access-point\" with the operation \"get\" is used to retrieve port assignments for access points within the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be valuable in scenarios where there is a need to view or verify the port assignment associated with a specific access point in the SDA Fabric. Users can input the required query parameters \"deviceManagementIpAddress\" and \"interfaceName\" in the query to fetch the details of the port assignment for the specified access point.\n\nFor example, a network administrator can use this query to check which physical port an access point is connected to within the SDA Fabric. This information can be crucial for troubleshooting connectivity issues, optimizing network performance, or ensuring proper network configuration.\n\nOverall, this API query provides users with visibility into how access points are physically connected within the SDA Fabric, aiding in effective network management and maintenance.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/hostonboarding/access-point\nREST operation:get\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n- interfaceName: interfaceName. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/hostonboarding/access-point\" with the POST operation is used to add port assignments for access points within the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized in various scenarios. For example, network administrators or IT personnel can use this query to assign specific physical ports for access points within the SDA Fabric. This information is crucial for ensuring proper network configuration, troubleshooting connectivity issues, and optimizing network performance.\n\nBy specifying the required query parameters in the body of the request, users can effectively manage and maintain port assignments for access points. This functionality allows users to reconfigure or decommission access points within the SDA Fabric as needed. Additionally, it provides visibility into how access points are physically connected within the network, enabling users to make informed decisions for network optimization and troubleshooting purposes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/hostonboarding/access-point\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/wireless/rf-profile\" with the REST operation \"get\" is used to retrieve RF profiles within the Cisco Catalyst Center platform. \n\nFrom a user perspective, this query can be beneficial when a user needs to access details about RF profiles configured in the platform. Users can use this query to fetch all existing RF profiles or retrieve specific profiles by providing the name of the RF profile as a query parameter. This information can be valuable for network administrators and engineers to manage and optimize wireless network configurations, settings, and policies related to RF profiles. \n\nBy utilizing this query, users can ensure that their wireless network environments are properly configured, optimized, and aligned with specific RF profile settings to enhance network performance, coverage, and reliability within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/rf-profile\nREST operation:get\nREST API query parameters:\n- rf-profile-name: RF Profile Name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/wireless/rf-profile\" with the POST operation is used to create or update RF profiles within the Cisco Catalyst Center platform. \n\nFrom a user perspective, this query can be valuable when a user needs to manage and optimize wireless network configurations specifically related to RF profiles. Users can utilize this query to either create new RF profiles with unique characteristics and settings or update existing RF profiles to align with changing network requirements or performance optimization needs.\n\nBy sending a POST request to this query path with the necessary parameters included in the request body, users can define RF profiles that dictate how the wireless network operates in terms of radio frequency settings, channel allocations, power levels, and other related parameters. This capability allows users to tailor the wireless network behavior to suit their specific deployment scenarios and requirements.\n\nOverall, the \"/dna/intent/api/v1/wireless/rf-profile\" POST query provides users with the capability to efficiently manage and customize RF profiles within the Catalyst Center platform, ensuring that their wireless network configurations are optimized for performance, coverage, and reliability.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/rf-profile\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/global-pool/{id}\" with the DELETE operation is used to delete a global IP pool within the Cisco Catalyst Center environment. This API endpoint allows users to remove a specific global pool identified by its unique ID from the system.\n\nFrom a user perspective, this query can be used when there is a need to remove a global IP pool that is no longer required, has become outdated, or needs to be replaced with a new configuration. By providing the ID of the global IP pool to be deleted in the query parameter, users can trigger the deletion process through a DELETE request.\n\nOverall, this API query provides users with the capability to efficiently manage their global IP pool resources by enabling them to remove any unnecessary or outdated pools, ensuring that only relevant and up-to-date configurations are retained in the network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/global-pool/{id}\nREST operation:delete\nREST API query parameters:\n- id: global pool id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/device\" with the GET operation is used to retrieve device information from the Software-Defined Access (SDA) Fabric within the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized to fetch specific details about devices that are part of the SDA Fabric network. By providing the required query parameter \"deviceManagementIpAddress,\" users can request information regarding a particular device using its IP address within the SDA Fabric. This can include details such as device status, configuration, location within the fabric, and other relevant information.\n\nUsers can leverage this query to monitor and manage devices effectively within the SDA Fabric network, aiding in network troubleshooting, configuration management, and ensuring the overall health and performance of the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/device\nREST operation:get\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/nfv/network-profile/{id}\" with the PUT operation is used to update an NFV (Network Function Virtualization) Network profile within the Cisco Catalyst Center platform. NFV is a technology that virtualizes network functions traditionally performed by hardware appliances.\n\nFrom a user perspective, this query is essential for managing and updating the network profiles associated with NFV within the Catalyst Center environment. Users may need to modify attributes or configurations of the NFV network profiles to ensure optimal performance, security, and resource utilization. By sending a PUT request to this API endpoint with the required parameters in the request body, users can make changes to the specified NFV profile, such as updating network policies, security settings, or other relevant configurations.\n\nOverall, this API query provides users with the capability to efficiently customize and maintain their NFV network profiles within the Cisco Catalyst Center, ensuring that the virtualized network functions operate effectively and align with the organization's network requirements and standards.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/nfv/network-profile/{id}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- id: Id of the NFV profile to be updated. The query parameters should be used in the path. This query parameter is required. \n- name: Name of the profile to be updated. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/nfv/network-profile/{id}\" with the GET operation is used to retrieve an NFV (Network Function Virtualization) Network profile within the Cisco Catalyst Center platform. NFV is a technology that virtualizes network functions traditionally performed by hardware appliances. \n\nFrom a user perspective, this query is essential for accessing and viewing the details of specific NFV network profiles managed in the Catalyst Center environment. Users can utilize this query to retrieve information about the configurations, settings, and attributes of a particular NFV network profile by providing the ID of the profile as a parameter in the query.\n\nBy sending a GET request to this API endpoint with the required ID parameter, users can retrieve essential information about the specified NFV network profile. This data can be valuable for network administrators and operators to understand the current settings, policies, and configurations of the NFV profile, facilitating efficient network management, troubleshooting, and optimization efforts within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/nfv/network-profile/{id}\nREST operation:get\nREST API query parameters:\n- id: ID of network profile to retrieve.. The query parameters should be used in the path. This query parameter is required. \n- offset: offset/starting row. The query parameters should be used in the query. This query parameter is required. \n- limit: Number of profile to be retrieved. The query parameters should be used in the query. This query parameter is required. \n- name: Name of network profile to be retrieved. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/nfv/network-profile/{id}\" with the DELETE operation is used to delete an NFV (Network Function Virtualization) Network profile within the Cisco Catalyst Center platform. NFV is a technology that virtualizes network functions traditionally performed by hardware appliances. \n\nFrom a user perspective, this query is essential for removing unwanted or outdated NFV network profiles from the Catalyst Center environment. Users may need to delete specific network profiles for various reasons such as decommissioning a device, updating network configurations, or cleaning up obsolete profiles.\n\nBy sending a DELETE request to this API endpoint with the required ID parameter in the path, users can trigger the deletion process, effectively removing all configurations, settings, and policies associated with the specified NFV network profile. This ensures that the network environment remains up-to-date and free from any unnecessary or outdated profiles.\n\nOverall, this API query provides users with the capability to manage their NFV network profiles efficiently by allowing them to delete profiles that are no longer needed, helping to maintain a clean and organized network environment within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/nfv/network-profile/{id}\nREST operation:delete\nREST API query parameters:\n- id: Id of nfv network profile to delete. . The query parameters should be used in the path. This query parameter is required. \n- name: Nameof nfv network profile to delete. . The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/business/sda/transit-peer-network\" with the operation \"get\" is used to retrieve information about Transit Peer Networks within the Software-Defined Access (SD-Access) managed by the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be beneficial for network administrators who need to gather details about the Transit or Peer Networks within their SD-Access environment. By providing the required query parameter \"transitPeerNetworkName,\" users can retrieve key information such as configurations, settings, and other relevant details related to the specified Transit or Peer Network. \n\nFor example, a network administrator may use this query to check the configuration settings of a specific Transit or Peer Network, verify connectivity information, or troubleshoot any issues related to these networks. By utilizing this API query, users can gain insights into how the Transit or Peer Networks are set up within their SD-Access infrastructure, enabling them to make informed decisions and ensure the proper functioning of their network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/transit-peer-network\nREST operation:get\nREST API query parameters:\n- transitPeerNetworkName: Transit or Peer Network Name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/business/sda/transit-peer-network\" with the operation \"post\" is used to add a Transit Peer Network within the Software-Defined Access (SD-Access) managed by the Cisco Catalyst Center. When a network administrator needs to establish a new Transit or Peer Network or modify existing ones, this query can be utilized.\n\nFrom a user perspective, this query allows network administrators to define the configuration settings for Transit or Peer Networks within their SD-Access infrastructure. By providing the necessary query parameter \"request\" in the body of the POST request, users can specify the details required to create or update a Transit Peer Network.\n\nKey use cases for this query include setting up new Transit Peer Networks, updating existing configurations, and ensuring proper connectivity and functionality of these networks within the SD-Access environment. By leveraging this API query, users can efficiently manage their network resources, troubleshoot any issues related to Transit or Peer Networks, and optimize network performance.\n\nIn summary, utilizing the \"/dna/intent/api/v1/business/sda/transit-peer-network\" POST query empowers network administrators to define and configure Transit Peer Networks effectively within their SD-Access infrastructure, enabling them to maintain a secure, reliable, and high-performing network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/transit-peer-network\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/business/sda/transit-peer-network\" with the operation \"delete\", is used to delete a Transit Peer Network from the Software-Defined Access (SD-Access) infrastructure managed by the Cisco Catalyst Center. \n\nFrom a user perspective, network administrators can utilize this query to remove a specific Transit Peer Network that is no longer needed or has been decommissioned. By providing the required query parameter \"transitPeerNetworkName\" in the query, users can effectively trigger the deletion process for the specified Transit Peer Network. This action can help in optimizing the network environment by removing unnecessary configurations and settings associated with the deleted Transit Peer Network.\n\nOverall, this query gives users the capability to manage their SD-Access infrastructure efficiently by removing redundant or outdated Transit Peer Networks, ensuring a streamlined and well-maintained network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/transit-peer-network\nREST operation:delete\nREST API query parameters:\n- transitPeerNetworkName: Transit Peer Network Name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/edge-device\" with the operation \"delete\" is specifically designed to delete an edge device from the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center. This functionality allows users to remove an edge device from the SDA Fabric, effectively eliminating all configurations, policies, and settings associated with that particular device.\n\nFrom a user perspective, this query can be valuable in scenarios where an edge device needs to be decommissioned, replaced, or reconfigured within the SDA Fabric. By providing the necessary query parameter \"deviceManagementIpAddress\" when making the API call, users can initiate the deletion process for the specified edge device. This action helps in maintaining an accurate and up-to-date inventory of edge devices within the SDA Fabric, ensuring that only active and relevant devices are part of the network infrastructure.\n\nOverall, by using this delete query, network administrators or IT personnel can effectively manage and maintain the edge devices within the SDA Fabric, keeping the network environment optimized, secure, and up-to-date with the latest configurations and settings.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/edge-device\nREST operation:delete\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "From the provided context, the REST API query path \"/dna/intent/api/v1/business/sda/edge-device\" with the operation \"get\" is used to retrieve information about an edge device within the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized to fetch specific details and configurations related to a particular edge device that is part of the SDA Fabric network. By providing the required query parameter \"deviceManagementIpAddress,\" users can request information about a specific edge device using its IP address within the fabric. This information may include details such as the device's status, connectivity, assigned policies, and its role within the SDA Fabric network.\n\nUsers can leverage this query to monitor the status and configurations of edge devices effectively within the SDA Fabric, aiding in network troubleshooting, device management, and ensuring the overall health and performance of the edge devices in the network infrastructure. This query provides valuable insights into the edge devices' specifics, enabling administrators to make informed decisions regarding their management and configuration within the SDA Fabric environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/edge-device\nREST operation:get\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/business/sda/edge-device\" with the operation \"post\" is used to add an edge device to the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center. When making this API call, users can provide the necessary information about the new edge device, such as its management IP address and the site hierarchy where it belongs within the SDA Fabric.\n\nFrom a user perspective, this query can be utilized when deploying a new edge device into the SDA Fabric network. Users can specify the details of the device in the request body, including the management IP address and the site hierarchy, to seamlessly integrate the new edge device into the SDA Fabric. This action enables the device to inherit the configurations, policies, and settings defined within the SDA Fabric, ensuring proper connectivity, security, and management of the edge device within the network infrastructure.\n\nBy using this query to add edge devices, users can efficiently scale their SDA Fabric network by incorporating new devices as needed. This process simplifies device provisioning and integration tasks, streamlining the expansion of the SDA Fabric environment while maintaining consistency and control over the network configurations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/edge-device\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/business/sda/virtualnetwork/ippool\" with the POST operation is used to add an IP Pool in a Software Defined Access (SDA) Virtual Network within the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be used to create and manage IP pools for different types of traffic within a virtual network. This can be important for network administrators who are setting up and configuring their SDA environments. By sending a POST request to this endpoint with the necessary parameters in the body, users can define IP pools for data traffic, voice traffic, or other types of traffic within their SDA Virtual Network.\n\nFor example, a network administrator can use this query to create separate IP pools for data and voice traffic within a specific virtual network, specify authentication policies, enable features like L2 flooding, and define the pool type (e.g., Extended or AP). This allows for proper allocation and management of IP addresses for different types of network traffic within the SDA environment.\n\nOverall, this query provides users with a way to efficiently organize and allocate IP resources within their SDA Virtual Networks, ensuring optimal network performance and scalability.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/virtualnetwork/ippool\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/business/sda/virtualnetwork/ippool\" with the operation \"delete\" is used to delete an IP Pool from a Software Defined Access (SDA) Virtual Network within the Cisco Catalyst Center. \n\nFrom a user perspective, network administrators can utilize this query to remove an IP pool that is no longer needed or requires reconfiguration within a specific virtual network. By providing the required query parameters such as \"siteNameHierarchy\", \"virtualNetworkName\", and \"ipPoolName\" in the query, users can initiate the deletion process for the specified IP pool. This action helps in efficiently managing IP address allocation within the SDA Virtual Network, ensuring that only relevant IP pools are part of the network infrastructure.\n\nOverall, by using this delete query, network administrators can streamline the organization and maintenance of IP resources within their SDA Virtual Networks, leading to better network performance and scalability.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/virtualnetwork/ippool\nREST operation:delete\nREST API query parameters:\n- siteNameHierarchy: siteNameHierarchy. The query parameters should be used in the query. This query parameter is required. \n- virtualNetworkName: virtualNetworkName. The query parameters should be used in the query. This query parameter is required. \n- ipPoolName: ipPoolName. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/business/sda/virtualnetwork/ippool\" with the GET operation is used to retrieve information about an IP Pool within a Software Defined Access (SDA) Virtual Network in the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized to view details such as the IP address range, subnet mask, gateway IP, and other configurations of a specific IP pool that has been assigned to a virtual network. This information is essential for network administrators for monitoring and managing IP address allocation within their SDA environment. By providing the required query parameters like \"siteNameHierarchy\", \"virtualNetworkName\", and \"ipPoolName\", users can ensure they retrieve the correct IP pool details for the specified virtual network.\n\nOverall, this query enables users to effectively monitor and maintain IP pool allocations within their SDA Virtual Networks, facilitating better network management and performance optimization.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/virtualnetwork/ippool\nREST operation:get\nREST API query parameters:\n- siteNameHierarchy: siteNameHierarchy. The query parameters should be used in the query. This query parameter is required. \n- virtualNetworkName: virtualNetworkName. The query parameters should be used in the query. This query parameter is required. \n- ipPoolName: ipPoolName. Note: Use vlanName as a value for this parameter if same ip pool is assigned to multiple virtual networks (e.g.. ipPoolName=vlan1021). The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path (\"/dna/intent/api/v1/sensor\") with the POST operation is used to create a sensor test template within the Cisco Catalyst Center. The purpose of this query is to enable users to define and set up a SENSOR test template that can be used to test aspects related to a new SSID, an existing SSID, or both.\n\nFrom a user perspective, this query allows users to customize and configure a sensor test template that can be applied to test scenarios involving SSIDs. Users can specify parameters such as the type of SSID (new or existing), test configurations, and other relevant settings to create a tailored sensor test template.\n\nBy sending a POST request to this API endpoint with the necessary parameters provided in the request body, users can efficiently create a sensor test template that suits their testing requirements. This capability streamlines the process of setting up and conducting sensor tests within the Catalyst Center environment, enhancing the overall testing and validation procedures for SSIDs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/sensor\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path (\"/dna/intent/api/v1/sensor\") with the DELETE operation is used to delete an existing SENSOR test template within the Cisco Catalyst Center. The purpose of this query is to allow users to remove a sensor test template that is no longer needed or needs to be replaced with an updated version.\n\nFrom a user perspective, this DELETE query can be valuable for template management within the Catalyst Center. Users can utilize this query to remove outdated or unnecessary sensor test templates, ensuring that only relevant and up-to-date configurations are maintained within the system. By sending a DELETE request to this API endpoint with the specific templateName provided as a parameter, users can efficiently delete sensor test templates, thereby optimizing network management practices.\n\nOverall, this query provides users with the flexibility to manage and maintain their sensor test templates effectively within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/sensor\nREST operation:delete\nREST API query parameters:\n- templateName: . The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/sensor\" with the GET operation is used to retrieve a list of SENSOR devices within the Cisco Catalyst Center environment. This query is aimed at providing users with information about the sensor devices that are available or connected to the network.\n\nFrom a user perspective, this query can be beneficial for network administrators or managers who need to monitor and manage sensor devices within their network infrastructure. By making this API call and providing the required query parameter \"siteId,\" users can obtain a comprehensive list of sensor devices associated with a specific site or location. This information can help in understanding the distribution of sensors across different sites, identifying any potential issues with sensors, and ensuring proper functioning of the sensor network.\n\nOverall, this API query facilitates efficient monitoring and management of sensor devices, enabling users to maintain the integrity and effectiveness of their network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/sensor\nREST operation:get\nREST API query parameters:\n- siteId: . The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/business/sda/wireless-controller\" with the DELETE operation is designed to remove a Wireless LAN Controller (WLC) from the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be valuable in scenarios where a WLC needs to be decommissioned, replaced, or reconfigured within the SDA Fabric. By providing the necessary query parameter \"deviceIPAddress\" when making the API call, users can initiate the deletion process for the specified WLC. This action helps in maintaining an accurate and up-to-date inventory of WLCs within the SDA Fabric, ensuring that only active and relevant devices are part of the network infrastructure. \n\nOverall, by using this delete query, network administrators or IT personnel can efficiently manage the network infrastructure by removing outdated or unused WLCs from the SDA Fabric, ensuring that the network configurations remain up-to-date and streamlined.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/wireless-controller\nREST operation:delete\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __persistbapioutput: Enable this parameter to execute the API and return a response asynchronously.. The query parameters should be used in the header. The default value is 'true'. This query parameter is required. \n- deviceIPAddress: Device Management IP Address. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path `/dna/intent/api/v1/business/sda/wireless-controller` with the POST operation is used to add a Wireless LAN Controller (WLC) to a Software-Defined Access (SD-Access) Fabric Domain within the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized by network administrators or IT personnel who are responsible for managing the network infrastructure. By making this API call and providing the necessary request parameters in the body of the POST request, users can seamlessly integrate a WLC into the SDA Fabric, allowing the WLC to inherit configurations, policies, and settings defined within the Fabric.\n\nThis action ensures proper connectivity, security, and management of the WLC within the network infrastructure. By adding the WLC to the Fabric Domain, users can efficiently scale their SDA Fabric and maintain an up-to-date and streamlined network configuration.\n\nIn summary, utilizing this query enables users to expand their SDA Fabric by adding a WLC, thereby enhancing network connectivity and facilitating centralized management and control within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/wireless-controller\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __persistbapioutput: Enable this parameter to execute the API and return a response asynchronously.. The query parameters should be used in the header. The default value is 'true'. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/business/ssid\" with a POST operation is used to create and provision SSIDs in the Cisco Catalyst Center environment. This query allows users to create an SSID, update it to correspond to specific site profiles, and provision it to devices that match the given sites.\n\nFrom a user perspective, this query can be instrumental in managing wireless network configurations within the Cisco Catalyst Center. By utilizing this query, users can easily create new SSIDs, associate them with particular site profiles, and ensure that the SSIDs are provisioned to devices within the specified sites. This functionality streamlines the process of managing wireless networks, ensuring that network resources are efficiently deployed and configured across different sites in the Cisco Catalyst Center infrastructure.\n\nUsers can provide the necessary parameters in the request body to specify details such as the SSID name, security settings, and other configurations required for the wireless network. By sending a POST request to this API endpoint, users can effectively create and provision SSIDs, enhancing the overall management and deployment of wireless networks within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/ssid\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __persistbapioutput: Enable this parameter to execute the API and return a response asynchronously.. The query parameters should be used in the header. The default value is 'true'. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/device-credential/{id}\" with the REST operation \"delete\" is used to delete a specific device credential in the Cisco Catalyst Center environment. Device credentials are essential for authenticating and authorizing the Catalyst Center to communicate with and manage network devices effectively. By utilizing this query, users can remove outdated or unnecessary device credential information from the system, contributing to improved security and streamlined credential management within the Catalyst Center.\n\nFrom a user perspective, this query offers a straightforward way to delete device credentials that are no longer needed or relevant. By removing unnecessary credentials, users can ensure that only authorized and up-to-date credentials are retained in the system. This process not only helps in maintaining a secure network environment but also aids in reducing clutter and simplifying troubleshooting processes related to device management within the Catalyst Center.\n\nIt is important to note that this specific API has been deprecated and will not be available in a Cisco DNA Center release after August 1st, 2024. Users are recommended to refer to the new Intent API, specifically \"Delete Global Credentials V2,\" for future credential deletion operations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-credential/{id}\nREST operation:delete\nREST API query parameters:\n- id: global credential id. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This REST API query path \"/dna/intent/api/v1/wireless/rf-profile/{rfProfileName}\" with the operation \"delete\" is used to delete RF profiles within the Cisco Catalyst Center platform. RF profiles are configurations that define how the wireless network operates in terms of radio frequency settings, channel allocations, power levels, and other related parameters.\n\nFrom a user perspective, this query can be valuable when there is a need to remove specific RF profiles that are no longer required or are outdated. By providing the RF profile name as a parameter in the path, users can trigger the deletion process. This action effectively removes all configurations, settings, and policies associated with the specified RF profile.\n\nUsers can utilize this query to clean up obsolete RF profiles, update network configurations, or decommission devices that are associated with certain RF profiles. By sending a DELETE request to this API endpoint with the required RF profile name, users can ensure that the network environment remains up-to-date and free from unnecessary or outdated RF profiles.\n\nOverall, this API query provides users with the capability to efficiently manage and optimize their wireless network configurations by allowing them to delete RF profiles that are no longer needed or relevant.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/rf-profile/{rfProfileName}\nREST operation:delete\nREST API query parameters:\n- rfProfileName: RF profile name to be deleted(required) *non-custom RF profile cannot be deleted. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/multicast\" with the operation \"delete\" is specifically designed to delete multicast configurations within the Software-Defined Access (SDA) fabric managed by the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be valuable in scenarios where there is a need to remove multicast settings or configurations from the SDA fabric. By providing the required query parameter \"siteNameHierarchy\" in the query, users can initiate the deletion process for multicast configurations associated with a specific site within the SDA fabric.\n\nThis action helps in maintaining a streamlined and optimized network environment by ensuring that only relevant multicast configurations are retained within the SDA fabric. By using this delete query, network administrators or IT personnel can efficiently manage and maintain the multicast settings, ensuring that the network operates effectively without unnecessary configurations.\n\nIn summary, this delete query for multicast in the SDA fabric provides users with the capability to remove multicast configurations associated with a specific site, enabling them to keep the network environment up-to-date and aligned with their networking requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/multicast\nREST operation:delete\nREST API query parameters:\n- siteNameHierarchy: siteNameHierarchy. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/multicast\" with the operation \"get\" is specifically designed for retrieving multicast details from the Software-Defined Access (SDA) fabric managed by the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be used to obtain information about multicast configurations within the SDA fabric. By providing the required query parameter \"siteNameHierarchy\", users can specify the fabric site for which they want to retrieve multicast details. This information can be valuable for network administrators or IT personnel who need to monitor and manage multicast settings within their SDA fabric environment.\n\nBy utilizing this query, users can gain insights into the multicast configurations present in the specified fabric site, which can aid in troubleshooting multicast-related issues, ensuring proper multicast routing, and optimizing network performance. This query empowers users to have visibility and control over multicast settings, enabling them to make informed decisions regarding their networking requirements and ensuring that the SDA fabric operates efficiently.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/multicast\nREST operation:get\nREST API query parameters:\n- siteNameHierarchy: fabric site name hierarchy. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/multicast\" with the operation \"post\" is specifically designed to add multicast configurations within the Software-Defined Access (SDA) fabric managed by the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be used to configure and add multicast settings to the SDA fabric. By providing the necessary parameters in the request body, users can specify the multicast configurations they want to implement within a particular fabric site. This action allows users to customize multicast routing and optimize network performance within their SDA fabric environment.\n\nBy utilizing this query to add multicast in the SDA fabric, users can tailor the multicast settings to meet their specific networking requirements. This can include setting up multicast groups, defining multicast routing protocols, and configuring multicast policies to ensure efficient data distribution within the fabric. \n\nOverall, this query empowers users to enhance the multicast capabilities of their SDA fabric, enabling them to create a robust and high-performing network infrastructure that effectively supports multicast traffic across different segments of the fabric.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/multicast\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/application-health\" is used to retrieve information about the health status of applications within the Cisco Catalyst Center platform. This query allows users to get a list of applications for a specific site, a device, or a client device's MAC address, along with any issues related to those applications.\n\nFrom a user perspective, this query can be utilized to monitor the health and performance of specific applications by providing relevant parameters such as siteId, deviceId, client MAC address, start and end time, application health category, offset, limit, and application name. By making a GET request to this endpoint with the required query parameters, users can retrieve detailed information about the health status of applications associated with the specified criteria.\n\nUsers can leverage this query to troubleshoot any issues related to application performance, identify problematic applications, and take necessary actions to ensure optimal functioning of applications within their network environment. This information can be valuable for network administrators and IT teams to proactively manage and maintain the health of applications running on the Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/application-health\nREST operation:get\nREST API query parameters:\n- siteId: Assurance site UUID value (Cannot be submitted together with deviceId and clientMac). The query parameters should be used in the query. This query parameter is required. \n- deviceId: Assurance device UUID value (Cannot be submitted together with siteId and clientMac). The query parameters should be used in the query. This query parameter is required. \n- macAddress: Client device's MAC address (Cannot be submitted together with siteId and deviceId). The query parameters should be used in the query. This query parameter is required. \n- startTime: Starting epoch time in milliseconds of time window. The query parameters should be used in the query. This query parameter is required. \n- endTime: Ending epoch time in milliseconds of time window. The query parameters should be used in the query. This query parameter is required. \n- applicationHealth: Application health category (POOR, FAIR, or GOOD.  Optionally use with siteId only). The query parameters should be used in the query. This query parameter is required. \n- offset: The offset of the first application in the returned data (optionally used with siteId only). The query parameters should be used in the query. This query parameter is required. \n- limit: The max number of application entries in returned data [1, 1000] (optionally used with siteId only). The query parameters should be used in the query. This query parameter is required. \n- applicationName: The name of the application to get information on. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/virtual-network\" with the GET operation is used to retrieve information about a specific Virtual Network (VN) that exists within the Software-Defined Access (SD-Access) Fabric.\n\nFrom a user perspective, this query can be used to fetch details about a Virtual Network in the SD-Access Fabric. Users would need to provide the name of the Virtual Network they are interested in by specifying the \"virtualNetworkName\" query parameter. Additionally, they need to provide the site hierarchy where the Virtual Network is located by specifying the \"siteNameHierarchy\" query parameter.\n\nBy executing this query, users can receive information such as the configuration, settings, and status of the specified Virtual Network within the SD-Access Fabric. This information can be crucial for network administrators and operators to understand the structure and utilization of Virtual Networks within their SD-Access environment, aiding in network troubleshooting, monitoring, and management tasks.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/virtual-network\nREST operation:get\nREST API query parameters:\n- virtualNetworkName: virtualNetworkName. The query parameters should be used in the query. This query parameter is required. \n- siteNameHierarchy: siteNameHierarchy. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/virtual-network\" with the POST operation is used to add a Virtual Network (VN) in the Software-Defined Access (SD-Access) Fabric. This query allows users to define and create a virtual network within the SDA Fabric, which is essential for managing IP address pools and connecting devices within the fabric.\n\nFrom a user perspective, this query can be utilized by network administrators or operators who are setting up or expanding their SDA Fabric infrastructure. Users can send a POST request to this API endpoint with the necessary parameters in the request body to add a new virtual network to the fabric.\n\nFor example, users can specify details such as the name of the virtual network (\"virtualNetworkName\") and the site hierarchy to which the virtual network will be associated (\"siteNameHierarchy\"). By providing this information in the request body, users can create a new virtual network that aligns with their network design and requirements.\n\nAdding virtual networks to the SDA Fabric is crucial for organizing network resources, defining policies, and ensuring proper connectivity within the fabric. By using this query to add virtual networks, users can effectively manage their SDA Fabric infrastructure and facilitate the integration of devices and services within the network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/virtual-network\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/virtual-network\" with the DELETE operation is specifically used to delete a Virtual Network (VN) from the Software-Defined Access (SD-Access) Fabric managed by the Cisco Catalyst Center. This query allows users to remove a virtual network that has been previously created within the SDA Fabric.\n\nFrom a user perspective, network administrators or operators can utilize this query when they need to remove a virtual network from their SDA Fabric infrastructure. By providing the required query parameters \"virtualNetworkName\" and \"siteNameHierarchy,\" users can specify the virtual network they want to delete and the site within the fabric where the virtual network is located. \n\nThis delete operation is essential for maintaining an organized and efficient SDA Fabric environment. By deleting unnecessary or outdated virtual networks, users can ensure that their network resources are properly managed and that only relevant configurations are retained within the fabric. This query helps in streamlining the network infrastructure and ensuring that the SDA Fabric operates effectively without unnecessary virtual networks.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/virtual-network\nREST operation:delete\nREST API query parameters:\n- virtualNetworkName: virtualNetworkName. The query parameters should be used in the query. This query parameter is required. \n- siteNameHierarchy: siteNameHierarchy. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/nfv-provision-detail\" in the Cisco Catalyst Center's REST API is used for checking the provisioning detail of an ENCS device, which includes log information. ENCS stands for Enterprise Network Compute System, and it is a platform used for hosting virtual network functions (NFV).\n\nFrom a user perspective, this query can be valuable for network administrators or operators who are responsible for managing ENCS devices within their network infrastructure. By making a POST request to this API endpoint with the required parameters in the request body, users can retrieve detailed information about the provisioning status of ENCS devices. This information can include logs related to the provisioning process, which can be crucial for troubleshooting any issues that may have occurred during provisioning.\n\nBy enabling the \"__runsync\" parameter in the header, users can execute this API query synchronously, allowing them to receive a response in real-time. The \"__runsynctimeout\" parameter helps define the maximum time to wait for a response before the API execution is terminated. Additionally, the \"__persistbapioutput\" parameter can be used to persist the API response for future reference.\n\nOverall, this API query provides users with insights into the provisioning status of ENCS devices, aiding in troubleshooting, monitoring, and ensuring that devices are correctly provisioned and functioning as expected within the network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/nfv-provision-detail\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __runsync: Enable this parameter to execute the API and return a response synchronously. The query parameters should be used in the header. The default value is 'False'. This query parameter is required. \n- __runsynctimeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated. The query parameters should be used in the header. The default value is '10'. This query parameter is required. \n- __persistbapioutput: Persist bapi sync response. The query parameters should be used in the header. The default value is 'True'. This query parameter is required. \n\n</api-query>", "From a user perspective, the REST API query path \"/dna/intent/api/v1/network\" in the Cisco Catalyst Center is used to retrieve network settings such as DHCP and DNS server details. Users can specify the siteId parameter to get the network settings associated with a specific site, allowing for targeted and customized queries. This query is beneficial for network administrators and IT professionals who need access to and manage network configurations, credentials, and various other settings.\n\nBy making this API call, users can retrieve information about DHCP servers, DNS servers, domain names, IP addresses, and other relevant network settings. This can help users in configuring and managing their network infrastructure effectively. The obtained details can be used for troubleshooting network issues, ensuring proper network operation, and making informed decisions regarding network configurations and settings.\n\nOverall, the \"/dna/intent/api/v1/network\" query provides essential network information and empowers users to optimize network performance, security, and management within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network\nREST operation:get\nREST API query parameters:\n- siteId: Site id to get the network settings associated with the site.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/applications\" with the PUT operation is used to edit the attributes of an existing application within the Cisco Catalyst Center. This query allows users to modify the configurations of applications, update their attributes, and align them with network policies and business objectives effectively.\n\nFrom a user perspective, this query can be utilized to tailor existing applications to meet evolving network requirements. Users can make changes to attributes such as the name of the application, policies, or any other relevant details by providing the necessary information in the request body. By utilizing this query, users can ensure that their applications are configured according to their specific needs, which can enhance overall network performance and efficiency.\n\nIn summary, this API query empowers users to efficiently manage and organize applications within the Cisco Catalyst Center. It enables users to customize application sets, update attributes, and align applications with network policies and business objectives. This functionality provides users with the flexibility to adapt their applications to changing requirements, ultimately helping them maintain an organized and optimized application environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/applications\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/applications\" is used to retrieve information about applications within the Cisco Catalyst Center platform. From a user perspective, this query can be used to fetch details about specific applications by providing the name of the application as a query parameter. Users can also specify the starting point for the results using the offset parameter and limit the number of items returned on a single page using the limit parameter. By utilizing this query, users can efficiently retrieve information about applications stored in the Catalyst Center platform, which can be beneficial for managing and configuring applications and their associated policies within the network. This query provides users with the ability to access and manipulate application data to align with their organization's business intent and network-specific configurations. Overall, this query empowers users to access detailed information about applications, enabling them to make informed decisions and optimizations within their network environment based on the retrieved data.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/applications\nREST operation:get\nREST API query parameters:\n- offset: The offset of the first application to be returned. The query parameters should be used in the query. The default value is '1'. This query parameter is required. \n- limit: The maximum number of applications to be returned. The query parameters should be used in the query. The default value is '500'. This query parameter is required. \n- name: Application's name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/applications\" with the REST operation \"delete\" is designed to delete an existing application within the Cisco Catalyst Center platform based on the provided ID. From a user perspective, this query can be used when a user wants to remove a specific application that has been previously created within the Catalyst Center. By sending a DELETE request to this query path and including the ID of the application to be deleted, users can effectively trigger the deletion process, removing all related information and configurations associated with that application from the system. This action helps users in managing their application policies efficiently by allowing them to delete configurations that are no longer required or have become outdated. Overall, this query provides users with the flexibility to manage their custom applications within the Catalyst Center platform, enabling them to clean up unnecessary configurations and maintain an optimized set of application policies aligned with their organization's needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/applications\nREST operation:delete\nREST API query parameters:\n- id: Application's Id. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/applications\" with a POST operation is used to create new applications within the Cisco Catalyst Center platform. This functionality allows users to define and customize applications based on their specific requirements and preferences.\n\nFrom a user perspective, this query can be utilized to create new custom applications tailored to the needs of an organization. By making a POST request to this query path and providing the necessary parameters in the request body, users can define new applications with unique attributes and policies. Users can specify details such as the name of the application and any other relevant information to create a customized application set that aligns with their network policies and business objectives.\n\nOverall, this query empowers users to efficiently manage and organize applications within the Cisco Catalyst Center, enabling them to create custom application sets that meet their organization's specific needs and enhance network functionality. Users can utilize this functionality to stay aligned with their network policies and ensure that their applications are configured to meet evolving requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/applications\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/application-policy-application-set\" with a POST operation is designed to create new custom application sets within the Cisco Catalyst Center platform. This functionality enables users to define and organize applications based on their specific requirements and preferences.\n\nFrom a user perspective, this query can be utilized to tailor custom application sets to meet the unique needs of an organization. By making a POST request to this query path and providing the necessary parameters in the request body, users can create application sets with distinct attributes and policies. This capability empowers users to efficiently manage and organize applications within the Catalyst Center, allowing them to establish custom application sets that align with their network policies and business objectives.\n\nIn practical terms, users can use this query to create application sets that group specific applications together, apply common policies or configurations, and streamline management processes. By defining new application sets through this query, users can enhance network efficiency, enforce consistent policies, and ensure that applications are organized in a manner that best suits their operational requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/application-policy-application-set\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "In the provided context, the specific REST API query path \"/dna/intent/api/v1/application-policy-application-set\" with the REST operation \"delete\" is intended for deleting an existing custom application set within the Cisco Catalyst Center platform based on the provided ID. \n\nFrom a user perspective, this query can be utilized when a user wants to remove a specific custom application set that has been previously created within the Catalyst Center. By sending a DELETE request to this query path and including the ID of the application set to be deleted, users can trigger the deletion process effectively. This action helps in managing application policies efficiently by allowing users to delete configurations that are no longer required or have become outdated. \n\nOverall, this query provides users with the flexibility to manage their custom application sets within the Catalyst Center platform, enabling them to clean up unnecessary configurations and maintain an optimized set of application policies aligned with their organization's needs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/application-policy-application-set\nREST operation:delete\nREST API query parameters:\n- id: . The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/application-policy-application-set\" is used to retrieve information about application sets within the Cisco Catalyst Center platform. From the user perspective, this query can be used to fetch details about specific application sets by providing the name of the application set as a query parameter. Users can also specify the starting point for the results using the offset parameter and limit the number of items returned on a single page using the limit parameter.\n\nThis query provides users with the ability to access and manipulate application set data to align with their organization's business intent and network-specific configurations. By utilizing this API endpoint, users can efficiently retrieve information about application sets stored in the Catalyst Center platform, which can be beneficial for managing and configuring applications and their associated policies within the network.\n\nIn summary, users can leverage this query to efficiently gather details about application sets, manage and configure applications, and align their network policies with their business objectives within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/application-policy-application-set\nREST operation:get\nREST API query parameters:\n- offset: . The query parameters should be used in the query. The default value is '1'. This query parameter is required. \n- limit: . The query parameters should be used in the query. The default value is '500'. This query parameter is required. \n- name: . The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/business/sda/authentication-profile\" with the operation \"delete\" is designed to delete the default authentication profile from the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center. The default authentication profile typically contains settings and configurations related to authentication methods used within the SDA Fabric.\n\nFrom a user perspective, this query can be valuable in scenarios where there is a need to remove the default authentication profile for various reasons such as updating authentication methods, cleaning up unnecessary profiles, or ensuring the fabric's security posture. By sending a DELETE request to this API endpoint with the required query parameter \"siteNameHierarchy,\" users can trigger the deletion process, effectively removing all configurations, settings, and policies associated with the default authentication profile. This ensures that the SDA Fabric remains up-to-date and only includes relevant and current authentication settings.\n\nIn summary, by utilizing this delete operation, network administrators or IT personnel can manage and maintain the authentication profiles within the SDA Fabric, ensuring that the network environment is secure, efficient, and aligned with the organization's authentication requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/authentication-profile\nREST operation:delete\nREST API query parameters:\n- siteNameHierarchy: siteNameHierarchy. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path `\"/dna/intent/api/v1/business/sda/authentication-profile\"` with the PUT operation is designed for updating the default authentication profile in the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized for various purposes such as updating authentication methods, ensuring security posture, and managing authentication profiles within the SDA Fabric. Users can make changes to the default authentication profile by sending a PUT request to this API endpoint with the necessary modifications in the request body. This allows network administrators or IT personnel to keep the SDA Fabric up-to-date with relevant and current authentication settings.\n\nIn practical scenarios, users might use this query for tasks such as updating credential information, managing device authentication, troubleshooting and maintenance, and automation and integration. For instance, users can update global credential details for improved security, ensure proper device authentication, troubleshoot credential-related issues affecting device communication, and automate credential management processes.\n\nUltimately, this API query empowers users to efficiently manage and maintain authentication profiles within the SDA Fabric, ensuring a secure, efficient, and aligned network environment that meets the organization's authentication requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/authentication-profile\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/authentication-profile\" with the GET operation is used to retrieve the default authentication profile from the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized to view and understand the current default authentication profile settings within the SDA Fabric. Users may need this information for various reasons such as auditing, troubleshooting, or ensuring that the authentication methods configured in the fabric align with their organization's security policies. \n\nBy making a GET request to this API endpoint with the required query parameters \"siteNameHierarchy\" and \"authenticateTemplateName,\" users can fetch details about the default authentication profile associated with the specified site. This information can provide insights into the authentication methods, policies, and configurations in place within the SDA Fabric, allowing users to make informed decisions regarding authentication-related tasks and ensuring the network's security posture is maintained.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/authentication-profile\nREST operation:get\nREST API query parameters:\n- siteNameHierarchy: siteNameHierarchy. The query parameters should be used in the query. This query parameter is required. \n- authenticateTemplateName: authenticateTemplateName. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/authentication-profile\" is used to manage the default authentication profiles within the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center. Specifically, this query allows users to add, retrieve, update, or delete default authentication profiles within the SDA Fabric.\n\nFrom a user perspective, this query can be used in the following ways:\n\n1. **Adding Default Authentication Profiles:** By sending a POST request to this API endpoint with the necessary parameters in the body, users can add new default authentication profiles to the SDA Fabric. This is useful for configuring authentication methods and policies according to the organization's security requirements.\n\n2. **Retrieving Default Authentication Profiles:** Users can make a GET request to this API endpoint with query parameters like \"siteNameHierarchy\" and \"authenticateTemplateName\" to fetch details about the default authentication profile associated with a specific site within the SDA Fabric. This helps users understand the current authentication methods, policies, and configurations in place.\n\n3. **Updating Default Authentication Profiles:** If changes are required in the default authentication settings, users can send a PUT request to this API endpoint with the modifications in the request body. This allows administrators to keep the SDA Fabric up-to-date with relevant authentication settings.\n\n4. **Deleting Default Authentication Profiles:** Users can trigger the deletion process of a default authentication profile by sending a DELETE request to this API endpoint with the required query parameter \"siteNameHierarchy.\" This removes all configurations, settings, and policies associated with the default authentication profile, ensuring the fabric remains secure and up-to-date.\n\nIn practical scenarios, users might utilize this query for tasks such as updating credential information, managing device authentication, troubleshooting and maintenance of authentication settings, and integrating authentication profile management into automation processes.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/authentication-profile\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/reserve-ip-subpool/{siteId}\" with the POST operation is used to reserve an IP subpool from the global pool within the Cisco Catalyst Center environment. This API allows users to allocate a specific range of IP addresses for a particular site, which can be crucial for network configuration and management.\n\nFrom a user perspective, this API query is essential for network administrators or operators who need to reserve a dedicated set of IP addresses for a specific site within their network infrastructure. By providing the site ID in the path parameter and the necessary request parameters in the body of the POST request, users can reserve an IP subpool effectively.\n\nThis functionality enables users to ensure that the required IP addresses are available for a particular site, preventing IP address conflicts and ensuring smooth network operations. By utilizing this API query, users can dynamically allocate IP addresses as needed, optimizing resource utilization and enhancing network efficiency.\n\nOverall, this API query empowers users to manage IP address allocation in a programmatic and efficient manner, supporting network scalability and operational flexibility within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/reserve-ip-subpool/{siteId}\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- siteId: Site id to reserve the ip sub pool.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "From the provided information, the specific REST API query path \"/dna/intent/api/v1/reserve-ip-subpool/{siteId}\" with the PUT operation is used to update the IP subpool from the global pool within the Cisco Catalyst Center environment. This API endpoint allows users to reserve a specific range of IP addresses for a particular site by specifying the site ID in the path parameter and providing the necessary request parameters in the body of the PUT request.\n\nFrom a user perspective, this API query is crucial for network administrators or operators who need to reserve a dedicated set of IP addresses for a specific site within their network infrastructure. By using this API, users can ensure that the required IP addresses are available for a particular site, preventing IP address conflicts and ensuring smooth network operations. This functionality enables users to dynamically allocate IP addresses as needed, optimizing resource utilization and supporting efficient network configuration and management.\n\nIn summary, this API query empowers users to manage and update IP subpools effectively within the global pool, enabling them to allocate IP addresses to specific sites as required, thereby supporting network scalability and operational flexibility within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/reserve-ip-subpool/{siteId}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- siteId: Site id of site to update sub pool.. The query parameters should be used in the path. This query parameter is required. \n- id: Id of subpool group. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/client-proximity\" in the Cisco Catalyst Center is used to retrieve client proximity information for a specific wireless user within a wireless network infrastructure. Proximity, in this context, is defined as the presence of other clients on the same floor at the same time as the specified wireless user.\n\nFrom a user perspective, network administrators or IT personnel can utilize this API query to track and analyze the proximity of a wireless client over a specified number of days. By making a GET request to this endpoint and providing the required parameters such as the wireless client's username, number of days to track proximity, and time resolution for measuring proximity, users can obtain detailed information on the proximity of the specified client within the network.\n\nThis query can be valuable for users who need to monitor client interactions, troubleshoot connectivity issues, or ensure that clients are within close range of each other on the same floor for specific operational purposes. By leveraging this API query, users can gain insights into client behaviors and interactions within the wireless network, enabling them to make informed decisions for network optimization and management.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/client-proximity\nREST operation:get\nREST API query parameters:\n- username: Wireless client username for which proximity information is required. The query parameters should be used in the query. This query parameter is required. \n- number_days: Number of days to track proximity until current date. Defaults and maximum up to 14 days.. The query parameters should be used in the query. The default value is '14'. This query parameter is required. \n- time_resolution: Time interval (in minutes) to measure proximity. Defaults to 15 minutes with a minimum 5 minutes.. The query parameters should be used in the query. The default value is '15'. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/reserve-ip-subpool\" is used to reserve IP subpools within the Cisco Catalyst Center environment. This API allows users to manage and update IP subpools effectively within the global pool, enabling them to allocate IP addresses to specific sites as required. The query parameters provided are essential for specifying the site ID, offset, limit, ignoreInheritedGroups, and poolUsage when reserving IP subpools.\n\nFrom a user perspective, this API query is crucial for network administrators or operators who need to reserve a dedicated set of IP addresses for specific sites within their network infrastructure. By making a GET request to this API endpoint with the required parameters, users can ensure that the required IP addresses are available for a particular site, preventing IP address conflicts, and ensuring smooth network operations. This functionality enables users to dynamically allocate IP addresses as needed, optimizing resource utilization and supporting efficient network configuration and management.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/reserve-ip-subpool\nREST operation:get\nREST API query parameters:\n- siteId: site id of site from which to retrieve associated reserve pools.. The query parameters should be used in the query. This query parameter is required. \n- offset: offset/starting row. The query parameters should be used in the query. This query parameter is required. \n- limit: No of reserve pools to be retrieved. The query parameters should be used in the query. This query parameter is required. \n- ignoreInheritedGroups: Ignores inherited pools. The query parameters should be used in the query. This query parameter is required. \n- poolUsage: Can take values empty, partially-full or empty-partially-full. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/wireless/psk-override\" with the POST operation is intended for updating or overriding the pre-shared key (PSK) pass phrase of an enterprise SSID in the Cisco Catalyst Center. This API query allows users to modify the security settings of a specific wireless network, specifically the pass phrase used for authentication.\n\nFrom a user perspective, this query can be used to manage and update the security settings of a wireless network within the Cisco Catalyst Center. Users can provide the necessary parameters, such as the new pass phrase, in the request body in JSON format. By sending a POST request to this endpoint, users can update the PSK pass phrase for the specified enterprise SSID.\n\nSome practical use cases for this API query include:\n1. **Security Updates**: Users can change the PSK pass phrase regularly to enhance the security of the wireless network.\n2. **Troubleshooting**: If connectivity issues arise due to an incorrect or compromised PSK pass phrase, users can quickly update it using this query.\n3. **Compliance Requirements**: Organizations can ensure that their wireless networks meet security compliance standards by regularly updating the PSK pass phrases.\n\nIn summary, this API query provides users with a convenient way to manage and maintain the security of their wireless networks by allowing them to update the PSK pass phrase of an enterprise SSID through the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/psk-override\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "<query>\nThe provided REST API query path \"/dna/intent/api/v2/sp-profile/{spProfileName}\" with the DELETE operation is designed to delete a Service Provider Profile (QoS) within the Cisco Catalyst Center platform. This API call allows users to remove a specific QoS profile that has been previously configured in the system. From a user perspective, this query can be utilized when there is a need to clean up and remove any QoS-related information associated with a particular service provider profile. By providing the name of the SP profile to be deleted as the required parameter in the path, users can trigger the deletion process, effectively removing all QoS settings, configurations, and policies linked to that specific profile. For example, if a network device is being decommissioned, replaced, or reconfigured, and there is a need to remove the QoS settings associated with it, users can make use of this DELETE operation to ensure that the system database remains accurate and up-to-date without any obsolete QoS configurations.\n</query>\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/sp-profile/{spProfileName}\nREST operation:delete\nREST API query parameters:\n- spProfileName: sp profile name. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/credential-to-site/{siteId}\" with the POST operation is used to assign a device credential to a specific site within the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized when there is a need to associate a specific device credential with a particular site in the network infrastructure managed by the Cisco Catalyst Center. This can be particularly useful in scenarios where security protocols or access controls require unique credentials for devices within different physical locations or logical groupings.\n\nBy making a POST request to this API endpoint with the required parameters, such as the siteId and the request body containing the necessary information about the credential, users can seamlessly assign the desired device credential to the specified site. This process streamlines the management of credentials across different sites, ensuring that devices are appropriately authenticated and authorized based on their location within the network.\n\nOverall, this API query simplifies the task of assigning devices to sites, enhancing network administration efficiency and ensuring that the right credentials are associated with devices in the correct locations within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/credential-to-site/{siteId}\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __persistbapioutput: Persist bapi sync response. The query parameters should be used in the header. The default value is 'true'. This query parameter is required. \n- siteId: site id to assign credential.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/device-credential\" with the PUT operation is used to update device credentials in the Cisco Catalyst Center environment. Device credentials are crucial for authenticating and authorizing the Catalyst Center to communicate with and manage network devices effectively.\n\nFrom a user perspective, this API query allows users to modify device credential settings such as usernames, passwords, enable passwords, authentication types, etc., on a device-specific level. By sending a PUT request with the necessary information in the body, users can update and manage device credentials, ensuring that the Catalyst Center can securely interact with network devices.\n\nUsers can leverage this query to troubleshoot any credential-related issues that may be affecting device communication. By updating device credentials as needed, users can maintain smooth network operations and ensure that only authorized and up-to-date credentials are used.\n\nOverall, this API query provides users with a straightforward method to update and manage device credentials within the Cisco Catalyst Center environment, contributing to enhanced security, streamlined credential management, and efficient device communication.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-credential\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/device-credential\" with the GET operation is used to retrieve device credential details in the Cisco Catalyst Center environment. Device credentials are essential for authenticating and authorizing the Catalyst Center to communicate with and manage network devices effectively. \n\nFrom a user perspective, this API query allows users to view specific device credential information associated with a particular site by providing the siteId as a query parameter. Users can use this query to access details such as usernames, passwords, authentication types, and other relevant credential settings for devices within a specific site. This information can be valuable for troubleshooting, auditing, or ensuring that the correct credentials are in place for secure device management.\n\nIt's important to note that this API has been deprecated and will not be available in Cisco DNA Center releases after August 1st, 2024. Users are advised to refer to the new Intent API, specifically \"Get All Global Credentials V2,\" for future operations related to retrieving credential details.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-credential\nREST operation:get\nREST API query parameters:\n- siteId: Site id to retrieve the credential details associated with the site.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/device-credential\" with the POST operation is used to create device credentials in the Cisco Catalyst Center environment. Device credentials are essential for authenticating and authorizing the Catalyst Center to communicate with and manage network devices effectively. Users can utilize this API query to set up specific credential settings such as usernames, passwords, enable passwords, authentication types, etc., on a device-specific level.\n\nFrom a user perspective, this query allows network administrators or IT personnel to securely manage and configure the necessary credentials required for their network devices within the Cisco Catalyst Center. By using this API, users can ensure that the correct authentication information is in place, troubleshoot any credential-related issues, and maintain a secure and efficient device management environment.\n\nIt's important to note that this API has been deprecated and will not be available in Cisco DNA Center releases after August 1st, 2024. Users are advised to refer to the new Intent API, specifically the \"Create Global Credentials V2\" API for managing device credentials in future releases.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-credential\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided query path \"/dna/intent/api/v1/business/sda/fabric-site\" with the REST operation \"delete\" is used to delete a site from the Software-Defined Access (SD-Access) fabric within the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized by network administrators or IT personnel to remove a specific site within the SD-Access fabric. By providing the required query parameter \"siteNameHierarchy,\" users can specify the site that they want to delete from the fabric. \n\nDeleting a site from the SD-Access fabric is crucial for maintaining an organized and efficient network environment. It allows users to remove unnecessary or outdated sites, ensuring that only relevant configurations and settings are retained within the fabric. This action helps in keeping the network resources properly managed and aligned with the organization's requirements.\n\nOverall, by using this delete operation, users can effectively manage their SD-Access fabric, ensuring that it remains up-to-date, secure, and efficient. It enables administrators to optimize the network environment by removing obsolete sites and configurations, leading to a streamlined and well-maintained SD-Access fabric.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/fabric-site\nREST operation:delete\nREST API query parameters:\n- siteNameHierarchy: Site Name Hierarchy. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/business/sda/fabric-site\" with the GET operation is used to retrieve information about a specific site within the Software-Defined Access (SDA) Fabric. The query parameter \"siteNameHierarchy\" is required to specify the hierarchy of the site for which the details are to be fetched.\n\nFrom a user perspective, this query can be used to access detailed information about a particular site within the SDA Fabric. Users can input the siteNameHierarchy parameter to specify the exact site they are interested in. This information can include details such as the site's configuration, status, location within the fabric, and any other pertinent information related to that specific site.\n\nBy utilizing this query, users can effectively monitor and manage individual sites within the SDA Fabric network. This can aid in tasks such as troubleshooting site-specific issues, managing configurations, and ensuring the overall functionality and performance of the network infrastructure at a granular level.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/fabric-site\nREST operation:get\nREST API query parameters:\n- siteNameHierarchy: Site Name Hierarchy. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/business/sda/fabric-site\" with a POST operation is used to add a site to the Software-Defined Access (SDA) Fabric. This query allows users to specify details of the site hierarchy, such as the location within the fabric, when adding a new site to the SDA Fabric.\n\nFrom a user perspective, this query can be used when an organization wants to onboard a new edge device or a network device to their SDA Fabric. Users can input parameters in the request body, such as the site name hierarchy, to define the location and configuration of the new site within the fabric. By utilizing this query, users can seamlessly integrate new devices into the SDA Fabric, allowing them to inherit the configurations, policies, and settings set within the fabric. This action ensures proper connectivity, security, and management of the new edge device within the network infrastructure.\n\nOverall, using this query enables users to efficiently scale their SDA Fabric by adding new sites and devices while maintaining consistency and security across the fabric.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/fabric-site\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/business/sda/provision-device\", with the PUT operation is used for re-provisioning wired devices in the Cisco Catalyst Center. \n\nFrom a user perspective, this query can be utilized by network administrators, operators, and IT personnel for various purposes such as:\n\n1. **Troubleshooting and Maintenance:** Users can identify and address power-related issues efficiently by re-provisioning wired devices.\n   \n2. **Inventory Management:** It allows users to maintain accurate records of the Power over Ethernet (PoE) capabilities of network devices.\n\n3. **Network Monitoring:** Users can ensure optimal power usage and performance of devices by re-provisioning them as needed.\n\nBy sending a PUT request to this API endpoint with the necessary parameters in the body, users can trigger the re-provisioning process for wired devices. This can help in updating device configurations, resolving synchronization issues, and ensuring that devices are correctly onboarded and functioning within the network. \n\nOverall, this query provides a convenient and centralized approach for users to manage and optimize their network infrastructure efficiently using the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/provision-device\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/business/sda/provision-device\", with the POST operation is used for provisioning wired devices in the Cisco Catalyst Center. From a user perspective, this query can be utilized by network administrators, operators, and IT personnel for various purposes:\n\n1. **Troubleshooting and Maintenance:** Users can identify and address power-related issues efficiently by re-provisioning wired devices.\n   \n2. **Inventory Management:** It allows users to maintain accurate records of the Power over Ethernet (PoE) capabilities of network devices.\n   \n3. **Network Monitoring:** Users can ensure optimal power usage and performance of devices by re-provisioning them as needed.\n\nBy sending a POST request to this API endpoint with the necessary parameters in the body, users can trigger the provisioning process for wired devices. This can help in updating device configurations, resolving synchronization issues, and ensuring that devices are correctly onboarded and functioning within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/provision-device\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This REST API query path \"/dna/intent/api/v1/business/sda/provision-device\" is used to get information about a provisioned wired device within the Cisco Catalyst Center. The query parameter \"deviceManagementIpAddress\" is required to specify the device for which the information is being retrieved.\n\nFrom a user perspective, this query can be used by network administrators or operators to retrieve details about a specific provisioned wired device. By providing the device's management IP address as the query parameter, users can access information such as device details, configuration settings, synchronization status, and any issues related to the device provisioning process.\n\nThis query can be particularly helpful in tasks such as troubleshooting synchronization issues, verifying device configurations, updating device information, and ensuring that devices are correctly onboarded and functioning within the network environment. Overall, it provides users with a convenient method to manage and monitor provisioned wired devices efficiently within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/provision-device\nREST operation:get\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "In the context of the Cisco Catalyst Center, the provided REST API query path \"/dna/intent/api/v1/business/sda/provision-device\" with the delete operation is used to delete a provisioned wired device entry from the fabric site. The primary purpose of this query is to remove a provisioned device from the network infrastructure, allowing users to maintain an accurate and up-to-date inventory of devices within the network.\n\nFrom a user perspective, this query can be utilized in various scenarios such as when a device is no longer in use, needs to be replaced, or requires reconfiguration. By sending a DELETE request to this specific query path with the device's management IP address specified as the query parameter, users can effectively trigger the deletion process. This action removes all related information and configurations associated with that particular device from the fabric site, ensuring that only active and relevant devices are part of the network infrastructure.\n\nOverall, the use of this delete query empowers network administrators or IT personnel to efficiently manage the network infrastructure by removing outdated or unused wired devices from the fabric site. This helps in ensuring that the network configurations remain up-to-date, streamlined, and reflective of the current network topology.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/provision-device\nREST operation:delete\nREST API query parameters:\n- deviceManagementIpAddress: Valid IP address of the device currently provisioned in a fabric site. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v2/service-provider\" with the PUT operation is intended to update the Service Provider Profile, particularly focusing on Quality of Service (QoS), within the Cisco Catalyst Center platform. This query allows users to make changes to the configurations, settings, and policies related to QoS for a specific service provider.\n\nFrom a user perspective, this API query can be utilized when there is a requirement to adjust or fine-tune the QoS settings associated with a particular service provider. For example, if there are alterations in network requirements, application policies, or QoS priorities, users can send a PUT request to this query path and include the necessary parameters in the request body to update the QoS configurations accordingly.\n\nBy leveraging this specific API query, users can ensure that the network performance is optimized, and the QoS settings are aligned with their specific business needs. This capability enables users to efficiently manage and customize QoS settings for service provider profiles within the Cisco Catalyst Center, empowering them to adapt and enhance network performance based on evolving requirements and configurations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/service-provider\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/service-provider\" with the GET operation is used to retrieve Service Provider details related to Quality of Service (QoS) settings within the Cisco Catalyst Center platform. This query allows users to access information regarding the QoS configurations and profiles specifically tailored for service providers.\n\nFrom a user perspective, this query can be beneficial when there is a need to retrieve and review the QoS settings established for service provider profiles within the Catalyst Center platform. Users can utilize this query to gather insights into the QoS parameters defined for different service providers, enabling them to understand how network performance and resource allocation are optimized to meet the requirements and configurations of each service provider. By using this query, users can access detailed information about the QoS profiles configured for service providers, ensuring that the network is tailored to deliver the necessary quality of service for each provider's specific needs. This information can further aid users in managing and troubleshooting QoS-related issues, monitoring changes in QoS settings over time, and making informed decisions to enhance network performance and user experience within a service provider context.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/service-provider\nREST operation:get\n</api-query>", "This specific REST API query path (\"/dna/intent/api/v1/service-provider\") with the POST operation is used to create a Service Provider Profile (QoS) within the Cisco Catalyst Center platform. This query allows users to define and set up QoS settings specifically tailored for service providers, enabling them to adapt and optimize network performance based on evolving requirements and configurations.\n\nFrom a user perspective, this query can be utilized when there is a need to create a new Service Provider Profile with customized QoS settings for a specific service provider within the Catalyst Center platform. Users can send a POST request to this query path and include the necessary parameters in the request body to define the QoS parameters associated with the service provider. By using this query, users can efficiently establish QoS profiles that align with the service provider's requirements, ensuring optimal network performance and resource allocation based on the specific needs of that provider.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/service-provider\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The \"/dna/intent/api/v1/site\" query path with a POST operation is used to create a site hierarchy within the Cisco Catalyst Center. This query enables users to establish a structured hierarchy on their network, including areas, buildings, and floors, to mirror their physical infrastructure. By creating this hierarchy, users can group devices on the Cisco DNA Center in a way that reflects their real-world setup.\n\nFrom a user perspective, this query allows for the seamless integration of new devices into the Software-Defined Access (SDA) Fabric. By defining the location and configuration of a new site within the fabric using this query, users can ensure that new devices inherit the necessary configurations, policies, and settings established within the fabric. This process facilitates proper connectivity, security, and management of new edge devices within the network infrastructure.\n\nFurthermore, utilizing this query empowers users to efficiently scale their SDA Fabric by adding new sites and devices. By creating a logical hierarchy of areas, buildings, and floors, users can organize their network resources effectively and manage them in a structured manner. This hierarchical approach simplifies the management of devices and enhances overall network visibility and control.\n\nIn summary, the \"/dna/intent/api/v1/site\" query path with a POST operation serves as a vital endpoint for users to create and manage site hierarchies within the Cisco Catalyst Center, enabling them to streamline device integration, enhance network organization, and optimize network management capabilities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/site\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __runsync: Enable this parameter to execute the API and return a response synchronously. The query parameters should be used in the header. The default value is 'False'. This query parameter is required. \n- __timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated. The query parameters should be used in the header. The default value is '30'. This query parameter is required. \n- __persistbapioutput: Persist bapi sync response. The query parameters should be used in the header. The default value is 'True'. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/site\" is used within the Cisco Catalyst Center to retrieve information about sites within the network infrastructure. This specific query allows users to obtain details about one or more sites by providing parameters such as site name hierarchy, site ID, and site type.\n\nFrom a user perspective, this query can be beneficial in the following ways:\n\n1. **Site Information Retrieval**: Users can utilize this query to get detailed information about a particular site or multiple sites within the network. By specifying parameters such as site name hierarchy, site ID, and site type, users can access data related to the physical structure and properties of the sites.\n\n2. **Site Pagination**: Users have the option to specify an offset and limit when querying the sites. This feature enables users to paginate through a large number of sites efficiently. By setting appropriate offset and limit values, users can retrieve site information in manageable chunks, particularly when dealing with a substantial number of sites.\n\n3. **Filtering by Site Type**: Users can filter the site information based on the site type. By specifying the site type parameter, users can retrieve a list of sites that fall under a specific category such as area, building, or floor. This filtering capability helps users to narrow down their search and focus on a specific type of site.\n\nOverall, this API query empowers users to access, manage, and analyze site-related data within the network infrastructure, providing insights into the network's physical layout and facilitating efficient network administration and monitoring.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/site\nREST operation:get\nREST API query parameters:\n- name: Site name hierarchy (E.g Global/USA/CA). The query parameters should be used in the query. This query parameter is required. \n- siteId: Site Id. The query parameters should be used in the query. This query parameter is required. \n- type: Site type (Ex: area, building, floor). The query parameters should be used in the query. This query parameter is required. \n- offset: Offset/starting index for pagination. The query parameters should be used in the query. The default value is '1'. This query parameter is required. \n- limit: Number of sites to be listed. The query parameters should be used in the query. The default value is '500'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/network/{siteId}\" with the PUT operation allows users to update network settings for various configurations including DHCP, Syslog, SNMP, NTP, Network AAA, Client and EndPoint AAA, and/or DNS server settings. This API endpoint enables users to customize and adjust these network settings based on their specific requirements and organizational needs. \n\nFrom a user perspective, this query can be used by network administrators or IT professionals to efficiently manage and update network settings within their Cisco Catalyst Center environment. By sending a PUT request with the updated configurations or parameters in the request body, users can make targeted modifications to the network settings associated with a particular site (identified by the siteId). This capability allows users to ensure that the network configurations align with their organization's security policies, operational needs, and compliance requirements.\n\nUsers can leverage this API endpoint to streamline the process of configuring and maintaining network settings such as DHCP, Syslog, SNMP, NTP, and others, ensuring optimal network performance and security. By utilizing this query, users can centrally manage and update network settings for specific sites within their Catalyst Center platform, facilitating efficient network management and configuration processes.\n\nOverall, this REST API query provides a convenient and effective way for users to access, modify, and update various network settings within their Cisco Catalyst Center infrastructure, empowering them to maintain a secure and well-optimized network environment tailored to their organization's requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network/{siteId}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __persistbapioutput: Persist bapi sync response. The query parameters should be used in the header. The default value is 'True'. This query parameter is required. \n- siteId: Site id to update the network settings which is associated with the site. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path of \"/dna/intent/api/v1/network/{siteId}\" with the POST operation is used to create network settings for various configurations within the Cisco Catalyst Center platform. This API call allows users to define and customize settings such as DHCP, Syslog, SNMP, NTP, Network AAA, Client and Endpoint AAA, and DNS server settings for a specific site identified by the \"siteId\" parameter.\n\nFrom a user perspective, network administrators or IT professionals can utilize this query to efficiently set up and manage network configurations for a particular site. By providing the necessary parameters in the request body, users can establish specific network settings tailored to their organization's requirements. This API query enables users to streamline the process of configuring and maintaining critical network settings, ensuring optimal performance and security.\n\nOverall, this REST API query provides a convenient and effective way for users to create and update various network settings, enhancing network management and configuration processes within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/network/{siteId}\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __persistbapioutput: Persist bapi sync response. The query parameters should be used in the header. The default value is 'True'. This query parameter is required. \n- siteId: Site id to which site details to associate with the network settings.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The `/dna/intent/api/v1/nfv/network-profile` query path with the POST operation is used to create a Network Function Virtualization (NFV) network profile in the Cisco Catalyst Center platform. NFV is a technology that virtualizes network functions traditionally performed by hardware appliances. \n\nFrom a user perspective, this query is essential for users who need to define and set up specific configurations for their NFV network profiles within the Catalyst Center environment. By sending a POST request with the required parameters in the request body, users can create customized NFV network profiles tailored to their network requirements.\n\nUsers may utilize this query to define network policies, security settings, resource allocation, and other relevant configurations specific to their NFV deployment. This capability allows users to optimize the performance, security, and resource utilization of their NFV network profiles effectively.\n\nOverall, this API query empowers users to efficiently customize and maintain their NFV network profiles within the Cisco Catalyst Center, enabling them to create tailored network configurations that align with their organization's network requirements and standards.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/nfv/network-profile\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/virtual-network/summary\" with the GET operation is used to retrieve a summary of information about a specific Virtual Network (VN) within the Software-Defined Access (SD-Access) Fabric.\n\nFrom a user perspective, this query can be used to fetch essential details about a Virtual Network in the SD-Access Fabric. Users need to provide the name of the Virtual Network they are interested in by specifying the \"siteNameHierarchy\" query parameter, which represents the complete fabric siteNameHierarchy path where the Virtual Network is located.\n\nBy executing this query, users can obtain information such as the configuration, settings, and status of the specified Virtual Network within the SD-Access Fabric. This information is valuable for network administrators and operators to understand the structure and utilization of Virtual Networks within their SD-Access environment, aiding in network troubleshooting, monitoring, and management.\n\nUsers, especially network administrators, can utilize this query for various purposes, including:\n1. Viewing VLAN Configurations: Users can retrieve a list of VLAN names present in the network, providing an overview of the VLAN setup across different devices.\n2. Troubleshooting: Users can check VLAN names to verify correct assignments to interfaces, helping identify misconfigurations in case of network issues related to VLAN configurations.\n3. Network Segmentation: By examining the VLAN names returned by the query, users can ensure proper segmentation of network traffic based on VLANs, enhancing network security and efficiency.\n4. Configuration Validation: Users can validate VLAN configurations on specific devices or network segments to ensure the intended VLAN setup is in place and functioning correctly.\n\nOverall, this REST API query path offers users a way to retrieve crucial details about Virtual Networks within the SD-Access Fabric, enabling effective network monitoring, troubleshooting, and ensuring proper network configuration.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/virtual-network/summary\nREST operation:get\nREST API query parameters:\n- siteNameHierarchy: Complete fabric siteNameHierarchy Path. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided information is about a specific REST API query path in the Cisco Catalyst Center platform. The query path is \"/dna/intent/api/v1/business/nfv\" and the REST operation associated with this query is POST. \n\nThis query is used for provisioning Network Function Virtualization (NFV) within the Catalyst Center environment. NFV is a technology that virtualizes network functions traditionally performed by hardware appliances. By using this API query, users can design and provision single or multiple NFV devices within a specified site, area, building, or floor.\n\nFrom a user perspective, this query is crucial for users who need to define and set up specific configurations for their NFV network profiles within the Catalyst Center platform. Users can create customized NFV network profiles tailored to their network requirements by providing the necessary parameters in the request body. This allows users to define network policies, security settings, resource allocation, and other relevant configurations specific to their NFV deployment.\n\nOverall, this API query empowers users to efficiently customize and maintain their NFV network profiles, optimizing performance, security, and resource utilization effectively. By utilizing this query, users can create tailored network configurations that align with their organization's network requirements and standards, enhancing the overall functionality and efficiency of their NFV deployments within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/nfv\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __runsync: Enable this parameter to execute the API and return a response synchronously. The query parameters should be used in the header. The default value is 'False'. This query parameter is required. \n- __timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated. The query parameters should be used in the header. The default value is '10'. This query parameter is required. \n- __persistbapioutput: Persist bapi sync response. The query parameters should be used in the header. The default value is 'True'. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/wireless/profile\" with the POST operation is used to create a Wireless Network Profile within the Cisco Catalyst Center platform. This query allows users to define and configure specific wireless network settings, associate them with particular site profiles, and ensure that the SSIDs are provisioned to devices within the specified sites.\n\nFrom a user perspective, this query is valuable for network administrators who need to manage and organize their wireless network configurations efficiently. Users can provide the necessary parameters in the request body to specify details such as the SSID name, security settings, and other configurations required for the wireless network profile. By creating and associating Wireless Network Profiles to sites, users can easily deploy and manage wireless network resources across different locations within the Cisco Catalyst Center infrastructure. This functionality streamlines the process of managing wireless networks, ensuring consistency and accuracy in network configurations.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/profile\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/wireless/profile\" with the GET operation is used to retrieve wireless network profiles within the Cisco Catalyst Center platform. This query can be beneficial for users who need to access details about wireless network profiles configured in the platform. Users can use this query to fetch all existing wireless network profiles or retrieve specific profiles by providing the name of the wireless network profile as a query parameter.\n\nFrom a user perspective, this query allows network administrators to efficiently manage and organize their wireless network configurations. Users can specify details such as the SSID name, security settings, and other configurations required for the wireless network profile by providing the necessary parameters in the request. By retrieving wireless network profiles, users can ensure that the wireless network configurations are up-to-date and aligned with their requirements.\n\nOverall, this API query provides users with the capability to streamline the process of managing wireless networks within the Cisco Catalyst Center infrastructure. It allows users to easily deploy and manage wireless network resources across different locations by creating and associating wireless network profiles to sites. This functionality simplifies the management of wireless networks and helps ensure optimal performance and security for wireless communication within the organization.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/profile\nREST operation:get\nREST API query parameters:\n- profileName: Wireless Network Profile Name. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/wireless/profile\" with the PUT operation is used to update a Wireless Network Profile within the Cisco Catalyst Center platform. This query allows users to modify and customize the wireless network settings associated with a particular network profile.\n\nFrom a user perspective, this query is valuable for network administrators who need to make changes to their existing wireless network configurations efficiently. By providing the necessary parameters in the request body, users can specify details such as the SSID name, security settings, and other configurations required for the wireless network profile.\n\nFor example, a user can update the SSID name of a wireless network profile, adjust security settings, or modify any other parameters related to the network configuration. This query enables users to ensure that their wireless network profiles are up-to-date and aligned with their current requirements.\n\nOverall, this API query provides users with the capability to maintain and manage their wireless network configurations effectively within the Cisco Catalyst Center infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/profile\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/issue-enrichment-details\" with the GET operation is used to obtain detailed information and recommended mitigation for a network issue based on either an issue ID or a client's MAC address. This API endpoint enriches the given network issue context with details about the issue(s), impacted hosts, and suggested actions for remediation.\n\nFrom a user perspective, this query can be beneficial for various purposes such as:\n\n1. **Maintenance and Troubleshooting**: Users can retrieve specific information about network issues by providing the issue ID or a client's MAC address. This information can aid in maintenance activities, troubleshooting efforts, and identifying any issues within the network.\n\n2. **Network Monitoring**: Users can obtain detailed information about network issues to monitor the performance and status of the network. This can help in maintaining network health and addressing any potential issues promptly.\n\n3. **Client Device Details Retrieval**: Users can retrieve specific details about a client device connected to the network by providing the client's MAC address. This information can include the client's health status, connection details, and any relevant data associated with the client, which can be valuable for troubleshooting, monitoring, and analyzing network performance.\n\nOverall, this API query provides users with a way to enrich and gain insights into network issues, impacted hosts, and recommended actions for remediation, thereby facilitating effective network management and issue resolution.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/issue-enrichment-details\nREST operation:get\nREST API query parameters:\n- entity_type: Issue enrichment details can be fetched based on either Issue ID or Client MAC address. This parameter value must either be issue_id/mac_address. The query parameters should be used in the header. This query parameter is required. \n- entity_value: Contains the actual value for the entity type that has been defined. The query parameters should be used in the header. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/wireless/provision\" with the PUT operation is designed for updating wireless provisioning within the Cisco Catalyst Center platform. \n\nFrom a user perspective, this query can be used to efficiently modify wireless device information stored in the Plug and Play (PnP) database. Users can maintain the accuracy and relevance of device data during the provisioning process by updating the wireless provisioning. By updating the PnP Server Profile through this query, users can troubleshoot any synchronization issues that may occur during the device deployment process. This functionality enables users to verify and manage the synchronization status of devices within the Virtual Account, ensuring that the devices are correctly onboarded and functioning as expected.\n\nOverall, this API query provides users with a convenient way to manage and maintain the wireless network provisioning, troubleshoot synchronization issues, and ensure that devices are correctly onboarded and functioning within the network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/provision\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __persistbapioutput: Enable this parameter to execute the API and return a response asynchronously.. The query parameters should be used in the header. The default value is 'true'. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/wireless/provision\" with the POST operation is designed for provisioning wireless devices within the Cisco Catalyst Center platform. \n\nFrom a user perspective, this query can be utilized to efficiently perform actions such as adding, updating, or configuring wireless devices in the network. By providing the necessary parameters in the request body, users can define and set up wireless device configurations, such as SSIDs, security settings, channel allocations, RF profiles, and other parameters essential for wireless network operation. \n\nThis query empowers network administrators or IT personnel to streamline the provisioning process, ensure accurate device configurations, and maintain a stable and functional wireless network infrastructure. By using the \"/dna/intent/api/v1/wireless/provision\" query, users can effectively manage and optimize their wireless network environment to meet specific deployment requirements and performance criteria.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/provision\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __persistbapioutput: Enable this parameter to execute the API and return a response asynchronously.. The query parameters should be used in the header. The default value is 'true'. This query parameter is required. \n\n</api-query>", "From the provided context, it is clear that the query path \"/dna/intent/api/v1/sensorTestTemplate\" with the REST operation \"put\" is used for duplicating an existing sensor test template in the Cisco Catalyst Center. This is an Intent API endpoint that allows users to create a copy of a sensor test template with a new unique identifier.\n\nFrom a user perspective, this query can be utilized when a user needs to replicate an existing sensor test template for various reasons. For instance, if a user has a template that includes specific sensor testing configurations and parameters that they want to reuse but with slight modifications or for a different set of sensors, they can utilize this API to duplicate the template quickly.\n\nTo use this query, the user would need to provide the necessary information in the request body, such as the ID of the template they want to duplicate. The API will then create a copy of the template with a new identifier, allowing the user to manage and configure sensor testing efficiently without starting from scratch.\n\nOverall, this API query simplifies the process of managing sensor test templates within the Cisco Catalyst Center by providing a convenient way to duplicate and customize existing configurations for different sensor test scenarios.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/sensorTestTemplate\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "<description>\nThis specific REST API query path, \"/dna/intent/api/v1/reserve-ip-subpool/{id}\", allows users to delete a reserved IP subpool within the Cisco Catalyst Center environment. By providing the specific ID of the reserved IP subpool to be deleted as a query parameter in the path, users can trigger the deletion process effectively. This functionality is crucial for managing IP resources efficiently and ensuring that only relevant configurations are retained in the network environment.\n</description>\n\n<user-perspective>\nFrom a user perspective, this API query can be used by network administrators or operators who no longer require a reserved IP subpool or need to update their IP resource allocations. By specifying the ID of the reserved IP subpool to be deleted in the query parameter, users can initiate the deletion process through a DELETE request. This capability enables users to streamline their IP resource management, remove unnecessary or outdated IP subpools, and maintain an organized and up-to-date network environment.\n</user-perspective>\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/reserve-ip-subpool/{id}\nREST operation:delete\nREST API query parameters:\n- id: Id of reserve ip subpool to be deleted.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/AssuranceGetSensorTestResults\" with the GET operation is used to retrieve the summary of SENSOR test results within the Cisco Catalyst Center environment. This query allows users to obtain information about the results of SENSOR tests conducted within the network, providing insights into the performance and health of the sensors.\n\nFrom a user perspective, this query can be valuable for network administrators or operators who need to monitor and analyze the status of SENSOR tests across different locations or areas within their network infrastructure. By specifying the siteId parameter to identify the specific Assurance site, users can retrieve SENSOR test results within a defined timeframe using the startTime and endTime parameters. Additionally, users can choose to obtain failure statistics grouped by \"area\", \"building\", or \"floor\" by setting the testFailureBy parameter accordingly.\n\nBy making this API call, users can access a summarized view of SENSOR test results, including any failures or issues detected during the testing process. This information can help in troubleshooting network issues, optimizing sensor performance, and ensuring the overall reliability of the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/AssuranceGetSensorTestResults\nREST operation:get\nREST API query parameters:\n- siteId: Assurance site UUID. The query parameters should be used in the query. This query parameter is required. \n- startTime: The epoch time in milliseconds. The query parameters should be used in the query. This query parameter is required. \n- endTime: The epoch time in milliseconds. The query parameters should be used in the query. This query parameter is required. \n- testFailureBy: Obtain failure statistics group by \"area\", \"building\", or \"floor\". The query parameters should be used in the query. The default value is 'area'. This query parameter is required. \n\n</api-query>", "From a user perspective, the specific REST API query path \"/dna/intent/api/v1/enterprise-ssid\" with a POST operation is utilized to create Enterprise SSIDs within the Cisco Catalyst Center environment. This query enables users to define and provision secure wireless network identifiers specifically for enterprise-level usage.\n\nUsers can provide essential parameters in the request body, such as the SSID name, security settings, and other necessary configurations required for the enterprise wireless network. By sending a POST request to this API endpoint, users can effectively create and provision Enterprise SSIDs, enhancing the overall management and deployment of wireless networks within the Cisco Catalyst Center infrastructure.\n\nPractical use cases for this API query include:\n\n1. **Network Configuration**: Users can easily create and configure secure SSIDs tailored for enterprise-level wireless network environments.\n   \n2. **Security Enhancements**: Regularly updating and configuring SSIDs with specific security settings can enhance the overall security posture of the wireless network.\n\n3. **Efficient Deployment**: By provisioning Enterprise SSIDs to devices within specified sites, users can ensure that network resources are efficiently deployed and configured according to enterprise requirements.\n\nOverall, this API query provides users with a streamlined approach to manage and provision secure wireless network identifiers specifically designed for enterprise environments within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/enterprise-ssid\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "From a user perspective, the specific REST API query path \"/dna/intent/api/v1/enterprise-ssid\" with a POST operation is used to create and update Enterprise SSIDs within the Cisco Catalyst Center environment. This query allows users to define and provision secure wireless network identifiers specifically for enterprise-level usage. \n\nBy sending a POST request to this API endpoint and providing the necessary parameters in the request body, such as the SSID name, security settings, and other configurations required for the enterprise wireless network, users can effectively create and provision Enterprise SSIDs. Practical use cases for this API query include:\n\n1. **Network Configuration**: Users can easily create and configure secure SSIDs tailored for enterprise-level wireless network environments.\n   \n2. **Security Enhancements**: Regularly updating and configuring SSIDs with specific security settings can enhance the overall security posture of the wireless network.\n   \n3. **Efficient Deployment**: By provisioning Enterprise SSIDs to devices within specified sites, users can ensure that network resources are efficiently deployed and configured according to enterprise requirements.\n\nOverall, this API query provides users with a streamlined approach to manage and provision secure wireless network identifiers specifically designed for enterprise environments within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/enterprise-ssid\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/enterprise-ssid\" is used to retrieve Enterprise SSIDs within the Cisco Catalyst Center environment. Users can utilize this query to either retrieve a specific enterprise SSID by providing its name as a parameter or retrieve all the enterprise SSIDs if no specific name is provided.\n\nFrom a user perspective, this API query allows users to manage and provision secure wireless network identifiers tailored for enterprise-level usage. By sending a GET request to this API endpoint and providing the required parameters, users can access information about enterprise SSIDs configured in the Catalyst Center. This can be beneficial for network administrators and IT professionals responsible for configuring and maintaining the wireless network infrastructure within an enterprise environment.\n\nPractical use cases for this API query include:\n1. **Network Configuration**: Users can easily retrieve details about enterprise SSIDs and further configure them to meet specific requirements for the wireless network.\n2. **Security Enhancements**: By retrieving information about enterprise SSIDs, users can ensure that appropriate security settings are in place to enhance the overall security posture of the wireless network.\n3. **Efficient Management**: By having visibility into all the enterprise SSIDs or retrieving a specific one, users can efficiently manage and provision wireless network identifiers according to enterprise needs.\n\nOverall, this API query provides a streamlined approach for users to interact with and retrieve essential information related to Enterprise SSIDs within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/enterprise-ssid\nREST operation:get\nREST API query parameters:\n- ssidName: Enter the enterprise SSID name that needs to be retrieved. If not entered, all the enterprise SSIDs will be retrieved.. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/device\" with the GET operation is used to retrieve device information from the Software-Defined Access (SDA) Fabric within the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized to fetch specific details about devices that are part of the SDA Fabric network. By providing the required query parameter \"deviceManagementIpAddress,\" users can request information regarding a particular device using its IP address within the SDA Fabric.\n\nThis query provides valuable insights into the edge devices' specifics, enabling administrators to make informed decisions regarding their management and configuration within the SDA Fabric environment. Users can leverage this query to monitor the status and configurations of edge devices effectively within the SDA Fabric, aiding in network troubleshooting, device management, and ensuring the overall health and performance of the edge devices in the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/device/role\nREST operation:get\nREST API query parameters:\n- deviceManagementIpAddress: Device Management IP Address. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/hostonboarding/user-device\" with the POST operation is used to add port assignments for user devices within the Software-Defined Access (SDA) Fabric. This query allows network administrators or IT personnel to specify the details of the user device, such as the site hierarchy, device management IP address, interface name, and address pool name. By making this query, users can seamlessly integrate user devices into the SDA Fabric, ensuring that the devices inherit the necessary configurations, policies, and settings defined within the fabric.\n\nFrom a user perspective, this query can be used to efficiently manage and maintain port assignments for user devices within the SDA Fabric. Users can trigger this query when onboarding new user devices, ensuring they are connected to the correct ports with the appropriate configurations. By leveraging this API, users can streamline the process of integrating user devices into the SDA Fabric, enabling proper connectivity, security, and management of these devices within the network infrastructure.\n\nOverall, this query enhances the network administration process by providing users with a structured approach to assigning ports for user devices within the SDA Fabric, facilitating effective network management and optimization.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/hostonboarding/user-device\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/business/sda/hostonboarding/user-device\" with the GET operation is used to retrieve port assignments for user devices within the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center.\n\nFrom a user perspective, this query provides a way to fetch details about the port assignments for specific user devices within the SDA Fabric. Users can input the necessary query parameters, specifically the device management IP address and the interface name, to retrieve information about the assigned port for the user device. This information can be crucial for network administrators to ensure that user devices are connected to the correct ports with the appropriate configurations within the SDA Fabric. \n\nBy utilizing this API query, users can efficiently manage and maintain port assignments for user devices, ensuring proper network connectivity and configuration. This functionality can help streamline the process of integrating new user devices into the SDA Fabric and facilitate troubleshooting of any connectivity issues related to port assignments.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/hostonboarding/user-device\nREST operation:get\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n- interfaceName: interfaceName. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/hostonboarding/user-device\" with the operation \"delete\" is used to delete port assignments for user devices within the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center. This functionality allows users to remove the port assignment associated with a specific user device, which can be beneficial in scenarios where the device needs to be reconfigured, decommissioned, or replaced within the SDA Fabric.\n\nFrom a user perspective, this query can be utilized to delete the port assignment for a user device, ensuring that the network configurations are up-to-date and accurate. By providing the required query parameters \"deviceManagementIpAddress\" and \"interfaceName\" in the query, users can effectively trigger the deletion process for the specified user device. This action helps in maintaining an organized and optimized network environment by removing outdated or unnecessary port assignments, thereby streamlining the network connectivity and configuration processes.\n\nOverall, by using this delete query, network administrators or IT personnel can efficiently manage and maintain port assignments for user devices within the SDA Fabric, ensuring that the network infrastructure remains up-to-date, secure, and aligned with the organization's requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/hostonboarding/user-device\nREST operation:delete\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n- interfaceName: interfaceName. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The given REST API query path \"/dna/intent/api/v1/business/sda/border-device\" with the GET operation is designed to retrieve specific details about border devices within the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center.\n\nFrom a user perspective, this query can be utilized to gather valuable insights into the edge devices' specifics that are acting as border devices in the SDA Fabric environment. By providing the required query parameter \"deviceManagementIpAddress,\" users can request information about a particular border device by using its IP address within the SDA Fabric.\n\nUsers can leverage this query to effectively monitor the status and configurations of border devices within the SDA Fabric. This information aids administrators in making informed decisions regarding the management, configuration, and overall health of the border devices in the network infrastructure. The data retrieved through this query can assist in network troubleshooting, device management, and ensuring the proper functioning and performance of the border devices in the SDA Fabric network.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/border-device\nREST operation:get\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/border-device\" with the POST operation is used to add a border device to the Software-Defined Access (SDA) Fabric within the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query allows users to seamlessly integrate a new border device into the SDA Fabric by providing specific details about the device in the request body. Users can include information such as the management IP address, site hierarchy, external domain routing protocol name, external connectivity IP pool name, internal autonomous system number, border session type, and whether the device is connected to the internet.\n\nBy utilizing this query, users can expand their SDA Fabric network by adding new border devices, ensuring that these devices inherit the necessary configurations, policies, and settings established within the fabric. This action facilitates proper connectivity, security, and management of the border devices within the network infrastructure. Additionally, it enables users to scale their SDA Fabric efficiently while maintaining consistency and control over the network configurations.\n\nOverall, this query empowers users to manage and enhance their SDA Fabric network by adding and configuring border devices effectively through the Cisco Catalyst Center API.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/border-device\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/border-device\" with the operation \"delete\" is specifically designed to delete a border device from the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center. This query allows users to remove a border device from the SDA Fabric, effectively eliminating all configurations, policies, and settings associated with that particular device.\n\nFrom a user perspective, this query can be valuable in scenarios where a border device needs to be decommissioned, replaced, or reconfigured within the SDA Fabric. By providing the necessary query parameter \"deviceManagementIpAddress\" when making the API call, users can initiate the deletion process for the specified border device. This action helps in maintaining an accurate and up-to-date inventory of border devices within the SDA Fabric, ensuring that only active and relevant devices are part of the network infrastructure.\n\nOverall, by using this delete query, network administrators or IT personnel can effectively manage their SDA Fabric, ensuring that it remains well-organized, secure, and aligned with the organization's requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/border-device\nREST operation:delete\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This query path \"/dna/intent/api/v1/business/nfv/provisioningDetail\" in the Cisco Catalyst Center REST API is used to retrieve provisioning device information for a specified IP address. The query parameter \"deviceIp\" is required, and it is used to specify the IP address of the device for which provisioning details are needed.\n\nFrom a user perspective, this query can be valuable for network administrators and engineers who need to access specific details about a network device based on its IP address. Users can utilize this query to retrieve essential information about the device, such as its type, status, configurations, and operational capabilities. This can aid in tasks such as monitoring, troubleshooting, configuration management, and ensuring that the device is properly provisioned within the network infrastructure.\n\nBy providing the IP address of the device, users can efficiently gather information about the targeted device, enabling them to make informed decisions, troubleshoot issues, ensure proper configurations, and effectively manage the network devices within their environment. Overall, this query enhances network management capabilities by providing quick access to provisioning details based on the device's IP address.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/nfv/provisioningDetail\nREST operation:get\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- deviceIp: Device to which the provisioning detail has to be retrieved. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/cmdb-sync/detail\" is utilized to retrieve detailed information about the CMDB (Configuration Management Database) synchronization status within the Cisco Catalyst Center environment. This API allows users to fetch the status of CMDB synchronization jobs based on specific criteria.\n\nFrom a user perspective, this API query is essential for network administrators or operators managing a network infrastructure using Cisco Catalyst Center. By providing parameters such as \"status\" and \"date\" in the query, users can filter and retrieve specific details about CMDB synchronization jobs. The supported values for the \"status\" parameter are \"Success\", \"Failed\", and \"Unknown\". Users can specify a date in \"YYYY-MM-DD\" format to retrieve synchronization details for a particular day.\n\nBy accessing this API, users can troubleshoot any synchronization issues, track the success rate of CMDB synchronization jobs, and ensure that the network devices are correctly synchronized and functioning as expected. This query provides detailed information such as the status of synchronization tasks, errors encountered, and overall synchronization status, allowing users to monitor and manage their network devices effectively.\n\nUsers can integrate this API query into their monitoring systems or scripts to automate the process of tracking CMDB synchronization status, ensuring efficient management of network configurations. Overall, this query enhances the visibility and control over the synchronization process, enabling users to maintain a well-functioning network infrastructure within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/cmdb-sync/detail\nREST operation:get\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- status: Supported values are \"Success\",\"Failed\" and \"Unknown\". Providing other values will result in all the available sync job status.. The query parameters should be used in the query. This query parameter is required. \n- date: Provide date in \"YYYY-MM-DD\" format. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/control-plane-device\" with the GET operation is used to retrieve information about the control plane device within the Software-Defined Access (SDA) Fabric in the Cisco Catalyst Center. The control plane device plays a crucial role in managing and controlling the network traffic within the SDA Fabric.\n\nFrom a user perspective, this query can be utilized to gather specific details about the control plane device in the SDA Fabric network. By providing the required query parameter \"deviceManagementIpAddress,\" users can request information about a particular control plane device by specifying its IP address. This can be valuable for network administrators and operators to monitor and manage the control plane devices effectively within the SDA Fabric environment.\n\nBy utilizing this query, users can access insights into the configuration, status, and other relevant details of the control plane device. This information can be instrumental in network troubleshooting, configuration management, and ensuring the optimal performance of the control plane devices within the SDA Fabric network infrastructure.\n\nOverall, this query empowers users to have a comprehensive view of the control plane device within the SDA Fabric, facilitating informed decision-making and efficient management of the network resources.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/control-plane-device\nREST operation:get\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/control-plane-device\" with the POST operation is used to add a control plane device in the Software-Defined Access (SDA) Fabric within the Cisco Catalyst Center environment.\n\nFrom a user perspective, this query enables users to specify the details of a new control plane device that they want to add to the SDA Fabric. The user can provide information such as the management IP address of the device and the site hierarchy to which the device belongs. By sending this POST request with the required parameters in the body, users can seamlessly integrate the new control plane device into the SDA Fabric network.\n\nThis action ensures that the new control plane device inherits the necessary configurations, policies, and settings established within the SDA Fabric. By adding the control plane device through this query, users can efficiently scale their SDA Fabric network, maintain network integrity, and facilitate proper management of network traffic and resources.\n\nOverall, users can leverage this query to expand their SDA Fabric infrastructure by strategically adding and configuring control plane devices, thereby enhancing network performance and ensuring effective control and management within the SDA Fabric environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/control-plane-device\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This REST API query path \"/dna/intent/api/v1/business/sda/control-plane-device\" with the operation \"delete\" is specifically designed to delete a control plane device from the Software-Defined Access (SDA) Fabric managed by the Cisco Catalyst Center. The control plane device within an SDA Fabric plays a crucial role in managing and controlling network traffic.\n\nFrom a user perspective, this query can be used when a control plane device needs to be decommissioned, replaced, or reconfigured within the SDA Fabric. By providing the required query parameter \"deviceManagementIpAddress\" when making the API call, users can trigger the deletion process for the specified control plane device. This action helps in maintaining an accurate and up-to-date inventory of control plane devices within the SDA Fabric, ensuring that only active and relevant devices are part of the network infrastructure.\n\nIn practical scenarios, network administrators or IT personnel can utilize this delete query to efficiently manage the SDA Fabric network by removing outdated, unused, or unnecessary control plane devices. By doing so, the network configurations remain up-to-date, streamlined, and aligned with the organization's requirements. This query provides a means to keep the SDA Fabric organized and optimized for efficient network operation and management.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/control-plane-device\nREST operation:delete\nREST API query parameters:\n- deviceManagementIpAddress: deviceManagementIpAddress. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/hostonboarding/ssid-ippool\" with the PUT operation is used to update the mapping between SSIDs (Service Set Identifiers) and IP Pools within the Cisco Catalyst Center environment. This query allows users to specify which IP Pool is associated with each SSID, providing a crucial link between wireless network identifiers and the available IP address resources.\n\nFrom a user perspective, this query can be valuable for network administrators configuring Software Defined Access (SDA) environments within the Cisco Catalyst Center. By sending a PUT request to this specific endpoint with the necessary parameters, users can ensure that each SSID is correctly mapped to the appropriate IP Pool. This mapping is essential for ensuring that devices connecting to the network via specific SSIDs are assigned IP addresses from the designated IP Pool, facilitating proper network communication and resource allocation.\n\nOverall, this API query simplifies the process of managing wireless network configurations by enabling users to update and maintain the mapping between SSIDs and IP Pools within their SDA environments. This capability is essential for ensuring efficient network operations and resource utilization in enterprise settings.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/hostonboarding/ssid-ippool\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/hostonboarding/ssid-ippool\" with the POST operation is used to add or update the mapping between SSIDs (Service Set Identifiers) and IP Pools within the Cisco Catalyst Center environment. This query allows users to specify which IP Pool is associated with each SSID, establishing a crucial link between wireless network identifiers and the available IP address resources.\n\nFrom a user perspective, this query is valuable for network administrators configuring Software Defined Access (SDA) environments within the Cisco Catalyst Center. By sending a POST request to this specific endpoint with the necessary request parameters in the body, users can add new mappings or update existing mappings between SSIDs and IP Pools. This capability enables users to ensure that devices connecting to the network via specific SSIDs are assigned IP addresses from the designated IP Pool, facilitating proper network communication and resource allocation.\n\nIn practical terms, network administrators can use this API query to manage and optimize their wireless network configurations. They can easily update the mapping between SSIDs and IP Pools as network requirements evolve, ensuring efficient network operations and resource utilization in enterprise settings. By utilizing this API query, users can streamline the process of managing wireless networks and enhance the overall performance of their SDA environments.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/hostonboarding/ssid-ippool\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/business/sda/hostonboarding/ssid-ippool\" with the GET operation is used to retrieve the mapping between SSIDs (Service Set Identifiers) and IP Pools within the Cisco Catalyst Center environment. This query allows users to view which IP Pool is associated with each SSID, establishing a crucial link between wireless network identifiers and the available IP address resources.\n\nFrom a user perspective, network administrators can utilize this query to effectively manage their wireless network configurations. By retrieving the mapping between SSIDs and IP Pools, users can ensure that devices connecting to the network via specific SSIDs are assigned IP addresses from the correct IP Pool. This ensures proper network communication and resource allocation within the Software Defined Access (SDA) environment.\n\nUsers can input the required query parameters such as the VLAN Name and Site Name Hierarchy to specify the context for which they want to retrieve the SSID to IP Pool mapping. By making a GET request to this API endpoint, users gain visibility into how their SSIDs are linked to IP address resources, enabling them to troubleshoot connectivity issues, optimize network performance, and ensure efficient resource utilization within their SDA environments.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/sda/hostonboarding/ssid-ippool\nREST operation:get\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- vlanName: VLAN Name. The query parameters should be used in the query. This query parameter is required. \n- siteNameHierarchy: Site Name Heirarchy. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The REST API query path \"/dna/intent/api/v1/integration/events\" with the GET operation is used specifically to retrieve a list of integration events that have failed to create tickets in IT Service Management (ITSM). This query is valuable for troubleshooting and identifying potential issues with the ITSM integration within the Cisco Catalyst Center platform.\n\nFrom a user perspective, this query allows users to:\n\n1. **Troubleshoot Integration Issues:** Users can use this query to troubleshoot and identify any problems with the ITSM integration. By retrieving the list of failed events, users can pinpoint any misconfigurations or discrepancies causing the integration failures.\n\n2. **Optimize Integration Settings:** Users can leverage this query to optimize their ITSM integration settings based on evolving operational requirements and compliance standards. By identifying failed events, users can make necessary adjustments to ensure seamless communication between the Catalyst Center platform and their ITSM solution.\n\n3. **Verify Integration Settings:** Users can use this query to verify that the integration settings between the Catalyst Center platform and their ITSM solution are correctly configured. By retrieving the list of failed events, users can review the established connections and troubleshoot any issues related to the ITSM integration.\n\nOverall, this query empowers users to efficiently manage and monitor the ITSM integration within the Catalyst Center platform, ensuring smooth communication and streamlined workflows between the two systems.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/integration/events\nREST operation:get\nREST API query parameters:\n- instanceId: Instance Id of the failed event as in the Runtime Dashboard. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/integration/events\" with the POST operation is used to retry integration events related to IT Service Management (ITSM) within the Cisco Catalyst Center platform. This feature allows users to retry multiple failed ITSM event instances by providing a list of instance IDs as a payload in the request body.\n\nFrom a user perspective, this query can be valuable for the following purposes:\n\n1. **Troubleshooting Integration Failures:** Users can utilize this query to retry failed ITSM event instances, thereby addressing any issues or errors that may have caused the initial integration failure. This helps in ensuring that all necessary data and events are properly synchronized between the Catalyst Center platform and the ITSM solution.\n\n2. **Optimizing Integration Settings:** By retrying failed events, users can identify patterns of failures and optimize their ITSM integration settings based on evolving operational requirements and compliance standards. Making necessary adjustments based on the retry results can lead to a more efficient and reliable communication channel between the platforms.\n\n3. **Enhancing Integration Reliability:** Retrying failed events can contribute to enhancing the overall reliability of the ITSM integration within the Catalyst Center platform. By actively addressing and resolving integration failures, users can maintain a seamless flow of information and processes between the systems, thereby ensuring effective IT service delivery.\n\nOverall, this query empowers users to proactively manage and maintain the ITSM integration within the Catalyst Center platform, enabling a smoother and more efficient operation of IT processes and workflows.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/integration/events\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/client-enrichment-details\" with the GET operation is designed to provide users with enriched details regarding a specific network End User context, which could be identified using either a network user ID or a client's MAC address. This query aims to enhance user information by retrieving details about the user, devices connected to the user, and any assurance issues impacting the user.\n\nFrom a user perspective, this query can be utilized in various scenarios such as:\n1. **Network Troubleshooting**: Users can retrieve specific details about a client device connected to the network by providing the client's MAC address. This information can include the client's health status, connection details, and any relevant data associated with the client, which can be valuable for troubleshooting, monitoring, and analyzing network performance.\n2. **Network Issue Analysis**: Users can obtain information about network assurance issues impacting a specific user or device by providing the relevant user ID or MAC address. This can assist in identifying and addressing any network-related problems promptly.\n3. **Network Health Monitoring**: By fetching details about client enrichment, users can monitor the status and performance of network users and devices, thereby ensuring efficient network operations and addressing any potential issues proactively.\n\nOverall, this API query provides a means for users to enrich their understanding of network issues, impacted hosts, and recommended actions for remediation, ultimately facilitating effective network management and maintenance.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/client-enrichment-details\nREST operation:get\nREST API query parameters:\n- entity_type: Client enrichment details can be fetched based on either User ID or Client MAC address. This parameter value must either be network_user_id/mac_address. The query parameters should be used in the header. This query parameter is required. \n- entity_value: Contains the actual value for the entity type that has been defined. The query parameters should be used in the header. This query parameter is required. \n- issueCategory: The category of the DNA event based on which the underlying issues need to be fetched. The query parameters should be used in the header. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/site/count\" in the Cisco Catalyst Center REST API is used to retrieve the count of sites within the specified site's sub-hierarchy. This query provides the number of sites inclusive of the provided site based on the siteId parameter, which is the Site instance UUID.\n\nFrom a user perspective, this API query can be utilized in various scenarios:\n\n1. **Network Infrastructure Overview**: Users can obtain a comprehensive view of the physical structure of the network by querying the count of sites within a specific hierarchy. This information can help in understanding the layout and distribution of sites within the network.\n\n2. **Site Pagination**: Users can use this query to paginate through a large number of sites efficiently. By specifying offset and limit parameters, users can retrieve site information in manageable chunks, which is particularly useful when dealing with a large number of sites.\n\n3. **Filtering by Site Type**: Users have the option to filter the site count based on specific site types such as area, building, or floor. This filtering capability allows users to focus on a particular category of sites within the network.\n\nIn summary, this API query empowers users to access and manage site-related data within the network infrastructure, providing insights into the physical structure and properties of sites while offering flexibility in terms of pagination and filtering based on site types.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/site/count\nREST operation:get\nREST API query parameters:\n- siteId: Site instance UUID. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided context outlines the specific REST API query path \"/dna/intent/api/v1/AssuranceScheduleSensorTest\" with the REST operation \"put.\" This query is used to edit a sensor test template within the Cisco Catalyst Center. \n\nFrom a user perspective, this query allows users to make modifications to an existing sensor test template. Users can deploy, schedule, or edit an existing sensor test template by sending a PUT request to this API endpoint with the necessary parameters in the request body. \n\nUsers may utilize this query when they need to update or customize an existing sensor test template to suit their current testing requirements. For example, if there are changes in the network environment or testing parameters, users can use this API to modify the sensor test template accordingly. \n\nTo utilize this query effectively, users need to provide the required parameters in the request body, such as the specific sensor test template they want to edit and the updated configurations or schedules. By utilizing this API endpoint, users can efficiently manage and adjust their sensor testing templates within the Cisco Catalyst Center environment, ensuring that their testing processes remain up-to-date and aligned with network requirements.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/AssuranceScheduleSensorTest\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This REST API query path is used to update a virtual network with scalable groups within the Cisco Catalyst Center. It allows users to modify and synchronize server profile information for devices within a specified Virtual Account environment. By utilizing this query, users can manage device provisioning operations accurately within the Virtual Account setup.\n\nFrom a user perspective, this query is essential for ensuring that device attributes such as hostname, serial number, and other details are correctly updated within the Catalyst Center. Users can utilize this API endpoint to maintain the accuracy of device data during the provisioning process, troubleshoot synchronization issues that may occur, and verify the status of devices within the Virtual Account to ensure proper onboarding and functionality.\n\nOverall, this API query provides users with the ability to efficiently manage virtual networks, IP pools, device information, and device provisioning within the Cisco Catalyst Center, ultimately contributing to the effective operation and maintenance of network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/virtual-network\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/virtual-network\" with the DELETE operation is used to delete a virtual network with scalable groups within the Cisco Catalyst Center. This query allows users to remove a virtual network that has been previously created within the Software-Defined Access (SD-Access) Fabric.\n\nFrom a user perspective, network administrators or operators can utilize this query when they need to remove a virtual network from their SDA Fabric. By providing the required query parameter \"virtualNetworkName,\" users can specify the virtual network they want to delete. This delete operation is crucial for maintaining an organized and efficient SDA Fabric environment. Users can ensure that their network resources are properly managed and that only relevant configurations are retained within the fabric by deleting unnecessary or outdated virtual networks.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/virtual-network\nREST operation:delete\nREST API query parameters:\n- virtualNetworkName: virtualNetworkName. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/virtual-network\" with the GET operation is used to retrieve information about a specific Virtual Network (VN) that exists within the Software-Defined Access (SD-Access) Fabric. \n\nFrom a user perspective, this query can be used to fetch details about a Virtual Network in the SD-Access Fabric. Users would need to provide the name of the Virtual Network they are interested in by specifying the \"virtualNetworkName\" query parameter. By executing this query, users can receive information such as the configuration, settings, and status of the specified Virtual Network within the SD-Access Fabric. This information can be crucial for network administrators and operators to understand the structure and utilization of Virtual Networks within their SD-Access environment, aiding in network troubleshooting, monitoring, and management. \n\nUsers, especially network administrators, can utilize this query to view VLAN configurations, troubleshoot network issues related to VLAN configurations, and ensure proper segmentation of network traffic based on VLANs, enhancing network security and efficiency. \n\nIn summary, this REST API query path offers users a way to retrieve crucial details about Virtual Networks within the SD-Access Fabric, enabling effective network monitoring, troubleshooting, and ensuring proper network configuration.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/virtual-network\nREST operation:get\nREST API query parameters:\n- virtualNetworkName: virtualNetworkName. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/virtual-network\" with the POST operation is used to add a virtual network with scalable groups within the Cisco Catalyst Center. When users make a POST request to this API endpoint, they can create a new virtual network within the Software-Defined Access (SD-Access) Fabric environment.\n\nFrom a user perspective, network administrators or operators can utilize this query to expand their network infrastructure by adding new virtual networks with scalable groups. By specifying parameters such as the name of the virtual network, site hierarchy, scalable group details, L2 flooding status, and pool type in the request body, users can define and configure the new virtual network accurately.\n\nThis query enables users to enhance network management and provisioning operations within the SD-Access Fabric. By adding virtual networks with scalable groups, users can segment and organize network resources efficiently, define specific policies, and establish proper connectivity within the fabric. Overall, this query empowers users to tailor their network environment to meet their organization's requirements and ensure seamless operations within the SD-Access Fabric.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/virtual-network\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/wireless/dynamic-interface\" with the GET operation, is designed to retrieve information about dynamic interfaces within a Cisco Catalyst Center environment. Dynamic interfaces are interfaces that are dynamically created or managed by the system based on specific conditions or configurations.\n\nFrom a user perspective, this query can be used by network administrators and engineers to retrieve details about dynamic interfaces in their network environment. Users can specify the dynamic interface name as a query parameter to retrieve information about a particular dynamic interface. If the interface-name parameter is not specified, the API will return details about all existing dynamic interfaces.\n\nBy using this query, users can efficiently gather information about dynamic interfaces without the need to query each interface individually. This can be useful for monitoring the characteristics, configurations, and operational capabilities of dynamic interfaces in a network environment. Users can leverage this API call to understand the growth of dynamic interfaces over time, compare their distributions across different sites or device types, and gain insights into the overall complexity of the network.\n\nIn summary, this API query enables users to effectively manage and monitor dynamic interfaces within their network environment by providing a convenient way to retrieve information about these interfaces.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/dynamic-interface\nREST operation:get\nREST API query parameters:\n- __runsync: Enable this parameter to execute the API and return a response synchronously. The query parameters should be used in the header. The default value is 'False'. This query parameter is required. \n- __timeout: If __runsync is set to \u2018true\u2019, this defines the maximum time before which if the API completes its execution, then a synchronous response is returned.  If the time taken for the API to complete the execution, exceeds this time, then an asynchronous response is returned with an execution id, that can be used to get the status and response associated with the API execution. The query parameters should be used in the header. The default value is '10'. This query parameter is required. \n- interface-name: dynamic-interface name, if not specified all the existing dynamic interfaces will be retrieved. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/wireless/dynamic-interface\" with the POST operation, is designed to create or update dynamic interfaces within a Cisco Catalyst Center environment. Dynamic interfaces are interfaces that are dynamically managed by the system based on specific conditions or configurations.\n\nFrom a user perspective, this query can be used by network administrators and engineers to create new dynamic interfaces or update existing ones in their network environment. By providing the necessary request parameters in the body of the POST request, users can define the characteristics and configurations of dynamic interfaces. This allows users to adapt and customize dynamic interfaces to meet the changing needs of their network infrastructure.\n\nUsers can leverage this API call to efficiently manage the creation and modification of dynamic interfaces, ensuring that the network environment can dynamically adjust to varying conditions or requirements. By utilizing this API query, users can streamline the process of managing dynamic interfaces, thereby enhancing the flexibility and scalability of their network setup.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/dynamic-interface\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __runsync: Enable this parameter to execute the API and return a response synchronously. The query parameters should be used in the header. The default value is 'False'. This query parameter is required. \n- __timeout: If __runsync is set to \u2018true\u2019, this defines the maximum time before which if the API completes its execution, then a synchronous response is returned.  If the time taken for the API to complete the execution, exceeds this time, then an asynchronous response is returned with an execution id, that can be used to get the status and response associated with the API execution. The query parameters should be used in the header. The default value is '10'. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/execute-suggested-actions-commands\" is designed to trigger the execution of suggested actions for a particular issue within the Cisco Catalyst Center environment. By sending a POST request to this API with the Issue Id, users can initiate the execution of the suggested actions associated with that specific issue. The API will return an execution Id, which can be used to track the progress and outcome of the execution.\n\nFrom a user perspective, this API query is beneficial for efficiently addressing network issues and automating resolution processes. Users can leverage this query to promptly execute recommended actions to resolve identified issues within the network infrastructure. By receiving the output of the commands associated with the suggested actions upon completion of the execution, users can gain insights into the changes made and ensure that the issue has been effectively resolved.\n\nOverall, this API query streamlines the process of implementing suggested actions for known network issues, enabling users to enhance network performance, troubleshoot efficiently, and maintain a stable and optimized network environment within the Cisco Catalyst Center.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/execute-suggested-actions-commands\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "This specific REST API query path \"/dna/intent/api/v1/enterprise-ssid/{ssidName}\" with a DELETE operation is used to delete Enterprise SSID within the Cisco Catalyst Center platform. Users can trigger the deletion process by providing the SSID name as a required parameter in the path.\n\nFrom a user perspective, this DELETE query can be valuable in scenarios where there is a need to remove a specific Enterprise SSID. For example, if an organization wants to decommission a particular SSID, update their wireless network configurations, or simply clean up obsolete SSIDs, they can utilize this query to effectively delete the Enterprise SSID along with all its associated configurations and policies from the Catalyst Center platform. This helps in maintaining an organized and up-to-date wireless network environment by removing unnecessary or outdated SSIDs.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/enterprise-ssid/{ssidName}\nREST operation:delete\nREST API query parameters:\n- ssidName: Enter the SSID name to be deleted. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The query path \"/dna/intent/api/v1/application-policy-application-set-count\" in the Cisco Catalyst Center is specifically used to retrieve the count of all existing application sets within the Catalyst Center environment. This query provides users with information on the total number of application sets that have been created, allowing for better monitoring and management of these sets.\n\nFrom a user perspective, this API query can be valuable for several purposes:\n1. **Monitoring:** By making a GET request to this endpoint with the required query parameter \"scalableGroupType\" set to 'APPLICATION_GROUP', users can retrieve a numerical value indicating the total count of application sets. This information can be used to monitor the growth and changes in the number of application sets over time.\n  \n2. **Management:** Users can utilize the count of application sets to effectively manage and organize their applications within the Catalyst Center platform. Knowing the total number of application sets can help in structuring, grouping, and applying policies to different sets of applications.\n  \n3. **Analysis:** By analyzing the distribution of applications across various sets, users can gain insights into how applications are categorized and managed within the network infrastructure. This analysis can help in optimizing application policies, identifying areas for improvement, and enhancing overall network performance.\n  \n4. **Complexity Evaluation:** The count of application sets can also assist users in evaluating the complexity of application policies within the network. Understanding the number of sets and the applications they contain can provide insights into the level of complexity in managing and maintaining these policies.\n\nIn essence, this API query enables users to efficiently gather data on the count of application sets, which is crucial for maintaining and optimizing application policies within the Cisco Catalyst Center environment. By leveraging this query, users can stay informed about the number of application sets and use this information to enhance their network management capabilities.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/application-policy-application-set-count\nREST operation:get\n</api-query>", "This specific REST API query path, \"/dna/intent/api/v1/wireless/ap-provision\" with the POST operation is designed for provisioning and re-provisioning wireless access points within the Cisco Catalyst Center platform. \n\nFrom a user perspective, network administrators, operators, and IT personnel can utilize this query for various purposes such as:\n\n1. **Initial Provisioning**: Users can provision new wireless access points by specifying configurations like SSIDs, security settings, RF profiles, and other essential parameters required for wireless network operation.\n\n2. **Reprovisioning**: In cases where there is a need to update or change the configurations of existing access points, users can use this query to reprovision them with new settings.\n\n3. **Troubleshooting and Maintenance**: By re-provisioning access points, users can efficiently address connectivity issues, apply configuration changes, or ensure optimal performance and stability of the access points.\n\n4. **Optimizing Performance**: Users can define specific configurations for each access point to ensure optimal performance and security within the network infrastructure.\n\n5. **Centralized Management**: This query provides a convenient and efficient way for users to centrally manage their wireless access points within the Catalyst Center platform, ensuring a seamless and tailored wireless network environment.\n\n6. **Efficient Deployment**: By provisioning access points with the required configurations, users can efficiently deploy network resources according to enterprise requirements, enhancing network security and ensuring proper network operation.\n\nOverall, this query empowers users to streamline the provisioning process, maintain accurate device configurations, troubleshoot issues efficiently, and optimize the performance of their wireless network infrastructure within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/ap-provision\nREST operation:post\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __persistbapioutput: . The query parameters should be used in the header. The default value is 'true'. This query parameter is required. \n\n</api-query>", "This REST API query path \"/dna/intent/api/v1/wireless-profile/{wirelessProfileName}\" with the \"delete\" operation is used to delete a specific Wireless Profile from the Cisco Catalyst Center. Wireless Profiles in Cisco DNA Center consist of configurations related to wireless network settings, SSID configurations, security settings, and other parameters necessary for managing and organizing wireless networks efficiently.\n\nFrom a user perspective, this API query can be valuable when there is a need to remove a particular Wireless Profile that is no longer needed or has become obsolete. Network administrators or IT personnel can utilize this query to clean up the system, streamline configurations, and ensure that only relevant and up-to-date Wireless Profiles are maintained within the Cisco Catalyst Center environment.\n\nBy providing the required query parameter \"wirelessProfileName\" in the path and including the mandatory request parameter in the body of the API call, users can effectively trigger the deletion of the specified Wireless Profile. This helps in maintaining a well-organized and optimized wireless network infrastructure within the Cisco DNA Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless-profile/{wirelessProfileName}\nREST operation:delete\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- wirelessProfileName: Wireless Profile Name. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/device-enrichment-details\" with the GET operation is designed to provide users with enriched details regarding a specific network device context. This query enriches the given network device context (identified by device ID, MAC address, or management IP address) with detailed information about the device and its neighbor topology.\n\nFrom a user perspective, this query can be used to enhance the understanding of a particular network device by retrieving comprehensive details such as device type, IP address, MAC address, and other relevant information about the neighboring devices. This information is valuable for network troubleshooting, monitoring, inventory management, and configuration purposes.\n\nUsers can leverage this API query to gain insights into the network device's configuration, status, and relationships with neighboring devices, enabling efficient network operations, troubleshooting, and optimization. By providing the necessary device context parameters in the query, users can access a wealth of information that can aid in maintaining network health, ensuring proper connectivity, and facilitating informed decision-making regarding network management tasks.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/device-enrichment-details\nREST operation:get\nREST API query parameters:\n- entity_type: Device enrichment details can be fetched based on either Device ID or Device MAC address or Device IP Address. This parameter value must either be device_id/mac_address/ip_address. The query parameters should be used in the header. This query parameter is required. \n- entity_value: Contains the actual value for the entity type that has been defined. The query parameters should be used in the header. This query parameter is required. \n\n</api-query>", "The specific REST API query path \"/dna/intent/api/v1/user-enrichment-details\" with the GET operation is designed to enrich a given network End User context with details about the user and devices that the user is connected to. Users can retrieve this enriched information based on either User ID or Client MAC address.\n\nFrom a user perspective, this query can be utilized in various scenarios:\n1. **User Identification**: By providing the relevant User ID or MAC address, users can identify and access detailed information about the user and the devices connected to them within the network.\n2. **Network Issue Resolution**: This query can assist users in troubleshooting network-related problems by providing insights into the user's context and connected devices, helping to address any issues efficiently.\n3. **Network Health Monitoring**: Users can monitor the status and performance of network users and devices by fetching details about user enrichment. This enables proactive management of network operations and early detection of potential issues.\n\nOverall, this API query helps users enrich their understanding of network issues, impacted hosts, and recommended actions for effective network management and maintenance.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/user-enrichment-details\nREST operation:get\nREST API query parameters:\n- entity_type: User enrichment details can be fetched based on either User ID or Client MAC address. This parameter value must either be network_user_id/mac_address. The query parameters should be used in the header. This query parameter is required. \n- entity_value: Contains the actual value for the entity type that has been defined. The query parameters should be used in the header. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/membership/{siteId}\" allows users to retrieve a list of devices that are associated with a specific site within the Cisco Catalyst Center infrastructure. This query is used to get detailed information about the devices assigned to a particular site.\n\nFrom a user perspective, this query can be useful for network administrators or IT professionals who are responsible for managing and monitoring devices within their network infrastructure. By providing the siteId as a query parameter, users can specify the site they are interested in and retrieve a list of devices assigned to that specific site.\n\nAdditionally, users can control the number of devices displayed on each page and navigate through large lists of devices easily by using the \"offset\" and \"limit\" parameters for pagination. The \"deviceFamily\" parameter allows users to filter devices based on their family name, and the \"serialNumber\" parameter enables users to search for devices by their serial number.\n\nOverall, this API query provides a convenient and efficient way for users to access detailed information about the devices assigned to a specific site, facilitating better network management, troubleshooting, and ensuring proper device allocation within the network infrastructure.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/membership/{siteId}\nREST operation:get\nREST API query parameters:\n- siteId: Site id to retrieve device associated with the site.. The query parameters should be used in the path. This query parameter is required. \n- offset: offset/starting row. The query parameters should be used in the query. This query parameter is required. \n- limit: Number of sites to be retrieved. The query parameters should be used in the query. This query parameter is required. \n- deviceFamily: Device family name . The query parameters should be used in the query. This query parameter is required. \n- serialNumber: Device serial number. The query parameters should be used in the query. This query parameter is required. \n\n</api-query>", "The provided REST API query path \"/dna/intent/api/v1/site/{siteId}\" with the operation \"delete\" is used to delete a specific site within the Cisco Catalyst Center environment. By providing the unique site identifier (siteId) in the path, users can delete the site along with its associated area, building, and floor details.\n\nFrom a user perspective, this API query can be useful in scenarios where a site needs to be removed from the network infrastructure. For example, if a physical location is no longer in use, or if there are changes in the network structure that require the deletion of a specific site, network administrators or IT personnel can utilize this query to efficiently remove the site from the system.\n\nBy making a DELETE request to this endpoint with the required siteId parameter, users can effectively delete the site and all its related information from the network configuration. This helps in maintaining an accurate and up-to-date representation of the network topology within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/site/{siteId}\nREST operation:delete\nREST API query parameters:\n- siteId: Site id to which site details to be deleted.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The given query path \"/dna/intent/api/v1/site/{siteId}\" with a PUT operation is used to update a specific site within the Cisco Catalyst Center. This operation allows users to modify the details of a site, such as its area, building, or floor information, by providing a new hierarchy and updated values.\n\nFrom a user perspective, network administrators or IT personnel can leverage this API query to make changes to an existing site within their network infrastructure managed by the Cisco Catalyst Center. By specifying the siteId of the site they want to update and providing the new hierarchy details and values in the request body, users can effectively and efficiently update the site information as needed. \n\nThis API query is valuable for maintaining an accurate and up-to-date representation of the network hierarchy within the Cisco DNA Center, ensuring that the grouping of devices and network resources aligns with the physical infrastructure setup. By utilizing this query, users can easily manage and adjust site details to reflect any changes or optimizations required in their network environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/site/{siteId}\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n- __runsync: Enable this parameter to execute the API and return a response synchronously. The query parameters should be used in the header. The default value is 'False'. This query parameter is required. \n- __timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated. The query parameters should be used in the header. The default value is '10'. This query parameter is required. \n- __persistbapioutput: Persist bapi sync response. The query parameters should be used in the header. The default value is 'True'. This query parameter is required. \n- siteId: Site id to which site details to be updated.. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "The provided context outlines that the specific REST API query path \"/dna/intent/api/v1/sensor-run-now\" with the REST operation \"put\" is used for running a deployed SENSOR test immediately. This API endpoint allows users to trigger a sensor test that has already been set up and deployed within the Cisco Catalyst Center without waiting for the scheduled time.\n\nFrom a user perspective, this query can be utilized when there is an immediate need to run a sensor test to assess the network's performance, troubleshoot issues, or verify specific configurations. By sending a PUT request to this API endpoint and including the necessary parameters in the request body, users can initiate the sensor test promptly.\n\nFor example, if a network administrator wants to quickly validate the connectivity or performance of a particular SSID or network segment, they can use this API to run the sensor test instantly. This capability enables users to perform on-demand testing and gather real-time data to make informed decisions about network optimization or issue resolution.\n\nOverall, the \"/dna/intent/api/v1/sensor-run-now\" query provides users with the flexibility to execute SENSOR tests immediately as needed, enhancing the agility and responsiveness of network monitoring and maintenance activities within the Cisco Catalyst Center environment.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/sensor-run-now\nREST operation:put\nREST API query parameters:\n- request: request. The query parameters should be used in the body. This query parameter is required. \n\n</api-query>", "From the provided information, the specific REST API query path \"/dna/intent/api/v1/business/ssid/{ssidName}/{managedAPLocations}\" with the delete operation is used to delete an SSID and provision it to devices within the Cisco Catalyst Center platform.\n\nUser Perspective:\n- **Purpose**: This query is valuable for users who need to remove a specific SSID from their network profile, reprovision devices, and effectively delete the SSID or WLAN from DNA Center.\n- **Usage**: Users can trigger this DELETE operation by providing the SSID name and managed AP locations as required parameters in the path.\n- **Benefits**:\n   - **Organized Network**: Helps in maintaining an organized and up-to-date wireless network environment by removing unnecessary or obsolete SSIDs.\n   - **Efficient Network Management**: Streamlines the process of managing wireless networks by deleting unwanted SSIDs and reprovisioning devices efficiently.\n\nOverall, from a user perspective, this API query provides a convenient and effective way to manage and optimize the wireless network infrastructure within the Cisco Catalyst Center by deleting specific SSIDs and provisioning devices accordingly.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/business/ssid/{ssidName}/{managedAPLocations}\nREST operation:delete\nREST API query parameters:\n- __persistbapioutput: Enable this parameter to execute the API and return a response asynchronously.. The query parameters should be used in the header. The default value is 'true'. This query parameter is required. \n- ssidName: . The query parameters should be used in the path. This query parameter is required. \n- managedAPLocations: . The query parameters should be used in the path. This query parameter is required. \n\n</api-query>", "This specific REST API query path `/dna/intent/api/v1/wireless/dynamic-interface/{interfaceName}` with the `delete` operation is designed to delete a dynamic interface within the Cisco Catalyst Center platform. \n\nFrom a user perspective, this query can be leveraged when there is a need to remove a dynamic interface that is no longer required or needs to be reconfigured. By providing the valid `interfaceName` as a path parameter, users can trigger the deletion process effectively. This action ensures that all related information and configurations associated with that particular dynamic interface are removed from the Catalyst Center, maintaining a clean and up-to-date network environment.\n\nFor example, if a wireless access point is being relocated or decommissioned, a network administrator can use this API call to delete the dynamic interface associated with that access point. This helps in ensuring that only active and relevant interfaces are part of the wireless network, optimizing network performance and management.\n\nBy setting the `__runsync` parameter to `True` and specifying a `__timeout` value in the header, users can control the execution behavior of the API request, allowing them to receive synchronous or asynchronous responses based on the defined time limits.\n\nIn conclusion, the use of this delete query path enables users to effectively manage their wireless network infrastructure by removing unnecessary dynamic interfaces and maintaining an organized network configuration within the Cisco Catalyst Center platform.\n\nREST API query information delimited with XML tags\n<api-query>\nAPI query path:/dna/intent/api/v1/wireless/dynamic-interface/{interfaceName}\nREST operation:delete\nREST API query parameters:\n- __runsync: Enable this parameter to execute the API and return a response synchronously. The query parameters should be used in the header. The default value is 'False'. This query parameter is required. \n- __timeout: If __runsync is set to \u2018true\u2019, this defines the maximum time before which if the API completes its execution, then a synchronous response is returned.  If the time taken for the API to complete the execution, exceeds this time, then an asynchronous response is returned with an execution id, that can be used to get the status and response associated with the API execution. The query parameters should be used in the header. The default value is '10'. This query parameter is required. \n- interfaceName: valid interface-name to be deleted. The query parameters should be used in the path. This query parameter is required. \n\n</api-query>"], "ids": ["deployTemplateV2", "getApplicationSet/s", "createApplicationSet/s", "addMembersToTheTag", "getTagMembersById", "configureAccessPoints", "getsAllTheVersionsOfAGivenTemplate", "createsACloneOfTheGivenTemplate", "getViewsForAGivenViewGroup", "getChassisDetailsForDevice", "getAllUser-Defined-Fields", "createUser-Defined-Field", "getCountOfAllDiscoveryJobs", "updateWebhookDestination", "getWebhookDestination", "createWebhookDestination", "lANAutomationStopAndUpdateDevices", "lANAutomationStop", "statusOfTemplateDeployment", "createSyslogDestination", "getSyslogDestination", "updateSyslogDestination", "deleteApplicationPolicyQueuingProfile", "getSyncResultForVirtualAccount", "updateDevice", "getDeviceById", "deleteDeviceByIdFromPnP", "deleteAuthenticationAndPolicyServerAccessConfiguration", "editAuthenticationAndPolicyServerAccessConfiguration", "un-ClaimDevice", "createITSMIntegrationSetting", "getModuleInfoById", "getSoftwareImageDetails", "assignDeviceCredentialToSiteV2", "createSNMPDestination", "updateSNMPDestination", "countOfNotifications", "getITSMIntegrationSettingById", "updateITSMIntegrationSetting", "deleteITSMIntegrationSetting", "updateSNMPWriteCommunity", "createSNMPWriteCommunity", "lANAutomationDeviceUpdate", "createTag", "updateTag", "getTag", "countOfEventSubscriptions", "uploadFile", "getApplicationPolicyQueuingProfile", "createApplicationPolicyQueuingProfile", "updateApplicationPolicyQueuingProfile", "getSyslogSubscriptionDetails", "createNetconfCredentials", "updateNetconfCredentials", "deployTemplate", "getClientDetail", "getViewDetailsForAGivenViewGroup&View", "deleteDeviceById", "getDeviceByID", "updateSNMPv3Credentials", "createSNMPv3Credentials", "addVirtualAccount", "updatePnPServerProfile", "getDeviceList", "addDevice", "updateDeviceDetails", "getTheDetailsOfPhysicalComponentsOfTheGivenDevice.", "returnsPOEInterfaceDetailsForTheDevice.", "getApplicationPolicyDefault", "deleteAScheduledReport", "getAScheduledReport", "importDevicesInBulk", "deregisterVirtualAccount", "clearMac-AddressTable", "getSiteHealth", "getTaskCount", "getSiteCountV2", "authorizeDevice", "getDeviceInterfaceVLANs", "updateTemplate", "getsTheTemplatesAvailable", "importCertificate", "custom-promptSupportGETAPI", "customPromptPOSTAPI", "getTagMemberCount", "getListOfScheduledReports", "createOrScheduleAReport", "getAllViewGroups", "updateWorkflow", "getWorkflowById", "deleteWorkflowById", "getEoXStatusForAllDevices", "getEmailSubscriptionDetails", "associate", "disassociate", "getDiscoveriesByRange", "getAllKeywordsOfCLIsAcceptedByCommandRunner", "getDeviceInterfacesBySpecifiedRange", "createQosDeviceInterfaceInfo", "getQosDeviceInterfaceInfo", "updateQosDeviceInterfaceInfo", "getPollingIntervalForAllDevices", "importCertificateP12", "updatePlannedAccessPointForFloor", "getPlannedAccessPointsForFloor", "createPlannedAccessPointForFloor", "getDeviceFamilyIdentifiers", "syncDevices", "devices", "getSmartAccountList", "getConfigurationArchiveDetails", "getEmailEventSubscriptions", "createEmailEventSubscription", "updateEmailEventSubscription", "getApplicationPolicy", "getNetworkDevicesFromDiscovery", "getAdvisoriesSummary", "getDeviceInterfaceCountForMultipleDevices", "getComplianceDetailCount", "getOverallClientHealth", "getListOfAvailableNamespaces", "licenseUsageDetails", "deleteTag", "getTagById", "getAdvisoriesList", "previewTemplate", "deployDeviceReplacementWorkflow", "getSNMPProperties", "create/UpdateSNMPProperties", "getEvents", "updateTagMembership", "getListOfFiles", "getTagResourceTypes", "createNetworkV2", "updateNetworkV2", "getAdvisoriesPerDevice", "getAllITSMIntegrationSettings", "updateSNMPReadCommunity", "createSNMPReadCommunity", "unMarkDeviceForReplacement", "markDeviceForReplacement", "returnListOfReplacementDevicesWithReplacementDetails", "deleteDiscoveryById", "getDiscoveryById", "getAuditLogSummary", "importsTheTemplatesProvided", "importLocalSoftwareImage", "getLinecardDetails", "createGlobalCredentialsV2", "getAllGlobalCredentialsV2", "updateGlobalCredentialsV2", "getsAListOfProjects", "createProject", "updateProject", "deleteQosDeviceInterfaceInfo", "createEventSubscriptions", "updateEventSubscriptions", "deleteEventSubscriptions", "getEventSubscriptions", "systemHealthCountAPI", "getInterfaceDetailsByDeviceIdAndInterfaceName", "complianceDetailsOfDevice", "commitDeviceConfiguration", "deviceLicenseSummary", "createHTTPWriteCredentials", "updateHTTPWriteCredentials", "addAuthenticationAndPolicyServerAccessConfiguration", "getAuthenticationAndPolicyServers", "retrivesAllPreviousPathtracesSummary", "initiateANewPathtrace", "inventoryInsightDeviceLinkMismatchAPI", "updateRoleAPI", "addRoleAPI", "exportDeviceConfigurations", "startDiscovery", "updatesAnExistingDiscoveryBySpecifiedId", "deleteAllDiscovery", "getDeviceInterfaceCount", "importMapArchive-CancelAnImport", "getDeviceCount", "importMapArchive-PerformImport", "tagAsGoldenImage", "lANAutomationLogById", "rebootAccessPoints", "systemHealthAPI", "ciscoDNACenterReleaseSummary", "configureAccessPoints-2", "claimADeviceToASite", "getSiteV2", "deleteSPProfileV2", "lANAutomationStatusById", "getVLANDetails", "editApplication/s", "getApplication/s", "createApplication/s", "deleteGlobalCredentialV2", "deletePlannedAccessPointForFloor", "exportsTheProjectsForAGivenCriteria.", "deleteUserAPI", "getVirtualAccountList", "updateSyslogEventSubscription", "createSyslogEventSubscription", "getSyslogEventSubscriptions", "addUserAPI", "getUsersAPI", "updateUserAPI", "getStackDetailsForDevice", "getOSPFInterfaces", "getDeviceInterfaceStatsInfo", "getQosDeviceInterfaceInfoCount", "countOfEvents", "getWorkflowCount", "deleteUser-Defined-Field", "updateUser-Defined-Field", "getOverallNetworkHealth", "updateGlobalCredentials", "deleteGlobalCredentialsById", "getApplicationSetCount", "getRolesAPI", "retrievesPreviousPathtrace", "deletesPathtraceById", "getEventArtifacts", "getPnPGlobalSettings", "updatePnPGlobalSettings", "getTagCount", "updateSPProfileV2", "createSPProfileV2", "getServiceProviderDetailsV2", "updateEmailDestination", "createEmailDestination", "getEmailDestination", "deviceComplianceStatus", "getFunctionalCapabilityById", "getDeviceSummary", "getPollingIntervalById", "addAWorkflow", "getWorkflows", "virtualAccountDetails", "getNotifications", "getOrganizationListForMeraki", "getDeviceConfigById", "getISISInterfaces", "getConfigTaskDetails", "updateInterfaceDetails", "systemPerformanceHistoricalAPI", "legitOperationsForInterface", "getDeviceConfigCount", "updateHTTPReadCredential", "createHTTPReadCredentials", "getPermissionsAPI", "getAuditLogRecords", "getsDetailsOfAGivenTemplate", "deletesTheTemplate", "deviceDeregistration", "pOEDetails", "getModuleCount", "triggerSoftwareImageDistribution", "deletesTheProject", "getsTheDetailsOfAGivenProject.", "getAllExecutionDetailsForAGivenReport", "getSupervisorCardDetail", "deleteApplication", "deviceCountDetails", "createRest/WebhookEventSubscription", "updateRest/WebhookEventSubscription", "getRest/WebhookEventSubscriptions", "lANAutomationLog", "createCLICredentials", "updateCLICredentials", "lANAutomationStart", "downloadAFileByFileId", "getGoldenTagStatusOfAnImage.", "removeGoldenTagForImage.", "getProject(s)Details", "removeUser-Defined-FieldFromDevice", "addUser-Defined-FieldToDevice", "getSiteTopology", "mapsSupportedAccessPoints", "getListOfDiscoveriesByDiscoveryId", "returnReplacementDevicesCount", "deviceRegistration", "resetDevice", "getTaskById", "syncVirtualAccountDevices", "getDiscoveryJobsByIP", "lANAutomationStatus", "getAuditLogParentRecords", "getConnectedDeviceDetail", "getDevicesDiscoveredById", "getDiscoveredDevicesByRange", "authenticationAPI", "getDevicesThatAreAssignedToASite", "createTemplate", "getExternalAuthenticationServersAPI", "applicationPolicyIntent", "lANAutomationSessionCount", "getTemplate(s)Details", "getAccessPointConfiguration", "returnsDevicesAddedToCiscoDNACenterWithSnmpV3DES.", "updateDeviceManagementAddress", "importMapArchive-StartImport", "getPhysicalTopology", "lANAutomationLogsForIndividualDevices", "exportsTheTemplatesForAGivenCriteria.", "getPlannedAccessPointsForBuilding", "getDeviceConfigForAllDevices", "eventArtifactCount", "getInterfaceById", "getTopologyDetails", "getInterfaceInfoById", "importSoftwareImageViaURL", "getConnectorTypes", "smartAccountDetails", "getBusinessAPIExecutionDetails", "lANAutomationActiveSessions", "getL3TopologyDetails", "deleteApplicationSet", "getAccessPointRebootTaskResult", "removeTagMember", "getDevicesRegisteredForWSANotification", "getInterfaceByIP", "getDeviceDetail", "previewConfig", "updateDeviceRole", "deleteRoleAPI", "getNetworkDeviceByIP", "changeVirtualAccount", "claimDevice", "ciscoDNACenterNodesConfigurationSummary", "getDeviceBySerialNumber", "downloadReportContent", "ciscoISEServerIntegrationStatus", "getComplianceStatusCount", "importMapArchive-ImportStatus", "getFunctionalCapabilityForDevices", "getAdvisoryIDsPerDevice", "deviceLicenseDetails", "getTaskByOperationId", "acceptCiscoISEServerCertificateForCiscoISEServerIntegration", "getComplianceStatus", "getDeviceList-2", "addDevice-2", "exportDeviceList", "getModules", "licenseTermDetails", "getApplicationCount", "getEoXSummary", "assignDevicesToSite", "getDeviceHistory", "versionTemplate", "runRead-onlyCommandsOnDevicesToGetTheirReal-timeConfiguration", "getApplicationPolicyQueuingProfileCount", "ciscoDNACenterPackagesSummary", "getAllInterfaces", "getDeviceCount-2", "getDevicesPerAdvisory", "getWirelessLanControllerDetailsById", "getDiscoveredNetworkDevicesByDiscoveryId", "getTaskTree", "getEoXDetailsPerDevice", "triggerSoftwareImageActivation", "getAccessPointConfigurationTaskResult", "exportMapArchive", "getStatusAPIForEvents", "getDeviceValuesThatMatchFullyOrPartiallyAnAttribute", "getComplianceDetail", "getGlobalCredentials", "getNetworkV2", "getTasks", "issues", "getRest/WebhookSubscriptionDetails", "systemPerformanceAPI", "getNetworkDeviceByPaginationRange", "importsTheProjectsProvided", "runCompliance", "getSNMPDestination", "updateGlobalPool", "getGlobalPool", "createGlobalPool", "getApplicationsCount", "deletePortAssignmentForAccessPointInSDAFabric", "getPortAssignmentForAccessPointInSDAFabric", "addPortAssignmentForAccessPointInSDAFabric", "retrieveRFProfiles", "createOrUpdateRFProfile", "deleteGlobalIPPool", "getDeviceInfoFromSDAFabric", "updateNFVProfile", "getNFVProfile", "deleteNFVProfile", "getTransitPeerNetworkInfo", "addTransitPeerNetwork", "deleteTransitPeerNetwork", "deleteEdgeDeviceFromSDAFabric", "getEdgeDeviceFromSDAFabric", "addEdgeDeviceInSDAFabric", "addIPPoolInSDAVirtualNetwork", "deleteIPPoolFromSDAVirtualNetwork", "getIPPoolFromSDAVirtualNetwork", "createSensorTestTemplate", "deleteSensorTest", "sensors", "removeWLCFromFabricDomain", "addWLCToFabricDomain", "createAndProvisionSSID", "deleteDeviceCredential", "deleteRFProfiles", "deleteMulticastFromSDAFabric", "getMulticastDetailsFromSDAFabric", "addMulticastInSDAFabric", "applications", "getVNFromSDAFabric", "addVNInFabric", "deleteVNFromSDAFabric", "nFVProvisioningDetail", "getNetwork", "editApplication", "getApplications", "deleteApplication-2", "createApplication", "createApplicationSet", "deleteApplicationSet-2", "getApplicationSets", "deleteDefaultAuthenticationProfileFromSDAFabric", "updateDefaultAuthenticationProfileInSDAFabric", "getDefaultAuthenticationProfileFromSDAFabric", "addDefaultAuthenticationTemplateInSDAFabric", "reserveIPSubpool", "updateReserveIPSubpool", "clientProximity", "getReserveIPSubpool", "pSKOverride", "deleteSPProfile", "assignDeviceCredentialToSite", "updateDeviceCredentials", "getDeviceCredentialDetails", "createDeviceCredentials", "deleteSiteFromSDAFabric", "getSiteFromSDAFabric", "addSiteInSDAFabric", "re-ProvisionWiredDevice", "provisionWiredDevice", "getProvisionedWiredDevice", "deleteProvisionedWiredDevice", "updateSPProfile", "getServiceProviderDetails", "createSPProfile", "createSite", "getSite", "updateNetwork", "createNetwork", "createNFVProfile", "getVirtualNetworkSummary", "provisionNFV", "createWirelessProfile", "getWirelessProfile", "updateWirelessProfile", "getIssueEnrichmentDetails", "provisionUpdate", "provision", "duplicateSensorTestTemplate", "releaseReserveIPSubpool", "sensorTestResults", "createEnterpriseSSID", "updateEnterpriseSSID", "getEnterpriseSSID", "getDeviceRoleInSDAFabric", "addPortAssignmentForUserDeviceInSDAFabric", "getPortAssignmentForUserDeviceInSDAFabric", "deletePortAssignmentForUserDeviceInSDAFabric", "getBorderDeviceDetailFromSDAFabric", "addBorderDeviceInSDAFabric", "deleteBorderDeviceFromSDAFabric", "getDeviceDetailsByIP", "getCMDBSyncStatus", "getControlPlaneDeviceFromSDAFabric", "addControlPlaneDeviceInSDAFabric", "deleteControlPlaneDeviceInSDAFabric", "updateSSIDToIPPoolMapping", "addSSIDToIPPoolMapping", "getSSIDToIPPoolMapping", "getFailedITSMEvents", "retryIntegrationEvents", "getClientEnrichmentDetails", "getSiteCount", "editSensorTestTemplate", "updateVirtualNetworkWithScalableGroups", "deleteVirtualNetworkWithScalableGroups", "getVirtualNetworkWithScalableGroups", "addVirtualNetworkWithScalableGroups", "getDynamicInterface", "createUpdateDynamicInterface", "executeSuggestedActionsCommands", "deleteEnterpriseSSID", "getApplicationSetsCount", "aPProvision", "deleteWirelessProfile", "getDeviceEnrichmentDetails", "getUserEnrichmentDetails", "getMembership", "deleteSite", "updateSite", "runNowSensorTest", "deleteSSIDAndProvisionItToDevices", "deleteDynamicInterface"], "metadatas": [{"summary": "Deploy Template V2", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Get Application Set/s", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Create Application Set/s", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Add members to the tag", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Get Tag members by Id", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Configure Access Points", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Gets all the versions of a given template", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Creates a clone of the given template", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Get views for a given view group", "tag": "Reports", "doc_type": "apispecs"}, {"summary": "Get Chassis Details for Device", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get All User-Defined-Fields", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Create User-Defined-Field", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get count of all discovery jobs", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Update Webhook Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Webhook Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Create Webhook Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "LAN Automation Stop and Update Devices", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "LAN Automation Stop", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "Status of template deployment", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Create Syslog Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Syslog Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Update Syslog Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Delete Application Policy Queuing Profile", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get Sync Result for Virtual Account", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Update Device", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get Device by Id", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Delete Device by Id from PnP", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Delete Authentication and Policy Server Access Configuration", "tag": "System Settings", "doc_type": "apispecs"}, {"summary": "Edit Authentication and Policy Server Access Configuration", "tag": "System Settings", "doc_type": "apispecs"}, {"summary": "Un-Claim Device", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Create ITSM Integration setting", "tag": "ITSM Integration", "doc_type": "apispecs"}, {"summary": "Get Module Info by Id", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get software image details", "tag": "Software Image Management (SWIM)", "doc_type": "apispecs"}, {"summary": "Assign Device Credential To Site V2", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Create SNMP Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Update SNMP Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Count of Notifications", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get ITSM Integration setting by Id", "tag": "ITSM Integration", "doc_type": "apispecs"}, {"summary": "Update ITSM Integration setting", "tag": "ITSM Integration", "doc_type": "apispecs"}, {"summary": "Delete ITSM Integration setting", "tag": "ITSM Integration", "doc_type": "apispecs"}, {"summary": "Update SNMP write community", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Create SNMP write community", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "LAN Automation Device Update", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "Create Tag", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Update Tag", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Get Tag", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Count of Event Subscriptions", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "uploadFile", "tag": "File", "doc_type": "apispecs"}, {"summary": "Get Application Policy Queuing Profile", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Create Application Policy Queuing Profile", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Update Application Policy Queuing Profile", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get Syslog Subscription Details", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Create Netconf credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Update Netconf credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Deploy Template", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Get Client Detail", "tag": "Clients", "doc_type": "apispecs"}, {"summary": "Get view details for a given view group & view", "tag": "Reports", "doc_type": "apispecs"}, {"summary": "Delete Device by Id", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Device by ID", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Update SNMPv3 credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Create SNMPv3 credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Add Virtual Account", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Update PnP Server Profile", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get Device list", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Add Device", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Update Device Details", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get the Details of Physical Components of the Given Device.", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Returns POE interface details for the device.", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Application Policy Default", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Delete a scheduled report", "tag": "Reports", "doc_type": "apispecs"}, {"summary": "Get a scheduled report", "tag": "Reports", "doc_type": "apispecs"}, {"summary": "Import Devices in bulk", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Deregister Virtual Account", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Clear Mac-Address table", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Site Health", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Get task count", "tag": "Task", "doc_type": "apispecs"}, {"summary": "Get Site Count V2", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Authorize Device", "tag": "Cisco DNA Center System", "doc_type": "apispecs"}, {"summary": "Get Device Interface VLANs", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Update Template", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Gets the templates available", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "importCertificate", "tag": "Authentication", "doc_type": "apispecs"}, {"summary": "Custom-prompt support GET API", "tag": "System Settings", "doc_type": "apispecs"}, {"summary": "Custom Prompt POST API", "tag": "System Settings", "doc_type": "apispecs"}, {"summary": "Get Tag Member count", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Get list of scheduled reports", "tag": "Reports", "doc_type": "apispecs"}, {"summary": "Create or Schedule a report", "tag": "Reports", "doc_type": "apispecs"}, {"summary": "Get all view groups", "tag": "Reports", "doc_type": "apispecs"}, {"summary": "Update Workflow", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get Workflow by Id", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Delete Workflow By Id", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get EoX Status For All Devices", "tag": "EoX", "doc_type": "apispecs"}, {"summary": "Get Email Subscription Details", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Associate", "tag": "Site Design", "doc_type": "apispecs"}, {"summary": "Disassociate", "tag": "Site Design", "doc_type": "apispecs"}, {"summary": "Get Discoveries by range", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get all keywords of CLIs accepted by command runner", "tag": "Command Runner", "doc_type": "apispecs"}, {"summary": "Get Device Interfaces by specified range", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Create Qos Device Interface Info", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get Qos Device Interface Info", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Update Qos Device Interface Info", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get Polling Interval for all devices", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "importCertificateP12", "tag": "Authentication", "doc_type": "apispecs"}, {"summary": "Update Planned Access Point for Floor", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Planned Access Points for Floor", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Create Planned Access Point for Floor", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Device Family Identifiers", "tag": "Software Image Management (SWIM)", "doc_type": "apispecs"}, {"summary": "Sync Devices", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Devices", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Smart Account List", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get configuration archive details", "tag": "Configuration Archive", "doc_type": "apispecs"}, {"summary": "Get Email Event Subscriptions", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Create Email Event Subscription", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Update Email Event Subscription", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Application Policy", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get network devices from Discovery", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get Advisories Summary", "tag": "Security Advisories", "doc_type": "apispecs"}, {"summary": "Get Device Interface Count for Multiple Devices", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Compliance Detail Count", "tag": "Compliance", "doc_type": "apispecs"}, {"summary": "Get Overall Client Health", "tag": "Clients", "doc_type": "apispecs"}, {"summary": "Get list of available namespaces", "tag": "File", "doc_type": "apispecs"}, {"summary": "License Usage Details", "tag": "Licenses", "doc_type": "apispecs"}, {"summary": "Delete Tag", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Get Tag by Id", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Get Advisories List", "tag": "Security Advisories", "doc_type": "apispecs"}, {"summary": "Preview Template", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Deploy device replacement workflow", "tag": "Device Replacement", "doc_type": "apispecs"}, {"summary": "Get SNMP properties", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Create/Update SNMP properties", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get Events", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Update tag membership", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Get list of files", "tag": "File", "doc_type": "apispecs"}, {"summary": "Get Tag resource types", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Create Network V2", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Update Network V2", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Get Advisories Per Device", "tag": "Security Advisories", "doc_type": "apispecs"}, {"summary": "Get all ITSM Integration settings", "tag": "ITSM Integration", "doc_type": "apispecs"}, {"summary": "Update SNMP read community", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Create SNMP read community", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "UnMark device for replacement", "tag": "Device Replacement", "doc_type": "apispecs"}, {"summary": "Mark device for replacement", "tag": "Device Replacement", "doc_type": "apispecs"}, {"summary": "Return list of replacement devices with replacement details", "tag": "Device Replacement", "doc_type": "apispecs"}, {"summary": "Delete discovery by Id", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get Discovery by Id", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get AuditLog Summary", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Imports the templates provided", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Import local software image", "tag": "Software Image Management (SWIM)", "doc_type": "apispecs"}, {"summary": "Get Linecard details", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Create Global Credentials V2", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get All Global Credentials V2", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Update Global Credentials V2", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Gets a list of projects", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Create Project", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Update Project", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Delete Qos Device Interface Info", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Create Event Subscriptions", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Update Event Subscriptions", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Delete Event Subscriptions", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Event Subscriptions", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "System Health Count API", "tag": "Health and Performance", "doc_type": "apispecs"}, {"summary": "Get Interface details by device Id and interface name", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Compliance Details of Device", "tag": "Compliance", "doc_type": "apispecs"}, {"summary": "Commit device configuration", "tag": "Compliance", "doc_type": "apispecs"}, {"summary": "Device License Summary", "tag": "Licenses", "doc_type": "apispecs"}, {"summary": "Create HTTP write credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Update HTTP write credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Add Authentication and Policy Server Access Configuration", "tag": "System Settings", "doc_type": "apispecs"}, {"summary": "Get Authentication and Policy Servers", "tag": "System Settings", "doc_type": "apispecs"}, {"summary": "Retrives all previous Pathtraces summary", "tag": "Path Trace", "doc_type": "apispecs"}, {"summary": "Initiate a new Pathtrace", "tag": "Path Trace", "doc_type": "apispecs"}, {"summary": "Inventory Insight Device Link Mismatch API", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Update role API", "tag": "User and Roles", "doc_type": "apispecs"}, {"summary": "Add role API", "tag": "User and Roles", "doc_type": "apispecs"}, {"summary": "Export Device configurations", "tag": "Configuration Archive", "doc_type": "apispecs"}, {"summary": "Start discovery", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Updates an existing discovery by specified Id", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Delete all discovery", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get Device Interface count", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Import Map Archive - Cancel an Import", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Get Device Count", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Import Map Archive - Perform Import", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Tag as Golden Image", "tag": "Software Image Management (SWIM)", "doc_type": "apispecs"}, {"summary": "LAN Automation Log by Id", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "Reboot Access Points", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "System Health API", "tag": "Health and Performance", "doc_type": "apispecs"}, {"summary": "Cisco DNA Center Release Summary", "tag": "Platform", "doc_type": "apispecs"}, {"summary": "Configure Access Points", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Claim a Device to a Site", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get Site V2", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Delete SP Profile V2", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "LAN Automation Status by Id", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "Get VLAN details", "tag": "Topology", "doc_type": "apispecs"}, {"summary": "Edit Application/s", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get Application/s", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Create Application/s", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Delete Global Credential V2", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Delete Planned Access Point for Floor", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Exports the projects for a given criteria.", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Delete user API", "tag": "User and Roles", "doc_type": "apispecs"}, {"summary": "Get Virtual Account List", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Update Syslog Event Subscription", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Create Syslog Event Subscription", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Syslog Event Subscriptions", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Add user API", "tag": "User and Roles", "doc_type": "apispecs"}, {"summary": "Get users API", "tag": "User and Roles", "doc_type": "apispecs"}, {"summary": "Update user API", "tag": "User and Roles", "doc_type": "apispecs"}, {"summary": "Get Stack Details for Device", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get OSPF interfaces", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Device Interface Stats Info", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Qos Device Interface Info Count", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Count of Events", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Workflow Count", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Delete User-Defined-Field", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Update User-Defined-Field", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Overall Network Health", "tag": "Topology", "doc_type": "apispecs"}, {"summary": "Update global credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Delete global credentials by Id", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get Application Set Count", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get roles API", "tag": "User and Roles", "doc_type": "apispecs"}, {"summary": "Retrieves previous Pathtrace", "tag": "Path Trace", "doc_type": "apispecs"}, {"summary": "Deletes Pathtrace by Id", "tag": "Path Trace", "doc_type": "apispecs"}, {"summary": "Get EventArtifacts", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get PnP global settings", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Update PnP global settings", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get Tag Count", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Update SP Profile V2", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Create SP Profile V2", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Get Service Provider Details V2", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Update Email Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Create Email Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Email Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Device Compliance Status", "tag": "Compliance", "doc_type": "apispecs"}, {"summary": "Get Functional Capability by Id", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Device Summary", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Polling Interval by Id", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Add a Workflow", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get Workflows", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Virtual Account Details", "tag": "Licenses", "doc_type": "apispecs"}, {"summary": "Get Notifications", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Organization list for Meraki", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Device Config by Id", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get ISIS interfaces", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get config task details", "tag": "Compliance", "doc_type": "apispecs"}, {"summary": "Update Interface details", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "System Performance Historical API", "tag": "Health and Performance", "doc_type": "apispecs"}, {"summary": "Legit operations for interface", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Device Config Count", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Update HTTP read credential", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Create HTTP read credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get permissions API", "tag": "User and Roles", "doc_type": "apispecs"}, {"summary": "Get AuditLog Records", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Gets details of a given template", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Deletes the template", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Device Deregistration", "tag": "Licenses", "doc_type": "apispecs"}, {"summary": "POE details ", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Module count", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Trigger software image distribution", "tag": "Software Image Management (SWIM)", "doc_type": "apispecs"}, {"summary": "Deletes the project", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Gets the details of a given project.", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Get all execution details for a given report", "tag": "Reports", "doc_type": "apispecs"}, {"summary": "Get Supervisor card detail", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Delete Application", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Device Count Details", "tag": "Licenses", "doc_type": "apispecs"}, {"summary": "Create Rest/Webhook Event Subscription", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Update Rest/Webhook Event Subscription", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Rest/Webhook Event Subscriptions", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "LAN Automation Log ", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "Create CLI credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Update CLI credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "LAN Automation Start", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "Download a file by fileId", "tag": "File", "doc_type": "apispecs"}, {"summary": "Get Golden Tag Status of an Image.", "tag": "Software Image Management (SWIM)", "doc_type": "apispecs"}, {"summary": "Remove Golden Tag for image.", "tag": "Software Image Management (SWIM)", "doc_type": "apispecs"}, {"summary": "Get project(s) details", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Remove User-Defined-Field from device", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Add User-Defined-Field to device", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Site Topology", "tag": "Topology", "doc_type": "apispecs"}, {"summary": "Maps Supported Access Points", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Get list of discoveries by discovery Id", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Return replacement devices count", "tag": "Device Replacement", "doc_type": "apispecs"}, {"summary": "Device Registration", "tag": "Licenses", "doc_type": "apispecs"}, {"summary": "Reset Device", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get task by Id", "tag": "Task", "doc_type": "apispecs"}, {"summary": "Sync Virtual Account Devices", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get Discovery jobs by IP", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "LAN Automation Status", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "Get AuditLog Parent Records", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get connected device detail", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Devices discovered by Id", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get Discovered devices by range", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Authentication API", "tag": "Authentication", "doc_type": "apispecs"}, {"summary": "Get devices that are assigned to a site", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Create Template", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Get external authentication servers API", "tag": "User and Roles", "doc_type": "apispecs"}, {"summary": "Application Policy Intent", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "LAN Automation Session Count", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "Get template(s) details", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Get Access Point Configuration", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Returns devices added to Cisco DNA center with snmp v3 DES.", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Update Device Management Address", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Import Map Archive - Start Import", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Get Physical Topology", "tag": "Topology", "doc_type": "apispecs"}, {"summary": "LAN Automation Logs for Individual Devices", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "Exports the templates for a given criteria.", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Get Planned Access Points for Building", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Device Config for all devices", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "EventArtifact Count", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Interface by Id", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get topology details", "tag": "Topology", "doc_type": "apispecs"}, {"summary": "Get Interface info by Id", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Import software image via URL", "tag": "Software Image Management (SWIM)", "doc_type": "apispecs"}, {"summary": "Get Connector Types", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Smart Account Details", "tag": "Licenses", "doc_type": "apispecs"}, {"summary": "Get Business API Execution Details", "tag": "Task", "doc_type": "apispecs"}, {"summary": "LAN Automation Active Sessions", "tag": "LAN Automation", "doc_type": "apispecs"}, {"summary": "Get L3 Topology Details", "tag": "Topology", "doc_type": "apispecs"}, {"summary": "Delete Application Set", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get Access Point Reboot task result", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Remove Tag member", "tag": "Tag", "doc_type": "apispecs"}, {"summary": "Get Devices registered for WSA Notification", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Interface by IP", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Device Detail", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Preview Config", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Update Device role", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Delete role API", "tag": "User and Roles", "doc_type": "apispecs"}, {"summary": "Get Network Device by IP", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Change Virtual Account", "tag": "Licenses", "doc_type": "apispecs"}, {"summary": "Claim Device", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Cisco DNA Center Nodes Configuration Summary", "tag": "Platform", "doc_type": "apispecs"}, {"summary": "Get Device by Serial number", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Download report content", "tag": "Reports", "doc_type": "apispecs"}, {"summary": "Cisco ISE Server Integration Status", "tag": "System Settings", "doc_type": "apispecs"}, {"summary": "Get Compliance Status Count", "tag": "Compliance", "doc_type": "apispecs"}, {"summary": "Import Map Archive - Import Status", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Get Functional Capability for devices", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Advisory IDs Per Device", "tag": "Security Advisories", "doc_type": "apispecs"}, {"summary": "Device License Details", "tag": "Licenses", "doc_type": "apispecs"}, {"summary": "Get task by OperationId", "tag": "Task", "doc_type": "apispecs"}, {"summary": "Accept Cisco ISE Server Certificate for Cisco ISE Server Integration", "tag": "System Settings", "doc_type": "apispecs"}, {"summary": "Get Compliance Status ", "tag": "Compliance", "doc_type": "apispecs"}, {"summary": "Get Device list", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Add Device", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Export Device list", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Modules", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "License Term Details", "tag": "Licenses", "doc_type": "apispecs"}, {"summary": "Get Application Count", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get EoX Summary", "tag": "EoX", "doc_type": "apispecs"}, {"summary": "Assign Devices To Site", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Get Device History", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Version Template", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Run read-only commands on devices to get their real-time configuration", "tag": "Command Runner", "doc_type": "apispecs"}, {"summary": "Get Application Policy Queuing Profile Count", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Cisco DNA Center Packages Summary", "tag": "Platform", "doc_type": "apispecs"}, {"summary": "Get all interfaces", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Device Count", "tag": "Device Onboarding (PnP)", "doc_type": "apispecs"}, {"summary": "Get Devices Per Advisory", "tag": "Security Advisories", "doc_type": "apispecs"}, {"summary": "Get wireless lan controller details by Id", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Discovered network devices by discovery Id", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get task tree", "tag": "Task", "doc_type": "apispecs"}, {"summary": "Get EoX Details Per Device", "tag": "EoX", "doc_type": "apispecs"}, {"summary": "Trigger software image activation", "tag": "Software Image Management (SWIM)", "doc_type": "apispecs"}, {"summary": "Get Access Point Configuration task result", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Export Map Archive", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Get Status API for Events", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Get Device Values that match fully or partially an Attribute", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get Compliance Detail ", "tag": "Compliance", "doc_type": "apispecs"}, {"summary": "Get Global credentials", "tag": "Discovery", "doc_type": "apispecs"}, {"summary": "Get Network V2", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Get tasks", "tag": "Task", "doc_type": "apispecs"}, {"summary": "Issues", "tag": "Issues", "doc_type": "apispecs"}, {"summary": "Get Rest/Webhook Subscription Details", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "System Performance API", "tag": "Health and Performance", "doc_type": "apispecs"}, {"summary": "Get Network Device by pagination range", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Imports the Projects provided", "tag": "Configuration Templates", "doc_type": "apispecs"}, {"summary": "Run Compliance", "tag": "Compliance", "doc_type": "apispecs"}, {"summary": "Get SNMP Destination", "tag": "Event Management", "doc_type": "apispecs"}, {"summary": "Update Global Pool", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Get Global Pool", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Create Global Pool", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Get Applications Count", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Delete Port assignment for access point in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get Port assignment for access point in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add Port assignment for access point in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Retrieve RF profiles", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Create or Update RF profile", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Delete Global IP Pool", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Get device info from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Update NFV Profile", "tag": "Site Design", "doc_type": "apispecs"}, {"summary": "Get NFV Profile", "tag": "Site Design", "doc_type": "apispecs"}, {"summary": "Delete NFV Profile", "tag": "Site Design", "doc_type": "apispecs"}, {"summary": "Get Transit Peer Network Info", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add Transit Peer Network", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Delete Transit Peer Network", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Delete edge device from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get edge device from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add edge device in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add IP Pool in SDA Virtual Network", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Delete IP Pool from SDA Virtual Network", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get IP Pool from SDA Virtual Network", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Create sensor test template", "tag": "Sensors", "doc_type": "apispecs"}, {"summary": "Delete sensor test", "tag": "Sensors", "doc_type": "apispecs"}, {"summary": "Sensors", "tag": "Sensors", "doc_type": "apispecs"}, {"summary": "Remove WLC from Fabric Domain", "tag": "Fabric Wireless", "doc_type": "apispecs"}, {"summary": "Add WLC to Fabric Domain", "tag": "Fabric Wireless", "doc_type": "apispecs"}, {"summary": "Create and Provision SSID", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Delete Device Credential", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Delete RF profiles", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Delete multicast from SDA fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get multicast details from SDA fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add multicast in SDA fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Applications", "tag": "Applications", "doc_type": "apispecs"}, {"summary": "Get VN from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add VN in fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Delete VN from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "NFV Provisioning Detail", "tag": "Site Design", "doc_type": "apispecs"}, {"summary": "Get Network", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Edit Application", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get Applications", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Delete Application", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Create Application", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Create Application Set", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Delete Application Set", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Get Application Sets", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "Delete default authentication profile from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Update default authentication profile in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get default authentication profile from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add default authentication template in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Reserve IP Subpool", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Update Reserve IP Subpool", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Client Proximity", "tag": "Clients", "doc_type": "apispecs"}, {"summary": "Get Reserve IP Subpool", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "PSK override", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Delete SP Profile", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Assign Device Credential To Site", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Update Device Credentials", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Get Device Credential Details", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Create Device Credentials", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Delete Site from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get Site from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add Site in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Re-Provision Wired Device", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Provision Wired Device", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get Provisioned Wired Device", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Delete provisioned Wired Device", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Update SP Profile", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Get Service provider Details", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Create SP Profile", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Create Site", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Get Site", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Update Network", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Create Network", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Create NFV Profile", "tag": "Site Design", "doc_type": "apispecs"}, {"summary": "Get Virtual Network Summary", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Provision NFV", "tag": "Site Design", "doc_type": "apispecs"}, {"summary": "Create Wireless Profile", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Get Wireless Profile", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Update Wireless Profile", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Get Issue Enrichment Details", "tag": "Issues", "doc_type": "apispecs"}, {"summary": "Provision update", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Provision", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Duplicate sensor test template", "tag": "Sensors", "doc_type": "apispecs"}, {"summary": "Release Reserve IP Subpool", "tag": "Network Settings", "doc_type": "apispecs"}, {"summary": "Sensor Test Results", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Create Enterprise SSID", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Update Enterprise SSID", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Get Enterprise SSID", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Get device role in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add Port assignment for user device in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get Port assignment for user device in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Delete Port assignment for user device in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get border device detail from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add border device in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Delete border device from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get Device details by IP", "tag": "Site Design", "doc_type": "apispecs"}, {"summary": "Get CMDB Sync Status", "tag": "ITSM", "doc_type": "apispecs"}, {"summary": "Get control plane device from SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add control plane device in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Delete control plane device in SDA Fabric", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Update SSID to IP Pool Mapping", "tag": "Fabric Wireless", "doc_type": "apispecs"}, {"summary": "Add SSID to IP Pool Mapping", "tag": "Fabric Wireless", "doc_type": "apispecs"}, {"summary": "Get SSID to IP Pool Mapping", "tag": "Fabric Wireless", "doc_type": "apispecs"}, {"summary": "Get Failed ITSM Events", "tag": "ITSM", "doc_type": "apispecs"}, {"summary": "Retry Integration Events", "tag": "ITSM", "doc_type": "apispecs"}, {"summary": "Get Client Enrichment Details", "tag": "Clients", "doc_type": "apispecs"}, {"summary": "Get Site Count", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Edit sensor test template", "tag": "Sensors", "doc_type": "apispecs"}, {"summary": "Update virtual network with scalable groups", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Delete virtual network with scalable groups", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get virtual network with scalable groups", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Add virtual network with scalable groups", "tag": "SDA", "doc_type": "apispecs"}, {"summary": "Get dynamic interface", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Create Update Dynamic interface", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Execute Suggested Actions Commands", "tag": "Issues", "doc_type": "apispecs"}, {"summary": "Delete Enterprise SSID", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Get Application Sets Count", "tag": "Application Policy", "doc_type": "apispecs"}, {"summary": "AP Provision", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Delete Wireless Profile", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Get Device Enrichment Details", "tag": "Devices", "doc_type": "apispecs"}, {"summary": "Get User Enrichment Details", "tag": "Users", "doc_type": "apispecs"}, {"summary": "Get Membership", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Delete Site", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Update Site", "tag": "Sites", "doc_type": "apispecs"}, {"summary": "Run now sensor test", "tag": "Sensors", "doc_type": "apispecs"}, {"summary": "Delete SSID and provision it to devices", "tag": "Wireless", "doc_type": "apispecs"}, {"summary": "Delete dynamic interface", "tag": "Wireless", "doc_type": "apispecs"}]}