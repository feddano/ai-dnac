{
   "info": {
      "description": "Cisco DNA Center Platform v. 2.3.7",
      "version": "2.3.7",
      "title": "Intent API"
   },
   "swagger": "2.0",
   "tags": [
    {
        "name": "Authentication",
        "description": "Access Token Request"
    },
    {
        "name": "Sites",
        "description": "Create sites, assign devices to them and get site health"
    },
    {
        "name": "Topology",
        "description": "Get topology details and overall network health"
    },
    {
        "name": "Devices",
        "description": "Manage network devices"
    },
    {
        "name": "Clients",
        "description": "Get client (by MAC Address) health, status, and information"
    },
    {
        "name": "Users",
        "description": "Obtain information about *Users* and associated connections and devices"
    },
    {
        "name": "Issues",
        "description": "Obtain issue details, impacted hosts, and suggested actions for remediation"
    },
    {
        "name": "Site Design",
        "description": "Design/provision NFV device to site/area/building/floor"
    },
    {
        "name": "Network Settings",
        "description": "Manage Network Settings"
    },
    {
        "name": "Software Image Management (SWIM)",
        "description": "Manage activation and distribution of software images"
    },
    {
        "name": "Device Onboarding (PnP)",
        "description": "Zero-touch deployment of network devices"
    },
    {
        "name": "Configuration Templates",
        "description": "Configure and manage CLI templates"
    },
{
        "name": "Configuration Archive",
        "description": "Export device configurations to an encrypted zip file"
    },

    {
        "name": "SDA",
        "description": "(BETA) Configure and manage SDA wired fabric border devices"
    },
{
        "name": "Sensors",
        "description": "Manage sensor test templates"
    },

    {
        "name": "Wireless",
        "description": "Configure and manage SSIDs, Wireless, and RF profiles in non-fabric wireless network"
    },
    {
        "name": "Command Runner",
        "description": "Retrieve real-time device configuration and CLI keywords"
    },
    {
        "name": "Discovery",
        "description": "Discover network devices and manage discovery jobs"
    },
    {
        "name": "Path Trace",
        "description": "Network route and flow analysis"
    },
    {
        "name": "File",
        "description": "Get configuration files by namespace and ID"
    },
    {
        "name": "Task",
        "description": "Get information about asynchronous tasks"
    },
    {
        "name": "Tag",
        "description": "Assign administrator-defined tags to network devices"
    },
    {
        "name": "Application Policy",
        "description": "Create and manage applications, application sets, and application policies"
    },
{
        "name": "Applications",
        "description": "Intent API to get a list of applications for a specific site, a device, or a client device's MAC address"
    },
{
        "name": "ITSM",
        "description": "Provide the details of the various third party integrations that are supported"
    },


    {
        "name": "Event Management",
        "description": "Event based notification to external handlers"
    },


    {
        "name": "Security Advisories",
        "description": "Provides the details of advisories on the network and devices"
    },


    {
        "name": "Compliance",
        "description": "Provides compliance status data on the devices"
    }
],
	"schemes": ["https"],
	"paths": {
		"/dna/intent/api/v2/template-programmer/template/deploy": {
			"post": {
				"operationId": "deployTemplateV2",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Deploy Template V2",
				"description": "V2 API to deploy a template.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplateDeploymentInfo"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/application-policy-application-set": {
			"get": {
				"operationId": "getApplicationSet/s",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Application Set/s",
				"description": "Get application set/s by offset/limit or by name",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "attributes",
						"description": "Attributes to retrieve, valid value applicationSet",
						"default": "applicationSet",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Application set name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The starting point or index from where the paginated results should begin.",
						"default": 1,
						"required": true,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The limit which is the maximum number of items to include in a single page of results, max value 500",
						"default": 500,
						"required": true,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ApplicationSet"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createApplicationSet/s",
				"tags": [
					"Application Policy"
				],
				"summary": "Create Application Set/s",
				"description": "Create new custom application set/s",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ApplicationSets"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "content-type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/Response"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/tag/{id}/member": {
			"post": {
				"operationId": "addMembersToTheTag",
				"tags": [
					"Tag"
				],
				"summary": "Add members to the tag",
				"description": "Adds members to the tag specified by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Listentrystringliststring"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "id",
						"description": "Tag ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getTagMembersById",
				"tags": [
					"Tag"
				],
				"summary": "Get Tag members by Id",
				"description": "Returns tag members specified by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Tag ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "memberType",
						"description": "Entity type of the member. Possible values can be retrieved by using /tag/member/type API",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Used for pagination. It indicates the starting row number out of available member records",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Used to Number of maximum members to return in the result",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "memberAssociationType",
						"description": "Indicates how the member is associated with the tag. Possible values and description. 1) DYNAMIC : The member is associated to the tag through rules. 2) STATIC – The member is associated to the tag manually. 3) MIXED – The member is associated manually and also satisfies the rule defined for the tag",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "level",
						"description": "level",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TagMembersResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/accesspoint-configuration": {
			"post": {
				"operationId": "configureAccessPoints",
				"tags": [
					"Wireless"
				],
				"summary": "Configure Access Points",
				"description": "User can configure multiple access points with required options using this intent API",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConfigureAccessPointsRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ConfigureAccessPointsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/template/version/{templateId}": {
			"get": {
				"operationId": "getsAllTheVersionsOfAGivenTemplate",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Gets all the versions of a given template",
				"description": "Get all the versions of template by its id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "templateId",
						"description": "templateId(UUID) to get list of versioned templates",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplateInfo"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/clone/name/{name}/project/{projectId}/template/{templateId}": {
			"post": {
				"operationId": "createsACloneOfTheGivenTemplate",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Creates a clone of the given template",
				"description": "API to clone template",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "name",
						"description": "Template name to clone template(Name should be different than existing template name within same project)",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "templateId",
						"description": "UUID of the template to clone it",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "projectId",
						"description": "UUID of the project in which the template needs to be created",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/data/view-groups/{viewGroupId}": {
			"get": {
				"operationId": "getViewsForAGivenViewGroup",
				"tags": [
					"Reports"
				],
				"summary": "Get views for a given view group",
				"description": "Gives a list of summary of all views in a viewgroup. Use \"Get all view groups\" API to get the viewGroupIds (required as a query param for this API) for available viewgroups.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "viewGroupId",
						"description": "viewGroupId of viewgroup.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/viewgroupwithviews"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{deviceId}/chassis": {
			"get": {
				"operationId": "getChassisDetailsForDevice",
				"tags": [
					"Devices"
				],
				"summary": "Get Chassis Details for Device",
				"description": "Returns chassis details for given device ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ChassisListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/user-defined-field": {
			"get": {
				"operationId": "getAllUser-Defined-Fields",
				"tags": [
					"Devices"
				],
				"summary": "Get All User-Defined-Fields",
				"description": "Gets existing global User Defined Fields. If no input is given, it fetches ALL the Global UDFs. Filter/search is supported by UDF Id(s) or UDF name(s) or both.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Comma-seperated id(s) used for search/filtering",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Comma-seperated name(s) used for search/filtering",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAllUserDefinedFieldsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createUser-Defined-Field",
				"tags": [
					"Devices"
				],
				"summary": "Create User-Defined-Field",
				"description": "Creates a new global User Defined Field, which can be assigned to devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateUserDefinedFieldRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateUserDefinedFieldResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/discovery/count": {
			"get": {
				"operationId": "getCountOfAllDiscoveryJobs",
				"tags": [
					"Discovery"
				],
				"summary": "Get count of all discovery jobs",
				"description": "Returns the count of all available discovery jobs",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/webhook": {
			"put": {
				"operationId": "updateWebhookDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Update Webhook Destination",
				"description": "Update Webhook Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdatewebhookConfiguration"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateWebhookDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getWebhookDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Get Webhook Destination",
				"description": "Get Webhook Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "webhookIds",
						"description": "List of webhook configurations",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of webhook configuration's to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of webhook configuration's to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetWebhookDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createWebhookDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Create Webhook Destination",
				"description": "Create Webhook Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreatewebhookConfiguration"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateWebhookDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/lan-automation/{id}": {
			"put": {
				"operationId": "lANAutomationStopAndUpdateDevices",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Stop and Update Devices",
				"description": "Invoke this API to stop LAN Automation and Update Loopback0 IP Address of Devices, discovered in the current session",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LANAutomationStopAndUpdateDevicesRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "id",
						"description": "LAN Automation id can be obtained from /dna/intent/api/v1/lan-automation/status.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/LANAutomationStopAndUpdateDevicesResponse"
						}
					},
					"202": {
						"description": "The request was accepted and the response contains the task id for checking the status"
					},
					"400": {
						"description": "The request was not acceptable due to error in the input parameter and the response contains information about the parameter error"
					},
					"406": {
						"description": "The request was not acceptable due to incorrect input value or invalid settings/config on the device. The response contains information about the error as message."
					},
					"500": {
						"description": "The request was not accepted due to internal error in the svstem and the response contains information about the error."
					}
				}
			},
			"delete": {
				"operationId": "lANAutomationStop",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Stop",
				"description": "Invoke this API to stop LAN Automation for the given site. ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LANAutomationStopRequest"
						},
						"in": "body"
					},
					{
						"name": "id",
						"description": "LAN Automation id can be obtained from /dna/intent/api/v1/lan-automation/status.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/LANAutomationStopResponse"
						}
					},
					"202": {
						"description": "The request was accepted and the response contains the id of the LAN Automation session being stopped."
					},
					"400": {
						"description": "The request was not acceptable due to error in the input parameter and the response contains information about the parameter error."
					},
					"406": {
						"description": "The request was not acceptable due to incorrect input value or invalid settings/config on the device. The response contains information about the error code, message and detail."
					},
					"500": {
						"description": "The request was not accepted due to internal error in the system and the response contains information about the error."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/template/deploy/status/{deploymentId}": {
			"get": {
				"operationId": "statusOfTemplateDeployment",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Status of template deployment",
				"description": "API to retrieve the status of template deployment.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deploymentId",
						"description": "UUID of deployment to retrieve template deployment status",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplateDeploymentStatusDTO"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/syslog-config": {
			"post": {
				"operationId": "createSyslogDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Create Syslog Destination",
				"description": "Create Syslog Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateSyslogConfiguration"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateSyslogDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getSyslogDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Get Syslog Destination",
				"description": "Get Syslog Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "configId",
						"description": "Config id of syslog server",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Name of syslog server",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "protocol",
						"description": "Protocol of syslog server",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of syslog configuration's to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of syslog configuration's to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSyslogDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateSyslogDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Update Syslog Destination",
				"description": "Update Syslog Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateSyslogConfiguration"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateSyslogDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/app-policy-queuing-profile/{id}": {
			"delete": {
				"operationId": "deleteApplicationPolicyQueuingProfile",
				"tags": [
					"Application Policy"
				],
				"summary": "Delete Application Policy Queuing Profile",
				"description": "Delete existing custom application policy queuing profile by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DeleteApplicationPolicyQueuingProfileRequest"
						},
						"in": "body"
					},
					{
						"name": "id",
						"description": "Id of custom queuing profile to delete",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteApplicationPolicyQueuingProfileResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/sacct/{domain}/vacct/{name}/sync-result": {
			"get": {
				"operationId": "getSyncResultForVirtualAccount",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get Sync Result for Virtual Account",
				"description": "Returns the summary of devices synced from the given smart account & virtual account with PnP (Deprecated)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "domain",
						"description": "Smart Account Domain",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "name",
						"description": "Virtual Account Name",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSyncResultForVirtualAccountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/{id}": {
			"put": {
				"operationId": "updateDevice",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Update Device",
				"description": "Updates device details specified by device id in PnP database",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Device"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateDeviceResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getDeviceById",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get Device by Id",
				"description": "Returns device details specified by device id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceByIdResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "deleteDeviceByIdFromPnP",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Delete Device by Id from PnP",
				"description": "Deletes specified device from PnP database",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteDeviceByIdFromPnPResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/authentication-policy-servers/{id}": {
			"delete": {
				"operationId": "deleteAuthenticationAndPolicyServerAccessConfiguration",
				"tags": [
					"System Settings"
				],
				"summary": "Delete Authentication and Policy Server Access Configuration",
				"description": "API to delete AAA/ISE server access configuration.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Authentication and Policy Server Identifier. Use 'Get Authentication and Policy Servers' intent API to find the identifier.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/DeleteAuthenticationAndPolicyServerAccessConfigurationResponse"
						}
					},
					"202": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "editAuthenticationAndPolicyServerAccessConfiguration",
				"tags": [
					"System Settings"
				],
				"summary": "Edit Authentication and Policy Server Access Configuration",
				"description": "API to edit AAA/ISE server access configuration. After edit, use ‘Cisco ISE Server Integration Status’ Intent API to check the integration status.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EditAuthenticationAndPolicyServerAccessConfigurationRequest"
						},
						"in": "body"
					},
					{
						"name": "id",
						"description": "Authentication and Policy Server Identifier. Use 'Get Authentication and Policy Servers' intent API to find the identifier.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/EditAuthenticationAndPolicyServerAccessConfigurationResponse"
						}
					},
					"202": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/unclaim": {
			"post": {
				"operationId": "un-ClaimDevice",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Un-Claim Device",
				"description": "Un-Claims one of more devices with specified workflow (Deprecated).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UnclaimRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UnClaimDeviceResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/integration-settings/instances/itsm": {
			"post": {
				"operationId": "createITSMIntegrationSetting",
				"tags": [
					"ITSM Integration"
				],
				"summary": "Create ITSM Integration setting",
				"description": "Creates ITSM Integration setting",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateITSMIntegrationSettingRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "Instance Created",
						"schema": {
							"$ref": "#/definitions/CreateITSMIntegrationSettingResponse"
						}
					},
					"400": {
						"description": "Bad request"
					},
					"504": {
						"description": "Backend service timed out"
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/module/{id}": {
			"get": {
				"operationId": "getModuleInfoById",
				"tags": [
					"Devices"
				],
				"summary": "Get Module Info by Id",
				"description": "Returns Module info by 'module id'",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Module id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ModuleResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/image/importation": {
			"get": {
				"operationId": "getSoftwareImageDetails",
				"tags": [
					"Software Image Management (SWIM)"
				],
				"summary": "Get software image details",
				"description": "Returns software image list based on a filter criteria. For example: \"filterbyName = cat3k%\"",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "imageUuid",
						"description": "imageUuid",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "family",
						"description": "family",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "applicationType",
						"description": "applicationType",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "imageIntegrityStatus",
						"description": "imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "version",
						"description": "software Image Version",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "imageSeries",
						"description": "image Series",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "imageName",
						"description": "image Name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "isTaggedGolden",
						"description": "is Tagged Golden",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "isCCORecommended",
						"description": "is recommended from cisco.com",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "isCCOLatest",
						"description": "is latest from cisco.com",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "createdTime",
						"description": "time in milliseconds (epoch format)",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "imageSizeGreaterThan",
						"description": "size in bytes",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "imageSizeLesserThan",
						"description": "size in bytes",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "sort results by this field",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortOrder",
						"description": "sort order - 'asc' or 'des'. Default is asc",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "integer",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ImageInfoListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/credential-to-site/{siteId}": {
			"post": {
				"operationId": "assignDeviceCredentialToSiteV2",
				"tags": [
					"Network Settings"
				],
				"summary": "Assign Device Credential To Site V2",
				"description": "API to assign Device Credential to a site.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AssignDeviceCredentialToSiteVRequest"
						},
						"in": "body"
					},
					{
						"name": "siteId",
						"description": "Site Id to assign credential.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AssignDeviceCredentialToSiteVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/snmp-config": {
			"post": {
				"operationId": "createSNMPDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Create SNMP Destination",
				"description": "Create SNMP Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateSNMPConfiguration"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateSNMPDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateSNMPDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Update SNMP Destination",
				"description": "Update SNMP Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateSNMPConfiguration"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateSNMPConfiguration"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/event-series/count": {
			"get": {
				"operationId": "countOfNotifications",
				"tags": [
					"Event Management"
				],
				"summary": "Count of Notifications",
				"description": "Get the Count of Published Notifications",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "eventIds",
						"description": "The registered EventId should be provided",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "startTime",
						"description": "Start Time in milliseconds",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "End Time in milliseconds",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "category",
						"description": "Category",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "Type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "severity",
						"description": "Severity",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "domain",
						"description": "Domain",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "subDomain",
						"description": "Sub Domain",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "source",
						"description": "Source",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountOfNotificationsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/integration-settings/instances/itsm/{instanceId}": {
			"get": {
				"operationId": "getITSMIntegrationSettingById",
				"tags": [
					"ITSM Integration"
				],
				"summary": "Get ITSM Integration setting by Id",
				"description": "Fetches ITSM Integration setting by ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GetITSMIntegrationSettingByIdRequest"
						},
						"in": "body"
					},
					{
						"name": "instanceId",
						"description": "Instance Id of the Integration setting instance",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Instance available",
						"schema": {
							"$ref": "#/definitions/GetITSMIntegrationSettingByIdResponse"
						}
					},
					"404": {
						"description": "Instance not found"
					}
				}
			},
			"put": {
				"operationId": "updateITSMIntegrationSetting",
				"tags": [
					"ITSM Integration"
				],
				"summary": "Update ITSM Integration setting",
				"description": "Updates the ITSM Integration setting",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateITSMIntegrationSettingRequest"
						},
						"in": "body"
					},
					{
						"name": "instanceId",
						"description": "Instance Id of the Integration setting instance",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Instance Updated",
						"schema": {
							"$ref": "#/definitions/UpdateITSMIntegrationSettingResponse"
						}
					},
					"404": {
						"description": "Instance not found"
					}
				}
			},
			"delete": {
				"operationId": "deleteITSMIntegrationSetting",
				"tags": [
					"ITSM Integration"
				],
				"summary": "Delete ITSM Integration setting",
				"description": " Deletes the ITSM Integration setting",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "instanceId",
						"description": "Instance Id of the Integration setting instance",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Instance Deleted"
					},
					"400": {
						"description": "This instance can't be deleted. It is being used in a bundle"
					},
					"404": {
						"description": "Instance not available"
					}
				}
			}
		},
		"/dna/intent/api/v1/global-credential/snmpv2-write-community": {
			"put": {
				"operationId": "updateSNMPWriteCommunity",
				"tags": [
					"Discovery"
				],
				"summary": "Update SNMP write community",
				"description": "Updates global SNMP write community",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvWriteCommunityDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createSNMPWriteCommunity",
				"tags": [
					"Discovery"
				],
				"summary": "Create SNMP write community",
				"description": "Adds global SNMP write community",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvWriteCommunityDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/lan-automation/updateDevice": {
			"put": {
				"operationId": "lANAutomationDeviceUpdate",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Device Update",
				"description": "Invoke this API to perform DAY-N Update on LAN Automation related Devices.\nSupported Features are Loopback0 IP Update, Link Add and Link Delete\n",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LANAutomationDeviceUpdateRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "feature",
						"description": "Feature ID for update.Supported feature IDs are: LOOPBACK0_IPADDRESS_UPDATE, LINK_ADD and LINK_DELETE.",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/LANAutomationDeviceUpdateResponse"
						}
					},
					"202": {
						"description": "The request was accepted and the response contains the task id for checking the status"
					},
					"400": {
						"description": "The request was not acceptable due to error in the input parameter and the response contains information about the parameter error"
					},
					"406": {
						"description": "The request was not acceptable due to incorrect input value or invalid settings/config on the device. The response contains information about the error as message."
					},
					"500": {
						"description": "The request was not accepted due to internal error in the svstem and the response contains information about the error."
					}
				}
			}
		},
		"/dna/intent/api/v1/tag": {
			"post": {
				"operationId": "createTag",
				"tags": [
					"Tag"
				],
				"summary": "Create Tag",
				"description": "Creates tag with specified tag attributes",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TagDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "updateTag",
				"tags": [
					"Tag"
				],
				"summary": "Update Tag",
				"description": "Updates a tag specified by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TagDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getTag",
				"tags": [
					"Tag"
				],
				"summary": "Get Tag",
				"description": "Returns the tags for given filter criteria",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "Tag name is mandatory when filter operation is used.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "additionalInfo.nameSpace",
						"description": "nameSpace",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "additionalInfo.attributes",
						"description": "attributeName",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "level",
						"description": "levelArg",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "size",
						"description": "size in kilobytes(KB)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "field",
						"description": "Available field names are :'name,id,parentId,type,additionalInfo.nameSpace,additionalInfo.attributes'",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Only supported attribute is name. SortyBy is mandatory when order is used.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Available values are asc and des",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "systemTag",
						"description": "systemTag",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TagListResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/subscription/count": {
			"get": {
				"operationId": "countOfEventSubscriptions",
				"tags": [
					"Event Management"
				],
				"summary": "Count of Event Subscriptions",
				"description": "Returns the Count of EventSubscriptions",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "eventIds",
						"description": "List of subscriptions related to the respective eventIds",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountOfEventSubscriptionsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/file/{nameSpace}": {
			"post": {
				"operationId": "uploadFile",
				"tags": [
					"File"
				],
				"summary": "uploadFile",
				"description": "Uploads a new file within a specific nameSpace",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "nameSpace",
						"description": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/UploadFileResponse"
						}
					}
				}
			}
		},
		"/dna/intent/api/v1/app-policy-queuing-profile": {
			"get": {
				"operationId": "getApplicationPolicyQueuingProfile",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Application Policy Queuing Profile",
				"description": "Get all or by name, existing application policy queuing profiles",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "queuing profile name",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetApplicationPolicyQueuingProfileResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createApplicationPolicyQueuingProfile",
				"tags": [
					"Application Policy"
				],
				"summary": "Create Application Policy Queuing Profile",
				"description": "Create new custom application queuing profile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateApplicationPolicyQueuingProfileRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "content-type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateApplicationPolicyQueuingProfileResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "updateApplicationPolicyQueuingProfile",
				"tags": [
					"Application Policy"
				],
				"summary": "Update Application Policy Queuing Profile",
				"description": "Update existing custom application queuing profile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateApplicationPolicyQueuingProfileRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "content-type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateApplicationPolicyQueuingProfileResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/subscription-details/syslog": {
			"get": {
				"operationId": "getSyslogSubscriptionDetails",
				"tags": [
					"Event Management"
				],
				"summary": "Get Syslog Subscription Details",
				"description": "Gets the list of subscription details for specified connectorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "Name of the specific configuration",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "instanceId",
						"description": "Instance Id of the specific configuration",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of Syslog Subscription detail's to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of Syslog Subscription detail's to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSyslogSubscriptionDetailsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/global-credential/netconf": {
			"post": {
				"operationId": "createNetconfCredentials",
				"tags": [
					"Discovery"
				],
				"summary": "Create Netconf credentials",
				"description": "Adds global netconf credentials",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NetconfCredentialDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateNetconfCredentials",
				"tags": [
					"Discovery"
				],
				"summary": "Update Netconf credentials",
				"description": "Updates global netconf credentials",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NetconfCredentialDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/template/deploy": {
			"post": {
				"operationId": "deployTemplate",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Deploy Template",
				"description": "API to deploy a template.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplateDeploymentInfo"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplateDeploymentStatusDTO"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/client-detail": {
			"get": {
				"operationId": "getClientDetail",
				"tags": [
					"Clients"
				],
				"summary": "Get Client Detail",
				"description": "Returns detailed Client information retrieved by Mac Address for any given point of time. ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "macAddress",
						"description": "MAC Address of the client",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "timestamp",
						"description": "Epoch time(in milliseconds) when the Client health data is required",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ClientDetailSummaryInfo"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": " The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "This user is forbidden to access this resource."
					},
					"404": {
						"description": " The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/data/view-groups/{viewGroupId}/views/{viewId}": {
			"get": {
				"operationId": "getViewDetailsForAGivenViewGroup&View",
				"tags": [
					"Reports"
				],
				"summary": "Get view details for a given view group & view",
				"description": "Gives complete information of the view that is required to configure a report. Use \"Get views for a given view group\" API to get the viewIds  (required as a query param for this API) for available views.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "viewGroupId",
						"description": "viewGroupId of viewgroup",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "viewId",
						"description": "view id of view",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/view"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{id}": {
			"delete": {
				"operationId": "deleteDeviceById",
				"tags": [
					"Devices"
				],
				"summary": "Delete Device by Id",
				"description": "Deletes the network device for the given Id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "cleanConfig",
						"description": "cleanConfig",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getDeviceByID",
				"tags": [
					"Devices"
				],
				"summary": "Get Device by ID",
				"description": "Returns the network device details for the given device ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/global-credential/snmpv3": {
			"put": {
				"operationId": "updateSNMPv3Credentials",
				"tags": [
					"Discovery"
				],
				"summary": "Update SNMPv3 credentials",
				"description": "Updates global SNMPv3 credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvCredentialDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createSNMPv3Credentials",
				"tags": [
					"Discovery"
				],
				"summary": "Create SNMPv3 credentials",
				"description": "Adds global SNMPv3 credentials",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvCredentialDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-settings/savacct": {
			"post": {
				"operationId": "addVirtualAccount",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Add Virtual Account",
				"description": "Registers a Smart Account, Virtual Account and the relevant server profile info with the PnP System & database. The devices present in the registered virtual account are synced with the PnP database as well. The response payload returns the new profile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SAVAMapping"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddVirtualAccountResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updatePnPServerProfile",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Update PnP Server Profile",
				"description": "Updates the PnP Server profile in a registered Virtual Account in the PnP database. The response payload returns the updated smart & virtual account info",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SAVAMapping"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdatePnPServerProfileResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device": {
			"get": {
				"operationId": "getDeviceList",
				"tags": [
					"Devices"
				],
				"summary": "Get Device list",
				"description": "Returns list of network devices based on filter criteria such as management IP address, mac address, hostname, etc. You can use the .* in any value to conduct a wildcard search.\nFor example, to find all hostnames beginning with myhost in the IP address range 192.25.18.n, issue the following request:\nGET /dna/intent/api/v1/network-device?hostname=myhost.*&managementIpAddress=192.25.18..*\n\nIf id parameter is provided with comma separated ids, it will return the list of network-devices for the given ids and ignores the other request parameters. You can also specify offset & limit to get the required list.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "hostname",
						"description": "hostname",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "managementIpAddress",
						"description": "managementIpAddress",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "macAddress",
						"description": "macAddress",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "locationName",
						"description": "locationName",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "serialNumber",
						"description": "serialNumber",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "location",
						"description": "location",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "family",
						"description": "family",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"description": "type",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "series",
						"description": "series",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "collectionStatus",
						"description": "collectionStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "collectionInterval",
						"description": "collectionInterval",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "notSyncedForMinutes",
						"description": "notSyncedForMinutes",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "errorCode",
						"description": "errorCode",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "errorDescription",
						"description": "errorDescription",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "softwareVersion",
						"description": "softwareVersion",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "softwareType",
						"description": "softwareType",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "platformId",
						"description": "platformId",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "role",
						"description": "role",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "reachabilityStatus",
						"description": "reachabilityStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "upTime",
						"description": "upTime",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "associatedWlcIp",
						"description": "associatedWlcIp",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "license.name",
						"description": "licenseName",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "license.type",
						"description": "licenseType",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "license.status",
						"description": "licenseStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+name",
						"description": "moduleName",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+equpimenttype",
						"description": "moduleEqupimentType",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+servicestate",
						"description": "moduleServiceState",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+vendorequipmenttype",
						"description": "moduleVendorEquipmentType",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+partnumber",
						"description": "modulePartNumber",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+operationstatecode",
						"description": "moduleOperationStateCode",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"description": "Accepts comma separated ids and return list of network-devices for the given ids. If invalid or not-found ids are provided, null entry will be returned in the list.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "deviceSupportLevel",
						"description": "deviceSupportLevel",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset >= 1 [X gives results from Xth device onwards]",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "1 <= limit <= 500 [max. no. of devices to be returned in the result]",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "addDevice",
				"tags": [
					"Devices"
				],
				"summary": "Add Device",
				"description": "Adds the device with given credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/InventoryDeviceInfo"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateDeviceDetails",
				"tags": [
					"Devices"
				],
				"summary": "Update Device Details",
				"description": "Update the credentials, management IP address of a given device (or a set of devices) in Cisco DNA Center and trigger an inventory sync.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/InventoryDeviceInfo"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{deviceUuid}/equipment": {
			"get": {
				"operationId": "getTheDetailsOfPhysicalComponentsOfTheGivenDevice.",
				"tags": [
					"Devices"
				],
				"summary": "Get the Details of Physical Components of the Given Device.",
				"description": "Return all types of equipment details like PowerSupply, Fan, Chassis, Backplane, Module, PROCESSOR, Other and SFP for the Given device.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceUuid",
						"description": "DeviceUuid",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "type",
						"description": "Type value can be PowerSupply, Fan, Chassis, Backplane, Module, PROCESSOR, Other, SFP. If no type is mentioned, All equipments are fetched for the device.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful.",
						"schema": {
							"$ref": "#/definitions/GetTheDetailsOfPhysicalComponentsOfTheGivenDeviceResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{deviceUuid}/interface/poe-detail": {
			"get": {
				"operationId": "returnsPOEInterfaceDetailsForTheDevice.",
				"tags": [
					"Devices"
				],
				"summary": "Returns POE interface details for the device.",
				"description": "Returns POE interface details for the device, where deviceuuid is mandatory & accepts comma seperated interface names which is optional and returns information for that particular interfaces where(operStatus = operationalStatus)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceUuid",
						"description": "uuid of the device",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "interfaceNameList",
						"description": "comma seperated interface names",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The Request is successful . The result is contained in the response body",
						"schema": {
							"$ref": "#/definitions/InterfacePoeDetailResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand(for example, the request syntax is not correct)"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid"
					},
					"404": {
						"description": "The client made a request for the resource which does not exist"
					},
					"503": {
						"description": "The server is (temporarily) unavailable"
					},
					"504": {
						"description": "The server did not respond inside timed restrictions and timed-out"
					}
				}
			}
		},
		"/dna/intent/api/v1/app-policy-default": {
			"get": {
				"operationId": "getApplicationPolicyDefault",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Application Policy Default",
				"description": "Get default application policy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetApplicationPolicyDefaultResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/data/reports/{reportId}": {
			"delete": {
				"operationId": "deleteAScheduledReport",
				"tags": [
					"Reports"
				],
				"summary": "Delete a scheduled report",
				"description": "Delete a scheduled report configuration. Deletes the report executions also.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportId",
						"description": "reportId of report",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteAScheduledReportResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"406": {
						"description": "Client's request cannot be processed now. Please try again later"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getAScheduledReport",
				"tags": [
					"Reports"
				],
				"summary": "Get a scheduled report",
				"description": "Get scheduled report configuration by reportId",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportId",
						"description": "reportId of report",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/report"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/import": {
			"post": {
				"operationId": "importDevicesInBulk",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Import Devices in bulk",
				"description": "Add devices to PnP in bulk",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Device"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ImportDevicesInBulkResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-settings/vacct": {
			"delete": {
				"operationId": "deregisterVirtualAccount",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Deregister Virtual Account",
				"description": "Deregisters the specified smart account & virtual account info and the associated device information from the PnP System & database. The devices associated with the deregistered virtual account are removed from the PnP database as well. The response payload contains the deregistered smart & virtual account information",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "domain",
						"description": "Smart Account Domain",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Virtual Account Name",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeregisterVirtualAccountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/{interfaceUuid}/operation": {
			"post": {
				"operationId": "clearMac-AddressTable",
				"tags": [
					"Devices"
				],
				"summary": "Clear Mac-Address table",
				"description": "Clear mac-address on an individual port. In request body, operation needs to be specified as 'ClearMacAddress'. In the future more possible operations will be added to this API",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ClearMacAddressTableRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "",
						"default": "application/json",
						"required": false,
						"type": "string",
						"in": "header"
					},
					{
						"name": "interfaceUuid",
						"description": "Interface Id",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "deploymentMode",
						"description": "Preview/Deploy ['Preview' means the configuration is not pushed to the device. 'Deploy' makes the configuration pushed to the device]",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ClearMacAddressTableResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfil the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/site-health": {
			"get": {
				"operationId": "getSiteHealth",
				"tags": [
					"Sites"
				],
				"summary": "Get Site Health",
				"description": "Returns Overall Health information for all sites",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteType",
						"description": "site type: AREA or BUILDING (case insensitive)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Offset of the first returned data set entry (Multiple of 'limit' + 1)",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Max number of data entries in the returned data set [1,50].  Default is 25",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "timestamp",
						"description": "Epoch time(in milliseconds) when the Site Hierarchy data is required",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DnacPlatformSiteHierarchyResponse"
						}
					},
					"400": {
						"description": " The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": " The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "This user is forbidden to access this resource."
					},
					"404": {
						"description": " The client made a request for a resource that does not exist."
					},
					"500": {
						"description": " The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/task/count": {
			"get": {
				"operationId": "getTaskCount",
				"tags": [
					"Task"
				],
				"summary": "Get task count",
				"description": "Returns Task count",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "startTime",
						"description": "This is the epoch start time from which tasks need to be fetched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "This is the epoch end time upto which audit records need to be fetched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "data",
						"description": "Fetch tasks that contains this data",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "errorCode",
						"description": "Fetch tasks that have this error code",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "serviceType",
						"description": "Fetch tasks with this service type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "username",
						"description": "Fetch tasks with this username",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "progress",
						"description": "Fetch tasks that contains this progress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "isError",
						"description": "Fetch tasks ended as success or failure. Valid values: true, false",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "failureReason",
						"description": "Fetch tasks that contains this failure reason",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "parentId",
						"description": "Fetch tasks that have this parent Id",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/site/count": {
			"get": {
				"operationId": "getSiteCountV2",
				"tags": [
					"Sites"
				],
				"summary": "Get Site Count V2",
				"description": "Get the site count of the specified site's sub-hierarchy (inclusive of the provided site)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Site instance UUID",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSiteCountVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/authorize": {
			"post": {
				"operationId": "authorizeDevice",
				"tags": [
					"Cisco DNA Center System"
				],
				"summary": "Authorize Device",
				"description": "Authorizes one of more devices. A device can only be authorized if Authorization is set in Device Settings.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthorizeDeviceRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "",
						"default": "application/json",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/AuthorizeDeviceResponse"
						}
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{id}/vlan": {
			"get": {
				"operationId": "getDeviceInterfaceVLANs",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Interface VLANs",
				"description": "Returns Device Interface VLANs. If parameter value is null or empty, it won't return any value in response.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "deviceUUID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "interfaceType",
						"description": "Vlan associated with sub-interface. If no interfaceType mentioned it will return all types of Vlan interfaces. If interfaceType is selected but not specified then it will take default value.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/VlanListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/template": {
			"put": {
				"operationId": "updateTemplate",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Update Template",
				"description": "API to update a template.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplateDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getsTheTemplatesAvailable",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Gets the templates available",
				"description": "List the templates available",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"description": "Filter template(s) based on project UUID",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "softwareType",
						"description": "Filter template(s) based software type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "softwareVersion",
						"description": "Filter template(s) based softwareVersion",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "productFamily",
						"description": "Filter template(s) based on device family",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "productSeries",
						"description": "Filter template(s) based on device series",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "productType",
						"description": "Filter template(s) based on device type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "filterConflictingTemplates",
						"description": "Filter template(s) based on confliting templates",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "tags",
						"description": "Filter template(s) based on tags",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "projectNames",
						"description": "Filter template(s) based on project names",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "unCommitted",
						"description": "Filter template(s) based on template commited or not",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "sortOrder",
						"description": "Sort Order Ascending (asc) or Descending (des)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplateInfo"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/certificate": {
			"post": {
				"operationId": "importCertificate",
				"tags": [
					"Authentication"
				],
				"summary": "importCertificate",
				"description": "This method is used to upload a certificate",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "multipart/form-data",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "pkPassword",
						"description": "Private Key Passsword",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "listOfUsers",
						"description": "listOfUsers",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/custom-prompt": {
			"get": {
				"operationId": "custom-promptSupportGETAPI",
				"tags": [
					"System Settings"
				],
				"summary": "Custom-prompt support GET API",
				"description": "Returns supported custom prompts by Cisco DNA Center",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CustompromptSupportGETAPIResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"503": {
						"description": "The server is (temporarily) unavailable"
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "customPromptPOSTAPI",
				"tags": [
					"System Settings"
				],
				"summary": "Custom Prompt POST API",
				"description": "Save custom prompt added by user in Cisco DNA Center. API will always override the existing prompts. User should provide all the custom prompt in case of any update",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CustomPromptPOSTAPIRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CustomPromptPOSTAPIResponse"
						}
					},
					"202": {
						"description": "Accepted"
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"503": {
						"description": "The server is (temporarily) unavailable"
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/tag/{id}/member/count": {
			"get": {
				"operationId": "getTagMemberCount",
				"tags": [
					"Tag"
				],
				"summary": "Get Tag Member count",
				"description": "Returns the number of members in a given tag",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Tag ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "memberType",
						"description": "memberType",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "memberAssociationType",
						"description": "memberAssociationType",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/data/reports": {
			"get": {
				"operationId": "getListOfScheduledReports",
				"tags": [
					"Reports"
				],
				"summary": "Get list of scheduled reports",
				"description": "Get list of scheduled report configurations.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "viewGroupId",
						"description": "viewGroupId of viewgroup for report",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "viewId",
						"description": "viewId of view for report",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/report"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createOrScheduleAReport",
				"tags": [
					"Reports"
				],
				"summary": "Create or Schedule a report",
				"description": "Create/Schedule a report configuration. Use \"Get view details for a given view group & view\" API to get the metadata required to configure a report.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/reportAPIBody"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/report"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"412": {
						"description": "Request payload did not pass validation."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/data/view-groups": {
			"get": {
				"operationId": "getAllViewGroups",
				"tags": [
					"Reports"
				],
				"summary": "Get all view groups",
				"description": "Gives a list of summary of all view groups.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/viewgroupsummary"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-workflow/{id}": {
			"put": {
				"operationId": "updateWorkflow",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Update Workflow",
				"description": "Updates an existing workflow",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Workflow"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateWorkflowResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getWorkflowById",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get Workflow by Id",
				"description": "Returns a workflow specified by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetWorkflowByIdResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "deleteWorkflowById",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Delete Workflow By Id",
				"description": "Deletes a workflow specified by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteWorkflowByIdResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/eox-status/device": {
			"get": {
				"operationId": "getEoXStatusForAllDevices",
				"tags": [
					"EoX"
				],
				"summary": "Get EoX Status For All Devices",
				"description": "Retrieves EoX status for all devices in the network",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEoXStatusForAllDevicesResponse"
						}
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/subscription-details/email": {
			"get": {
				"operationId": "getEmailSubscriptionDetails",
				"tags": [
					"Event Management"
				],
				"summary": "Get Email Subscription Details",
				"description": "Gets the list of subscription details for specified connectorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "Name of the specific configuration",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "instanceId",
						"description": "Instance Id of the specific configuration",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of Email Subscription detail's to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of Email Subscription detail's to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEmailSubscriptionDetailsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/networkprofile/{networkProfileId}/site/{siteId}": {
			"post": {
				"operationId": "associate",
				"tags": [
					"Site Design"
				],
				"summary": "Associate",
				"description": "Associate Site to a Network Profile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"description": "",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "networkProfileId",
						"description": "Network-Profile Id to be associated",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "siteId",
						"description": "Site Id to be associated",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AssociateResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "disassociate",
				"tags": [
					"Site Design"
				],
				"summary": "Disassociate",
				"description": "Disassociate a Site from a Network Profile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"description": "",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "networkProfileId",
						"description": "Network-Profile Id to be associated",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "siteId",
						"description": "Site Id to be associated",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DisassociateResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/discovery/{startIndex}/{recordsToReturn}": {
			"get": {
				"operationId": "getDiscoveriesByRange",
				"tags": [
					"Discovery"
				],
				"summary": "Get Discoveries by range",
				"description": "Returns the discovery by specified range",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "startIndex",
						"description": "Start index",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "recordsToReturn",
						"description": "Number of records to return",
						"required": true,
						"type": "integer",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DiscoveryNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device-poller/cli/legit-reads": {
			"get": {
				"operationId": "getAllKeywordsOfCLIsAcceptedByCommandRunner",
				"tags": [
					"Command Runner"
				],
				"summary": "Get all keywords of CLIs accepted by command runner",
				"description": "Get valid keywords",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LegitCliKeyResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/network-device/{deviceId}/{startIndex}/{recordsToReturn}": {
			"get": {
				"operationId": "getDeviceInterfacesBySpecifiedRange",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Interfaces by specified range",
				"description": "Returns the list of interfaces for the device for the specified range",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "startIndex",
						"description": "Start index",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "recordsToReturn",
						"description": "Number of records to return",
						"required": true,
						"type": "integer",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/qos-device-interface-info": {
			"post": {
				"operationId": "createQosDeviceInterfaceInfo",
				"tags": [
					"Application Policy"
				],
				"summary": "Create Qos Device Interface Info",
				"description": "Create qos device interface infos associate with network device id to allow the user to mark specific interfaces as WAN, to associate WAN interfaces with specific SP Profile and to be able to define a shaper on WAN interfaces",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateQosDeviceInterfaceInfoRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "content-type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateQosDeviceInterfaceInfoResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getQosDeviceInterfaceInfo",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Qos Device Interface Info",
				"description": "Get all or by network device id, existing qos device interface infos",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "networkDeviceId",
						"description": "network device id",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetQosDeviceInterfaceInfoResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "updateQosDeviceInterfaceInfo",
				"tags": [
					"Application Policy"
				],
				"summary": "Update Qos Device Interface Info",
				"description": "Update existing qos device interface infos associate with network device id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateQosDeviceInterfaceInfoRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "content-type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateQosDeviceInterfaceInfoResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/collection-schedule/global": {
			"get": {
				"operationId": "getPollingIntervalForAllDevices",
				"tags": [
					"Devices"
				],
				"summary": "Get Polling Interval for all devices",
				"description": "Returns polling interval of all devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/certificate-p12": {
			"post": {
				"operationId": "importCertificateP12",
				"tags": [
					"Authentication"
				],
				"summary": "importCertificateP12",
				"description": "This method is used to upload a PKCS#12 file",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "multipart/form-data",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "p12Password",
						"description": "P12 Passsword",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "pkPassword",
						"description": "Private Key Passsword",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "listOfUsers",
						"description": "listOfUsers",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/floors/{floorId}/planned-access-points": {
			"put": {
				"operationId": "updatePlannedAccessPointForFloor",
				"tags": [
					"Devices"
				],
				"summary": "Update Planned Access Point for Floor",
				"description": "Allows updating a planned access point on an existing floor map including its planned radio and antenna details.  Use the Get variant of this API to fetch the existing planned access points for the floor.  The payload to update a planned access point is in the same format, albeit a single object instead of a list, of that API.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PlannedAccessPointPublic"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "floorId",
						"description": "The instance UUID of the floor hierarchy element",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getPlannedAccessPointsForFloor",
				"tags": [
					"Devices"
				],
				"summary": "Get Planned Access Points for Floor",
				"description": "Provides a list of Planned Access Points for the Floor it is requested for",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "floorId",
						"description": "Floor Id",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "radios",
						"description": "inlcude planned radio details",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/GetPlannedAccessPointsForFloorResponse"
						}
					},
					"404": {
						"description": "requested floor id is not found"
					}
				}
			},
			"post": {
				"operationId": "createPlannedAccessPointForFloor",
				"tags": [
					"Devices"
				],
				"summary": "Create Planned Access Point for Floor",
				"description": "Allows creation of a new planned access point on an existing floor map including its planned radio and antenna details.  Use the Get variant of this API to fetch any existing planned access points for the floor.  The payload to create a planned access point is in the same format, albeit a single object instead of a list, of that API.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PlannedAccessPointPublic"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "floorId",
						"description": "The instance UUID of the floor hierarchy element",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/image/importation/device-family-identifiers": {
			"get": {
				"operationId": "getDeviceFamilyIdentifiers",
				"tags": [
					"Software Image Management (SWIM)"
				],
				"summary": "Get Device Family Identifiers",
				"description": "API to get Device Family Identifiers for all Device Families that can be used for tagging an image golden.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Accept",
						"description": "MIME type / MIME subtype",
						"default": "application/json",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceFamilyIdentifierResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/sync": {
			"put": {
				"operationId": "syncDevices",
				"tags": [
					"Devices"
				],
				"summary": "Sync Devices",
				"description": "Synchronizes the devices. If forceSync param is false (default) then the sync would run in normal priority thread. If forceSync param is true then the sync would run in high priority thread if available, else the sync will fail. Result can be seen in the child task of each device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SyncDevicesRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "forceSync",
						"description": "forceSync",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/device-health": {
			"get": {
				"operationId": "devices",
				"tags": [
					"Devices"
				],
				"summary": "Devices",
				"description": "Intent API for accessing DNA Assurance Device object for generating reports, creating dashboards or creating additional value added services.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceRole",
						"description": "CORE, ACCESS, DISTRIBUTION, ROUTER, WLC, or AP (case insensitive)",
						"type": "string",
						"in": "query"
					},
					{
						"name": "siteId",
						"description": "DNAC site UUID",
						"type": "string",
						"in": "query"
					},
					{
						"name": "health",
						"description": "DNAC health catagory: POOR, FAIR, or GOOD (case insensitive)",
						"type": "string",
						"in": "query"
					},
					{
						"name": "startTime",
						"description": "UTC epoch time in milliseconds",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "UTC epoch time in milliseconds",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Max number of device entries in the response (default to 50. Max at 500)",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The offset of the first device in the returned data (Mutiple of 'limit' + 1)",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DevicesResponse"
						}
					},
					"400": {
						"description": " The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": " The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "This user is forbidden to access this resource."
					},
					"404": {
						"description": " The client made a request for a resource that does not exist."
					},
					"500": {
						"description": " The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-settings/sacct": {
			"get": {
				"operationId": "getSmartAccountList",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get Smart Account List",
				"description": "Returns the list of Smart Account domains",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSmartAccountListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device-config": {
			"get": {
				"operationId": "getConfigurationArchiveDetails",
				"tags": [
					"Configuration Archive"
				],
				"summary": "Get configuration archive details",
				"description": "Returns the historical device configurations (running configuration , startup configuration , vlan if applicable) by specified criteria",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "comma separated device id for example cf35b0a1-407f-412f-b2f4-f0c3156695f9,aaa38191-0c22-4158-befd-779a09d7cec1 . if device id is not provided it will fetch for all devices",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "fileType",
						"description": "Config File Type can be RUNNINGCONFIG or STARTUPCONFIG",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "createdTime",
						"description": "Supported with logical filters GT,GTE,LT,LTE & BT : time in milliseconds (epoc format)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "createdBy",
						"description": "Comma separated values for createdBy - SCHEDULED, USER, CONFIG_CHANGE_EVENT, SCHEDULED_FIRST_TIME, DR_CALL_BACK, PRE_DEPLOY",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetConfigurationArchiveDetailsResponse"
						}
					},
					"204": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/subscription/email": {
			"get": {
				"operationId": "getEmailEventSubscriptions",
				"tags": [
					"Event Management"
				],
				"summary": "Get Email Event Subscriptions",
				"description": "Gets the list of email Subscriptions's based on provided query params",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "eventIds",
						"description": "List of email subscriptions related to the respective eventIds (Comma separated event ids)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of Subscriptions's to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of Subscriptions's to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "domain",
						"description": "List of email subscriptions related to the respective domain",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "subDomain",
						"description": "List of email subscriptions related to the respective sub-domain",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "category",
						"description": "List of email subscriptions related to the respective category",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "List of email subscriptions related to the respective type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "List of email subscriptions related to the respective name",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEmailEventSubscriptionsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createEmailEventSubscription",
				"tags": [
					"Event Management"
				],
				"summary": "Create Email Event Subscription",
				"description": "Create Email Subscription Endpoint for list of registered events.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateEmailEventSubscription"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateEmailEventSubscriptionResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateEmailEventSubscription",
				"tags": [
					"Event Management"
				],
				"summary": "Update Email Event Subscription",
				"description": "Update Email Subscription Endpoint for list of registered events",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateEmailEventSubscription"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateEmailEventSubscriptionResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/app-policy": {
			"get": {
				"operationId": "getApplicationPolicy",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Application Policy",
				"description": "Get all existing application policies",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "policyScope",
						"description": "policy scope name",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetApplicationPolicyResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/discovery/{id}/summary": {
			"get": {
				"operationId": "getNetworkDevicesFromDiscovery",
				"tags": [
					"Discovery"
				],
				"summary": "Get network devices from Discovery",
				"description": "Returns the network devices from a discovery job based on given filters. Discovery ID can be obtained using the \"Get Discoveries by range\" API.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "taskId",
						"description": "taskId",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "sortBy",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortOrder",
						"description": "sortOrder",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "ipAddress",
						"description": "ipAddress",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "pingStatus",
						"description": "pingStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "snmpStatus",
						"description": "snmpStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "cliStatus",
						"description": "cliStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "netconfStatus",
						"description": "netconfStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "httpStatus",
						"description": "httpStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/security-advisory/advisory/aggregate": {
			"get": {
				"operationId": "getAdvisoriesSummary",
				"tags": [
					"Security Advisories"
				],
				"summary": "Get Advisories Summary",
				"description": "Retrieves summary of advisories on the network.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAdvisoriesSummaryResponse"
						}
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/count": {
			"get": {
				"operationId": "getDeviceInterfaceCountForMultipleDevices",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Interface Count for Multiple Devices",
				"description": "Returns the count of interfaces for all devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/compliance/detail/count": {
			"get": {
				"operationId": "getComplianceDetailCount",
				"tags": [
					"Compliance"
				],
				"summary": "Get Compliance Detail Count",
				"description": "Return  Compliance Count Detail",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "complianceType",
						"description": "Specify \"Compliance type(s)\" separated by commas. The Compliance type can be 'APPLICATION_VISIBILITY', 'EOX', 'FABRIC', 'IMAGE', 'NETWORK_PROFILE', 'NETWORK_SETTINGS', 'PSIRT', 'RUNNING_CONFIG', 'WORKFLOW'. ",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "complianceStatus",
						"description": "Specify \"Compliance status(es)\" separated by commas. The Compliance status can be 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS', 'NOT_AVAILABLE', 'NOT_APPLICABLE', 'ERROR'.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetComplianceDetailCountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request"
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/client-health": {
			"get": {
				"operationId": "getOverallClientHealth",
				"tags": [
					"Clients"
				],
				"summary": "Get Overall Client Health",
				"description": "Returns Overall Client Health information by Client type (Wired and Wireless) for any given point of time",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "timestamp",
						"description": "Epoch time(in milliseconds) when the Client health data is required",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/HealthDetail"
						}
					},
					"400": {
						"description": " The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": " The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "This user is forbidden to access this resource."
					},
					"404": {
						"description": " The client made a request for a resource that does not exist."
					},
					"500": {
						"description": " The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/file/namespace": {
			"get": {
				"operationId": "getListOfAvailableNamespaces",
				"tags": [
					"File"
				],
				"summary": "Get list of available namespaces",
				"description": "Returns list of available namespaces",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NameSpaceListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/licenses/usage/smartAccount/{smart_account_id}/virtualAccount/{virtual_account_name}": {
			"get": {
				"operationId": "licenseUsageDetails",
				"tags": [
					"Licenses"
				],
				"summary": "License Usage Details",
				"description": "Get count of purchased and in use Cisco DNA and Network licenses.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "smart_account_id",
						"description": "Id of smart account",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "virtual_account_name",
						"description": "Name of virtual account. Putting \"All\" will give license term detail for all virtual accounts.",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "device_type",
						"description": "Type of device like router, switch, wireless or ise",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LicenseUsageDetailsResponse"
						}
					},
					"202": {
						"description": "The request has been accepted for processing, but the processing has not been completed"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/tag/{id}": {
			"delete": {
				"operationId": "deleteTag",
				"tags": [
					"Tag"
				],
				"summary": "Delete Tag",
				"description": "Deletes a tag specified by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Tag ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getTagById",
				"tags": [
					"Tag"
				],
				"summary": "Get Tag by Id",
				"description": "Returns tag specified by Id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Tag ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TagResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/security-advisory/advisory": {
			"get": {
				"operationId": "getAdvisoriesList",
				"tags": [
					"Security Advisories"
				],
				"summary": "Get Advisories List",
				"description": "Retrieves list of advisories on the network",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAdvisoriesListResponse"
						}
					},
					"400": {
						"description": "Bad request. The request syntax is incorrect or invalid request parameters."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/template/preview": {
			"put": {
				"operationId": "previewTemplate",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Preview Template",
				"description": "API to preview a template.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplatePreviewRequestDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplatePreviewResponseDTO"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/device-replacement/workflow": {
			"post": {
				"operationId": "deployDeviceReplacementWorkflow",
				"tags": [
					"Device Replacement"
				],
				"summary": "Deploy device replacement workflow",
				"description": "API to trigger RMA workflow that will replace faulty device with replacement device with same configuration and images",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DeviceReplacementWorkflowDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/snmp-property": {
			"get": {
				"operationId": "getSNMPProperties",
				"tags": [
					"Discovery"
				],
				"summary": "Get SNMP properties",
				"description": "Returns SNMP properties",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SystemPropertyListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "create/UpdateSNMPProperties",
				"tags": [
					"Discovery"
				],
				"summary": "Create/Update SNMP properties",
				"description": "Adds SNMP properties",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SystemPropertyNameAndIntValueDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/events": {
			"get": {
				"operationId": "getEvents",
				"tags": [
					"Event Management"
				],
				"summary": "Get Events",
				"description": "Gets the list of registered Events with provided eventIds or tags as mandatory",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "eventId",
						"description": "The registered EventId should be provided",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "tags",
						"description": "The registered Tags should be provided",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of Registries to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of Registries to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEventsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/tag/member": {
			"put": {
				"operationId": "updateTagMembership",
				"tags": [
					"Tag"
				],
				"summary": "Update tag membership",
				"description": "Update tag membership. As part of the request payload through this API, only the specified members are added / retained to the given input tags. Possible values of memberType attribute in the request payload can be queried by using the /tag/member/type API",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TagMemberDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/file/namespace/{nameSpace}": {
			"get": {
				"operationId": "getListOfFiles",
				"tags": [
					"File"
				],
				"summary": "Get list of files",
				"description": "Returns list of files under a specific namespace",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "nameSpace",
						"description": "A listing of fileId's",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/FileObjectListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/tag/member/type": {
			"get": {
				"operationId": "getTagResourceTypes",
				"tags": [
					"Tag"
				],
				"summary": "Get Tag resource types",
				"description": "Returns list of supported resource types",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TagTypesResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v2/network/{siteId}": {
			"post": {
				"operationId": "createNetworkV2",
				"tags": [
					"Network Settings"
				],
				"summary": "Create Network V2",
				"description": "API to create network settings for DHCP,  Syslog, SNMP, NTP, Network AAA, Client and Endpoint AAA, and/or DNS center server settings.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateNetworkVRequest"
						},
						"in": "body"
					},
					{
						"name": "siteId",
						"description": "Site Id to which site details to associate with the network settings.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateNetworkVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "updateNetworkV2",
				"tags": [
					"Network Settings"
				],
				"summary": "Update Network V2",
				"description": "API to update network settings for DHCP, Syslog, SNMP, NTP, Network AAA, Client and Endpoint AAA, and/or DNS center server settings.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateNetworkVRequest"
						},
						"in": "body"
					},
					{
						"name": "siteId",
						"description": "Site Id to update the network settings which is associated with the site",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateNetworkVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/security-advisory/device/{deviceId}/advisory": {
			"get": {
				"operationId": "getAdvisoriesPerDevice",
				"tags": [
					"Security Advisories"
				],
				"summary": "Get Advisories Per Device",
				"description": "Retrieves list of advisories for a device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device instance UUID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAdvisoriesPerDeviceResponse"
						}
					},
					"400": {
						"description": "Bad request. The request syntax is incorrect or invalid request parameters."
					}
				}
			}
		},
		"/dna/intent/api/v1/integration-settings/itsm/instances": {
			"get": {
				"operationId": "getAllITSMIntegrationSettings",
				"tags": [
					"ITSM Integration"
				],
				"summary": "Get all ITSM Integration settings",
				"description": "Fetches all ITSM Integration settings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GetAllITSMIntegrationSettingsRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "Instance Updated",
						"schema": {
							"$ref": "#/definitions/GetAllITSMIntegrationSettingsResponse"
						}
					},
					"404": {
						"description": "Instance not found"
					}
				}
			}
		},
		"/dna/intent/api/v1/global-credential/snmpv2-read-community": {
			"put": {
				"operationId": "updateSNMPReadCommunity",
				"tags": [
					"Discovery"
				],
				"summary": "Update SNMP read community",
				"description": "Updates global SNMP read community",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvReadCommunityDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createSNMPReadCommunity",
				"tags": [
					"Discovery"
				],
				"summary": "Create SNMP read community",
				"description": "Adds global SNMP read community",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvReadCommunityDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/device-replacement": {
			"put": {
				"operationId": "unMarkDeviceForReplacement",
				"tags": [
					"Device Replacement"
				],
				"summary": "UnMark device for replacement",
				"description": "UnMarks device for replacement",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DeviceReplacementDataDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "markDeviceForReplacement",
				"tags": [
					"Device Replacement"
				],
				"summary": "Mark device for replacement",
				"description": "Marks device for replacement",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DeviceReplacementDataDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "returnListOfReplacementDevicesWithReplacementDetails",
				"tags": [
					"Device Replacement"
				],
				"summary": "Return list of replacement devices with replacement details",
				"description": "Get list of replacement devices with replacement details and it can filter replacement devices based on Faulty Device Name,Faulty Device Platform, Replacement Device Platform, Faulty Device Serial Number,Replacement Device Serial Number, Device Replacement status, Product Family.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "faultyDeviceName",
						"description": "Faulty Device Name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "faultyDevicePlatform",
						"description": "Faulty Device Platform",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "replacementDevicePlatform",
						"description": "Replacement Device Platform",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "faultyDeviceSerialNumber",
						"description": "Faulty Device Serial Number",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "replacementDeviceSerialNumber",
						"description": "Replacement Device Serial Number",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "replacementStatus",
						"description": "Device Replacement status [READY-FOR-REPLACEMENT, REPLACEMENT-IN-PROGRESS, REPLACEMENT-SCHEDULED, REPLACED, ERROR, NETWORK_READINESS_REQUESTED, NETWORK_READINESS_FAILED]",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "family",
						"description": "List of families[Routers, Switches and Hubs, AP]",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "sortBy",
						"description": "SortBy this field. SortBy is mandatory when order is used.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortOrder",
						"description": "Order on displayName[ASC,DESC]",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "integer",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceReplacementResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/discovery/{id}": {
			"delete": {
				"operationId": "deleteDiscoveryById",
				"tags": [
					"Discovery"
				],
				"summary": "Delete discovery by Id",
				"description": "Stops the discovery for the given Discovery ID and removes it. Discovery ID can be obtained using the \"Get Discoveries by range\" API.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getDiscoveryById",
				"tags": [
					"Discovery"
				],
				"summary": "Get Discovery by Id",
				"description": "Returns discovery by Discovery ID. Discovery ID can be obtained using the \"Get Discoveries by range\" API.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DiscoveryNIOResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/data/api/v1/event/event-series/audit-log/summary": {
			"get": {
				"operationId": "getAuditLogSummary",
				"tags": [
					"Event Management"
				],
				"summary": "Get AuditLog Summary",
				"description": "Get Audit Log Summary from the Event-Hub",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "parentInstanceId",
						"description": "Parent Audit Log record's instanceID.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "isParentOnly",
						"description": "Parameter to filter parent only audit-logs.",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "instanceId",
						"description": "InstanceID of the Audit Log.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Audit Log notification event name.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "eventId",
						"description": "Audit Log notification's event ID. ",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "category",
						"description": "Audit Log notification's event category. Supported values: INFO, WARN, ERROR, ALERT, TASK_PROGRESS, TASK_FAILURE, TASK_COMPLETE, COMMAND, QUERY, CONVERSATION",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "severity",
						"description": "Audit Log notification's event severity. Supported values: 1, 2, 3, 4, 5.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "domain",
						"description": "Audit Log notification's event domain.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "subDomain",
						"description": "Audit Log notification's event sub-domain.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "source",
						"description": "Audit Log notification's event source.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "userId",
						"description": "Audit Log notification's event userId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "context",
						"description": "Audit Log notification's event correlationId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "eventHierarchy",
						"description": "Audit Log notification's event eventHierarchy. Example: \"US.CA.San Jose\" OR \"US.CA\" OR \"CA.San Jose\" - Delimiter for hierarchy separation is \".\".",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "siteId",
						"description": "Audit Log notification's siteId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "deviceId",
						"description": "Audit Log notification's deviceId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "isSystemEvents",
						"description": "Parameter to filter system generated audit-logs.",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "description",
						"description": "String full/partial search - (Provided input string is case insensitively matched for records).",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "startTime",
						"description": "Start Time in milliseconds since Epoch Eg. 1597950637211 (when provided endTime is mandatory)",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "End Time in milliseconds since Epoch Eg. 1597961437211 (when provided startTime is mandatory)",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAuditLogSummaryResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/project/name/{projectName}/template/importtemplates": {
			"post": {
				"operationId": "importsTheTemplatesProvided",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Imports the templates provided",
				"description": "Imports the templates provided in the DTO by project Name",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplateDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "projectName",
						"description": "Project name to create template under the project",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "doVersion",
						"description": "If this flag is true then it creates a new version of the template with the imported contents in case if the templates already exists. \"\nIf this flag is false and if template already exists, then operation fails with 'Template already exists' error",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/image/importation/source/file": {
			"post": {
				"operationId": "importLocalSoftwareImage",
				"tags": [
					"Software Image Management (SWIM)"
				],
				"summary": "Import local software image",
				"description": "Fetches a software image from local file system and uploads to DNA Center. Supported software image files extensions are bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "isThirdParty",
						"description": "Third party Image check",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "thirdPartyVendor",
						"description": "Third Party Vendor",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "thirdPartyImageFamily",
						"description": "Third Party image family",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "thirdPartyApplicationType",
						"description": "Third Party Application Type",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{deviceUuid}/line-card": {
			"get": {
				"operationId": "getLinecardDetails",
				"tags": [
					"Devices"
				],
				"summary": "Get Linecard details",
				"description": "Get line card detail for a given deviceuuid.  Response will contain serial no, part no, switch no and slot no.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceUuid",
						"description": "instanceuuid of device",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "OK - List of line card details or empty list if the device don't have any line card",
						"schema": {
							"$ref": "#/definitions/GetLinecardDetailsResponse"
						}
					},
					"400": {
						"description": "Override"
					},
					"404": {
						"description": "Resource Not Found"
					}
				}
			}
		},
		"/dna/intent/api/v2/global-credential": {
			"post": {
				"operationId": "createGlobalCredentialsV2",
				"tags": [
					"Discovery"
				],
				"summary": "Create Global Credentials V2",
				"description": "API to create new global credentials. Multiple credentials of various types can be passed at once. Please refer sample Request Body for more information.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateGlobalCredentialsVRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateGlobalCredentialsVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getAllGlobalCredentialsV2",
				"tags": [
					"Discovery"
				],
				"summary": "Get All Global Credentials V2",
				"description": "API to get device credentials' details. It fetches all global credentials of all types at once, without the need to pass any input parameters.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAllGlobalCredentialsVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "updateGlobalCredentialsV2",
				"tags": [
					"Discovery"
				],
				"summary": "Update Global Credentials V2",
				"description": "API to update device credentials. Multiple credentials can be passed at once, but only a single credential of a given type can be passed at once. Please refer sample Request Body for more information.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateGlobalCredentialsVRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateGlobalCredentialsVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/project": {
			"get": {
				"operationId": "getsAListOfProjects",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Gets a list of projects",
				"description": "List the projects",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "Name of project to be searched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortOrder",
						"description": "Sort Order Ascending (asc) or Descending (des)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ProjectDTO"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createProject",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Create Project",
				"description": "This API is used to create a new project.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateProjectRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateProjectResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateProject",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Update Project",
				"description": "This API is used to update an existing project.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProjectDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/qos-device-interface-info/{id}": {
			"delete": {
				"operationId": "deleteQosDeviceInterfaceInfo",
				"tags": [
					"Application Policy"
				],
				"summary": "Delete Qos Device Interface Info",
				"description": "Delete all qos device interface infos associate with network device id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Id of the qos device info, this object holds all qos device interface infos associate with network device id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteQosDeviceInterfaceInfoResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/subscription": {
			"post": {
				"operationId": "createEventSubscriptions",
				"tags": [
					"Event Management"
				],
				"summary": "Create Event Subscriptions",
				"description": "Subscribe SubscriptionEndpoint to list of registered events (Deprecated)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateEventSubscriptionsRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateEventSubscriptionsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateEventSubscriptions",
				"tags": [
					"Event Management"
				],
				"summary": "Update Event Subscriptions",
				"description": "Update SubscriptionEndpoint to list of registered events(Deprecated)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateEventSubscriptionsRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateEventSubscriptionsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "deleteEventSubscriptions",
				"tags": [
					"Event Management"
				],
				"summary": "Delete Event Subscriptions",
				"description": "Delete EventSubscriptions",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "subscriptions",
						"description": "List of EventSubscriptionId's for removal",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteEventSubscriptionsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getEventSubscriptions",
				"tags": [
					"Event Management"
				],
				"summary": "Get Event Subscriptions",
				"description": "Gets the list of Subscriptions's based on provided offset and limit (Deprecated)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "eventIds",
						"description": "List of subscriptions related to the respective eventIds",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of Subscriptions's to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of Subscriptions's to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEventSubscriptionsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/diagnostics/system/health/count": {
			"get": {
				"operationId": "systemHealthCountAPI",
				"tags": [
					"Health and Performance"
				],
				"summary": "System Health Count API",
				"description": "This API gives the count of the latest system events",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "domain",
						"description": "Fetch system events with this domain. Possible values of domain are listed here : /dna/platform/app/consumer-portal/developer-toolkit/events",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "subdomain",
						"description": "Fetch system events with this subdomain. Possible values of subdomain are listed here : /dna/platform/app/consumer-portal/developer-toolkit/events",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SystemHealthCountAPIResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/network-device/{deviceId}/interface-name": {
			"get": {
				"operationId": "getInterfaceDetailsByDeviceIdAndInterfaceName",
				"tags": [
					"Devices"
				],
				"summary": "Get Interface details by device Id and interface name",
				"description": "Returns interface by specified device Id and interface name",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "name",
						"description": "Interface name",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/compliance/{deviceUuid}/detail": {
			"get": {
				"operationId": "complianceDetailsOfDevice",
				"tags": [
					"Compliance"
				],
				"summary": "Compliance Details of Device",
				"description": "Return compliance detailed report for a device.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceUuid",
						"description": "Device Id",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "category",
						"description": "category can have any value among 'INTENT', 'RUNNING_CONFIG' , 'IMAGE' , 'PSIRT' , 'DESIGN_OOD' , 'EOX' , 'NETWORK_SETTINGS'",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "complianceType",
						"description": "Specify \"Compliance type(s)\" separated by commas. The Compliance type can be 'APPLICATION_VISIBILITY', 'EOX', 'FABRIC', 'IMAGE', 'NETWORK_PROFILE', 'NETWORK_SETTINGS', 'PSIRT', 'RUNNING_CONFIG', 'WORKFLOW'. ",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "diffList",
						"description": "diff list [ pass true to fetch the diff list ]",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ComplianceDetailsOfDeviceResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognises the authentication credentials, but the client is not authorised to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fullfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fullfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device-config/write-memory": {
			"post": {
				"operationId": "commitDeviceConfiguration",
				"tags": [
					"Compliance"
				],
				"summary": "Commit device configuration",
				"description": "This operation would commit device running configuration to startup by issuing \"write memory\" to device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CommitDeviceConfigurationRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CommitDeviceConfigurationResponse"
						}
					},
					"201": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/licenses/device/summary": {
			"get": {
				"operationId": "deviceLicenseSummary",
				"tags": [
					"Licenses"
				],
				"summary": "Device License Summary",
				"description": "Show license summary of device(s).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page_number",
						"description": "Page number of response",
						"required": true,
						"type": "number",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Sorting order",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sort_by",
						"description": "Sort result by field",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "dna_level",
						"description": "Device Cisco DNA license level",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "device_type",
						"description": "Type of device",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Limit",
						"required": true,
						"type": "number",
						"in": "query"
					},
					{
						"name": "registration_status",
						"description": "Smart license registration status of device",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "virtual_account_name",
						"description": "Name of virtual account",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "smart_account_id",
						"description": "Id of smart account",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "device_uuid",
						"description": "Id of device",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceLicenseSummaryResponse"
						}
					},
					"202": {
						"description": "The request has been accepted for processing, but the processing has not been completed"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/global-credential/http-write": {
			"post": {
				"operationId": "createHTTPWriteCredentials",
				"tags": [
					"Discovery"
				],
				"summary": "Create HTTP write credentials",
				"description": "Adds global HTTP write credentials",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/HTTPWriteCredentialDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateHTTPWriteCredentials",
				"tags": [
					"Discovery"
				],
				"summary": "Update HTTP write credentials",
				"description": "Updates global HTTP write credentials",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/HTTPWriteCredentialDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/authentication-policy-servers": {
			"post": {
				"operationId": "addAuthenticationAndPolicyServerAccessConfiguration",
				"tags": [
					"System Settings"
				],
				"summary": "Add Authentication and Policy Server Access Configuration",
				"description": "API to add AAA/ISE server access configuration. Protocol can be configured as either RADIUS OR TACACS OR RADIUS_TACACS. If configuring Cisco ISE server, after configuration, use ‘Cisco ISE Server Integration Status’ Intent API to check the integration status. Based on integration status, if require use 'Accept Cisco ISE Server Certificate for Cisco ISE Server Integration' Intent API to accept the Cisco ISE certificate for Cisco ISE server integration, then use again ‘Cisco ISE Server Integration Status’ Intent API to check the integration status.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddAuthenticationAndPolicyServerAccessConfigurationRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/AddAuthenticationAndPolicyServerAccessConfigurationResponse"
						}
					},
					"202": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getAuthenticationAndPolicyServers",
				"tags": [
					"System Settings"
				],
				"summary": "Get Authentication and Policy Servers",
				"description": "API to get Authentication and Policy Servers",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "isIseEnabled",
						"description": "Valid values are : true, false",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "state",
						"description": "Valid values are: INPROGRESS, ACTIVE, DELETED, RBAC-FAILURE, FAILED",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "role",
						"description": "Authentication and Policy Server Role (Example: primary, secondary)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAuthenticationAndPolicyServersResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/flow-analysis": {
			"get": {
				"operationId": "retrivesAllPreviousPathtracesSummary",
				"tags": [
					"Path Trace"
				],
				"summary": "Retrives all previous Pathtraces summary",
				"description": "Returns a summary of all flow analyses stored. Results can be filtered by specified parameters.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "periodicRefresh",
						"description": "Is analysis periodically refreshed?",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "sourceIP",
						"description": "Source IP address",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "destIP",
						"description": "Destination IP adress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sourcePort",
						"description": "Source port",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "destPort",
						"description": "Destination port",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "gtCreateTime",
						"description": "Analyses requested after this time",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "ltCreateTime",
						"description": "Analyses requested before this time",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "protocol",
						"description": "Protocol",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "status",
						"description": "Status",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "taskId",
						"description": "Task ID",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "lastUpdateTime",
						"description": "Last update time",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of resources returned",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Start index of resources returned (1-based)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Order by this field",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Sort by this field",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/FlowAnalysisListOutput"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "No correspoding flow analysis result for requested Id"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "initiateANewPathtrace",
				"tags": [
					"Path Trace"
				],
				"summary": "Initiate a new Pathtrace",
				"description": "Initiates a new flow analysis with periodic refresh and stat collection options. Returns a request id and a task id to get results and follow progress.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/FlowAnalysisRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/FlowAnalysisRequestResultOutput"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/insight/{siteId}/device-link": {
			"get": {
				"operationId": "inventoryInsightDeviceLinkMismatchAPI",
				"tags": [
					"Devices"
				],
				"summary": "Inventory Insight Device Link Mismatch API",
				"description": "Find all devices with link mismatch (speed /  vlan)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "siteId",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "offset",
						"description": "Row Number.  Default value is 1",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Default value is 500",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "category",
						"description": "Links mismatch category.  Value can be speed-duplex or vlan.",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Sort By",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Order.  Value can be asc or desc.  Default value is asc",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body",
						"schema": {
							"$ref": "#/definitions/InventoryInsightDeviceLinkMismatchAPIResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned.\t"
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect).\t"
					},
					"500": {
						"description": "The server could not fulfill the request"
					}
				}
			}
		},
		"/dna/system/api/v1/role": {
			"put": {
				"operationId": "updateRoleAPI",
				"tags": [
					"User and Roles"
				],
				"summary": "Update role API",
				"description": "Update a role in Cisco DNA Center System.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateRoleAPIRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "The format of the payload",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "Role updated successfully",
						"schema": {
							"$ref": "#/definitions/UpdateRoleAPIResponse"
						}
					},
					"400": {
						"description": "Invalid role info provided in payload"
					},
					"404": {
						"description": "Role not found"
					},
					"500": {
						"description": "Failed to update role"
					}
				}
			},
			"post": {
				"operationId": "addRoleAPI",
				"tags": [
					"User and Roles"
				],
				"summary": "Add role API",
				"description": "Add a new role in Cisco DNA Center System.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddRoleAPIRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "The format of the payload",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "Role created successfully",
						"schema": {
							"$ref": "#/definitions/AddRoleAPIResponse"
						}
					},
					"400": {
						"description": "Invalid role details provided in payload"
					},
					"409": {
						"description": "Role with name provided already exists"
					},
					"500": {
						"description": "Failed to create role"
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device-archive/cleartext": {
			"post": {
				"operationId": "exportDeviceConfigurations",
				"tags": [
					"Configuration Archive"
				],
				"summary": "Export Device configurations",
				"description": "Export Device configurations to an encrypted zip file",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ExportDeviceConfigurationsRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ExportDeviceConfigurationsResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/discovery": {
			"post": {
				"operationId": "startDiscovery",
				"tags": [
					"Discovery"
				],
				"summary": "Start discovery",
				"description": "Initiates discovery with the given parameters",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/InventoryRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updatesAnExistingDiscoveryBySpecifiedId",
				"tags": [
					"Discovery"
				],
				"summary": "Updates an existing discovery by specified Id",
				"description": "Stops or starts an existing discovery",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DiscoveryNIO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "deleteAllDiscovery",
				"tags": [
					"Discovery"
				],
				"summary": "Delete all discovery",
				"description": "Stops all the discoveries and removes them",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/network-device/{deviceId}/count": {
			"get": {
				"operationId": "getDeviceInterfaceCount",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Interface count",
				"description": "Returns the interface count for the given device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/maps/import/{importContextUuid}": {
			"delete": {
				"operationId": "importMapArchive-CancelAnImport",
				"tags": [
					"Sites"
				],
				"summary": "Import Map Archive - Cancel an Import",
				"description": "Cancels a previously initatied import, allowing the system to cleanup cached resources about that import data, and ensures the import cannot accidentally be performed / approved at a later time.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "importContextUuid",
						"description": "The unique import context UUID given by a previous call to Start Import API",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/ImportMapArchiveCancelAnImportResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/count": {
			"get": {
				"operationId": "getDeviceCount",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Count",
				"description": "Returns the count of network devices based on the filter criteria by management IP address, mac address, hostname and location name",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "hostname",
						"description": "hostname",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "managementIpAddress",
						"description": "managementIpAddress",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "macAddress",
						"description": "macAddress",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "locationName",
						"description": "locationName",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/maps/import/{importContextUuid}/perform": {
			"post": {
				"operationId": "importMapArchive-PerformImport",
				"tags": [
					"Sites"
				],
				"summary": "Import Map Archive - Perform Import",
				"description": "For a previously initatied import, approves the import to be performed, accepting that data loss may occur.  A Map import will fully replace existing Maps data for the site(s) defined in the archive. The Map Archive Import Status API /maps/import/${contextUuid}/status should always be checked to validate the pre-import validation output prior to performing the import.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "importContextUuid",
						"description": "The unique import context UUID given by a previous call of Start Import API",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/ImportMapArchivePerformImportResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned. Use the same Import Context UUID to poll for the processing result from the Import Map Archive - Import Status API"
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/image/importation/golden": {
			"post": {
				"operationId": "tagAsGoldenImage",
				"tags": [
					"Software Image Management (SWIM)"
				],
				"summary": "Tag as Golden Image",
				"description": "Golden Tag image. Set siteId as -1 for Global site.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SwimGoldenTagDTO"
						},
						"in": "body"
					},
					{
						"name": "Accept",
						"description": "MIME type / MIME subtype Consumed",
						"default": "application/json",
						"required": false,
						"type": "string",
						"in": "header"
					},
					{
						"name": "Content-Type",
						"description": "MIME type / MIME subtype Produced",
						"default": "application/json",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/lan-automation/log/{id}": {
			"get": {
				"operationId": "lANAutomationLogById",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Log by Id",
				"description": "Invoke this API to get the LAN Automation session logs based on the given LAN Automation session id.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "LAN Automation session identifier.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful and the result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LANAutomationLogByIdResponse"
						}
					},
					"404": {
						"description": "The request was not acceptable as the input parameter was not available."
					}
				}
			}
		},
		"/dna/intent/api/v1/device-reboot/apreboot": {
			"post": {
				"operationId": "rebootAccessPoints",
				"tags": [
					"Wireless"
				],
				"summary": "Reboot Access Points",
				"description": "Users can reboot multiple access points up-to 200 at a time using this API",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RebootAccessPointsRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content-Type",
						"default": "application/json",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RebootAccessPointsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/diagnostics/system/health": {
			"get": {
				"operationId": "systemHealthAPI",
				"tags": [
					"Health and Performance"
				],
				"summary": "System Health API",
				"description": "This API retrieves the latest system events ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "summary",
						"description": "Fetch the latest high severity event",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "domain",
						"description": "Fetch system events with this domain. Possible values of domain are listed here : /dna/platform/app/consumer-portal/developer-toolkit/events",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "subdomain",
						"description": "Fetch system events with this subdomain. Possible values of subdomain are listed here : /dna/platform/app/consumer-portal/developer-toolkit/events",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SystemHealthAPIResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/dnac-release": {
			"get": {
				"operationId": "ciscoDNACenterReleaseSummary",
				"tags": [
					"Platform"
				],
				"summary": "Cisco DNA Center Release Summary",
				"description": "Provides information such as API version, mandatory core packages for installation or upgrade, optional packages, Cisco DNA Center name and version, supported direct updates, and tenant ID. ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CiscoDNACenterReleaseSummaryResponse"
						}
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "Because the server did not respond in time, the response timed out."
					}
				}
			}
		},
		"/dna/intent/api/v2/wireless/accesspoint-configuration": {
			"post": {
				"operationId": "configureAccessPoints-2",
				"tags": [
					"Wireless"
				],
				"summary": "Configure Access Points",
				"description": "User can configure multiple access points with required options using this intent API",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConfigureAccessPointsRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ConfigureAccessPointsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/site-claim": {
			"post": {
				"operationId": "claimADeviceToASite",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Claim a Device to a Site",
				"description": "Claim a device based on DNA-C Site-based design process. Some required parameters differ based on device platform:\n\nDefault/StackSwitch: imageInfo, configInfo.  \n\nAccessPoints: rfProfile.  \n\nSensors: sensorProfile.  \n\nCatalystWLC/MobilityExpress/EWC: staticIP, subnetMask, gateway. vlanID and ipInterfaceName are also allowed for Catalyst 9800 WLCs.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SiteProvisionRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SiteClaimResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/site": {
			"get": {
				"operationId": "getSiteV2",
				"tags": [
					"Sites"
				],
				"summary": "Get Site V2",
				"description": "API to get site(s) by site-name-hierarchy or siteId or type. List all sites if these parameters  are not given as an input.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupNameHierarchy",
						"description": "Site name hierarchy (E.g. Global/USA/CA)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "id",
						"description": "Site Id",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "Site type (Acceptable values: area, building, floor)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Offset/starting index for pagination",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of sites to be listed. Default and max supported value is 500",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSiteVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"406": {
						"description": "The client made a request that is not acceptable."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v2/sp-profile/{spProfileName}": {
			"delete": {
				"operationId": "deleteSPProfileV2",
				"tags": [
					"Network Settings"
				],
				"summary": "Delete SP Profile V2",
				"description": "API to delete Service Provider Profile (QoS).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "spProfileName",
						"description": "SP profile name",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteSPProfileVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/lan-automation/status/{id}": {
			"get": {
				"operationId": "lANAutomationStatusById",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Status by Id",
				"description": "Invoke this API to get the LAN Automation session status based on the given Lan Automation session id.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "LAN Automation session identifier.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful and the result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LANAutomationStatusByIdResponse"
						}
					},
					"404": {
						"description": "The request was not acceptable as the input parameter was not available."
					}
				}
			}
		},
		"/dna/intent/api/v1/topology/vlan/vlan-names": {
			"get": {
				"operationId": "getVLANDetails",
				"tags": [
					"Topology"
				],
				"summary": "Get VLAN details",
				"description": "Returns the list of VLAN names",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/VlanNamesResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/applications": {
			"put": {
				"operationId": "editApplication/s",
				"tags": [
					"Application Policy"
				],
				"summary": "Edit Application/s",
				"description": "Edit the attributes of an existing application",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Applications"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "content-type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/Response"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getApplication/s",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Application/s",
				"description": "Get application/s by offset/limit or by name",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "attributes",
						"description": "Attributes to retrieve, valid value application",
						"default": "application",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "The application name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The starting point or index from where the paginated results should begin.",
						"default": 1,
						"required": true,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The limit which is the maximum number of items to include in a single page of results, max value 500",
						"default": 500,
						"required": true,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/Applications"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createApplication/s",
				"tags": [
					"Application Policy"
				],
				"summary": "Create Application/s",
				"description": "Create new custom application/s",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Applications"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "content-type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/Response"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v2/global-credential/{id}": {
			"delete": {
				"operationId": "deleteGlobalCredentialV2",
				"tags": [
					"Discovery"
				],
				"summary": "Delete Global Credential V2",
				"description": "Delete a global credential. Only 'id' of the credential has to be passed.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Global Credential id\t",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteGlobalCredentialVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/floors/{floorId}/planned-access-points/{plannedAccessPointUuid}": {
			"delete": {
				"operationId": "deletePlannedAccessPointForFloor",
				"tags": [
					"Devices"
				],
				"summary": "Delete Planned Access Point for Floor",
				"description": "Allow to delete a planned access point from an existing floor map including its planned radio and antenna details.  Use the Get variant of this API to fetch the existing planned access points for the floor.  The instanceUUID listed in each of the planned access point attributes acts as the path param input to this API to delete that specific instance.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "floorId",
						"description": "The instance UUID of the floor hierarchy element",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "plannedAccessPointUuid",
						"description": "The instance UUID of the planned access point to delete",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/project/name/exportprojects": {
			"post": {
				"operationId": "exportsTheProjectsForAGivenCriteria.",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Exports the projects for a given criteria.",
				"description": "Exports the projects for given projectNames.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ExportsTheProjectsForAGivenCriteriaRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/system/api/v1/user/{userId}": {
			"delete": {
				"operationId": "deleteUserAPI",
				"tags": [
					"User and Roles"
				],
				"summary": "Delete user API",
				"description": "Delete a user from Cisco DNA Center System.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"description": "The id of the user to be deleted",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "User successfully deleted from Cisco DNA Center System",
						"schema": {
							"$ref": "#/definitions/DeleteUserAPIResponse"
						}
					},
					"404": {
						"description": "User was not found in Cisco DNA Center System"
					},
					"412": {
						"description": "User tried to delete themselves or does not have right permission to delete a user in Cisco DNA Center System"
					},
					"500": {
						"description": "Error while deleting the user"
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-settings/sacct/{domain}/vacct": {
			"get": {
				"operationId": "getVirtualAccountList",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get Virtual Account List",
				"description": "Returns list of virtual accounts associated with the specified smart account",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "domain",
						"description": "Smart Account Domain",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetVirtualAccountListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/subscription/syslog": {
			"put": {
				"operationId": "updateSyslogEventSubscription",
				"tags": [
					"Event Management"
				],
				"summary": "Update Syslog Event Subscription",
				"description": "Update Syslog Subscription Endpoint for list of registered events",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateSyslogEventSubscription"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateSyslogEventSubscriptionResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createSyslogEventSubscription",
				"tags": [
					"Event Management"
				],
				"summary": "Create Syslog Event Subscription",
				"description": "Create Syslog Subscription Endpoint for list of registered events",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateSyslogEventSubscription"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateSyslogEventSubscriptionResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getSyslogEventSubscriptions",
				"tags": [
					"Event Management"
				],
				"summary": "Get Syslog Event Subscriptions",
				"description": "Gets the list of Syslog Subscriptions's based on provided offset and limit",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "eventIds",
						"description": "List of subscriptions related to the respective eventIds (Comma separated event ids)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of Subscriptions's to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of Subscriptions's to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "domain",
						"description": "List of subscriptions related to the respective domain",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "subDomain",
						"description": "List of subscriptions related to the respective sub-domain",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "category",
						"description": "List of subscriptions related to the respective category",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "List of subscriptions related to the respective type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "List of subscriptions related to the respective name",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSyslogEventSubscriptionsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/system/api/v1/user": {
			"post": {
				"operationId": "addUserAPI",
				"tags": [
					"User and Roles"
				],
				"summary": "Add user API",
				"description": "Add a new user for Cisco DNA Center System.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddUserAPIRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "User is created successfully",
						"schema": {
							"$ref": "#/definitions/AddUserAPIResponse"
						}
					},
					"400": {
						"description": "Bad request"
					},
					"409": {
						"description": "User already exists with the given username"
					},
					"500": {
						"description": "Error while creating the user"
					}
				}
			},
			"get": {
				"operationId": "getUsersAPI",
				"tags": [
					"User and Roles"
				],
				"summary": "Get users API",
				"description": "Get all users for the Cisco DNA Center System.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "invokeSource",
						"description": "The source that invokes this API. The value of this query parameter must be set to \"external\".",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "authSource",
						"description": "The source that authenticates the user. The value of this query parameter can be set to \"internal\" or \"external\". If not provided, then all users will be returned in the response.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Return all available DNA Center users",
						"schema": {
							"$ref": "#/definitions/GetUsersAPIResponse"
						}
					},
					"400": {
						"description": "Please provide valid query parameter-\"invokeSource\""
					},
					"401": {
						"description": "Unauthorised user operation"
					}
				}
			},
			"put": {
				"operationId": "updateUserAPI",
				"tags": [
					"User and Roles"
				],
				"summary": "Update user API",
				"description": "Update a user for Cisco DNA Center System.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateUserAPIRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "User is updated successfully",
						"schema": {
							"$ref": "#/definitions/UpdateUserAPIResponse"
						}
					},
					"400": {
						"description": "Bad request"
					},
					"404": {
						"description": "User with the given Id is not found"
					},
					"500": {
						"description": "Error while updating the user"
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{deviceId}/stack": {
			"get": {
				"operationId": "getStackDetailsForDevice",
				"tags": [
					"Devices"
				],
				"summary": "Get Stack Details for Device",
				"description": "Retrieves complete stack details for given device ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/StackDTOResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/ospf": {
			"get": {
				"operationId": "getOSPFInterfaces",
				"tags": [
					"Devices"
				],
				"summary": "Get OSPF interfaces",
				"description": "Returns the interfaces that has OSPF enabled",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/networkDevices/{deviceId}/interfaces/query": {
			"post": {
				"operationId": "getDeviceInterfaceStatsInfo",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Interface Stats Info",
				"description": "This API returns the Interface Stats for the given Device Id. Please refer to the Feature tab for the Request Body usage and the API filtering support.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AnalyticsRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "deviceId",
						"description": "Network Device Id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceInterfaceStatsInfoResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/qos-device-interface-info-count": {
			"get": {
				"operationId": "getQosDeviceInterfaceInfoCount",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Qos Device Interface Info Count",
				"description": "Get the number of all existing qos device interface infos group by network device id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetQosDeviceInterfaceInfoCountResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/events/count": {
			"get": {
				"operationId": "countOfEvents",
				"tags": [
					"Event Management"
				],
				"summary": "Count of Events",
				"description": "Get the count of registered events with provided eventIds or tags as mandatory",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "eventId",
						"description": "The registered EventId should be provided",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "tags",
						"description": "The registered Tags should be provided",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountOfEventsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-workflow/count": {
			"get": {
				"operationId": "getWorkflowCount",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get Workflow Count",
				"description": "Returns the workflow count",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "Workflow Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetWorkflowCountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/user-defined-field/{id}": {
			"delete": {
				"operationId": "deleteUser-Defined-Field",
				"tags": [
					"Devices"
				],
				"summary": "Delete User-Defined-Field",
				"description": "Deletes an existing Global User-Defined-Field using it's id.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "UDF id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteUserDefinedFieldResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateUser-Defined-Field",
				"tags": [
					"Devices"
				],
				"summary": "Update User-Defined-Field",
				"description": "Updates an existing global User Defined Field, using it's id.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateUserDefinedFieldRequest"
						},
						"in": "body"
					},
					{
						"name": "id",
						"description": "UDF id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateUserDefinedFieldResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-health": {
			"get": {
				"operationId": "getOverallNetworkHealth",
				"tags": [
					"Topology"
				],
				"summary": "Get Overall Network Health",
				"description": "Returns Overall Network Health information by Device category (Access, Distribution, Core, Router, Wireless) for any given point of time",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "timestamp",
						"description": "UTC timestamp of network health data in milliseconds",
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetOverallNetworkHealthResponse"
						}
					},
					"400": {
						"description": " The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": " The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "This user is forbidden to access this resource."
					},
					"404": {
						"description": " The client made a request for a resource that does not exist."
					},
					"500": {
						"description": " The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/global-credential/{globalCredentialId}": {
			"put": {
				"operationId": "updateGlobalCredentials",
				"tags": [
					"Discovery"
				],
				"summary": "Update global credentials",
				"description": "Update global credential for network devices in site(s)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SitesInfoDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "globalCredentialId",
						"description": "Global credential Uuid",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "deleteGlobalCredentialsById",
				"tags": [
					"Discovery"
				],
				"summary": "Delete global credentials by Id",
				"description": "Deletes global credential for the given ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "globalCredentialId",
						"description": "ID of global-credential",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/application-policy-application-set-count": {
			"get": {
				"operationId": "getApplicationSetCount",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Application Set Count",
				"description": "Get the number of all existing application sets",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scalableGroupType",
						"description": "Scalable group type to retrieve, valid value APPLICATION_GROUP",
						"default": "APPLICATION_GROUP",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ResponseCount"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/system/api/v1/roles": {
			"get": {
				"operationId": "getRolesAPI",
				"tags": [
					"User and Roles"
				],
				"summary": "Get roles API",
				"description": "Get all roles for the Cisco DNA Center System.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "invokeSource",
						"description": "The source that invokes this API. The value of this header must be set to \"external\".",
						"default": "external",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "Return all available DNA Center roles",
						"schema": {
							"$ref": "#/definitions/dnacsystemrole"
						}
					},
					"400": {
						"description": "Please provide valid header parameter-\"invokeSource\""
					},
					"401": {
						"description": "Unauthorised user operation"
					}
				}
			}
		},
		"/dna/intent/api/v1/flow-analysis/{flowAnalysisId}": {
			"get": {
				"operationId": "retrievesPreviousPathtrace",
				"tags": [
					"Path Trace"
				],
				"summary": "Retrieves previous Pathtrace",
				"description": "Returns result of a previously requested flow analysis by its Flow Analysis id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "flowAnalysisId",
						"description": "Flow analysis request id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/PathResponseResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "No correspoding flow analysis result for requested Id"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "deletesPathtraceById",
				"tags": [
					"Path Trace"
				],
				"summary": "Deletes Pathtrace by Id",
				"description": "Deletes a flow analysis request by its id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "flowAnalysisId",
						"description": "Flow analysis request id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/system/api/v1/event/artifact": {
			"get": {
				"operationId": "getEventArtifacts",
				"tags": [
					"Event Management"
				],
				"summary": "Get EventArtifacts",
				"description": "Gets the list of artifacts based on provided offset and limit",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "eventIds",
						"description": "List of eventIds",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "tags",
						"description": "Tags defined",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Record start offset",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "# of records to return in result set",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Sort by field",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "sorting order (asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "search",
						"description": "findd matches in name, description, eventId, type, category",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEventArtifactsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-settings": {
			"get": {
				"operationId": "getPnPGlobalSettings",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get PnP global settings",
				"description": "Returns global PnP settings of the user",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetPnPGlobalSettingsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updatePnPGlobalSettings",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Update PnP global settings",
				"description": "Updates the user's list of global PnP settings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Settings"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdatePnPGlobalSettingsResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/tag/count": {
			"get": {
				"operationId": "getTagCount",
				"tags": [
					"Tag"
				],
				"summary": "Get Tag Count",
				"description": "Returns tag count",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "tagName",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "nameSpace",
						"description": "nameSpace",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "attributeName",
						"description": "attributeName",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "size",
						"description": "size in kilobytes(KB)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "systemTag",
						"description": "systemTag",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v2/service-provider": {
			"put": {
				"operationId": "updateSPProfileV2",
				"tags": [
					"Network Settings"
				],
				"summary": "Update SP Profile V2",
				"description": "API to update Service Provider Profile (QoS).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateSPProfileVRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateSPProfileVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createSPProfileV2",
				"tags": [
					"Network Settings"
				],
				"summary": "Create SP Profile V2",
				"description": "API to create Service Provider Profile(QOS).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateSPProfileVRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateSPProfileVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getServiceProviderDetailsV2",
				"tags": [
					"Network Settings"
				],
				"summary": "Get Service Provider Details V2",
				"description": "API to get Service Provider details (QoS).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetServiceProviderDetailsVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/email-config": {
			"put": {
				"operationId": "updateEmailDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Update Email Destination",
				"description": "Update Email Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateEmailConfiguration"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateEmailDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createEmailDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Create Email Destination",
				"description": "Create Email Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateEmailConfiguration"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateEmailDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getEmailDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Get Email Destination",
				"description": "Get Email Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEmailDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/compliance/{deviceUuid}": {
			"get": {
				"operationId": "deviceComplianceStatus",
				"tags": [
					"Compliance"
				],
				"summary": "Device Compliance Status",
				"description": "Return compliance status of a device.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceUuid",
						"description": "Device Id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceComplianceStatusResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognises the authentication credentials, but the client is not authorised to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fullfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fullfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/functional-capability/{id}": {
			"get": {
				"operationId": "getFunctionalCapabilityById",
				"tags": [
					"Devices"
				],
				"summary": "Get Functional Capability by Id",
				"description": "Returns functional capability with given Id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Functional Capability UUID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/FunctionalCapabilityResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{id}/brief": {
			"get": {
				"operationId": "getDeviceSummary",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Summary",
				"description": "Returns brief summary of device info such as hostname, management IP address for the given device Id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceBriefNIOResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{id}/collection-schedule": {
			"get": {
				"operationId": "getPollingIntervalById",
				"tags": [
					"Devices"
				],
				"summary": "Get Polling Interval by Id",
				"description": "Returns polling interval by device id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-workflow": {
			"post": {
				"operationId": "addAWorkflow",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Add a Workflow",
				"description": "Adds a PnP Workflow along with the relevant tasks in the workflow into the PnP database",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Workflow"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddAWorkflowResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getWorkflows",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get Workflows",
				"description": "Returns the list of workflows based on filter criteria. If a limit is not specified, it will default to return 50 workflows. Pagination and sorting are also supported by this endpoint",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "limit",
						"description": "Limits number of results",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Index of first result",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "sort",
						"description": "Comma seperated lost of fields to sort on",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "sortOrder",
						"description": "Sort Order Ascending (asc) or Descending (des)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "Workflow Type",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"description": "Workflow Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetWorkflowsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/licenses/smartAccount/{smart_account_id}/virtualAccounts": {
			"get": {
				"operationId": "virtualAccountDetails",
				"tags": [
					"Licenses"
				],
				"summary": "Virtual Account Details",
				"description": "Get virtual account details of a smart account.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "smart_account_id",
						"description": "Id of smart account",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/VirtualAccountDetailsResponse"
						}
					},
					"202": {
						"description": "The request has been accepted for processing, but the processing has not been completed"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/event-series": {
			"get": {
				"operationId": "getNotifications",
				"tags": [
					"Event Management"
				],
				"summary": "Get Notifications",
				"description": "Get the list of Published Notifications",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "eventIds",
						"description": "The registered EventId should be provided",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "startTime",
						"description": "Start Time in milliseconds",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "End Time in milliseconds",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "category",
						"description": "Category",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "Type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "severity",
						"description": "Severity",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "domain",
						"description": "Domain",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "subDomain",
						"description": "Sub Domain",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "source",
						"description": "Source",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Start Offset",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "# of records",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Sort By column",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Ascending/Descending order [asc/desc]",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "tags",
						"description": "Tags",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "namespace",
						"description": "Namespace",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "siteId",
						"description": "Site Id",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetNotificationsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{id}/meraki-organization": {
			"get": {
				"operationId": "getOrganizationListForMeraki",
				"tags": [
					"Devices"
				],
				"summary": "Get Organization list for Meraki",
				"description": "Returns list of organizations for meraki dashboard",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SuccessResultList"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{networkDeviceId}/config": {
			"get": {
				"operationId": "getDeviceConfigById",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Config by Id",
				"description": "Returns the device config by specified device ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "networkDeviceId",
						"description": "networkDeviceId",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SuccessResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/isis": {
			"get": {
				"operationId": "getISISInterfaces",
				"tags": [
					"Devices"
				],
				"summary": "Get ISIS interfaces",
				"description": "Returns the interfaces that has ISIS enabled",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device-config/task": {
			"get": {
				"operationId": "getConfigTaskDetails",
				"tags": [
					"Compliance"
				],
				"summary": "Get config task details",
				"description": "Returns a config task result details by specified id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "parentTaskId",
						"description": "task Id",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetConfigTaskDetailsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"": {
						"description": ""
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/{interfaceUuid}": {
			"put": {
				"operationId": "updateInterfaceDetails",
				"tags": [
					"Devices"
				],
				"summary": "Update Interface details",
				"description": "Add/Update Interface description, VLAN membership, Voice VLAN and change Interface admin status ('UP'/'DOWN') from Request body.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateInterfaceDetailsRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "interfaceUuid",
						"description": "Interface ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "deploymentMode",
						"description": "Preview/Deploy ['Preview' means the configuration is not pushed to the device. 'Deploy' makes the configuration pushed to the device]",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateInterfaceDetailsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/diagnostics/system/performance/history": {
			"get": {
				"operationId": "systemPerformanceHistoricalAPI",
				"tags": [
					"Health and Performance"
				],
				"summary": "System Performance Historical API",
				"description": "This API retrieves the historical performance indicators . The data can be retrieved for the last 3 months.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "kpi",
						"description": "Fetch historical data for this kpi. Valid values: cpu,memory,network",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "startTime",
						"description": "This is the epoch start time in milliseconds from which performance indicator need to be fetched",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "This is the epoch end time in milliseconds upto which performance indicator need to be fetched",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SystemPerformanceHistoricalAPIResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"422": {
						"description": "The client sent a request with exceeding time range."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/{interfaceUuid}/legit-operation": {
			"get": {
				"operationId": "legitOperationsForInterface",
				"tags": [
					"Devices"
				],
				"summary": "Legit operations for interface",
				"description": "Get list of all properties & operations valid for an interface.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "interfaceUuid",
						"description": "Interface ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LegitOperationsForInterfaceResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/config/count": {
			"get": {
				"operationId": "getDeviceConfigCount",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Config Count",
				"description": "Returns the count of device configs",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/global-credential/http-read": {
			"put": {
				"operationId": "updateHTTPReadCredential",
				"tags": [
					"Discovery"
				],
				"summary": "Update HTTP read credential",
				"description": "Updates global HTTP Read credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/HTTPReadCredentialDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "createHTTPReadCredentials",
				"tags": [
					"Discovery"
				],
				"summary": "Create HTTP read credentials",
				"description": "Adds HTTP read credentials",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/HTTPReadCredentialDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/system/api/v1/role/permissions": {
			"get": {
				"operationId": "getPermissionsAPI",
				"tags": [
					"User and Roles"
				],
				"summary": "Get permissions API",
				"description": "Get permissions for a role from Cisco DNA Center System.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Return all available DNA Center resource types",
						"schema": {
							"$ref": "#/definitions/GetPermissionsAPIResponse"
						}
					},
					"401": {
						"description": "Unauthorised user operation"
					}
				}
			}
		},
		"/dna/data/api/v1/event/event-series/audit-logs": {
			"get": {
				"operationId": "getAuditLogRecords",
				"tags": [
					"Event Management"
				],
				"summary": "Get AuditLog Records",
				"description": "Get Audit Log Event instances from the Event-Hub ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "parentInstanceId",
						"description": "Parent Audit Log record's instanceID.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "instanceId",
						"description": "InstanceID of the Audit Log.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Audit Log notification event name.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "eventId",
						"description": "Audit Log notification's event ID. ",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "category",
						"description": "Audit Log notification's event category. Supported values: INFO, WARN, ERROR, ALERT, TASK_PROGRESS, TASK_FAILURE, TASK_COMPLETE, COMMAND, QUERY, CONVERSATION",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "severity",
						"description": "Audit Log notification's event severity. Supported values: 1, 2, 3, 4, 5.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "domain",
						"description": "Audit Log notification's event domain.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "subDomain",
						"description": "Audit Log notification's event sub-domain.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "source",
						"description": "Audit Log notification's event source.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "userId",
						"description": "Audit Log notification's event userId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "context",
						"description": "Audit Log notification's event correlationId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "eventHierarchy",
						"description": "Audit Log notification's event eventHierarchy. Example: \"US.CA.San Jose\" OR \"US.CA\" OR \"CA.San Jose\" - Delimiter for hierarchy separation is \".\".",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "siteId",
						"description": "Audit Log notification's siteId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "deviceId",
						"description": "Audit Log notification's deviceId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "isSystemEvents",
						"description": "Parameter to filter system generated audit-logs.",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "description",
						"description": "String full/partial search - (Provided input string is case insensitively matched for records).",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Position of a particular Audit Log record in the data. ",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of Audit Log records to be returned per page.",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "startTime",
						"description": "Start Time in milliseconds since Epoch Eg. 1597950637211 (when provided endTime is mandatory)",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "End Time in milliseconds since Epoch Eg. 1597961437211 (when provided startTime is mandatory)",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Sort the Audit Logs by certain fields. Supported values are event notification header attributes.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Order of the sorted Audit Log records. Default value is desc by timestamp. Supported values: asc, desc.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAuditLogRecordsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/template/{templateId}": {
			"get": {
				"operationId": "getsDetailsOfAGivenTemplate",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Gets details of a given template",
				"description": "Details of the template by its id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "templateId",
						"description": "TemplateId(UUID) to get details of the template",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "latestVersion",
						"description": "latestVersion flag to get the latest versioned template",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplateDTO"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "deletesTheTemplate",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Deletes the template",
				"description": "Deletes the template by its id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "templateId",
						"description": "templateId(UUID) of template to be deleted",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/licenses/smartAccount/virtualAccount/deregister": {
			"put": {
				"operationId": "deviceDeregistration",
				"tags": [
					"Licenses"
				],
				"summary": "Device Deregistration",
				"description": "Deregister device(s) from CSSM(Cisco Smart Software Manager).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DeviceDeregistrationRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceDeregistrationResponse"
						}
					},
					"202": {
						"description": "The request has been accepted for processing, but the processing has not been completed"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{deviceUuid}/poe": {
			"get": {
				"operationId": "pOEDetails",
				"tags": [
					"Devices"
				],
				"summary": "POE details ",
				"description": "Returns POE details for device.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceUuid",
						"description": "uuid of the device",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/PoeDetailsResultDTO"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/module/count": {
			"get": {
				"operationId": "getModuleCount",
				"tags": [
					"Devices"
				],
				"summary": "Get Module count",
				"description": "Returns Module Count",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "deviceId",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "nameList",
						"description": "nameList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "vendorEquipmentTypeList",
						"description": "vendorEquipmentTypeList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "partNumberList",
						"description": "partNumberList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "operationalStateCodeList",
						"description": "operationalStateCodeList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/image/distribution": {
			"post": {
				"operationId": "triggerSoftwareImageDistribution",
				"tags": [
					"Software Image Management (SWIM)"
				],
				"summary": "Trigger software image distribution",
				"description": "Distributes a software image on a given device. Software image must be imported successfully into DNA Center before it can be distributed",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DistributeDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/project/{projectId}": {
			"delete": {
				"operationId": "deletesTheProject",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Deletes the project",
				"description": "Deletes the project by its id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"description": "projectId(UUID) of project to be deleted",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getsTheDetailsOfAGivenProject.",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Gets the details of a given project.",
				"description": "Get the details of the given project by its id.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"description": "projectId(UUID) of project to get project details",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ProjectDTO"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/data/reports/{reportId}/executions": {
			"get": {
				"operationId": "getAllExecutionDetailsForAGivenReport",
				"tags": [
					"Reports"
				],
				"summary": "Get all execution details for a given report",
				"description": "Get details of all executions for a given report",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportId",
						"description": "reportId of report",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/reportExecutions"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{deviceUuid}/supervisor-card": {
			"get": {
				"operationId": "getSupervisorCardDetail",
				"tags": [
					"Devices"
				],
				"summary": "Get Supervisor card detail",
				"description": "Get supervisor card detail for a given deviceuuid. Response will contain serial no, part no, switch no and slot no.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceUuid",
						"description": "instanceuuid of device",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "OK - List of supervisor card details or empty list if the device don't have any supervisor card",
						"schema": {
							"$ref": "#/definitions/GetSupervisorCardDetailResponse"
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Resource Not Found"
					}
				}
			}
		},
		"/dna/intent/api/v2/applications/{id}": {
			"delete": {
				"operationId": "deleteApplication",
				"tags": [
					"Application Policy"
				],
				"summary": "Delete Application",
				"description": "Delete existing custom application by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Id of custom application to delete",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/Response"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/licenses/device/count": {
			"get": {
				"operationId": "deviceCountDetails",
				"tags": [
					"Licenses"
				],
				"summary": "Device Count Details",
				"description": "Get total number of managed device(s).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "device_type",
						"description": "Type of device",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "registration_status",
						"description": "Smart license registration status of device",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "dna_level",
						"description": "Device Cisco DNA License Level",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "virtual_account_name",
						"description": "Virtual account name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "smart_account_id",
						"description": "Smart account id",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceCountDetailsResponse"
						}
					},
					"202": {
						"description": "The request has been accepted for processing, but the processing has not been completed"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/subscription/rest": {
			"post": {
				"operationId": "createRest/WebhookEventSubscription",
				"tags": [
					"Event Management"
				],
				"summary": "Create Rest/Webhook Event Subscription",
				"description": "Create Rest/Webhook Subscription Endpoint for list of registered events",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateRestWebhookEventSubscription"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateRestWebhookEventSubscriptionResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateRest/WebhookEventSubscription",
				"tags": [
					"Event Management"
				],
				"summary": "Update Rest/Webhook Event Subscription",
				"description": "Update Rest/Webhook Subscription Endpoint for list of registered events",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateRestWebhookEventSubscription"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Content Type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateRestWebhookEventSubscriptionResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "getRest/WebhookEventSubscriptions",
				"tags": [
					"Event Management"
				],
				"summary": "Get Rest/Webhook Event Subscriptions",
				"description": "Gets the list of Rest/Webhook Subscriptions's based on provided query params",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "eventIds",
						"description": "List of subscriptions related to the respective eventIds (Comma separated event ids)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of Subscriptions's to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of Subscriptions's to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "domain",
						"description": "List of subscriptions related to the respective domain",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "subDomain",
						"description": "List of subscriptions related to the respective sub-domain",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "category",
						"description": "List of subscriptions related to the respective category",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "List of subscriptions related to the respective type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "List of subscriptions related to the respective name",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetRestWebhookEventSubscriptionsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/lan-automation/log": {
			"get": {
				"operationId": "lANAutomationLog",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Log ",
				"description": "Invoke this API to get the LAN Automation session logs.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "offset",
						"description": "Starting index of the LAN Automation session. Minimum value is 1.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of LAN Automation sessions to be retrieved. Limit value can range between 1 to 10.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful and the result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LANAutomationLogResponse"
						}
					},
					"404": {
						"description": "The request was not acceptable as the input parameter was not available."
					}
				}
			}
		},
		"/dna/intent/api/v1/global-credential/cli": {
			"post": {
				"operationId": "createCLICredentials",
				"tags": [
					"Discovery"
				],
				"summary": "Create CLI credentials",
				"description": "Adds global CLI credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CLICredentialDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "updateCLICredentials",
				"tags": [
					"Discovery"
				],
				"summary": "Update CLI credentials",
				"description": "Updates global CLI credentials",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CLICredentialDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/lan-automation": {
			"post": {
				"operationId": "lANAutomationStart",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Start",
				"description": "Invoke this API to start LAN Automation for the given site.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LANAutomationStartRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/LANAutomationStartResponse"
						}
					},
					"202": {
						"description": "The request was accepted and the response contains the id of the new LAN Automation session."
					},
					"400": {
						"description": "The request was not acceptable due to error in the input parameter and the response contains information about the parameter error."
					},
					"406": {
						"description": "The request was not acceptable due to incorrect input value or invalid settings/config on the device. The response contains information about the error code, message and detail."
					},
					"500": {
						"description": "The request was not accepted due to internal error in the system and the response contains information about the error."
					}
				}
			}
		},
		"/dna/intent/api/v1/file/{fileId}": {
			"get": {
				"operationId": "downloadAFileByFileId",
				"tags": [
					"File"
				],
				"summary": "Download a file by fileId",
				"description": "Downloads a file specified by fileId",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "fileId",
						"description": "File Identification number",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DownloadAFileByFileIdResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/image/importation/golden/site/{siteId}/family/{deviceFamilyIdentifier}/role/{deviceRole}/image/{imageId}": {
			"get": {
				"operationId": "getGoldenTagStatusOfAnImage.",
				"tags": [
					"Software Image Management (SWIM)"
				],
				"summary": "Get Golden Tag Status of an Image.",
				"description": "Get golden tag status of an image. Set siteId as -1 for Global site.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Accept",
						"description": "MIME type / MIME subtype Consumed",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "siteId",
						"description": "Site Id in uuid format. Set siteId as -1 for Global site.",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "deviceFamilyIdentifier",
						"description": "Device family identifier e.g. : 277696480-283933147, e.g. : 277696480",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "deviceRole",
						"description": "Device Role. Permissible Values : ALL, UNKNOWN, ACCESS, BORDER ROUTER, DISTRIBUTION and CORE.",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "imageId",
						"description": "Image Id in uuid format.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/IsGoldenTaggedResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "removeGoldenTagForImage.",
				"tags": [
					"Software Image Management (SWIM)"
				],
				"summary": "Remove Golden Tag for image.",
				"description": "Remove golden tag. Set siteId as -1 for Global site.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Accept",
						"description": "MIME type / MIME subtype Consumed",
						"default": "application/json",
						"required": false,
						"type": "string",
						"in": "header"
					},
					{
						"name": "siteId",
						"description": "Site Id in uuid format. Set siteId as -1 for Global site.",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "deviceFamilyIdentifier",
						"description": "Device family identifier e.g. : 277696480-283933147, e.g. : 277696480",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "deviceRole",
						"description": "Device Role. Permissible Values : ALL, UNKNOWN, ACCESS, BORDER ROUTER, DISTRIBUTION and CORE.",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "imageId",
						"description": "Image Id in uuid format.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/template-programmer/project": {
			"get": {
				"operationId": "getProject(s)Details",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Get project(s) details",
				"description": "Get project(s) details",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Id of project to be searched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Name of project to be searched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Index of first result",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Limits number of results",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "sortOrder",
						"description": "Sort Order Ascending (asc) or Descending (dsc)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ProjectDTO"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{deviceId}/user-defined-field": {
			"delete": {
				"operationId": "removeUser-Defined-FieldFromDevice",
				"tags": [
					"Devices"
				],
				"summary": "Remove User-Defined-Field from device",
				"description": "Remove a User-Defined-Field from device. Name of UDF has to be passed as the query parameter. Please note that Global UDF will not be deleted by this operation.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "UUID of device from which UDF has to be removed",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "name",
						"description": "Name of UDF to be removed",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RemoveUserDefinedFieldFromDeviceResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "addUser-Defined-FieldToDevice",
				"tags": [
					"Devices"
				],
				"summary": "Add User-Defined-Field to device",
				"description": "Assigns an existing Global User-Defined-Field to a device. If the UDF is already assigned to the specific device, then it updates the device UDF value accordingly. Please note that the assigning UDF 'name' must be an existing global UDF. Otherwise error shall be shown.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddUserDefinedFieldToDeviceRequest"
						},
						"in": "body"
					},
					{
						"name": "deviceId",
						"description": "UUID of device to which UDF has to be added",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddUserDefinedFieldToDeviceResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/topology/site-topology": {
			"get": {
				"operationId": "getSiteTopology",
				"tags": [
					"Topology"
				],
				"summary": "Get Site Topology",
				"description": "Returns site topology",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SiteResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/maps/supported-access-points": {
			"get": {
				"operationId": "mapsSupportedAccessPoints",
				"tags": [
					"Sites"
				],
				"summary": "Maps Supported Access Points",
				"description": "Gets the list of supported access point types as well as valid antenna pattern names that can be used for each.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ApAntennaMapping"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/discovery/{id}/job": {
			"get": {
				"operationId": "getListOfDiscoveriesByDiscoveryId",
				"tags": [
					"Discovery"
				],
				"summary": "Get list of discoveries by discovery Id",
				"description": "Returns the list of discovery jobs for the given Discovery ID. The results can be optionally filtered based on IP. Discovery ID can be obtained using the \"Get Discoveries by range\" API.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "ipAddress",
						"description": "ipAddress",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DiscoveryJobNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/device-replacement/count": {
			"get": {
				"operationId": "returnReplacementDevicesCount",
				"tags": [
					"Device Replacement"
				],
				"summary": "Return replacement devices count",
				"description": "Get replacement devices count",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "replacementStatus",
						"description": "Device Replacement status list[READY-FOR-REPLACEMENT, REPLACEMENT-IN-PROGRESS, REPLACEMENT-SCHEDULED, REPLACED, ERROR]",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/licenses/smartAccount/virtualAccount/{virtual_account_name}/register": {
			"put": {
				"operationId": "deviceRegistration",
				"tags": [
					"Licenses"
				],
				"summary": "Device Registration",
				"description": "Register device(s) in CSSM(Cisco Smart Software Manager).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DeviceRegistrationRequest"
						},
						"in": "body"
					},
					{
						"name": "virtual_account_name",
						"description": "Name of virtual account",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceRegistrationResponse"
						}
					},
					"202": {
						"description": "The request has been accepted for processing, but the processing has not been completed"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/reset": {
			"post": {
				"operationId": "resetDevice",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Reset Device",
				"description": "Recovers a device from a Workflow Execution Error state",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ResetRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ResetDeviceResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/task/{taskId}": {
			"get": {
				"operationId": "getTaskById",
				"tags": [
					"Task"
				],
				"summary": "Get task by Id",
				"description": "Returns a task by specified id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "taskId",
						"description": "UUID of the Task",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskDTOResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "No task corresponding to the id was found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/vacct-sync": {
			"post": {
				"operationId": "syncVirtualAccountDevices",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Sync Virtual Account Devices",
				"description": "Synchronizes the device info from the given smart account & virtual account with the PnP database. The response payload returns a list of synced devices (Deprecated).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SAVAMapping"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SyncVirtualAccountDevicesResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/discovery/job": {
			"get": {
				"operationId": "getDiscoveryJobsByIP",
				"tags": [
					"Discovery"
				],
				"summary": "Get Discovery jobs by IP",
				"description": "Returns the list of discovery jobs for the given IP",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "ipAddress",
						"description": "ipAddress",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "name",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DiscoveryJobNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/lan-automation/status": {
			"get": {
				"operationId": "lANAutomationStatus",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Status",
				"description": "Invoke this API to get the LAN Automation session status. ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "offset",
						"description": "Starting index of the LAN Automation session. Minimum value is 1.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of LAN Automation sessions to be retrieved. Limit value can range between 1 to 10.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful and the result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LANAutomationStatusResponse"
						}
					},
					"404": {
						"description": "The request was not acceptable as the input parameter was not available. "
					}
				}
			}
		},
		"/dna/data/api/v1/event/event-series/audit-log/parent-records": {
			"get": {
				"operationId": "getAuditLogParentRecords",
				"tags": [
					"Event Management"
				],
				"summary": "Get AuditLog Parent Records",
				"description": "Get Parent Audit Log Event instances from the Event-Hub ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "instanceId",
						"description": "InstanceID of the Audit Log.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Audit Log notification event name.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "eventId",
						"description": "Audit Log notification's event ID. ",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "category",
						"description": "Audit Log notification's event category. Supported values: INFO, WARN, ERROR, ALERT, TASK_PROGRESS, TASK_FAILURE, TASK_COMPLETE, COMMAND, QUERY, CONVERSATION",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "severity",
						"description": "Audit Log notification's event severity. Supported values: 1, 2, 3, 4, 5.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "domain",
						"description": "Audit Log notification's event domain.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "subDomain",
						"description": "Audit Log notification's event sub-domain.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "source",
						"description": "Audit Log notification's event source.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "userId",
						"description": "Audit Log notification's event userId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "context",
						"description": "Audit Log notification's event correlationId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "eventHierarchy",
						"description": "Audit Log notification's event eventHierarchy. Example: \"US.CA.San Jose\" OR \"US.CA\" OR \"CA.San Jose\" - Delimiter for hierarchy separation is \".\".",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "siteId",
						"description": "Audit Log notification's siteId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "deviceId",
						"description": "Audit Log notification's deviceId.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "isSystemEvents",
						"description": "Parameter to filter system generated audit-logs.",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "description",
						"description": "String full/partial search - (Provided input string is case insensitively matched for records).",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Position of a particular Audit Log record in the data. ",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of Audit Log records to be returned per page.",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "startTime",
						"description": "Start Time in milliseconds since Epoch Eg. 1597950637211 (when provided endTime is mandatory)",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "End Time in milliseconds since Epoch Eg. 1597961437211 (when provided startTime is mandatory)",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Sort the Audit Logs by certain fields. Supported values are event notification header attributes.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Order of the sorted Audit Log records. Default value is desc by timestamp. Supported values: asc, desc.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAuditLogParentRecordsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{deviceUuid}/interface/{interfaceUuid}/neighbor": {
			"get": {
				"operationId": "getConnectedDeviceDetail",
				"tags": [
					"Devices"
				],
				"summary": "Get connected device detail",
				"description": "Get connected device detail for given deviceUuid and interfaceUuid",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceUuid",
						"description": "instanceuuid of Device",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "interfaceUuid",
						"description": "instanceuuid of interface",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "OK - List of connected device if any",
						"schema": {
							"$ref": "#/definitions/NeighborResult"
						}
					},
					"404": {
						"description": "Resource Not Found"
					}
				}
			}
		},
		"/dna/intent/api/v1/discovery/{id}/network-device/count": {
			"get": {
				"operationId": "getDevicesDiscoveredById",
				"tags": [
					"Discovery"
				],
				"summary": "Get Devices discovered by Id",
				"description": "Returns the count of network devices discovered in the given discovery. Discovery ID can be obtained using the \"Get Discoveries by range\" API.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "taskId",
						"description": "taskId",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/discovery/{id}/network-device/{startIndex}/{recordsToReturn}": {
			"get": {
				"operationId": "getDiscoveredDevicesByRange",
				"tags": [
					"Discovery"
				],
				"summary": "Get Discovered devices by range",
				"description": "Returns the network devices discovered for the given discovery and for the given range. The maximum number of records that can be retrieved is 500. Discovery ID can be obtained using the \"Get Discoveries by range\" API.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "startIndex",
						"description": "Start index",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "recordsToReturn",
						"description": "Number of records to return",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "taskId",
						"description": "taskId",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/system/api/v1/auth/token": {
			"post": {
				"operationId": "authenticationAPI",
				"tags": [
					"Authentication"
				],
				"summary": "Authentication API",
				"description": "API to obtain an access token, which remains valid for 1 hour. The token obtained using this API is required to be set as value to the X-Auth-Token HTTP Header for all API calls to Cisco DNA Center.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "Authorization",
						"description": "API supports both Basic auth and AES key encryption as Authorization token in header. AES key encryption is optional and can be enabled under DNAC System configuration. For Basic Auth: Authorization header is Base64 encoded string of \"username:password\", For example Authorization header will contain “Basic YWRtaW46TWFnbGV2MTIz”, where YWRtaW46TWFnbGV2MTIz is the Base64 encoded string. For AES key encryption, Authorization header is Base64 encoded string of AES key. For example Authorization header will contain \"CSCO-AES-256 credentials=2k/wGz48lp3ma9sM+2xiyQ==\", where \"2k/wGz48lp3ma9sM+2xiyQ==\" is base64 encoded string of 256 bits AES key encrypted \"username:password\".",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Token Generation",
						"schema": {
							"$ref": "#/definitions/AuthenticationAPIResponse"
						}
					},
					"401": {
						"description": "Invalid Credentials "
					}
				}
			}
		},
		"/dna/intent/api/v1/site-member/{id}/member": {
			"get": {
				"operationId": "getDevicesThatAreAssignedToASite",
				"tags": [
					"Sites"
				],
				"summary": "Get devices that are assigned to a site",
				"description": "API to get devices that are assigned to a site.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Site Id",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "offset",
						"description": "Offset/starting index for pagination",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of devices to be listed. Default and max supported value is 500",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "memberType",
						"description": "Member type (This API only supports the 'networkdevice' type)",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "level",
						"description": "Depth of site hierarchy to be considered to list the devices. If the provided value is -1, devices for all child sites will be listed.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDevicesThatAreAssignedToASiteResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/project/{projectId}/template": {
			"post": {
				"operationId": "createTemplate",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Create Template",
				"description": "API to create a template by project id.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplateDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "projectId",
						"description": "UUID of the project in which the template needs to be created",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the prooogress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/system/api/v1/users/external-servers": {
			"get": {
				"operationId": "getExternalAuthenticationServersAPI",
				"tags": [
					"User and Roles"
				],
				"summary": "Get external authentication servers API",
				"description": "Get external users authentication servers.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "invokeSource",
						"description": "The source that invokes this API. The value of this query parameter must be set to \"external\".",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Return all available DNA Center external servers",
						"schema": {
							"$ref": "#/definitions/GetExternalAuthenticationServersAPIResponse"
						}
					},
					"400": {
						"description": "Please provide valid query parameter-\"invokeSource\""
					},
					"401": {
						"description": "Unauthorised user operation"
					},
					"500": {
						"description": "Error while finding all aaa-servers"
					}
				}
			}
		},
		"/dna/intent/api/v1/app-policy-intent": {
			"post": {
				"operationId": "applicationPolicyIntent",
				"tags": [
					"Application Policy"
				],
				"summary": "Application Policy Intent",
				"description": "Create/Update/Delete application policy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ApplicationPolicyIntentRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "content-type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ApplicationPolicyIntentResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/lan-automation/count": {
			"get": {
				"operationId": "lANAutomationSessionCount",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Session Count",
				"description": "Invoke this API to get the total count of LAN Automation sessions.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful and the result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LANAutomationSessionCountResponse"
						}
					}
				}
			}
		},
		"/dna/intent/api/v2/template-programmer/template": {
			"get": {
				"operationId": "getTemplate(s)Details",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Get template(s) details",
				"description": "Get template(s) details",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Id of template to be searched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Name of template to be searched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "projectId",
						"description": "Filter template(s) based on project id",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "projectName",
						"description": "Filter template(s) based on project name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "softwareType",
						"description": "Filter template(s) based software type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "softwareVersion",
						"description": "Filter template(s) based softwareVersion",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "productFamily",
						"description": "Filter template(s) based on device family",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "productSeries",
						"description": "Filter template(s) based on device series",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "productType",
						"description": "Filter template(s) based on device type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "filterConflictingTemplates",
						"description": "Filter template(s) based on confliting templates",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "tags",
						"description": "Filter template(s) based on tags",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "unCommitted",
						"description": "Return uncommitted template",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "sortOrder",
						"description": "Sort Order Ascending (asc) or Descending (dsc)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "allTemplateAttributes",
						"description": "Return all template attributes",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "includeVersionDetails",
						"description": "Include template version details",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Index of first result",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Limits number of results",
						"required": false,
						"type": "integer",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplateDTO"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/accesspoint-configuration/summary": {
			"get": {
				"operationId": "getAccessPointConfiguration",
				"tags": [
					"Wireless"
				],
				"summary": "Get Access Point Configuration",
				"description": "Users can query the access point configuration information per device using the ethernet MAC address",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "key",
						"description": "The ethernet MAC address of Access point",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAccessPointConfigurationResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/insight/{siteId}/insecure-connection": {
			"get": {
				"operationId": "returnsDevicesAddedToCiscoDNACenterWithSnmpV3DES.",
				"tags": [
					"Devices"
				],
				"summary": "Returns devices added to Cisco DNA center with snmp v3 DES.",
				"description": "Returns devices added to Cisco DNA center with snmp v3 DES, where siteId is mandatory & accepts offset, limit, sortby, order which are optional.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "siteId",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "offset",
						"description": "Row Number.  Default value is 1",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Default value is 500",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Sort By",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Order",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The Request is successful . The result is contained in the response body",
						"schema": {
							"$ref": "#/definitions/ReturnsDevicesAddedToCiscoDNACenterWithSnmpVDESResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand(for example, the request syntax is not correct)"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid"
					},
					"404": {
						"description": "The client made a request for the resource which does not exist"
					},
					"503": {
						"description": "The server is (temporarily) unavailable"
					},
					"504": {
						"description": "The server did not respond inside timed restrictions and timed-out"
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{deviceid}/management-address": {
			"put": {
				"operationId": "updateDeviceManagementAddress",
				"tags": [
					"Devices"
				],
				"summary": "Update Device Management Address",
				"description": "This is a simple PUT API to edit the management IP Address of the device.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateDeviceManagementAddressRequest"
						},
						"in": "body"
					},
					{
						"name": "deviceid",
						"description": "The UUID of the device whose management IP address is to be updated.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateDeviceManagementAddressResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/maps/import/start": {
			"post": {
				"operationId": "importMapArchive-StartImport",
				"tags": [
					"Sites"
				],
				"summary": "Import Map Archive - Start Import",
				"description": "Initiates a map archive import of a tar.gz file.  The archive must consist of one xmlDir/MapsImportExport.xml map descriptor file, and 1 or more images for the map areas nested under /images folder.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "multipart/form-data",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/ImportMapArchiveStartImportResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed. Use the returned Import Context UUID to poll for the processing result from the Import Map Archive - Import Status API"
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/topology/physical-topology": {
			"get": {
				"operationId": "getPhysicalTopology",
				"tags": [
					"Topology"
				],
				"summary": "Get Physical Topology",
				"description": "Returns the raw physical topology by specified criteria of nodeType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "nodeType",
						"description": "nodeType",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TopologyResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/lan-automation/log/{id}/{serialNumber}": {
			"get": {
				"operationId": "lANAutomationLogsForIndividualDevices",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Logs for Individual Devices",
				"description": "Invoke this API to get the LAN Automation session logs for individual devices based on the given LAN Automation session id and device serial number. ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "LAN Automation session identifier.",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "serialNumber",
						"description": "Device serial number.",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "logLevel",
						"description": "Supported levels are ERROR, INFO, WARNING, TRACE, CONFIG and ALL. Specifying ALL will display device specific logs with the exception of CONFIG logs. In order to view CONFIG logs along with the remaining logs, please leave the query parameter blank.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful and the result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LANAutomationLogsForIndividualDevicesResponse"
						}
					},
					"404": {
						"description": "The request was not acceptable as the input parameter was not available."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/template/exporttemplates": {
			"post": {
				"operationId": "exportsTheTemplatesForAGivenCriteria.",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Exports the templates for a given criteria.",
				"description": "Exports the templates for given templateIds.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ExportsTheTemplatesForAGivenCriteriaRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/buildings/{buildingId}/planned-access-points": {
			"get": {
				"operationId": "getPlannedAccessPointsForBuilding",
				"tags": [
					"Devices"
				],
				"summary": "Get Planned Access Points for Building",
				"description": "Provides a list of Planned Access Points for the Building it is requested for",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "buildingId",
						"description": "Building Id",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "radios",
						"description": "inlcude planned radio details",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/GetPlannedAccessPointsForBuildingResponse"
						}
					},
					"404": {
						"description": "requested building id is not found"
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/config": {
			"get": {
				"operationId": "getDeviceConfigForAllDevices",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Config for all devices",
				"description": "Returns the config for all devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RawCliInfoNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/system/api/v1/event/artifact/count": {
			"get": {
				"operationId": "eventArtifactCount",
				"tags": [
					"Event Management"
				],
				"summary": "EventArtifact Count",
				"description": "Get the count of registered event artifacts with provided eventIds or tags as mandatory",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/EventArtifactCountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/{id}": {
			"get": {
				"operationId": "getInterfaceById",
				"tags": [
					"Devices"
				],
				"summary": "Get Interface by Id",
				"description": "Returns the interface for the given interface ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Interface ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/topology/l2/{vlanID}": {
			"get": {
				"operationId": "getTopologyDetails",
				"tags": [
					"Topology"
				],
				"summary": "Get topology details",
				"description": "Returns Layer 2 network topology by specified VLAN ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "vlanID",
						"description": "Vlan Name for e.g Vlan1, Vlan23 etc",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TopologyResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/network-device/{deviceId}": {
			"get": {
				"operationId": "getInterfaceInfoById",
				"tags": [
					"Devices"
				],
				"summary": "Get Interface info by Id",
				"description": "Returns list of interfaces by specified device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/image/importation/source/url": {
			"post": {
				"operationId": "importSoftwareImageViaURL",
				"tags": [
					"Software Image Management (SWIM)"
				],
				"summary": "Import software image via URL",
				"description": "Fetches a software image from remote file system (using URL for HTTP/FTP) and uploads to DNA Center. Supported image files extensions are bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ImageImportFromUrlDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "scheduleAt",
						"description": "Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional) ",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "scheduleDesc",
						"description": "Custom Description (Optional)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "scheduleOrigin",
						"description": "Originator of this call (Optional)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/system/api/v1/event/config/connector-types": {
			"get": {
				"operationId": "getConnectorTypes",
				"tags": [
					"Event Management"
				],
				"summary": "Get Connector Types",
				"description": "Get the list of connector types",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetConnectorTypesResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/licenses/smartAccounts": {
			"get": {
				"operationId": "smartAccountDetails",
				"tags": [
					"Licenses"
				],
				"summary": "Smart Account Details",
				"description": "Get detail of all smart accounts.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SmartAccountDetailsResponse"
						}
					},
					"202": {
						"description": "The request has been accepted for processing, but the processing has not been completed"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/dnacaap/management/execution-status/{executionId}": {
			"get": {
				"operationId": "getBusinessAPIExecutionDetails",
				"tags": [
					"Task"
				],
				"summary": "Get Business API Execution Details",
				"description": "Retrieves the execution details of a Business API",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "executionId",
						"description": "Execution Id of API",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. Response contains the execution details of the Business API for the given Execution Id.",
						"schema": {
							"$ref": "#/definitions/GetBusinessAPIExecutionDetailsResponse"
						}
					},
					"404": {
						"description": "The request was successful but no execution details was found for the given Execution Id."
					}
				}
			}
		},
		"/dna/intent/api/v1/lan-automation/sessions": {
			"get": {
				"operationId": "lANAutomationActiveSessions",
				"tags": [
					"LAN Automation"
				],
				"summary": "LAN Automation Active Sessions",
				"description": "Invoke this API to get the LAN Automation active session information",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful and the result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LANAutomationActiveSession"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand(for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside the time restrictions and timed-out"
					}
				}
			}
		},
		"/dna/intent/api/v1/topology/l3/{topologyType}": {
			"get": {
				"operationId": "getL3TopologyDetails",
				"tags": [
					"Topology"
				],
				"summary": "Get L3 Topology Details",
				"description": "Returns the Layer 3 network topology by routing protocol",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "topologyType",
						"description": "Type of topology(OSPF,ISIS,etc)",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TopologyResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/application-policy-application-set/{id}": {
			"delete": {
				"operationId": "deleteApplicationSet",
				"tags": [
					"Application Policy"
				],
				"summary": "Delete Application Set",
				"description": "Delete existing custom application set by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Id of custom application set to delete",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/Response"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/device-reboot/apreboot/status": {
			"get": {
				"operationId": "getAccessPointRebootTaskResult",
				"tags": [
					"Wireless"
				],
				"summary": "Get Access Point Reboot task result",
				"description": "Users can query the access point reboot status using this intent API",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "parentTaskId",
						"description": "task id of ap reboot request",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/GetAccessPointRebootTaskResultResponse"
						}
					}
				}
			}
		},
		"/dna/intent/api/v1/tag/{id}/member/{memberId}": {
			"delete": {
				"operationId": "removeTagMember",
				"tags": [
					"Tag"
				],
				"summary": "Remove Tag member",
				"description": "Removes Tag member from the tag specified by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Tag ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "memberId",
						"description": "TagMember id to be removed from tag",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					},
					"default": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/tenantinfo/macaddress": {
			"get": {
				"operationId": "getDevicesRegisteredForWSANotification",
				"tags": [
					"Devices"
				],
				"summary": "Get Devices registered for WSA Notification",
				"description": "It fetches devices which are registered to receive WSA notifications. The device serial number and/or MAC address are required to be provided as query parameters.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "serialNumber",
						"description": "Serial number of the device",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "macaddress",
						"description": "Mac addres of the device",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RegisterNetworkDeviceResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface/ip-address/{ipAddress}": {
			"get": {
				"operationId": "getInterfaceByIP",
				"tags": [
					"Devices"
				],
				"summary": "Get Interface by IP",
				"description": "Returns list of interfaces for specified device management IP address",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ipAddress",
						"description": "IP address of the interface",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/device-detail": {
			"get": {
				"operationId": "getDeviceDetail",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Detail",
				"description": "Returns detailed Network Device information retrieved by Mac Address, Device Name or UUID for any given point of time. ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "timestamp",
						"description": "UTC timestamp of device data in milliseconds",
						"type": "number",
						"in": "query"
					},
					{
						"name": "identifier",
						"description": "One of \"macAddress\", \"nwDeviceName\", \"uuid\" (case insensitive)",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "searchBy",
						"description": "MAC Address, device name, or UUID of the network device",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceDetailResponse"
						}
					},
					"400": {
						"description": " The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": " The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "This user is forbidden to access this resource."
					},
					"404": {
						"description": " The client made a request for a resource that does not exist."
					},
					"500": {
						"description": " The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/site-config-preview": {
			"post": {
				"operationId": "previewConfig",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Preview Config",
				"description": "Triggers a preview for site-based Day 0 Configuration",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SiteProvisionRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/DayZeroConfigPreviewResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/brief": {
			"put": {
				"operationId": "updateDeviceRole",
				"tags": [
					"Devices"
				],
				"summary": "Update Device role",
				"description": "Updates the role of the device as access, core, distribution, border router",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NetworkDeviceBriefNIO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/system/api/v1/role/{roleId}": {
			"delete": {
				"operationId": "deleteRoleAPI",
				"tags": [
					"User and Roles"
				],
				"summary": "Delete role API",
				"description": "Delete a role in Cisco DNA Center System",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "roleId",
						"description": "The Id of the role to be deleted",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "Role deleted successfully",
						"schema": {
							"$ref": "#/definitions/DeleteRoleAPIResponse"
						}
					},
					"400": {
						"description": "Role Id provided is not valid"
					},
					"404": {
						"description": "Role not found"
					},
					"412": {
						"description": "Role is associated with at least one user"
					},
					"500": {
						"description": "Failed to delete role"
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/ip-address/{ipAddress}": {
			"get": {
				"operationId": "getNetworkDeviceByIP",
				"tags": [
					"Devices"
				],
				"summary": "Get Network Device by IP",
				"description": "Returns the network device by specified IP address",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ipAddress",
						"description": "Device IP address",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/licenses/smartAccount/{smart_account_id}/virtualAccount/{virtual_account_name}/device/transfer": {
			"post": {
				"operationId": "changeVirtualAccount",
				"tags": [
					"Licenses"
				],
				"summary": "Change Virtual Account",
				"description": "Transfer device(s) from one virtual account to another within same smart account.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ChangeVirtualAccountRequest"
						},
						"in": "body"
					},
					{
						"name": "smart_account_id",
						"description": "Id of smart account",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "virtual_account_name",
						"description": "Name of target virtual account",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ChangeVirtualAccountResponse"
						}
					},
					"202": {
						"description": "The request has been accepted for processing, but the processing has not been completed"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/claim": {
			"post": {
				"operationId": "claimDevice",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Claim Device",
				"description": "Claims one of more devices with specified workflow",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ClaimDeviceRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ClaimDeviceResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/nodes-config": {
			"get": {
				"operationId": "ciscoDNACenterNodesConfigurationSummary",
				"tags": [
					"Platform"
				],
				"summary": "Cisco DNA Center Nodes Configuration Summary",
				"description": "Provides details about the current Cisco DNA Center node configuration, such as API version, node name, NTP server, intracluster link, LACP mode, network static routes, DNS server, subnet mask, host IP, default gateway, and interface information. ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CiscoDNACenterNodesConfigurationSummaryResponse"
						}
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "Because the server did not respond in time, the response timed out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/serial-number/{serialNumber}": {
			"get": {
				"operationId": "getDeviceBySerialNumber",
				"tags": [
					"Devices"
				],
				"summary": "Get Device by Serial number",
				"description": "Returns the network device if the given serial number matches with any of the serial numbers collected.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "serialNumber",
						"description": "Device serial number",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/data/reports/{reportId}/executions/{executionId}": {
			"get": {
				"operationId": "downloadReportContent",
				"tags": [
					"Reports"
				],
				"summary": "Download report content",
				"description": "Returns report content. Save the response to a file by converting the response data as a blob and setting the file format available from content-disposition response header.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportId",
						"description": "reportId of report",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "executionId",
						"description": "executionId of report execution",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DownloadReportContentResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/ise-integration-status": {
			"get": {
				"operationId": "ciscoISEServerIntegrationStatus",
				"tags": [
					"System Settings"
				],
				"summary": "Cisco ISE Server Integration Status",
				"description": "API to check Cisco ISE server integration status.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CiscoISEServerIntegrationStatusResponse"
						}
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/compliance/count": {
			"get": {
				"operationId": "getComplianceStatusCount",
				"tags": [
					"Compliance"
				],
				"summary": "Get Compliance Status Count",
				"description": "Return Compliance Status Count",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "complianceStatus",
						"description": "Specify \"Compliance status(es)\" separated by commas. The Compliance status can be 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS', 'NOT_AVAILABLE', 'NOT_APPLICABLE', 'ERROR'.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetComplianceStatusCountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/maps/import/{importContextUuid}/status": {
			"get": {
				"operationId": "importMapArchive-ImportStatus",
				"tags": [
					"Sites"
				],
				"summary": "Import Map Archive - Import Status",
				"description": "Gets the status of a map archive import operation. For a map archive import that has just been initiated, will provide the result of validation of the archive and a pre-import preview of what will be performed if the import is performed.  Once an import is requested to be performed, this API will give the status of the import and upon completion a post-import summary of what was performed by the operation.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "importContextUuid",
						"description": "The unique import context UUID given by a previous and recent call to maps/import/start API",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ImportExportClientContext"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/functional-capability": {
			"get": {
				"operationId": "getFunctionalCapabilityForDevices",
				"tags": [
					"Devices"
				],
				"summary": "Get Functional Capability for devices",
				"description": "Returns the functional-capability for given devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Accepts comma separated deviceid's and return list of functional-capabilities for the given id's. If invalid or not-found id's are provided, null entry will be returned in the list.",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "functionName",
						"description": "functionName",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/FunctionalCapabilityListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/security-advisory/device/{deviceId}": {
			"get": {
				"operationId": "getAdvisoryIDsPerDevice",
				"tags": [
					"Security Advisories"
				],
				"summary": "Get Advisory IDs Per Device",
				"description": "Retrieves list of advisory IDs for a device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device instance UUID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetAdvisoryIDsPerDeviceResponse"
						}
					},
					"400": {
						"description": "Bad request. The request syntax is incorrect or invalid request parameters."
					}
				}
			}
		},
		"/dna/intent/api/v1/licenses/device/{device_uuid}/details": {
			"get": {
				"operationId": "deviceLicenseDetails",
				"tags": [
					"Licenses"
				],
				"summary": "Device License Details",
				"description": "Get detailed license information of a device.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "device_uuid",
						"description": "Id of device",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceLicenseDetailsResponse"
						}
					},
					"202": {
						"description": "The request has been accepted for processing, but the processing has not been completed"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/task/operation/{operationId}/{offset}/{limit}": {
			"get": {
				"operationId": "getTaskByOperationId",
				"tags": [
					"Task"
				],
				"summary": "Get task by OperationId",
				"description": "Returns root tasks associated with an Operationid",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "operationId",
						"description": "operationId",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "offset",
						"description": "Index, minimum value is 0",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "limit",
						"description": "The maximum value of {limit} supported is 500. <br/> Base 1 indexing for {limit}, minimum value is 1",
						"required": true,
						"type": "integer",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskDTOListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "If {limit} value is more than 500"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/integrate-ise/{id}": {
			"put": {
				"operationId": "acceptCiscoISEServerCertificateForCiscoISEServerIntegration",
				"tags": [
					"System Settings"
				],
				"summary": "Accept Cisco ISE Server Certificate for Cisco ISE Server Integration",
				"description": "API to accept Cisco ISE server certificate for Cisco ISE server integration. Use ‘Cisco ISE Server Integration Status’ Intent API to check the integration status. This API can be used to retry the failed integration.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AcceptCiscoISEServerCertificateForCiscoISEServerIntegrationRequest"
						},
						"in": "body"
					},
					{
						"name": "id",
						"description": "Cisco ISE Server Identifier. Use 'Get Authentication and Policy Servers' intent API to find the identifier.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AcceptCiscoISEServerCertificateForCiscoISEServerIntegrationResponse"
						}
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/compliance": {
			"get": {
				"operationId": "getComplianceStatus",
				"tags": [
					"Compliance"
				],
				"summary": "Get Compliance Status ",
				"description": "Return compliance status of device(s).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "complianceStatus",
						"description": "Specify \"Compliance status(es)\" separated by commas. The Compliance status can be 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS', 'NOT_AVAILABLE', 'NOT_APPLICABLE', 'ERROR'.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "deviceUuid",
						"description": "Comma separated 'Device Ids'",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetComplianceStatusResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognises the authentication credentials, but the client is not authorised to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fullfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fullfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device": {
			"get": {
				"operationId": "getDeviceList-2",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get Device list",
				"description": "Returns list of devices from Plug & Play based on filter criteria. Returns 50 devices by default. This endpoint supports Pagination and Sorting.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "limit",
						"description": "Limits number of results",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Index of first result",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "sort",
						"description": "Comma seperated list of fields to sort on",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "sortOrder",
						"description": "Sort Order Ascending (asc) or Descending (des)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "serialNumber",
						"description": "Device Serial Number",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "state",
						"description": "Device State",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "onbState",
						"description": "Device Onboarding State",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"description": "Device Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "pid",
						"description": "Device ProductId",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "source",
						"description": "Device Source",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "workflowId",
						"description": "Device Workflow Id",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "workflowName",
						"description": "Device Workflow Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "smartAccountId",
						"description": "Device Smart Account",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "virtualAccountId",
						"description": "Device Virtual Account",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "lastContact",
						"description": "Device Has Contacted lastContact > 0",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "macAddress",
						"description": "Device Mac Address",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "hostname",
						"description": "Device Hostname",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "siteName",
						"description": "Device Site Name",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/Device"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "addDevice-2",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Add Device",
				"description": "Adds a device to the PnP database.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Device"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/Device"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/file": {
			"post": {
				"operationId": "exportDeviceList",
				"tags": [
					"Devices"
				],
				"summary": "Export Device list",
				"description": "Exports the selected network device to a file",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ExportDeviceDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/module": {
			"get": {
				"operationId": "getModules",
				"tags": [
					"Devices"
				],
				"summary": "Get Modules",
				"description": "Returns modules by specified device id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "deviceId",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "nameList",
						"description": "nameList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "vendorEquipmentTypeList",
						"description": "vendorEquipmentTypeList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "partNumberList",
						"description": "partNumberList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "operationalStateCodeList",
						"description": "operationalStateCodeList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ModuleListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/licenses/term/smartAccount/{smart_account_id}/virtualAccount/{virtual_account_name}": {
			"get": {
				"operationId": "licenseTermDetails",
				"tags": [
					"Licenses"
				],
				"summary": "License Term Details",
				"description": "Get license term details.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "smart_account_id",
						"description": "Id of smart account",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "virtual_account_name",
						"description": "Name of virtual account. Putting \"All\" will give license term detail for all virtual accounts.",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "device_type",
						"description": "Type of device like router, switch, wireless or ise",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LicenseTermDetailsResponse"
						}
					},
					"202": {
						"description": "The request has been accepted for processing, but the processing has not been completed"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/applications-count": {
			"get": {
				"operationId": "getApplicationCount",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Application Count",
				"description": "Get the number of all existing applications",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scalableGroupType",
						"description": "scalable group type to retrieve, valid value APPLICATION",
						"default": "APPLICATION",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ResponseCount"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/eox-status/summary": {
			"get": {
				"operationId": "getEoXSummary",
				"tags": [
					"EoX"
				],
				"summary": "Get EoX Summary",
				"description": "Retrieves EoX summary for all devices in the network",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEoXSummaryResponse"
						}
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/assign-device-to-site/{siteId}/device": {
			"post": {
				"operationId": "assignDevicesToSite",
				"tags": [
					"Sites"
				],
				"summary": "Assign Devices To Site",
				"description": "Assigns unassigned devices to a site. This API does not move assigned devices to other sites.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AssignDevicesToSiteRequest"
						},
						"in": "body"
					},
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": true,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__persistbapioutput",
						"description": "Persist bapi sync response",
						"default": true,
						"required": true,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__runsynctimeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": 55,
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "siteId",
						"description": "Site id to which site the device to assign",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AssignDevicesToSiteResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/history": {
			"get": {
				"operationId": "getDeviceHistory",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get Device History",
				"description": "Returns history for a specific device. Serial number is a required parameter",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "serialNumber",
						"description": "Device Serial Number",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sort",
						"description": "Comma seperated list of fields to sort on",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "sortOrder",
						"description": "Sort Order Ascending (asc) or Descending (des)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceHistoryResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/template/version": {
			"post": {
				"operationId": "versionTemplate",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Version Template",
				"description": "API to version the current contents of the template.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplateVersionRequestDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device-poller/cli/read-request": {
			"post": {
				"operationId": "runRead-onlyCommandsOnDevicesToGetTheirReal-timeConfiguration",
				"tags": [
					"Command Runner"
				],
				"summary": "Run read-only commands on devices to get their real-time configuration",
				"description": "Submit request for read-only CLIs",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CommandRunnerDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/app-policy-queuing-profile-count": {
			"get": {
				"operationId": "getApplicationPolicyQueuingProfileCount",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Application Policy Queuing Profile Count",
				"description": "Get the number of all existing  application policy queuing profile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetApplicationPolicyQueuingProfileCountResponse"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/dnac-packages": {
			"get": {
				"operationId": "ciscoDNACenterPackagesSummary",
				"tags": [
					"Platform"
				],
				"summary": "Cisco DNA Center Packages Summary",
				"description": "Provides information such as name, version of packages installed on the DNA center.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CiscoDNACenterPackagesSummaryResponse"
						}
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "Because the server did not respond in time, the response timed out."
					}
				}
			}
		},
		"/dna/intent/api/v1/interface": {
			"get": {
				"operationId": "getAllInterfaces",
				"tags": [
					"Devices"
				],
				"summary": "Get all interfaces",
				"description": "Returns all available interfaces. This endpoint can return a maximum of 500 interfaces",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "offset",
						"description": "Offset",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Limit",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "lastInputTime",
						"description": "Last Input Time",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "lastOutputTime",
						"description": "Last Output Time",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/onboarding/pnp-device/count": {
			"get": {
				"operationId": "getDeviceCount-2",
				"tags": [
					"Device Onboarding (PnP)"
				],
				"summary": "Get Device Count",
				"description": "Returns the device count based on filter criteria. This is useful for pagination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "serialNumber",
						"description": "Device Serial Number",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "state",
						"description": "Device State",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "onbState",
						"description": "Device Onboarding State",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"description": "Device Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "pid",
						"description": "Device ProductId",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "source",
						"description": "Device Source",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "workflowId",
						"description": "Device Workflow Id",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "workflowName",
						"description": "Device Workflow Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "smartAccountId",
						"description": "Device Smart Account",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "virtualAccountId",
						"description": "Device Virtual Account",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "lastContact",
						"description": "Device Has Contacted lastContact > 0",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceCountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/security-advisory/advisory/{advisoryId}/device": {
			"get": {
				"operationId": "getDevicesPerAdvisory",
				"tags": [
					"Security Advisories"
				],
				"summary": "Get Devices Per Advisory",
				"description": "Retrieves list of devices for an advisory",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "advisoryId",
						"description": "Advisory ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDevicesPerAdvisoryResponse"
						}
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{id}/wireless-info": {
			"get": {
				"operationId": "getWirelessLanControllerDetailsById",
				"tags": [
					"Devices"
				],
				"summary": "Get wireless lan controller details by Id",
				"description": "Returns the wireless lan controller info with given device ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/WirelessInfoResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/discovery/{id}/network-device": {
			"get": {
				"operationId": "getDiscoveredNetworkDevicesByDiscoveryId",
				"tags": [
					"Discovery"
				],
				"summary": "Get Discovered network devices by discovery Id",
				"description": "Returns the network devices discovered for the given Discovery ID. Discovery ID can be obtained using the \"Get Discoveries by range\" API.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "taskId",
						"description": "taskId",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/task/{taskId}/tree": {
			"get": {
				"operationId": "getTaskTree",
				"tags": [
					"Task"
				],
				"summary": "Get task tree",
				"description": "Returns a task with its children tasks by based on their id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "taskId",
						"description": "UUID of the Task",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskDTOListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "No task corresponding to the id was found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/eox-status/device/{deviceId}": {
			"get": {
				"operationId": "getEoXDetailsPerDevice",
				"tags": [
					"EoX"
				],
				"summary": "Get EoX Details Per Device",
				"description": "Retrieves EoX details for a device ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device instance UUID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEoXDetailsPerDeviceResponse"
						}
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/image/activation/device": {
			"post": {
				"operationId": "triggerSoftwareImageActivation",
				"tags": [
					"Software Image Management (SWIM)"
				],
				"summary": "Trigger software image activation",
				"description": "Activates a software image on a given device. Software image must be present in the device flash",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ActivateDTO"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "Client-Type",
						"description": "Client-type (Optional)",
						"required": false,
						"type": "string",
						"in": "header"
					},
					{
						"name": "Client-Url",
						"description": "Client-url (Optional)",
						"required": false,
						"type": "string",
						"in": "header"
					},
					{
						"name": "scheduleValidate",
						"description": "scheduleValidate, validates data before schedule (Optional)",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/accesspoint-configuration/details/{task_id}": {
			"get": {
				"operationId": "getAccessPointConfigurationTaskResult",
				"tags": [
					"Wireless"
				],
				"summary": "Get Access Point Configuration task result",
				"description": "Users can query the access point configuration result using this intent API",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "task_id",
						"description": "task id information of ap config",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/GetAccessPointConfigurationTaskResultResponse"
						}
					}
				}
			}
		},
		"/dna/intent/api/v1/maps/export/{siteHierarchyUuid}": {
			"post": {
				"operationId": "exportMapArchive",
				"tags": [
					"Sites"
				],
				"summary": "Export Map Archive",
				"description": "Allows exporting a Map archive in an XML interchange format along with the associated images. ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ExportMapArchiveRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "text/plain",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "siteHierarchyUuid",
						"description": "The site hierarchy element UUID to export, all child elements starting at this hierarchy element will be included. Limited to a hierarchy that contains 500 or fewer maps.",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed. Poll the returned Task ID status from Task API until completion."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/api-status/{executionId}": {
			"get": {
				"operationId": "getStatusAPIForEvents",
				"tags": [
					"Event Management"
				],
				"summary": "Get Status API for Events",
				"description": "Get the Status of events API calls with provided executionId as mandatory path parameter",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "executionId",
						"description": "Execution ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetStatusAPIForEventsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/autocomplete": {
			"get": {
				"operationId": "getDeviceValuesThatMatchFullyOrPartiallyAnAttribute",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Values that match fully or partially an Attribute",
				"description": "Returns the list of values of the first given required parameter. You can use the .* in any value to conduct a wildcard search.\nFor example, to get all the devices with the management IP address starting with 10.10. , issue the following request: GET /dna/inten/api/v1/network-device/autocomplete?managementIpAddress=10.10..*\nIt will return the device management IP addresses that match fully or partially the provided attribute. {[10.10.1.1, 10.10.20.2, …]}.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "vrfName",
						"description": "vrfName",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "managementIpAddress",
						"description": "managementIpAddress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "hostname",
						"description": "hostname",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "macAddress",
						"description": "macAddress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "family",
						"description": "family",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "collectionStatus",
						"description": "collectionStatus",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "collectionInterval",
						"description": "collectionInterval",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "softwareVersion",
						"description": "softwareVersion",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "softwareType",
						"description": "softwareType",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "reachabilityStatus",
						"description": "reachabilityStatus",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "reachabilityFailureReason",
						"description": "reachabilityFailureReason",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "errorCode",
						"description": "errorCode",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "platformId",
						"description": "platformId",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "series",
						"description": "series",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "serialNumber",
						"description": "serialNumber",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "upTime",
						"description": "upTime",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "role",
						"description": "role",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "roleSource",
						"description": "roleSource",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "associatedWlcIp",
						"description": "associatedWlcIp",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceValuesThatMatchFullyOrPartiallyAnAttributeResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/compliance/detail": {
			"get": {
				"operationId": "getComplianceDetail",
				"tags": [
					"Compliance"
				],
				"summary": "Get Compliance Detail ",
				"description": "Return Compliance Detail ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "complianceType",
						"description": "Specify \"Compliance type(s)\" in commas. The Compliance type can be 'NETWORK_PROFILE', 'IMAGE', 'FABRIC', 'APPLICATION_VISIBILITY', 'FABRIC', RUNNING_CONFIG', 'NETWORK_SETTINGS', 'WORKFLOW' , 'EOX'.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "complianceStatus",
						"description": "Specify \"Compliance status(es)\" in commas. The Compliance status can be 'COMPLIANT', 'NON_COMPLIANT', 'IN_PROGRESS', 'NOT_AVAILABLE', 'NOT_APPLICABLE', 'ERROR'.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "deviceUuid",
						"description": "Comma separated \"Device Id(s)\"",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset/starting row",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of records to be retrieved",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetComplianceDetailResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/global-credential": {
			"get": {
				"operationId": "getGlobalCredentials",
				"tags": [
					"Discovery"
				],
				"summary": "Get Global credentials",
				"description": "Returns global credential for the given credential sub type",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "credentialSubType",
						"description": "Credential type as CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY / SNMPV3 / HTTP_WRITE / HTTP_READ / NETCONF",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "sortBy",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GlobalCredentialListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v2/network": {
			"get": {
				"operationId": "getNetworkV2",
				"tags": [
					"Network Settings"
				],
				"summary": "Get Network V2",
				"description": "API to get SNMP, NTP, Network AAA, Client and Endpoint AAA, and/or DNS center server settings.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "Site Id to get the network settings associated with the site.",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetNetworkVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/task": {
			"get": {
				"operationId": "getTasks",
				"tags": [
					"Task"
				],
				"summary": "Get tasks",
				"description": "Returns task(s) based on filter criteria",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "startTime",
						"description": "This is the epoch start time from which tasks need to be fetched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "This is the epoch end time upto which audit records need to be fetched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "data",
						"description": "Fetch tasks that contains this data",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "errorCode",
						"description": "Fetch tasks that have this error code",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "serviceType",
						"description": "Fetch tasks with this service type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "username",
						"description": "Fetch tasks with this username",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "progress",
						"description": "Fetch tasks that contains this progress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "isError",
						"description": "Fetch tasks ended as success or failure. Valid values: true, false",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "failureReason",
						"description": "Fetch tasks that contains this failure reason",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "parentId",
						"description": "Fetch tasks that have this parent Id",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Sort results by this field",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Sort order - asc or dsc",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskDTOListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/issues": {
			"get": {
				"operationId": "issues",
				"tags": [
					"Issues"
				],
				"summary": "Issues",
				"description": "Intent API to get a list of global issues, issues for a specific device, or issue for a specific client device's MAC address.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "startTime",
						"description": "Starting epoch time in milliseconds of query time window",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "Ending epoch time in milliseconds of query time window",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "siteId",
						"description": "Assurance UUID value of the site in the issue content",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "deviceId",
						"description": "Assurance UUID value of the device in the issue content",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "macAddress",
						"description": "Client's device MAC address of the issue (format xx:xx:xx:xx:xx:xx)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "priority",
						"description": "The issue's priority value: P1, P2, P3, or P4 (case insensitive) (Use only when macAddress and deviceId are not provided)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "issueStatus",
						"description": "The issue's status value: ACTIVE, IGNORED, RESOLVED (case insensitive)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "aiDriven",
						"description": "The issue's AI driven value: YES or NO (case insensitive) (Use only when macAddress and deviceId are not provided)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "An Object of health information of the network",
						"schema": {
							"$ref": "#/definitions/DnacPlaformIssueResponse"
						}
					},
					"400": {
						"description": " The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": " The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "This user is forbidden to access this resource."
					},
					"404": {
						"description": " The client made a request for a resource that does not exist."
					},
					"500": {
						"description": " The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/event/subscription-details/rest": {
			"get": {
				"operationId": "getRest/WebhookSubscriptionDetails",
				"tags": [
					"Event Management"
				],
				"summary": "Get Rest/Webhook Subscription Details",
				"description": "Gets the list of subscription details for specified connectorType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "Name of the specific configuration",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "instanceId",
						"description": "Instance Id of the specific configuration",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of Rest/Webhook Subscription detail's to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of Rest/Webhook Subscription detail's to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetRestWebhookSubscriptionDetailsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/diagnostics/system/performance": {
			"get": {
				"operationId": "systemPerformanceAPI",
				"tags": [
					"Health and Performance"
				],
				"summary": "System Performance API",
				"description": "This API gives the aggregated performance indicators. The data can be retrieved for the last 3 months.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "kpi",
						"description": "Valid values: cpu,memory,network",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "function",
						"description": "Valid values: sum,average,max",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "startTime",
						"description": "This is the epoch start time in milliseconds from which performance indicator need to be fetched",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "This is the epoch end time in milliseconds upto which performance indicator need to be fetched",
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SystemPerformanceAPIResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"422": {
						"description": "The client sent a request with exceeding time range."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device/{startIndex}/{recordsToReturn}": {
			"get": {
				"operationId": "getNetworkDeviceByPaginationRange",
				"tags": [
					"Devices"
				],
				"summary": "Get Network Device by pagination range",
				"description": "Returns the list of network devices for the given pagination range. The maximum number of records that can be retrieved is 500",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "startIndex",
						"description": "Start index [>=1]",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "recordsToReturn",
						"description": "Number of records to return [1<= recordsToReturn <= 500]",
						"required": true,
						"type": "integer",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/template-programmer/project/importprojects": {
			"post": {
				"operationId": "importsTheProjectsProvided",
				"tags": [
					"Configuration Templates"
				],
				"summary": "Imports the Projects provided",
				"description": "Imports the Projects provided in the DTO",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ImportsTheProjectsProvidedRequest"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "text/plain",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "doVersion",
						"description": "If this flag is true then it creates a new version of the template with the imported contents in case if the templates already exists. \"\nIf this flag is false and if template already exists, then operation fails with 'Template already exists' error",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "Request was accepted. Use Task ID to track the progress"
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "Not Found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "Internal Server Error"
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/compliance/": {
			"post": {
				"operationId": "runCompliance",
				"tags": [
					"Compliance"
				],
				"summary": "Run Compliance",
				"description": "Run compliance check for device(s).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/POSTREQUEST"
						},
						"in": "body"
					},
					{
						"name": "Content-Type",
						"description": "Request body content type",
						"default": "application/json",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RunComplianceResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fullfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fullfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/dna-event/snmp-config": {
			"get": {
				"operationId": "getSNMPDestination",
				"tags": [
					"Event Management"
				],
				"summary": "Get SNMP Destination",
				"description": "Get SNMP Destination",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "configId",
						"description": "List of SNMP configurations",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The number of SNMP configuration's to offset in the resultset whose default value 0",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The number of SNMP configuration's to limit in the resultset whose default value 10",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "SortBy field name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order(asc/desc)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSNMPDestinationResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/global-pool": {
			"put": {
				"operationId": "updateGlobalPool",
				"tags": [
					"Network Settings"
				],
				"summary": "Update Global Pool",
				"description": "API to update global pool",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateGlobalPoolRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateGlobalPoolResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getGlobalPool",
				"tags": [
					"Network Settings"
				],
				"summary": "Get Global Pool",
				"description": "API to get global pool.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "offset",
						"description": "offset/starting row",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "No of Global Pools to be retrieved",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetGlobalPoolResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createGlobalPool",
				"tags": [
					"Network Settings"
				],
				"summary": "Create Global Pool",
				"description": "API to create global pool.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateGlobalPoolRequest"
						},
						"in": "body"
					},
					{
						"name": "__persistbapioutput",
						"description": "\tPersist bapi sync response",
						"default": "true",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateGlobalPoolResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/applications-count": {
			"get": {
				"operationId": "getApplicationsCount",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Applications Count",
				"description": "Get the number of all existing applications",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetApplicationsCountResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/hostonboarding/access-point": {
			"delete": {
				"operationId": "deletePortAssignmentForAccessPointInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Delete Port assignment for access point in SDA Fabric",
				"description": "Delete Port assignment for access point in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "interfaceName",
						"description": "interfaceName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeletePortAssignmentForAccessPointInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getPortAssignmentForAccessPointInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get Port assignment for access point in SDA Fabric",
				"description": "Get Port assignment for access point in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "interfaceName",
						"description": "interfaceName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetPortAssignmentForAccessPointInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addPortAssignmentForAccessPointInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Add Port assignment for access point in SDA Fabric",
				"description": "Add Port assignment for access point in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddPortAssignmentForAccessPointInSDAFabricRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddPortAssignmentForAccessPointInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/rf-profile": {
			"get": {
				"operationId": "retrieveRFProfiles",
				"tags": [
					"Wireless"
				],
				"summary": "Retrieve RF profiles",
				"description": "Retrieve all RF profiles",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "rf-profile-name",
						"description": "RF Profile Name",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RetrieveRFProfilesResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createOrUpdateRFProfile",
				"tags": [
					"Wireless"
				],
				"summary": "Create or Update RF profile",
				"description": "Create or Update RF profile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateOrUpdateRFProfileRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateOrUpdateRFProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/global-pool/{id}": {
			"delete": {
				"operationId": "deleteGlobalIPPool",
				"tags": [
					"Network Settings"
				],
				"summary": "Delete Global IP Pool",
				"description": "API to delete global IP pool.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "global pool id",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteGlobalIPPoolResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/device": {
			"get": {
				"operationId": "getDeviceInfoFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get device info from SDA Fabric",
				"description": "Get device info from SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceInfoFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/nfv/network-profile/{id}": {
			"put": {
				"operationId": "updateNFVProfile",
				"tags": [
					"Site Design"
				],
				"summary": "Update NFV Profile",
				"description": "API to update a NFV Network profile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateNFVProfileRequest"
						},
						"in": "body"
					},
					{
						"name": "id",
						"description": "Id of the NFV profile to be updated",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "name",
						"description": "Name of the profile to be updated",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateNFVProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getNFVProfile",
				"tags": [
					"Site Design"
				],
				"summary": "Get NFV Profile",
				"description": "API to get NFV network profile.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "ID of network profile to retrieve.",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "offset",
						"description": "offset/starting row",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of profile to be retrieved",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Name of network profile to be retrieved",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetNFVProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteNFVProfile",
				"tags": [
					"Site Design"
				],
				"summary": "Delete NFV Profile",
				"description": "API to delete nfv network profile.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Id of nfv network profile to delete. ",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "name",
						"description": "Nameof nfv network profile to delete. ",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteNFVProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/transit-peer-network": {
			"get": {
				"operationId": "getTransitPeerNetworkInfo",
				"tags": [
					"SDA"
				],
				"summary": "Get Transit Peer Network Info",
				"description": "Get Transit Peer Network Info from SD-Access",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "transitPeerNetworkName",
						"description": "Transit or Peer Network Name",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetTransitPeerNetworkInfoResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addTransitPeerNetwork",
				"tags": [
					"SDA"
				],
				"summary": "Add Transit Peer Network",
				"description": "Add Transit Peer Network in SD-Access",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddTransitPeerNetworkRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddTransitPeerNetworkResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteTransitPeerNetwork",
				"tags": [
					"SDA"
				],
				"summary": "Delete Transit Peer Network",
				"description": "Delete Transit Peer Network from SD-Access",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "transitPeerNetworkName",
						"description": "Transit Peer Network Name",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteTransitPeerNetworkResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/edge-device": {
			"delete": {
				"operationId": "deleteEdgeDeviceFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Delete edge device from SDA Fabric",
				"description": "Delete edge device from SDA Fabric.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteEdgeDeviceFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getEdgeDeviceFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get edge device from SDA Fabric",
				"description": "Get edge device from SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEdgeDeviceFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addEdgeDeviceInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Add edge device in SDA Fabric",
				"description": "Add edge device in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddEdgeDeviceInSDAFabricRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddEdgeDeviceInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/virtualnetwork/ippool": {
			"post": {
				"operationId": "addIPPoolInSDAVirtualNetwork",
				"tags": [
					"SDA"
				],
				"summary": "Add IP Pool in SDA Virtual Network",
				"description": "Add IP Pool in SDA Virtual Network",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddIPPoolInSDAVirtualNetworkRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddIPPoolInSDAVirtualNetworkResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteIPPoolFromSDAVirtualNetwork",
				"tags": [
					"SDA"
				],
				"summary": "Delete IP Pool from SDA Virtual Network",
				"description": "Delete IP Pool from SDA Virtual Network",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteNameHierarchy",
						"description": "siteNameHierarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "virtualNetworkName",
						"description": "virtualNetworkName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "ipPoolName",
						"description": "ipPoolName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteIPPoolFromSDAVirtualNetworkResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getIPPoolFromSDAVirtualNetwork",
				"tags": [
					"SDA"
				],
				"summary": "Get IP Pool from SDA Virtual Network",
				"description": "Get IP Pool from SDA Virtual Network",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteNameHierarchy",
						"description": "siteNameHierarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "virtualNetworkName",
						"description": "virtualNetworkName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "ipPoolName",
						"description": "ipPoolName. Note: Use vlanName as a value for this parameter if same ip pool is assigned to multiple virtual networks (e.g.. ipPoolName=vlan1021)",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetIPPoolFromSDAVirtualNetworkResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/sensor": {
			"post": {
				"operationId": "createSensorTestTemplate",
				"tags": [
					"Sensors"
				],
				"summary": "Create sensor test template",
				"description": "Intent API to create a SENSOR test template with a new SSID, existing SSID, or both new and existing SSID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateSensorTestTemplateRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateSensorTestTemplateResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteSensorTest",
				"tags": [
					"Sensors"
				],
				"summary": "Delete sensor test",
				"description": "Intent API to delete an existing SENSOR test template",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "templateName",
						"description": "",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteSensorTestResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "sensors",
				"tags": [
					"Sensors"
				],
				"summary": "Sensors",
				"description": "Intent API to get a list of SENSOR devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SensorsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/wireless-controller": {
			"delete": {
				"operationId": "removeWLCFromFabricDomain",
				"tags": [
					"Fabric Wireless"
				],
				"summary": "Remove WLC from Fabric Domain",
				"description": "Remove WLC from Fabric Domain",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RemoveWLCFromFabricDomainRequest"
						},
						"in": "body"
					},
					{
						"name": "__persistbapioutput",
						"description": "Enable this parameter to execute the API and return a response asynchronously.",
						"default": "true",
						"required": false,
						"type": "string",
						"in": "header"
					},
					{
						"name": "deviceIPAddress",
						"description": "Device Management IP Address",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RemoveWLCFromFabricDomainResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addWLCToFabricDomain",
				"tags": [
					"Fabric Wireless"
				],
				"summary": "Add WLC to Fabric Domain",
				"description": "Add WLC to Fabric Domain",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddWLCToFabricDomainRequest"
						},
						"in": "body"
					},
					{
						"name": "__persistbapioutput",
						"description": "Enable this parameter to execute the API and return a response asynchronously.",
						"default": "true",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddWLCToFabricDomainResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/ssid": {
			"post": {
				"operationId": "createAndProvisionSSID",
				"tags": [
					"Wireless"
				],
				"summary": "Create and Provision SSID",
				"description": "Creates SSID, updates the SSID to the corresponding site profiles and provision it to the devices matching the given sites",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateAndProvisionSSIDRequest"
						},
						"in": "body"
					},
					{
						"name": "__persistbapioutput",
						"description": "Enable this parameter to execute the API and return a response asynchronously.",
						"default": "true",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateAndProvisionSSIDResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/device-credential/{id}": {
			"delete": {
				"operationId": "deleteDeviceCredential",
				"tags": [
					"Network Settings"
				],
				"summary": "Delete Device Credential",
				"description": "Delete device credential. This API has been deprecated and will not be available in a Cisco DNA Center release after August 1st 2024 23:59:59 GMT. Please refer new Intent API : Delete Global Credentials V2",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "global credential id",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteDeviceCredentialResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/rf-profile/{rfProfileName}": {
			"delete": {
				"operationId": "deleteRFProfiles",
				"tags": [
					"Wireless"
				],
				"summary": "Delete RF profiles",
				"description": "Delete RF profile(s)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "rfProfileName",
						"description": "RF profile name to be deleted(required) *non-custom RF profile cannot be deleted",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteRFProfilesResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/multicast": {
			"delete": {
				"operationId": "deleteMulticastFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Delete multicast from SDA fabric",
				"description": "Delete multicast from SDA fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteNameHierarchy",
						"description": "siteNameHierarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteMulticastFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getMulticastDetailsFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get multicast details from SDA fabric",
				"description": "Get multicast details from SDA fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteNameHierarchy",
						"description": "fabric site name hierarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetMulticastDetailsFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addMulticastInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Add multicast in SDA fabric",
				"description": "Add multicast in SDA fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddMulticastInSDAFabricRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddMulticastInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/application-health": {
			"get": {
				"operationId": "applications",
				"tags": [
					"Applications"
				],
				"summary": "Applications",
				"description": "Intent API to get a list of applications for a specific site, a device, or a client device's MAC address. For a combination of a specific application with site and/or device the API gets list of issues/devices/endpoints.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "Assurance site UUID value (Cannot be submitted together with deviceId and clientMac)",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "deviceId",
						"description": "Assurance device UUID value (Cannot be submitted together with siteId and clientMac)",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "macAddress",
						"description": "Client device's MAC address (Cannot be submitted together with siteId and deviceId)",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "startTime",
						"description": "Starting epoch time in milliseconds of time window",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "Ending epoch time in milliseconds of time window",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "applicationHealth",
						"description": "Application health category (POOR, FAIR, or GOOD.  Optionally use with siteId only)",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "The offset of the first application in the returned data (optionally used with siteId only)",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The max number of application entries in returned data [1, 1000] (optionally used with siteId only)",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "applicationName",
						"description": "The name of the application to get information on",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ApplicationsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/virtual-network": {
			"get": {
				"operationId": "getVNFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get VN from SDA Fabric",
				"description": "Get virtual network (VN) from SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "virtualNetworkName",
						"description": "virtualNetworkName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "siteNameHierarchy",
						"description": "siteNameHierarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetVNFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addVNInFabric",
				"tags": [
					"SDA"
				],
				"summary": "Add VN in fabric",
				"description": "Add virtual network (VN) in SDA Fabric\t",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddVNInFabricRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddVNInFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteVNFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Delete VN from SDA Fabric",
				"description": "Delete virtual network (VN) from SDA Fabric\t",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "virtualNetworkName",
						"description": "virtualNetworkName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "siteNameHierarchy",
						"description": "siteNameHierarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteVNFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/nfv-provision-detail": {
			"post": {
				"operationId": "nFVProvisioningDetail",
				"tags": [
					"Site Design"
				],
				"summary": "NFV Provisioning Detail",
				"description": "Checks the provisioning detail of an ENCS device including log information.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NFVProvisioningDetailRequest"
						},
						"in": "body"
					},
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": true,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__runsynctimeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": 10,
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "__persistbapioutput",
						"description": "Persist bapi sync response",
						"default": true,
						"required": true,
						"type": "boolean",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NFVProvisioningDetailResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/network": {
			"get": {
				"operationId": "getNetwork",
				"tags": [
					"Network Settings"
				],
				"summary": "Get Network",
				"description": "API to get  DHCP and DNS center server details.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "Site id to get the network settings associated with the site.",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetNetworkResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/applications": {
			"put": {
				"operationId": "editApplication",
				"tags": [
					"Application Policy"
				],
				"summary": "Edit Application",
				"description": "Edit the attributes of an existing application",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EditApplicationRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/EditApplicationResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getApplications",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Applications",
				"description": "Get applications by offset/limit or by name",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "offset",
						"description": "The offset of the first application to be returned",
						"default": 1,
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "The maximum number of applications to be returned",
						"default": 500,
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Application's name",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetApplicationsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteApplication-2",
				"tags": [
					"Application Policy"
				],
				"summary": "Delete Application",
				"description": "Delete existing application by its id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Application's Id",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteApplicationResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createApplication",
				"tags": [
					"Application Policy"
				],
				"summary": "Create Application",
				"description": "Create new Custom application",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateApplicationRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateApplicationResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/application-policy-application-set": {
			"post": {
				"operationId": "createApplicationSet",
				"tags": [
					"Application Policy"
				],
				"summary": "Create Application Set",
				"description": "Create new custom application-set/s",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateApplicationSetRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateApplicationSetResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteApplicationSet-2",
				"tags": [
					"Application Policy"
				],
				"summary": "Delete Application Set",
				"description": "Delete existing application-set by it's id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteApplicationSetResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getApplicationSets",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Application Sets",
				"description": "Get appllication-sets by offset/limit or by name",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "offset",
						"description": "",
						"default": 1,
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "",
						"default": 500,
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "name",
						"description": "",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetApplicationSetsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/authentication-profile": {
			"delete": {
				"operationId": "deleteDefaultAuthenticationProfileFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Delete default authentication profile from SDA Fabric",
				"description": "Delete default authentication profile in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteNameHierarchy",
						"description": "siteNameHierarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteDefaultAuthenticationProfileFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "updateDefaultAuthenticationProfileInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Update default authentication profile in SDA Fabric",
				"description": "Update default authentication profile in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateDefaultAuthenticationProfileInSDAFabricRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateDefaultAuthenticationProfileInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getDefaultAuthenticationProfileFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get default authentication profile from SDA Fabric",
				"description": "Get default authentication profile from SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteNameHierarchy",
						"description": "siteNameHierarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "authenticateTemplateName",
						"description": "authenticateTemplateName",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDefaultAuthenticationProfileFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addDefaultAuthenticationTemplateInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Add default authentication template in SDA Fabric",
				"description": "Add default authentication template in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddDefaultAuthenticationTemplateInSDAFabricRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddDefaultAuthenticationTemplateInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/reserve-ip-subpool/{siteId}": {
			"post": {
				"operationId": "reserveIPSubpool",
				"tags": [
					"Network Settings"
				],
				"summary": "Reserve IP Subpool",
				"description": "API to reserve an ip subpool from the global pool",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ReserveIPSubpoolRequest"
						},
						"in": "body"
					},
					{
						"name": "siteId",
						"description": "Site id to reserve the ip sub pool.",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ReserveIPSubpoolResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "updateReserveIPSubpool",
				"tags": [
					"Network Settings"
				],
				"summary": "Update Reserve IP Subpool",
				"description": "API to update ip subpool from the global pool",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateReserveIPSubpoolRequest"
						},
						"in": "body"
					},
					{
						"name": "siteId",
						"description": "Site id of site to update sub pool.",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "id",
						"description": "Id of subpool group",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateReserveIPSubpoolResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/client-proximity": {
			"get": {
				"operationId": "clientProximity",
				"tags": [
					"Clients"
				],
				"summary": "Client Proximity",
				"description": "This intent API will provide client proximity information for a specific wireless user. Proximity is defined as presence on the same floor at the same time as the specified wireless user. The Proximity workflow requires the subscription to the following event (via the Event Notification workflow) prior to making this API call: NETWORK-CLIENTS-3-506 - Client Proximity Report.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "username",
						"description": "Wireless client username for which proximity information is required",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "number_days",
						"description": "Number of days to track proximity until current date. Defaults and maximum up to 14 days.",
						"default": 14,
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "time_resolution",
						"description": "Time interval (in minutes) to measure proximity. Defaults to 15 minutes with a minimum 5 minutes.",
						"default": 15,
						"required": false,
						"type": "number",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ClientProximityResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/reserve-ip-subpool": {
			"get": {
				"operationId": "getReserveIPSubpool",
				"tags": [
					"Network Settings"
				],
				"summary": "Get Reserve IP Subpool",
				"description": "API to get the ip subpool info.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "site id of site from which to retrieve associated reserve pools.",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset/starting row",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "No of reserve pools to be retrieved",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "ignoreInheritedGroups",
						"description": "Ignores inherited pools",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "poolUsage",
						"description": "Can take values empty, partially-full or empty-partially-full",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetReserveIPSubpoolResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/psk-override": {
			"post": {
				"operationId": "pSKOverride",
				"tags": [
					"Wireless"
				],
				"summary": "PSK override",
				"description": "Update/override pass phrase of enterprise SSID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PSKOverrideRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/PSKOverrideResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/sp-profile/{spProfileName}": {
			"delete": {
				"operationId": "deleteSPProfile",
				"tags": [
					"Network Settings"
				],
				"summary": "Delete SP Profile",
				"description": "API to delete Service Provider Profile (QoS).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "spProfileName",
						"description": "sp profile name",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteSPProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/credential-to-site/{siteId}": {
			"post": {
				"operationId": "assignDeviceCredentialToSite",
				"tags": [
					"Network Settings"
				],
				"summary": "Assign Device Credential To Site",
				"description": "Assign Device Credential to a site.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AssignDeviceCredentialToSiteRequest"
						},
						"in": "body"
					},
					{
						"name": "__persistbapioutput",
						"description": "Persist bapi sync response",
						"default": "true",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "siteId",
						"description": "site id to assign credential.",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AssignDeviceCredentialToSiteResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/device-credential": {
			"put": {
				"operationId": "updateDeviceCredentials",
				"tags": [
					"Network Settings"
				],
				"summary": "Update Device Credentials",
				"description": "API to update device credentials. This API has been deprecated and will not be available in a Cisco DNA Center release after August 1st 2024 23:59:59 GMT. Please refer new Intent API : Update Global Credentials V2",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateDeviceCredentialsRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateDeviceCredentialsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getDeviceCredentialDetails",
				"tags": [
					"Network Settings"
				],
				"summary": "Get Device Credential Details",
				"description": "API to get device credential details. This API has been deprecated and will not be available in a Cisco DNA Center release after August 1st 2024 23:59:59 GMT. Please refer new Intent API : Get All Global Credentials V2",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "Site id to retrieve the credential details associated with the site.",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceCredentialDetailsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createDeviceCredentials",
				"tags": [
					"Network Settings"
				],
				"summary": "Create Device Credentials",
				"description": "API to create device credentials. This API has been deprecated and will not be available in a Cisco DNA Center release after August 1st 2024 23:59:59 GMT. Please refer new Intent API : Create Global Credentials V2",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateDeviceCredentialsRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateDeviceCredentialsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/fabric-site": {
			"delete": {
				"operationId": "deleteSiteFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Delete Site from SDA Fabric",
				"description": "Delete Site from SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteNameHierarchy",
						"description": "Site Name Hierarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteSiteFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getSiteFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get Site from SDA Fabric",
				"description": "Get Site info from SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteNameHierarchy",
						"description": "Site Name Hierarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSiteFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addSiteInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Add Site in SDA Fabric",
				"description": "Add Site in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddSiteInSDAFabricRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddSiteInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/provision-device": {
			"put": {
				"operationId": "re-ProvisionWiredDevice",
				"tags": [
					"SDA"
				],
				"summary": "Re-Provision Wired Device",
				"description": "Re-Provision Wired Device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ReProvisionWiredDeviceRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ReProvisionWiredDeviceResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "provisionWiredDevice",
				"tags": [
					"SDA"
				],
				"summary": "Provision Wired Device",
				"description": "Provision Wired Device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProvisionWiredDeviceRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ProvisionWiredDeviceResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getProvisionedWiredDevice",
				"tags": [
					"SDA"
				],
				"summary": "Get Provisioned Wired Device",
				"description": "Get Provisioned Wired Device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetProvisionedWiredDeviceResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteProvisionedWiredDevice",
				"tags": [
					"SDA"
				],
				"summary": "Delete provisioned Wired Device",
				"description": "Delete provisioned Wired Device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "Valid IP address of the device currently provisioned in a fabric site",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteProvisionedWiredDeviceResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/service-provider": {
			"put": {
				"operationId": "updateSPProfile",
				"tags": [
					"Network Settings"
				],
				"summary": "Update SP Profile",
				"description": "API to update Service Provider Profile (QoS).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateSPProfileRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateSPProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getServiceProviderDetails",
				"tags": [
					"Network Settings"
				],
				"summary": "Get Service provider Details",
				"description": "API to get service provider details (QoS).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetServiceProviderDetailsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createSPProfile",
				"tags": [
					"Network Settings"
				],
				"summary": "Create SP Profile",
				"description": "API to create Service Provider Profile(QOS).",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateSPProfileRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateSPProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/site": {
			"post": {
				"operationId": "createSite",
				"tags": [
					"Sites"
				],
				"summary": "Create Site",
				"description": "Creates site with area/building/floor with specified hierarchy.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateSiteRequest"
						},
						"in": "body"
					},
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": true,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": 30,
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "__persistbapioutput",
						"description": "Persist bapi sync response",
						"default": true,
						"required": true,
						"type": "boolean",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateSiteResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getSite",
				"tags": [
					"Sites"
				],
				"summary": "Get Site",
				"description": "Get site(s) by site-name-hierarchy or siteId or type. List all sites if these parameters are not given as an input.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "Site name hierarchy (E.g Global/USA/CA)",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "siteId",
						"description": "Site Id",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "Site type (Ex: area, building, floor)",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Offset/starting index for pagination",
						"default": "1",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of sites to be listed",
						"default": "500",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSiteResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/network/{siteId}": {
			"put": {
				"operationId": "updateNetwork",
				"tags": [
					"Network Settings"
				],
				"summary": "Update Network",
				"description": "API to update network settings for DHCP,  Syslog, SNMP, NTP, Network AAA, Client and EndPoint AAA, and/or DNS server settings.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateNetworkRequest"
						},
						"in": "body"
					},
					{
						"name": "__persistbapioutput",
						"description": "Persist bapi sync response",
						"default": true,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "siteId",
						"description": "Site id to update the network settings which is associated with the site",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateNetworkResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createNetwork",
				"tags": [
					"Network Settings"
				],
				"summary": "Create Network",
				"description": "API to create a network for DHCP,  Syslog, SNMP, NTP, Network AAA, Client and EndPoint AAA, and/or DNS center server settings.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateNetworkRequest"
						},
						"in": "body"
					},
					{
						"name": "__persistbapioutput",
						"description": "Persist bapi sync response",
						"default": true,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "siteId",
						"description": "Site id to which site details to associate with the network settings.",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateNetworkResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/nfv/network-profile": {
			"post": {
				"operationId": "createNFVProfile",
				"tags": [
					"Site Design"
				],
				"summary": "Create NFV Profile",
				"description": "API to create network profile for different NFV topologies",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateNFVProfileRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateNFVProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/virtual-network/summary": {
			"get": {
				"operationId": "getVirtualNetworkSummary",
				"tags": [
					"SDA"
				],
				"summary": "Get Virtual Network Summary",
				"description": "Get Virtual Network Summary",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteNameHierarchy",
						"description": "Complete fabric siteNameHierarchy Path",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetVirtualNetworkSummaryResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/nfv": {
			"post": {
				"operationId": "provisionNFV",
				"tags": [
					"Site Design"
				],
				"summary": "Provision NFV",
				"description": "Design and Provision single/multi NFV device with given site/area/building/floor .",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProvisionNFVRequest"
						},
						"in": "body"
					},
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": true,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": 10,
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "__persistbapioutput",
						"description": "Persist bapi sync response",
						"default": true,
						"required": true,
						"type": "boolean",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ProvisionNFVResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/profile": {
			"post": {
				"operationId": "createWirelessProfile",
				"tags": [
					"Wireless"
				],
				"summary": "Create Wireless Profile",
				"description": "Creates Wireless Network Profile on Cisco DNA Center and associates sites and SSIDs to it.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateWirelessProfileRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateWirelessProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getWirelessProfile",
				"tags": [
					"Wireless"
				],
				"summary": "Get Wireless Profile",
				"description": "Gets either one or all the wireless network profiles if no name is provided for network-profile.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "profileName",
						"description": "Wireless Network Profile Name",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetWirelessProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "updateWirelessProfile",
				"tags": [
					"Wireless"
				],
				"summary": "Update Wireless Profile",
				"description": "Updates the wireless Network Profile with updated details provided. All sites to be present in the network profile should be provided.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateWirelessProfileRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateWirelessProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/issue-enrichment-details": {
			"get": {
				"operationId": "getIssueEnrichmentDetails",
				"tags": [
					"Issues"
				],
				"summary": "Get Issue Enrichment Details",
				"description": "Enriches a given network issue context (an issue id or end user’s Mac Address) with details about the issue(s), impacted hosts and suggested actions for remediation",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "entity_type",
						"description": "Issue enrichment details can be fetched based on either Issue ID or Client MAC address. This parameter value must either be issue_id/mac_address",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "entity_value",
						"description": "Contains the actual value for the entity type that has been defined",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetIssueEnrichmentDetailsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/provision": {
			"put": {
				"operationId": "provisionUpdate",
				"tags": [
					"Wireless"
				],
				"summary": "Provision update",
				"description": "Updates wireless provisioning",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProvisionUpdateRequest"
						},
						"in": "body"
					},
					{
						"name": "__persistbapioutput",
						"description": "Enable this parameter to execute the API and return a response asynchronously.",
						"default": "true",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ProvisionUpdateResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "provision",
				"tags": [
					"Wireless"
				],
				"summary": "Provision",
				"description": "Provision wireless devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProvisionRequest"
						},
						"in": "body"
					},
					{
						"name": "__persistbapioutput",
						"description": "Enable this parameter to execute the API and return a response asynchronously.",
						"default": "true",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ProvisionResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/sensorTestTemplate": {
			"put": {
				"operationId": "duplicateSensorTestTemplate",
				"tags": [
					"Sensors"
				],
				"summary": "Duplicate sensor test template",
				"description": "Intent API to duplicate an existing SENSOR test template",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DuplicateSensorTestTemplateRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DuplicateSensorTestTemplateResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/reserve-ip-subpool/{id}": {
			"delete": {
				"operationId": "releaseReserveIPSubpool",
				"tags": [
					"Network Settings"
				],
				"summary": "Release Reserve IP Subpool",
				"description": "API to delete the reserved ip subpool",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Id of reserve ip subpool to be deleted.",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ReleaseReserveIPSubpoolResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/AssuranceGetSensorTestResults": {
			"get": {
				"operationId": "sensorTestResults",
				"tags": [
					"Wireless"
				],
				"summary": "Sensor Test Results",
				"description": "Intent API to get SENSOR test result summary",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "Assurance site UUID",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "startTime",
						"description": "The epoch time in milliseconds",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "The epoch time in milliseconds",
						"required": false,
						"type": "number",
						"in": "query"
					},
					{
						"name": "testFailureBy",
						"description": "Obtain failure statistics group by \"area\", \"building\", or \"floor\"",
						"default": "area",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SensorTestResultsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/enterprise-ssid": {
			"post": {
				"operationId": "createEnterpriseSSID",
				"tags": [
					"Wireless"
				],
				"summary": "Create Enterprise SSID",
				"description": "Creates enterprise SSID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateEnterpriseSSIDRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateEnterpriseSSIDResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "updateEnterpriseSSID",
				"tags": [
					"Wireless"
				],
				"summary": "Update Enterprise SSID",
				"description": "Update enterprise SSID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateEnterpriseSSIDRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateEnterpriseSSIDResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getEnterpriseSSID",
				"tags": [
					"Wireless"
				],
				"summary": "Get Enterprise SSID",
				"description": "Gets either one or all the enterprise SSID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ssidName",
						"description": "Enter the enterprise SSID name that needs to be retrieved. If not entered, all the enterprise SSIDs will be retrieved.",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetEnterpriseSSIDResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/device/role": {
			"get": {
				"operationId": "getDeviceRoleInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get device role in SDA Fabric",
				"description": "Get device role in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "Device Management IP Address",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceRoleInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/hostonboarding/user-device": {
			"post": {
				"operationId": "addPortAssignmentForUserDeviceInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Add Port assignment for user device in SDA Fabric",
				"description": "Add Port assignment for user device in SDA Fabric.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddPortAssignmentForUserDeviceInSDAFabricRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddPortAssignmentForUserDeviceInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getPortAssignmentForUserDeviceInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get Port assignment for user device in SDA Fabric",
				"description": "Get Port assignment for user device in SDA Fabric.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "interfaceName",
						"description": "interfaceName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetPortAssignmentForUserDeviceInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deletePortAssignmentForUserDeviceInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Delete Port assignment for user device in SDA Fabric",
				"description": "Delete Port assignment for user device in SDA Fabric.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "interfaceName",
						"description": "interfaceName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeletePortAssignmentForUserDeviceInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/border-device": {
			"get": {
				"operationId": "getBorderDeviceDetailFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get border device detail from SDA Fabric",
				"description": "Get border device detail from SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetBorderDeviceDetailFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addBorderDeviceInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Add border device in SDA Fabric",
				"description": "Add border device in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddBorderDeviceInSDAFabricRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddBorderDeviceInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteBorderDeviceFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Delete border device from SDA Fabric",
				"description": "Delete border device from SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteBorderDeviceFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/nfv/provisioningDetail": {
			"get": {
				"operationId": "getDeviceDetailsByIP",
				"tags": [
					"Site Design"
				],
				"summary": "Get Device details by IP",
				"description": "Returns provisioning device information for the specified IP address.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GetDeviceDetailsByIPRequest"
						},
						"in": "body"
					},
					{
						"name": "deviceIp",
						"description": "Device to which the provisioning detail has to be retrieved",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceDetailsByIPResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/cmdb-sync/detail": {
			"get": {
				"operationId": "getCMDBSyncStatus",
				"tags": [
					"ITSM"
				],
				"summary": "Get CMDB Sync Status",
				"description": "This API allows to retrieve the detail of CMDB sync status.It accepts two query parameter \"status\",\"date\".The supported values for status field are \"Success\",\"Failed\",\"Unknown\" and date field should be in \"YYYY-MM-DD\" format. By default all the cmdb sync status will be send as response and based on the query parameter filtered detail will be send as response.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GetCMDBSyncStatusRequest"
						},
						"in": "body"
					},
					{
						"name": "status",
						"description": "Supported values are \"Success\",\"Failed\" and \"Unknown\". Providing other values will result in all the available sync job status.",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "date",
						"description": "Provide date in \"YYYY-MM-DD\" format",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetCMDBSyncStatusResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/control-plane-device": {
			"get": {
				"operationId": "getControlPlaneDeviceFromSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Get control plane device from SDA Fabric",
				"description": "Get control plane device from SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetControlPlaneDeviceFromSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addControlPlaneDeviceInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Add control plane device in SDA Fabric",
				"description": "Add control plane device in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddControlPlaneDeviceInSDAFabricRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddControlPlaneDeviceInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteControlPlaneDeviceInSDAFabric",
				"tags": [
					"SDA"
				],
				"summary": "Delete control plane device in SDA Fabric",
				"description": "Delete control plane device in SDA Fabric",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceManagementIpAddress",
						"description": "deviceManagementIpAddress",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteControlPlaneDeviceInSDAFabricResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/sda/hostonboarding/ssid-ippool": {
			"put": {
				"operationId": "updateSSIDToIPPoolMapping",
				"tags": [
					"Fabric Wireless"
				],
				"summary": "Update SSID to IP Pool Mapping",
				"description": "Update SSID to IP Pool Mapping.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateSSIDToIPPoolMappingRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateSSIDToIPPoolMappingResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addSSIDToIPPoolMapping",
				"tags": [
					"Fabric Wireless"
				],
				"summary": "Add SSID to IP Pool Mapping",
				"description": "Add SSID to IP Pool Mapping.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddSSIDToIPPoolMappingRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddSSIDToIPPoolMappingResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getSSIDToIPPoolMapping",
				"tags": [
					"Fabric Wireless"
				],
				"summary": "Get SSID to IP Pool Mapping",
				"description": "Get SSID to IP Pool Mapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GetSSIDToIPPoolMappingRequest"
						},
						"in": "body"
					},
					{
						"name": "vlanName",
						"description": "VLAN Name",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "siteNameHierarchy",
						"description": "Site Name Heirarchy",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSSIDToIPPoolMappingResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/integration/events": {
			"get": {
				"operationId": "getFailedITSMEvents",
				"tags": [
					"ITSM"
				],
				"summary": "Get Failed ITSM Events",
				"description": "Used to retrieve the list of integration events that failed to create tickets in ITSM",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "instanceId",
						"description": "Instance Id of the failed event as in the Runtime Dashboard",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetFailedITSMEventsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "retryIntegrationEvents",
				"tags": [
					"ITSM"
				],
				"summary": "Retry Integration Events",
				"description": "Allows retry of multiple failed ITSM event instances. The retry request payload can be given as a list of strings: [\"instance1\",\"instance2\",\"instance3\",..] A minimum of one instance Id is mandatory. The list of failed event instance Ids can be retrieved using the 'Get Failed ITSM Events' API in the 'instanceId' attribute.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RetryIntegrationEventsRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RetryIntegrationEventsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/client-enrichment-details": {
			"get": {
				"operationId": "getClientEnrichmentDetails",
				"tags": [
					"Clients"
				],
				"summary": "Get Client Enrichment Details",
				"description": "Enriches a given network End User context (a network user-id or end user’s device Mac Address) with details about the user, the devices that the user is connected to and the assurance issues that the user is impacted by",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "entity_type",
						"description": "Client enrichment details can be fetched based on either User ID or Client MAC address. This parameter value must either be network_user_id/mac_address",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "entity_value",
						"description": "Contains the actual value for the entity type that has been defined",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "issueCategory",
						"description": "The category of the DNA event based on which the underlying issues need to be fetched",
						"default": "",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetClientEnrichmentDetailsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/site/count": {
			"get": {
				"operationId": "getSiteCount",
				"tags": [
					"Sites"
				],
				"summary": "Get Site Count",
				"description": "Get the site count of the specified site's sub-hierarchy (inclusive of the provided site)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "Site instance UUID",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSiteCountResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/AssuranceScheduleSensorTest": {
			"put": {
				"operationId": "editSensorTestTemplate",
				"tags": [
					"Sensors"
				],
				"summary": "Edit sensor test template",
				"description": "Intent API to deploy, schedule, or edit and existing SENSOR test template",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EditSensorTestTemplateRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/EditSensorTestTemplateResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/virtual-network": {
			"put": {
				"operationId": "updateVirtualNetworkWithScalableGroups",
				"tags": [
					"SDA"
				],
				"summary": "Update virtual network with scalable groups",
				"description": "Update virtual network with scalable groups",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateVirtualNetworkWithScalableGroupsRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateVirtualNetworkWithScalableGroupsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"delete": {
				"operationId": "deleteVirtualNetworkWithScalableGroups",
				"tags": [
					"SDA"
				],
				"summary": "Delete virtual network with scalable groups",
				"description": "Delete virtual network with scalable groups",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "virtualNetworkName",
						"description": "virtualNetworkName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteVirtualNetworkWithScalableGroupsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"get": {
				"operationId": "getVirtualNetworkWithScalableGroups",
				"tags": [
					"SDA"
				],
				"summary": "Get virtual network with scalable groups",
				"description": "Get virtual network with scalable groups",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "virtualNetworkName",
						"description": "virtualNetworkName",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetVirtualNetworkWithScalableGroupsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "addVirtualNetworkWithScalableGroups",
				"tags": [
					"SDA"
				],
				"summary": "Add virtual network with scalable groups",
				"description": "Add virtual network with scalable groups at global level",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AddVirtualNetworkWithScalableGroupsRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddVirtualNetworkWithScalableGroupsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/dynamic-interface": {
			"get": {
				"operationId": "getDynamicInterface",
				"tags": [
					"Wireless"
				],
				"summary": "Get dynamic interface",
				"description": "Get one or all dynamic interface(s)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "If __runsync is set to ‘true’, this defines the maximum time before which if the API completes its execution, then a synchronous response is returned.  If the time taken for the API to complete the execution, exceeds this time, then an asynchronous response is returned with an execution id, that can be used to get the status and response associated with the API execution",
						"default": 10,
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "interface-name",
						"description": "dynamic-interface name, if not specified all the existing dynamic interfaces will be retrieved",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDynamicInterfaceResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"post": {
				"operationId": "createUpdateDynamicInterface",
				"tags": [
					"Wireless"
				],
				"summary": "Create Update Dynamic interface",
				"description": "API to create or update an dynamic interface",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateUpdateDynamicInterfaceRequest"
						},
						"in": "body"
					},
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "If __runsync is set to ‘true’, this defines the maximum time before which if the API completes its execution, then a synchronous response is returned.  If the time taken for the API to complete the execution, exceeds this time, then an asynchronous response is returned with an execution id, that can be used to get the status and response associated with the API execution",
						"default": 10,
						"required": false,
						"type": "number",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateUpdateDynamicInterfaceResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/execute-suggested-actions-commands": {
			"post": {
				"operationId": "executeSuggestedActionsCommands",
				"tags": [
					"Issues"
				],
				"summary": "Execute Suggested Actions Commands",
				"description": "This API triggers the execution of the suggested actions for an issue, given the Issue Id. It will return an execution Id. At the completion of the execution, the output of the commands associated with the suggested actions will be provided\n\nInvoking this API would provide the execution id. Execute the 'Get Business API Execution Details' API with this execution id, to receive the suggested actions commands output.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ExecuteSuggestedActionsCommandsRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ExecuteSuggestedActionsCommandsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/enterprise-ssid/{ssidName}": {
			"delete": {
				"operationId": "deleteEnterpriseSSID",
				"tags": [
					"Wireless"
				],
				"summary": "Delete Enterprise SSID",
				"description": "Deletes given enterprise SSID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ssidName",
						"description": "Enter the SSID name to be deleted",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteEnterpriseSSIDResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/application-policy-application-set-count": {
			"get": {
				"operationId": "getApplicationSetsCount",
				"tags": [
					"Application Policy"
				],
				"summary": "Get Application Sets Count",
				"description": "Get the number of existing application-sets ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetApplicationSetsCountResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/ap-provision": {
			"post": {
				"operationId": "aPProvision",
				"tags": [
					"Wireless"
				],
				"summary": "AP Provision",
				"description": "Access Point Provision and ReProvision ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/APProvisionRequest"
						},
						"in": "body"
					},
					{
						"name": "__persistbapioutput",
						"description": "",
						"default": "true",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/APProvisionResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless-profile/{wirelessProfileName}": {
			"delete": {
				"operationId": "deleteWirelessProfile",
				"tags": [
					"Wireless"
				],
				"summary": "Delete Wireless Profile",
				"description": "Delete the Wireless Profile from Cisco DNA Center whose name is provided.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DeleteWirelessProfileRequest"
						},
						"in": "body"
					},
					{
						"name": "wirelessProfileName",
						"description": "Wireless Profile Name",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteWirelessProfileResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/device-enrichment-details": {
			"get": {
				"operationId": "getDeviceEnrichmentDetails",
				"tags": [
					"Devices"
				],
				"summary": "Get Device Enrichment Details",
				"description": "Enriches a given network device context (device id or device Mac Address or device management IP address) with details about the device and neighbor topology",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "entity_type",
						"description": "Device enrichment details can be fetched based on either Device ID or Device MAC address or Device IP Address. This parameter value must either be device_id/mac_address/ip_address",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "entity_value",
						"description": "Contains the actual value for the entity type that has been defined",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceEnrichmentDetailsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/user-enrichment-details": {
			"get": {
				"operationId": "getUserEnrichmentDetails",
				"tags": [
					"Users"
				],
				"summary": "Get User Enrichment Details",
				"description": "Enriches a given network End User context (a network user-id or end user’s device Mac Address) with details about the user and devices that the user is connected to",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "entity_type",
						"description": "User enrichment details can be fetched based on either User ID or Client MAC address. This parameter value must either be network_user_id/mac_address",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "entity_value",
						"description": "Contains the actual value for the entity type that has been defined",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetUserEnrichmentDetailsResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/membership/{siteId}": {
			"get": {
				"operationId": "getMembership",
				"tags": [
					"Sites"
				],
				"summary": "Get Membership",
				"description": "Getting the site children details and device details.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "Site id to retrieve device associated with the site.",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "offset",
						"description": "offset/starting row",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of sites to be retrieved",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "deviceFamily",
						"description": "Device family name ",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "serialNumber",
						"description": "Device serial number",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetMembershipResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/site/{siteId}": {
			"delete": {
				"operationId": "deleteSite",
				"tags": [
					"Sites"
				],
				"summary": "Delete Site",
				"description": "Delete site with area/building/floor by siteId.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "siteId",
						"description": "Site id to which site details to be deleted.",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteSiteResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			},
			"put": {
				"operationId": "updateSite",
				"tags": [
					"Sites"
				],
				"summary": "Update Site",
				"description": "Update site area/building/floor with specified hierarchy and new values",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateSiteRequest"
						},
						"in": "body"
					},
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": 10,
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "__persistbapioutput",
						"description": "Persist bapi sync response",
						"default": true,
						"required": true,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "siteId",
						"description": "Site id to which site details to be updated.",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateSiteResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/sensor-run-now": {
			"put": {
				"operationId": "runNowSensorTest",
				"tags": [
					"Sensors"
				],
				"summary": "Run now sensor test",
				"description": "Intent API to run a deployed SENSOR test",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RunNowSensorTestRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/business/ssid/{ssidName}/{managedAPLocations}": {
			"delete": {
				"operationId": "deleteSSIDAndProvisionItToDevices",
				"tags": [
					"Wireless"
				],
				"summary": "Delete SSID and provision it to devices",
				"description": "Removes SSID or WLAN from the network profile, reprovision the device(s) and deletes the SSID or WLAN from DNA Center",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__persistbapioutput",
						"description": "Enable this parameter to execute the API and return a response asynchronously.",
						"default": "true",
						"required": true,
						"type": "string",
						"in": "header"
					},
					{
						"name": "ssidName",
						"description": "",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "managedAPLocations",
						"description": "",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteSSIDAndProvisionItToDevicesResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/wireless/dynamic-interface/{interfaceName}": {
			"delete": {
				"operationId": "deleteDynamicInterface",
				"tags": [
					"Wireless"
				],
				"summary": "Delete dynamic interface",
				"description": "Delete a dynamic interface",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "If __runsync is set to ‘true’, this defines the maximum time before which if the API completes its execution, then a synchronous response is returned.  If the time taken for the API to complete the execution, exceeds this time, then an asynchronous response is returned with an execution id, that can be used to get the status and response associated with the API execution",
						"default": 10,
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "interfaceName",
						"description": "valid interface-name to be deleted",
						"default": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		}
	},
	"definitions": {
		"TemplateDeploymentInfo": {
			"type": "object",
			"properties": {
				"forcePushTemplate": {
					"type": "boolean"
				},
				"isComposite": {
					"type": "boolean"
				},
				"mainTemplateId": {
					"type": "string"
				},
				"memberTemplateDeploymentInfo": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"targetInfo": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"hostName": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"params": {
								"type": "object",
								"properties": {}
							},
							"resourceParams": {
								"type": "object"
							},
							"type": {
								"type": "string",
								"enum": [
									"MANAGED_DEVICE_IP",
									"MANAGED_DEVICE_UUID",
									"PRE_PROVISIONED_SERIAL",
									"PRE_PROVISIONED_MAC",
									"DEFAULT",
									"MANAGED_DEVICE_HOSTNAME"
								]
							},
							"versionedTemplateId": {
								"type": "string"
							}
						}
					}
				},
				"templateId": {
					"type": "string"
				}
			}
		},
		"TaskIdResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "object"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ApplicationSet": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"instanceId": {
								"type": "integer"
							},
							"displayName": {
								"type": "string"
							},
							"instanceVersion": {
								"type": "number"
							},
							"defaultBusinessRelevance": {
								"type": "string",
								"enum": [
									"BUSINESS_RELEVANT",
									"BUSINESS_IRRELEVANT",
									"DEFAULT"
								]
							},
							"identitySource": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string",
										"enum": [
											"NBAR",
											"APIC_EM"
										]
									}
								}
							},
							"name": {
								"type": "string"
							},
							"namespace": {
								"type": "string"
							},
							"scalableGroupExternalHandle": {
								"type": "string"
							},
							"scalableGroupType": {
								"type": "string"
							},
							"type": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"Listentrystringliststring": {
			"type": "object",
			"properties": {
				"memberType": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"ConfigureAccessPointsRequest": {
			"type": "object",
			"properties": {
				"apList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"apName": {
								"type": "string"
							},
							"macAddress": {
								"type": "string"
							},
							"apNameNew": {
								"type": "string"
							}
						}
					}
				},
				"configureAdminStatus": {
					"type": "boolean"
				},
				"adminStatus": {
					"type": "boolean"
				},
				"configureApMode": {
					"type": "boolean"
				},
				"apMode": {
					"type": "integer"
				},
				"configureFailoverPriority": {
					"type": "boolean"
				},
				"failoverPriority": {
					"type": "integer"
				},
				"configureLedStatus": {
					"type": "boolean"
				},
				"ledStatus": {
					"type": "boolean"
				},
				"configureLedBrightnessLevel": {
					"type": "boolean"
				},
				"ledBrightnessLevel": {
					"type": "integer"
				},
				"configureLocation": {
					"type": "boolean"
				},
				"location": {
					"type": "string"
				},
				"configureHAController": {
					"type": "boolean"
				},
				"primaryControllerName": {
					"type": "string"
				},
				"primaryIpAddress": {
					"type": "object",
					"properties": {
						"address": {
							"type": "string"
						}
					}
				},
				"secondaryControllerName": {
					"type": "string"
				},
				"secondaryIpAddress": {
					"type": "object",
					"properties": {
						"address": {
							"type": "string"
						}
					}
				},
				"tertiaryControllerName": {
					"type": "string"
				},
				"tertiaryIpAddress": {
					"type": "object",
					"properties": {
						"address": {
							"type": "string"
						}
					}
				},
				"radioConfigurations": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"configureRadioRoleAssignment": {
								"type": "boolean"
							},
							"radioRoleAssignment": {
								"type": "string",
								"enum": [
									"auto",
									"serving",
									"monitor"
								]
							},
							"radioBand": {
								"type": "string",
								"enum": [
									"RADIO24",
									"RADIO5"
								]
							},
							"configureAdminStatus": {
								"type": "boolean"
							},
							"adminStatus": {
								"type": "boolean"
							},
							"configureAntennaPatternName": {
								"type": "boolean"
							},
							"antennaPatternName": {
								"type": "string"
							},
							"antennaGain": {
								"type": "integer"
							},
							"configureAntennaCable": {
								"type": "boolean"
							},
							"antennaCableName": {
								"type": "string"
							},
							"cableLoss": {
								"type": "number"
							},
							"configureChannel": {
								"type": "boolean"
							},
							"channelAssignmentMode": {
								"type": "integer"
							},
							"channelNumber": {
								"type": "integer"
							},
							"configureChannelWidth": {
								"type": "boolean"
							},
							"channelWidth": {
								"type": "integer"
							},
							"configurePower": {
								"type": "boolean"
							},
							"powerAssignmentMode": {
								"type": "integer"
							},
							"powerlevel": {
								"type": "integer"
							},
							"radioType": {
								"type": "integer"
							}
						}
					}
				},
				"configureCleanAirSI24Ghz": {
					"type": "boolean"
				},
				"cleanAirSI24": {
					"type": "boolean"
				},
				"configureCleanAirSI5Ghz": {
					"type": "boolean"
				},
				"cleanAirSI5": {
					"type": "boolean"
				},
				"configureCleanAirSI6Ghz": {
					"type": "boolean"
				},
				"cleanAirSI6": {
					"type": "boolean"
				},
				"isAssignedSiteAsLocation": {
					"type": "boolean"
				}
			}
		},
		"ConfigureAccessPointsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"TemplateInfo": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"composite": {
						"type": "boolean"
					},
					"name": {
						"type": "string"
					},
					"projectId": {
						"type": "string"
					},
					"projectName": {
						"type": "string"
					},
					"templateId": {
						"type": "string"
					},
					"versionsInfo": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"author": {
									"type": "string"
								},
								"description": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"version": {
									"type": "string"
								},
								"versionComment": {
									"type": "string"
								},
								"versionTime": {
									"type": "integer"
								}
							}
						}
					}
				}
			}
		},
		"viewgroupwithviews": {
			"type": "object",
			"properties": {
				"viewGroupId": {
					"type": "string"
				},
				"views": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"description": {
								"type": "string"
							},
							"viewId": {
								"type": "string"
							},
							"viewName": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"ChassisListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"assemblyNumber": {
								"type": "string"
							},
							"assemblyRevision": {
								"type": "string"
							},
							"containmentEntity": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"entityPhysicalIndex": {
								"type": "string"
							},
							"hardwareVersion": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"isFieldReplaceable": {
								"type": "string",
								"enum": [
									"UNKNOWN",
									"TRUE",
									"FALSE",
									"NOT_APPLICABLE"
								]
							},
							"isReportingAlarmsAllowed": {
								"type": "string",
								"enum": [
									"UNKNOWN",
									"TRUE",
									"FALSE",
									"NOT_APPLICABLE"
								]
							},
							"manufacturer": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"partNumber": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"vendorEquipmentType": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetAllUserDefinedFieldsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"description": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CountResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "integer"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UpdatewebhookConfiguration": {
			"type": "object",
			"properties": {
				"webhookId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"url": {
					"type": "string"
				},
				"method": {
					"type": "string",
					"enum": [
						"POST",
						"PUT"
					]
				},
				"trustCert": {
					"type": "boolean"
				},
				"headers": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"value": {
								"type": "string"
							},
							"defaultValue": {
								"type": "string"
							},
							"encrypt": {
								"type": "boolean"
							}
						}
					}
				},
				"isProxyRoute": {
					"type": "boolean"
				}
			}
		},
		"UpdateWebhookDestinationResponse": {
			"type": "object",
			"properties": {
				"errorMessage": {
					"type": "object",
					"properties": {
						"errors": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"apiStatus": {
					"type": "string"
				},
				"statusMessage": {
					"type": "string"
				}
			}
		},
		"LANAutomationStopAndUpdateDevicesRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"deviceManagementIPAddress": {
						"type": "string"
					},
					"newLoopback0IPAddress": {
						"type": "string"
					}
				}
			}
		},
		"LANAutomationStopAndUpdateDevicesResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"TemplateDeploymentStatusDTO": {
			"type": "object",
			"properties": {
				"deploymentId": {
					"type": "string"
				},
				"deploymentName": {
					"type": "string"
				},
				"devices": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"detailedStatusMessage": {
								"type": "string"
							},
							"deviceId": {
								"type": "string"
							},
							"duration": {
								"type": "string"
							},
							"endTime": {
								"type": "string"
							},
							"identifier": {
								"type": "string"
							},
							"ipAddress": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"startTime": {
								"type": "string"
							},
							"status": {
								"type": "string"
							},
							"targetType": {
								"type": "string",
								"enum": [
									"MANAGED_DEVICE_IP",
									"MANAGED_DEVICE_UUID",
									"PRE_PROVISIONED_SERIAL",
									"PRE_PROVISIONED_MAC",
									"DEFAULT",
									"MANAGED_DEVICE_HOSTNAME"
								]
							}
						}
					}
				},
				"duration": {
					"type": "string"
				},
				"endTime": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"startTime": {
					"type": "string"
				},
				"status": {
					"type": "string"
				},
				"statusMessage": {
					"type": "string"
				},
				"templateName": {
					"type": "string"
				},
				"templateVersion": {
					"type": "string"
				}
			}
		},
		"CreateSyslogConfiguration": {
			"type": "object",
			"properties": {
				"configId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"host": {
					"type": "string"
				},
				"protocol": {
					"type": "string",
					"enum": [
						"UDP",
						"TCP"
					]
				},
				"port": {
					"type": "string"
				}
			}
		},
		"CreateSyslogDestinationResponse": {
			"type": "object",
			"properties": {
				"errorMessage": {
					"type": "object",
					"properties": {
						"errors": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"apiStatus": {
					"type": "string"
				},
				"statusMessage": {
					"type": "string"
				}
			}
		},
		"DeleteApplicationPolicyQueuingProfileRequest": {
			"type": "object",
			"properties": {}
		},
		"DeleteApplicationPolicyQueuingProfileResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CreateUserDefinedFieldRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"CreateUserDefinedFieldResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetSyncResultForVirtualAccountResponse": {
			"type": "object",
			"properties": {
				"virtualAccountId": {
					"type": "string"
				},
				"autoSyncPeriod": {
					"type": "number"
				},
				"syncResultStr": {
					"type": "string"
				},
				"profile": {
					"type": "object",
					"properties": {
						"proxy": {
							"type": "boolean"
						},
						"makeDefault": {
							"type": "boolean"
						},
						"port": {
							"type": "number"
						},
						"profileId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"addressIpV4": {
							"type": "string"
						},
						"cert": {
							"type": "string"
						},
						"addressFqdn": {
							"type": "string"
						}
					}
				},
				"ccoUser": {
					"type": "string"
				},
				"syncResult": {
					"type": "object",
					"properties": {
						"syncList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"syncType": {
										"type": "string"
									},
									"deviceSnList": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								}
							}
						},
						"syncMsg": {
							"type": "string"
						}
					}
				},
				"token": {
					"type": "string"
				},
				"syncStartTime": {
					"type": "number"
				},
				"lastSync": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				},
				"smartAccountId": {
					"type": "string"
				},
				"expiry": {
					"type": "number"
				},
				"syncStatus": {
					"type": "string"
				}
			}
		},
		"Device": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"deviceInfo": {
					"type": "object",
					"properties": {
						"source": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"stack": {
							"type": "boolean"
						},
						"mode": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"location": {
							"type": "object",
							"properties": {
								"siteId": {
									"type": "string"
								},
								"address": {
									"type": "string"
								},
								"latitude": {
									"type": "string"
								},
								"longitude": {
									"type": "string"
								},
								"altitude": {
									"type": "string"
								}
							}
						},
						"description": {
							"type": "string"
						},
						"onbState": {
							"type": "string"
						},
						"authenticatedMicNumber": {
							"type": "string"
						},
						"authenticatedSudiSerialNo": {
							"type": "string"
						},
						"capabilitiesSupported": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"featuresSupported": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"cmState": {
							"type": "string"
						},
						"firstContact": {
							"type": "number"
						},
						"lastContact": {
							"type": "number"
						},
						"macAddress": {
							"type": "string"
						},
						"pid": {
							"type": "string"
						},
						"deviceSudiSerialNos": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"lastUpdateOn": {
							"type": "number"
						},
						"workflowId": {
							"type": "string"
						},
						"workflowName": {
							"type": "string"
						},
						"projectId": {
							"type": "string"
						},
						"projectName": {
							"type": "string"
						},
						"deviceType": {
							"type": "string"
						},
						"agentType": {
							"type": "string"
						},
						"imageVersion": {
							"type": "string"
						},
						"fileSystemList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"writeable": {
										"type": "boolean"
									},
									"freespace": {
										"type": "number"
									},
									"name": {
										"type": "string"
									},
									"readable": {
										"type": "boolean"
									},
									"size": {
										"type": "number"
									}
								}
							}
						},
						"pnpProfileList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"profileName": {
										"type": "string"
									},
									"discoveryCreated": {
										"type": "boolean"
									},
									"createdBy": {
										"type": "string"
									},
									"primaryEndpoint": {
										"type": "object",
										"properties": {
											"port": {
												"type": "number"
											},
											"protocol": {
												"type": "string"
											},
											"ipv4Address": {
												"type": "object",
												"properties": {}
											},
											"ipv6Address": {
												"type": "object",
												"properties": {}
											},
											"fqdn": {
												"type": "string"
											},
											"certificate": {
												"type": "string"
											}
										}
									},
									"secondaryEndpoint": {
										"type": "object",
										"properties": {
											"port": {
												"type": "number"
											},
											"protocol": {
												"type": "string"
											},
											"ipv4Address": {
												"type": "object",
												"properties": {}
											},
											"ipv6Address": {
												"type": "object",
												"properties": {}
											},
											"fqdn": {
												"type": "string"
											},
											"certificate": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"imageFile": {
							"type": "string"
						},
						"httpHeaders": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"key": {
										"type": "string"
									},
									"value": {
										"type": "string"
									}
								}
							}
						},
						"neighborLinks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"localInterfaceName": {
										"type": "string"
									},
									"localShortInterfaceName": {
										"type": "string"
									},
									"localMacAddress": {
										"type": "string"
									},
									"remoteInterfaceName": {
										"type": "string"
									},
									"remoteShortInterfaceName": {
										"type": "string"
									},
									"remoteMacAddress": {
										"type": "string"
									},
									"remoteDeviceName": {
										"type": "string"
									},
									"remotePlatform": {
										"type": "string"
									},
									"remoteVersion": {
										"type": "string"
									}
								}
							}
						},
						"lastSyncTime": {
							"type": "number"
						},
						"ipInterfaces": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"status": {
										"type": "string"
									},
									"macAddress": {
										"type": "string"
									},
									"ipv4Address": {
										"type": "object",
										"properties": {}
									},
									"ipv6AddressList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {}
										}
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"hostname": {
							"type": "string"
						},
						"authStatus": {
							"type": "string"
						},
						"stackInfo": {
							"type": "object",
							"properties": {
								"supportsStackWorkflows": {
									"type": "boolean"
								},
								"isFullRing": {
									"type": "boolean"
								},
								"stackMemberList": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"serialNumber": {
												"type": "string"
											},
											"state": {
												"type": "string"
											},
											"role": {
												"type": "string"
											},
											"macAddress": {
												"type": "string"
											},
											"pid": {
												"type": "string"
											},
											"licenseLevel": {
												"type": "string"
											},
											"licenseType": {
												"type": "string"
											},
											"sudiSerialNumber": {
												"type": "string"
											},
											"hardwareVersion": {
												"type": "string"
											},
											"stackNumber": {
												"type": "number"
											},
											"softwareVersion": {
												"type": "string"
											},
											"priority": {
												"type": "number"
											}
										}
									}
								},
								"stackRingProtocol": {
									"type": "string"
								},
								"validLicenseLevels": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"totalMemberCount": {
									"type": "number"
								}
							}
						},
						"reloadRequested": {
							"type": "boolean"
						},
						"addedOn": {
							"type": "number"
						},
						"siteId": {
							"type": "string"
						},
						"aaaCredentials": {
							"type": "object",
							"properties": {
								"password": {
									"type": "string"
								},
								"username": {
									"type": "string"
								}
							}
						},
						"userMicNumbers": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"userSudiSerialNos": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"addnMacAddrs": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"preWorkflowCliOuputs": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"cli": {
										"type": "string"
									},
									"cliOutput": {
										"type": "string"
									}
								}
							}
						},
						"tags": {
							"type": "object",
							"properties": {}
						},
						"sudiRequired": {
							"type": "boolean"
						},
						"smartAccountId": {
							"type": "string"
						},
						"virtualAccountId": {
							"type": "string"
						},
						"populateInventory": {
							"type": "boolean"
						},
						"siteName": {
							"type": "string"
						},
						"name": {
							"type": "string"
						}
					}
				},
				"systemResetWorkflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"systemWorkflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"workflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"runSummaryList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"details": {
								"type": "string"
							},
							"historyTaskInfo": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"addnDetails": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"key": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									},
									"name": {
										"type": "string"
									}
								}
							},
							"errorFlag": {
								"type": "boolean"
							},
							"timestamp": {
								"type": "number"
							}
						}
					}
				},
				"workflowParameters": {
					"type": "object",
					"properties": {
						"topOfStackSerialNumber": {
							"type": "string"
						},
						"licenseLevel": {
							"type": "string"
						},
						"licenseType": {
							"type": "string"
						},
						"configList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"configParameters": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"key": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									},
									"configId": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"dayZeroConfig": {
					"type": "object",
					"properties": {
						"config": {
							"type": "string"
						}
					}
				},
				"dayZeroConfigPreview": {
					"type": "object",
					"properties": {}
				},
				"version": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"UpdateDeviceResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"deviceInfo": {
					"type": "object",
					"properties": {
						"source": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"stack": {
							"type": "boolean"
						},
						"mode": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"location": {
							"type": "object",
							"properties": {
								"siteId": {
									"type": "string"
								},
								"address": {
									"type": "string"
								},
								"latitude": {
									"type": "string"
								},
								"longitude": {
									"type": "string"
								},
								"altitude": {
									"type": "string"
								}
							}
						},
						"description": {
							"type": "string"
						},
						"onbState": {
							"type": "string"
						},
						"authenticatedMicNumber": {
							"type": "string"
						},
						"authenticatedSudiSerialNo": {
							"type": "string"
						},
						"capabilitiesSupported": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"featuresSupported": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"cmState": {
							"type": "string"
						},
						"firstContact": {
							"type": "number"
						},
						"lastContact": {
							"type": "number"
						},
						"macAddress": {
							"type": "string"
						},
						"pid": {
							"type": "string"
						},
						"deviceSudiSerialNos": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"lastUpdateOn": {
							"type": "number"
						},
						"workflowId": {
							"type": "string"
						},
						"workflowName": {
							"type": "string"
						},
						"projectId": {
							"type": "string"
						},
						"projectName": {
							"type": "string"
						},
						"deviceType": {
							"type": "string"
						},
						"agentType": {
							"type": "string"
						},
						"imageVersion": {
							"type": "string"
						},
						"fileSystemList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"writeable": {
										"type": "boolean"
									},
									"freespace": {
										"type": "number"
									},
									"name": {
										"type": "string"
									},
									"readable": {
										"type": "boolean"
									},
									"size": {
										"type": "number"
									}
								}
							}
						},
						"pnpProfileList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"profileName": {
										"type": "string"
									},
									"discoveryCreated": {
										"type": "boolean"
									},
									"createdBy": {
										"type": "string"
									},
									"primaryEndpoint": {
										"type": "object",
										"properties": {
											"port": {
												"type": "number"
											},
											"protocol": {
												"type": "string"
											},
											"ipv4Address": {
												"type": "object",
												"properties": {}
											},
											"ipv6Address": {
												"type": "object",
												"properties": {}
											},
											"fqdn": {
												"type": "string"
											},
											"certificate": {
												"type": "string"
											}
										}
									},
									"secondaryEndpoint": {
										"type": "object",
										"properties": {
											"port": {
												"type": "number"
											},
											"protocol": {
												"type": "string"
											},
											"ipv4Address": {
												"type": "object",
												"properties": {}
											},
											"ipv6Address": {
												"type": "object",
												"properties": {}
											},
											"fqdn": {
												"type": "string"
											},
											"certificate": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"imageFile": {
							"type": "string"
						},
						"httpHeaders": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"key": {
										"type": "string"
									},
									"value": {
										"type": "string"
									}
								}
							}
						},
						"neighborLinks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"localInterfaceName": {
										"type": "string"
									},
									"localShortInterfaceName": {
										"type": "string"
									},
									"localMacAddress": {
										"type": "string"
									},
									"remoteInterfaceName": {
										"type": "string"
									},
									"remoteShortInterfaceName": {
										"type": "string"
									},
									"remoteMacAddress": {
										"type": "string"
									},
									"remoteDeviceName": {
										"type": "string"
									},
									"remotePlatform": {
										"type": "string"
									},
									"remoteVersion": {
										"type": "string"
									}
								}
							}
						},
						"lastSyncTime": {
							"type": "number"
						},
						"ipInterfaces": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"status": {
										"type": "string"
									},
									"macAddress": {
										"type": "string"
									},
									"ipv4Address": {
										"type": "object",
										"properties": {}
									},
									"ipv6AddressList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {}
										}
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"hostname": {
							"type": "string"
						},
						"authStatus": {
							"type": "string"
						},
						"stackInfo": {
							"type": "object",
							"properties": {
								"supportsStackWorkflows": {
									"type": "boolean"
								},
								"isFullRing": {
									"type": "boolean"
								},
								"stackMemberList": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"serialNumber": {
												"type": "string"
											},
											"state": {
												"type": "string"
											},
											"role": {
												"type": "string"
											},
											"macAddress": {
												"type": "string"
											},
											"pid": {
												"type": "string"
											},
											"licenseLevel": {
												"type": "string"
											},
											"licenseType": {
												"type": "string"
											},
											"sudiSerialNumber": {
												"type": "string"
											},
											"hardwareVersion": {
												"type": "string"
											},
											"stackNumber": {
												"type": "number"
											},
											"softwareVersion": {
												"type": "string"
											},
											"priority": {
												"type": "number"
											}
										}
									}
								},
								"stackRingProtocol": {
									"type": "string"
								},
								"validLicenseLevels": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"totalMemberCount": {
									"type": "number"
								}
							}
						},
						"reloadRequested": {
							"type": "boolean"
						},
						"addedOn": {
							"type": "number"
						},
						"siteId": {
							"type": "string"
						},
						"aaaCredentials": {
							"type": "object",
							"properties": {
								"password": {
									"type": "string"
								},
								"username": {
									"type": "string"
								}
							}
						},
						"userMicNumbers": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"userSudiSerialNos": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"addnMacAddrs": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"preWorkflowCliOuputs": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"cli": {
										"type": "string"
									},
									"cliOutput": {
										"type": "string"
									}
								}
							}
						},
						"tags": {
							"type": "object",
							"properties": {}
						},
						"sudiRequired": {
							"type": "boolean"
						},
						"smartAccountId": {
							"type": "string"
						},
						"virtualAccountId": {
							"type": "string"
						},
						"populateInventory": {
							"type": "boolean"
						},
						"siteName": {
							"type": "string"
						},
						"name": {
							"type": "string"
						}
					}
				},
				"systemResetWorkflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"systemWorkflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"workflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"runSummaryList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"details": {
								"type": "string"
							},
							"historyTaskInfo": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"addnDetails": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"key": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									},
									"name": {
										"type": "string"
									}
								}
							},
							"errorFlag": {
								"type": "boolean"
							},
							"timestamp": {
								"type": "number"
							}
						}
					}
				},
				"workflowParameters": {
					"type": "object",
					"properties": {
						"topOfStackSerialNumber": {
							"type": "string"
						},
						"licenseLevel": {
							"type": "string"
						},
						"licenseType": {
							"type": "string"
						},
						"configList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"configParameters": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"key": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									},
									"configId": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"dayZeroConfig": {
					"type": "object",
					"properties": {
						"config": {
							"type": "string"
						}
					}
				},
				"dayZeroConfigPreview": {
					"type": "object",
					"properties": {}
				},
				"version": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"DeleteAuthenticationAndPolicyServerAccessConfigurationResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UnclaimRequest": {
			"type": "object",
			"properties": {
				"deviceIdList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"UnClaimDeviceResponse": {
			"type": "object",
			"properties": {
				"jsonArrayResponse": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"jsonResponse": {
					"type": "object",
					"properties": {}
				},
				"message": {
					"type": "string"
				},
				"statusCode": {
					"type": "number"
				}
			}
		},
		"CreateITSMIntegrationSettingRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"data": {
					"type": "object",
					"properties": {
						"ConnectionSettings": {
							"type": "object",
							"properties": {
								"Url": {
									"type": "string"
								},
								"Auth_UserName": {
									"type": "string"
								},
								"Auth_Password": {
									"type": "string"
								}
							}
						}
					}
				},
				"dypName": {
					"type": "string"
				}
			}
		},
		"CreateITSMIntegrationSettingResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"dypId": {
					"type": "string"
				},
				"dypName": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"uniqueKey": {
					"type": "string"
				},
				"dypMajorVersion": {
					"type": "integer"
				},
				"description": {
					"type": "string"
				},
				"data": {
					"type": "object",
					"properties": {
						"ConnectionSettings": {
							"type": "object",
							"properties": {
								"Url": {
									"type": "string"
								},
								"Auth_UserName": {
									"type": "string"
								},
								"Auth_Password": {
									"type": "string"
								}
							}
						}
					}
				},
				"createdDate": {
					"type": "integer"
				},
				"createdBy": {
					"type": "string"
				},
				"updatedBy": {
					"type": "string"
				},
				"softwareVersionLog": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"schemaVersion": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"ModuleResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"assemblyNumber": {
							"type": "string"
						},
						"assemblyRevision": {
							"type": "string"
						},
						"attributeInfo": {
							"type": "object",
							"properties": {}
						},
						"containmentEntity": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"entityPhysicalIndex": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"isFieldReplaceable": {
							"type": "string",
							"enum": [
								"UNKNOWN",
								"TRUE",
								"FALSE",
								"NOT_APPLICABLE"
							]
						},
						"isReportingAlarmsAllowed": {
							"type": "string",
							"enum": [
								"UNKNOWN",
								"TRUE",
								"FALSE",
								"NOT_APPLICABLE"
							]
						},
						"manufacturer": {
							"type": "string"
						},
						"moduleIndex": {
							"type": "integer"
						},
						"name": {
							"type": "string"
						},
						"operationalStateCode": {
							"type": "string"
						},
						"partNumber": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"vendorEquipmentType": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ImageInfoListResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"applicableDevicesForImage": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"mdfId": {
											"type": "string"
										},
										"productId": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"productName": {
											"type": "string"
										}
									}
								}
							},
							"applicationType": {
								"type": "string"
							},
							"createdTime": {
								"type": "string"
							},
							"extendedAttributes": {
								"type": "object",
								"properties": {}
							},
							"family": {
								"type": "string"
							},
							"feature": {
								"type": "string"
							},
							"fileServiceId": {
								"type": "string"
							},
							"fileSize": {
								"type": "string"
							},
							"imageIntegrityStatus": {
								"type": "string"
							},
							"imageName": {
								"type": "string"
							},
							"imageSeries": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"imageSource": {
								"type": "string"
							},
							"imageType": {
								"type": "string"
							},
							"imageUuid": {
								"type": "string"
							},
							"importSourceType": {
								"type": "string",
								"enum": [
									"DEVICE",
									"REMOTEURL",
									"CCO",
									"FILESYSTEM"
								]
							},
							"isTaggedGolden": {
								"type": "boolean"
							},
							"md5Checksum": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"profileInfo": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"description": {
											"type": "string"
										},
										"extendedAttributes": {
											"type": "object",
											"properties": {}
										},
										"memory": {
											"type": "integer"
										},
										"productType": {
											"type": "string"
										},
										"profileName": {
											"type": "string"
										},
										"shares": {
											"type": "integer"
										},
										"vCpu": {
											"type": "integer"
										}
									}
								}
							},
							"shaCheckSum": {
								"type": "string"
							},
							"vendor": {
								"type": "string"
							},
							"version": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"AssignDeviceCredentialToSiteVRequest": {
			"type": "object",
			"properties": {
				"cliId": {
					"type": "string"
				},
				"snmpV2ReadId": {
					"type": "string"
				},
				"snmpV2WriteId": {
					"type": "string"
				},
				"snmpV3Id": {
					"type": "string"
				},
				"httpRead": {
					"type": "string"
				},
				"httpWrite": {
					"type": "string"
				}
			}
		},
		"AssignDeviceCredentialToSiteVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CreateSNMPConfiguration": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"ipAddress": {
					"type": "string"
				},
				"port": {
					"type": "string"
				},
				"snmpVersion": {
					"type": "string",
					"enum": [
						"V2C",
						"V3"
					]
				},
				"community": {
					"type": "string"
				},
				"userName": {
					"type": "string"
				},
				"snmpMode": {
					"type": "string",
					"enum": [
						"AUTH_PRIVACY",
						"AUTH_NO_PRIVACY",
						"NO_AUTH_NO_PRIVACY",
						"NONE"
					]
				},
				"snmpAuthType": {
					"type": "string",
					"enum": [
						"SHA",
						"MD5",
						"NONE"
					]
				},
				"authPassword": {
					"type": "string"
				},
				"snmpPrivacyType": {
					"type": "string",
					"enum": [
						"AES128",
						"DES",
						"NONE"
					]
				},
				"privacyPassword": {
					"type": "string"
				}
			}
		},
		"CreateSNMPDestinationResponse": {
			"type": "object",
			"properties": {
				"errorMessage": {
					"type": "object",
					"properties": {
						"errors": {
							"type": "array",
							"items": {
								"type": "object"
							}
						}
					}
				},
				"apiStatus": {
					"type": "string"
				},
				"statusMessage": {
					"type": "string"
				}
			}
		},
		"CountOfNotificationsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "string"
				}
			}
		},
		"GetITSMIntegrationSettingByIdRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"dypName": {
					"type": "string"
				},
				"dypMajorVersion": {
					"type": "integer"
				},
				"dypId": {
					"type": "string"
				},
				"dypInstanceId": {
					"type": "string"
				},
				"data": {
					"type": "object",
					"properties": {
						"ConnectionSettings": {
							"type": "object",
							"properties": {
								"Url": {
									"type": "string"
								},
								"Auth_UserName": {
									"type": "string"
								},
								"Auth_Password": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"GetITSMIntegrationSettingByIdResponse": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"dypId": {
					"type": "string"
				},
				"dypName": {
					"type": "string"
				},
				"dypMajorVersion": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"uniqueKey": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"data": {
					"type": "object",
					"properties": {
						"ConnectionSettings": {
							"type": "object",
							"properties": {
								"Url": {
									"type": "string"
								},
								"Auth_UserName": {
									"type": "string"
								},
								"Auth_Password": {
									"type": "string"
								}
							}
						}
					}
				},
				"updatedDate": {
					"type": "integer"
				},
				"updatedBy": {
					"type": "string"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"SNMPvWriteCommunityDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"comments": {
						"type": "string"
					},
					"credentialType": {
						"type": "string",
						"enum": [
							"GLOBAL",
							"APP"
						]
					},
					"description": {
						"type": "string"
					},
					"writeCommunity": {
						"type": "string"
					}
				}
			}
		},
		"LANAutomationDeviceUpdateRequest": {
			"type": "object",
			"properties": {
				"loopbackUpdateDeviceList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"deviceManagementIPAddress": {
								"type": "string"
							},
							"newLoopback0IPAddress": {
								"type": "string"
							}
						}
					}
				},
				"linkUpdate": {
					"type": "object",
					"properties": {
						"sourceDeviceManagementIPAddress": {
							"type": "string"
						},
						"sourceDeviceInterfaceName": {
							"type": "string"
						},
						"destinationDeviceManagementIPAddress": {
							"type": "string"
						},
						"destinationDeviceInterfaceName": {
							"type": "string"
						},
						"ipPoolName": {
							"type": "string"
						}
					}
				}
			}
		},
		"LANAutomationDeviceUpdateResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"TagDTO": {
			"type": "object",
			"properties": {
				"systemTag": {
					"type": "boolean"
				},
				"description": {
					"type": "string"
				},
				"dynamicRules": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"memberType": {
								"type": "string"
							},
							"rules": {
								"type": "object",
								"properties": {
									"values": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"items": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"operation": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"value": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"name": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"instanceTenantId": {
					"type": "string"
				}
			}
		},
		"CountOfEventSubscriptionsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "number"
				}
			}
		},
		"UploadFileResponse": {
			"type": "object"
		},
		"GetApplicationPolicyQueuingProfileResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"instanceId": {
								"type": "integer"
							},
							"displayName": {
								"type": "string"
							},
							"instanceCreatedOn": {
								"type": "integer"
							},
							"instanceUpdatedOn": {
								"type": "integer"
							},
							"instanceVersion": {
								"type": "number"
							},
							"createTime": {
								"type": "integer"
							},
							"deployed": {
								"type": "boolean"
							},
							"description": {
								"type": "string"
							},
							"isSeeded": {
								"type": "boolean"
							},
							"isStale": {
								"type": "boolean"
							},
							"lastUpdateTime": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"namespace": {
								"type": "string"
							},
							"provisioningState": {
								"type": "string",
								"enum": [
									"UNKNOWN",
									"DEFINED",
									"DEPLOYED",
									"FAILED",
									"VERIFIED",
									"DEPLOYING",
									"SUBMITTED",
									"PREPROCESSED",
									"VALIDATED"
								]
							},
							"qualifier": {
								"type": "string"
							},
							"resourceVersion": {
								"type": "number"
							},
							"targetIdList": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"type": {
								"type": "string"
							},
							"cfsChangeInfo": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"customProvisions": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"genId": {
								"type": "number"
							},
							"internal": {
								"type": "boolean"
							},
							"isDeleted": {
								"type": "boolean"
							},
							"iseReserved": {
								"type": "boolean"
							},
							"pushed": {
								"type": "boolean"
							},
							"clause": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"instanceId": {
											"type": "integer"
										},
										"displayName": {
											"type": "string"
										},
										"instanceCreatedOn": {
											"type": "integer"
										},
										"instanceUpdatedOn": {
											"type": "integer"
										},
										"instanceVersion": {
											"type": "number"
										},
										"priority": {
											"type": "integer"
										},
										"type": {
											"type": "string",
											"enum": [
												"BANDWIDTH",
												"DSCP_CUSTOMIZATION"
											]
										},
										"isCommonBetweenAllInterfaceSpeeds": {
											"type": "boolean"
										},
										"interfaceSpeedBandwidthClauses": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string"
													},
													"instanceId": {
														"type": "integer"
													},
													"displayName": {
														"type": "string"
													},
													"instanceCreatedOn": {
														"type": "integer"
													},
													"instanceUpdatedOn": {
														"type": "integer"
													},
													"instanceVersion": {
														"type": "number"
													},
													"interfaceSpeed": {
														"type": "string",
														"enum": [
															"ALL",
															"HUNDRED_GBPS",
															"TEN_GBPS",
															"ONE_GBPS",
															"HUNDRED_MBPS",
															"TEN_MBPS",
															"ONE_MBPS"
														]
													},
													"tcBandwidthSettings": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"id": {
																	"type": "string"
																},
																"instanceId": {
																	"type": "integer"
																},
																"displayName": {
																	"type": "string"
																},
																"instanceCreatedOn": {
																	"type": "integer"
																},
																"instanceUpdatedOn": {
																	"type": "integer"
																},
																"instanceVersion": {
																	"type": "number"
																},
																"bandwidthPercentage": {
																	"type": "integer"
																},
																"trafficClass": {
																	"type": "string",
																	"enum": [
																		"BROADCAST_VIDEO",
																		"REAL_TIME_INTERACTIVE",
																		"VOIP_TELEPHONY",
																		"SCAVENGER",
																		"TRANSACTIONAL_DATA",
																		"MULTIMEDIA_CONFERENCING",
																		"NETWORK_CONTROL",
																		"MULTIMEDIA_STREAMING",
																		"BEST_EFFORT",
																		"SIGNALING",
																		"BULK_DATA",
																		"OPS_ADMIN_MGMT"
																	]
																}
															}
														}
													}
												}
											}
										},
										"tcDscpSettings": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string"
													},
													"instanceId": {
														"type": "integer"
													},
													"displayName": {
														"type": "string"
													},
													"instanceCreatedOn": {
														"type": "integer"
													},
													"instanceUpdatedOn": {
														"type": "integer"
													},
													"instanceVersion": {
														"type": "number"
													},
													"dscp": {
														"type": "string"
													},
													"trafficClass": {
														"type": "string",
														"enum": [
															"BROADCAST_VIDEO",
															"REAL_TIME_INTERACTIVE",
															"VOIP_TELEPHONY",
															"SCAVENGER",
															"TRANSACTIONAL_DATA",
															"MULTIMEDIA_CONFERENCING",
															"NETWORK_CONTROL",
															"MULTIMEDIA_STREAMING",
															"BEST_EFFORT",
															"SIGNALING",
															"BULK_DATA",
															"OPS_ADMIN_MGMT"
														]
													}
												}
											}
										}
									}
								}
							},
							"contractClassifier": {
								"type": "array",
								"items": {
									"type": "object"
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetSyslogSubscriptionDetailsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"instanceId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"connectorType": {
						"type": "string"
					},
					"syslogConfig": {
						"type": "object",
						"properties": {
							"configId": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"host": {
								"type": "string"
							},
							"port": {
								"type": "string"
							},
							"protocol": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"NetconfCredentialDTO": {
			"type": "object",
			"properties": {
				"comments": {
					"type": "string"
				},
				"credentialType": {
					"type": "string",
					"enum": [
						"GLOBAL",
						"APP"
					]
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"instanceTenantId": {
					"type": "string"
				},
				"instanceUuid": {
					"type": "string"
				},
				"netconfPort": {
					"type": "string"
				}
			}
		},
		"ClientDetailSummaryInfo": {
			"type": "object",
			"properties": {
				"detail": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"connectionStatus": {
							"type": "string"
						},
						"tracked": {
							"type": "string"
						},
						"hostType": {
							"type": "string",
							"enum": [
								"wired",
								"wireless"
							]
						},
						"userId": {
							"type": "string"
						},
						"duid": {
							"type": "string"
						},
						"identifier": {
							"type": "string"
						},
						"hostName": {
							"type": "string"
						},
						"hostOs": {
							"type": "string"
						},
						"hostVersion": {
							"type": "string"
						},
						"subType": {
							"type": "string"
						},
						"firmwareVersion": {
							"type": "string"
						},
						"deviceVendor": {
							"type": "string"
						},
						"deviceForm": {
							"type": "string"
						},
						"salesCode": {
							"type": "string"
						},
						"countryCode": {
							"type": "string"
						},
						"lastUpdated": {
							"type": "integer"
						},
						"healthScore": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"healthType": {
										"type": "string"
									},
									"reason": {
										"type": "string"
									},
									"score": {
										"type": "integer"
									}
								}
							}
						},
						"hostMac": {
							"type": "string"
						},
						"hostIpV4": {
							"type": "string"
						},
						"hostIpV6": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"authType": {
							"type": "string"
						},
						"vlanId": {
							"type": "integer"
						},
						"l3VirtualNetwork": {
							"type": "string"
						},
						"l2VirtualNetwork": {
							"type": "string"
						},
						"vnid": {
							"type": "integer"
						},
						"upnId": {
							"type": "string"
						},
						"upnName": {
							"type": "string"
						},
						"ssid": {
							"type": "string"
						},
						"frequency": {
							"type": "string"
						},
						"channel": {
							"type": "string"
						},
						"apGroup": {
							"type": "string"
						},
						"sgt": {
							"type": "string"
						},
						"location": {
							"type": "string"
						},
						"clientConnection": {
							"type": "string"
						},
						"connectedDevice": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"mac": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"ip address": {
										"type": "string"
									},
									"mgmtIp": {
										"type": "string"
									},
									"band": {
										"type": "string"
									},
									"mode": {
										"type": "string"
									}
								}
							}
						},
						"issueCount": {
							"type": "integer"
						},
						"rssi": {
							"type": "string"
						},
						"rssiThreshold": {
							"type": "string"
						},
						"rssiIsInclude": {
							"type": "string"
						},
						"avgRssi": {
							"type": "string"
						},
						"snr": {
							"type": "string"
						},
						"snrThreshold": {
							"type": "string"
						},
						"snrIsInclude": {
							"type": "string"
						},
						"avgSnr": {
							"type": "string"
						},
						"dataRate": {
							"type": "string"
						},
						"txBytes": {
							"type": "string"
						},
						"rxBytes": {
							"type": "string"
						},
						"dnsResponse": {
							"type": "string"
						},
						"dnsRequest": {
							"type": "string"
						},
						"onboarding": {
							"type": "object",
							"properties": {
								"averageRunDuration": {
									"type": "string"
								},
								"maxRunDuration": {
									"type": "string"
								},
								"averageAssocDuration": {
									"type": "string"
								},
								"maxAssocDuration": {
									"type": "string"
								},
								"averageAuthDuration": {
									"type": "string"
								},
								"maxAuthDuration": {
									"type": "string"
								},
								"averageDhcpDuration": {
									"type": "string"
								},
								"maxDhcpDuration": {
									"type": "string"
								},
								"aaaServerIp": {
									"type": "string"
								},
								"dhcpServerIp": {
									"type": "string"
								},
								"authDoneTime": {
									"type": "integer"
								},
								"assocDoneTime": {
									"type": "integer"
								},
								"dhcpDoneTime": {
									"type": "integer"
								},
								"assocRootcauseList": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"aaaRootcauseList": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"dhcpRootcauseList": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"otherRootcauseList": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"latestRootCauseList": {
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							}
						},
						"clientType": {
							"type": "string"
						},
						"onboardingTime": {
							"type": "integer"
						},
						"port": {
							"type": "string"
						},
						"iosCapable": {
							"type": "boolean"
						},
						"usage": {
							"type": "number"
						},
						"linkSpeed": {
							"type": "number"
						},
						"linkThreshold": {
							"type": "string"
						},
						"remoteEndDuplexMode": {
							"type": "string"
						},
						"txLinkError": {
							"type": "number"
						},
						"rxLinkError": {
							"type": "number"
						},
						"txRate": {
							"type": "number"
						},
						"rxRate": {
							"type": "number"
						},
						"rxRetryPct": {
							"type": "string"
						},
						"versionTime": {
							"type": "integer"
						},
						"dot11Protocol": {
							"type": "string"
						},
						"slotId": {
							"type": "integer"
						},
						"dot11ProtocolCapability": {
							"type": "string"
						},
						"privateMac": {
							"type": "boolean"
						},
						"dhcpServerIp": {
							"type": "string"
						},
						"aaaServerIp": {
							"type": "string"
						},
						"aaaServerTransaction": {
							"type": "integer"
						},
						"aaaServerFailedTransaction": {
							"type": "integer"
						},
						"aaaServerSuccessTransaction": {
							"type": "integer"
						},
						"aaaServerLatency": {
							"type": "number"
						},
						"aaaServerMABLatency": {
							"type": "number"
						},
						"aaaServerEAPLatency": {
							"type": "number"
						},
						"dhcpServerTransaction": {
							"type": "integer"
						},
						"dhcpServerFailedTransaction": {
							"type": "integer"
						},
						"dhcpServerSuccessTransaction": {
							"type": "integer"
						},
						"dhcpServerLatency": {
							"type": "number"
						},
						"dhcpServerDOLatency": {
							"type": "number"
						},
						"dhcpServerRALatency": {
							"type": "number"
						},
						"maxRoamingDuration": {
							"type": "string"
						},
						"upnOwner": {
							"type": "string"
						},
						"connectedUpn": {
							"type": "string"
						},
						"connectedUpnOwner": {
							"type": "string"
						},
						"connectedUpnId": {
							"type": "string"
						},
						"isGuestUPNEndpoint": {
							"type": "boolean"
						},
						"wlcName": {
							"type": "string"
						},
						"wlcUuid": {
							"type": "string"
						},
						"sessionDuration": {
							"type": "string"
						},
						"intelCapable": {
							"type": "boolean"
						},
						"hwModel": {
							"type": "string"
						},
						"powerType": {
							"type": "string"
						},
						"modelName": {
							"type": "string"
						},
						"bridgeVMMode": {
							"type": "string"
						},
						"dhcpNakIp": {
							"type": "string"
						},
						"dhcpDeclineIp": {
							"type": "string"
						},
						"portDescription": {
							"type": "string"
						},
						"latencyVoice": {
							"type": "number"
						},
						"latencyVideo": {
							"type": "number"
						},
						"latencyBg": {
							"type": "number"
						},
						"latencyBe": {
							"type": "number"
						},
						"trustScore": {
							"type": "string"
						},
						"trustDetails": {
							"type": "string"
						}
					}
				},
				"connectionInfo": {
					"type": "object",
					"properties": {
						"hostType": {
							"type": "string"
						},
						"nwDeviceName": {
							"type": "string"
						},
						"nwDeviceMac": {
							"type": "string"
						},
						"protocol": {
							"type": "string"
						},
						"band": {
							"type": "string"
						},
						"spatialStream": {
							"type": "string"
						},
						"channel": {
							"type": "string"
						},
						"channelWidth": {
							"type": "string"
						},
						"wmm": {
							"type": "string"
						},
						"uapsd": {
							"type": "string"
						},
						"timestamp": {
							"type": "integer"
						}
					}
				},
				"topology": {
					"type": "object",
					"properties": {
						"nodes": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"role": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"deviceType": {
										"type": "string"
									},
									"platformId": {
										"type": "string"
									},
									"family": {
										"type": "string"
									},
									"ip": {
										"type": "string"
									},
									"ipv6": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"softwareVersion": {
										"type": "string"
									},
									"userId": {
										"type": "string"
									},
									"nodeType": {
										"type": "string"
									},
									"radioFrequency": {
										"type": "string"
									},
									"clients": {
										"type": "number"
									},
									"count": {
										"type": "integer"
									},
									"healthScore": {
										"type": "number"
									},
									"level": {
										"type": "number"
									},
									"fabricGroup": {
										"type": "string"
									},
									"fabricRole": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"connectedDevice": {
										"type": "string"
									},
									"stackType": {
										"type": "string"
									}
								}
							}
						},
						"links": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"source": {
										"type": "string"
									},
									"linkStatus": {
										"type": "string"
									},
									"sourceLinkStatus": {
										"type": "string"
									},
									"targetLinkStatus": {
										"type": "string"
									},
									"label": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"target": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"portUtilization": {
										"type": "number"
									},
									"sourceInterfaceName": {
										"type": "string"
									},
									"targetInterfaceName": {
										"type": "string"
									},
									"sourceDuplexInfo": {
										"type": "string"
									},
									"targetDuplexInfo": {
										"type": "string"
									},
									"sourcePortMode": {
										"type": "string"
									},
									"targetPortMode": {
										"type": "string"
									},
									"sourceAdminStatus": {
										"type": "string"
									},
									"targetAdminStatus": {
										"type": "string"
									},
									"apRadioAdminStatus": {
										"type": "string"
									},
									"apRadioOperStatus": {
										"type": "string"
									},
									"sourcePortVLANInfo": {
										"type": "string"
									},
									"targetPortVLANInfo": {
										"type": "string"
									},
									"interfaceDetails": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"clientMacAddress": {
													"type": "string"
												},
												"connectedDeviceIntName": {
													"type": "string"
												},
												"duplex": {
													"type": "string"
												},
												"portMode": {
													"type": "string"
												},
												"adminStatus": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"view": {
			"type": "object",
			"properties": {
				"deliveries": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"EMAIL",
									"WEBHOOK",
									"DOWNLOAD"
								]
							},
							"default": {
								"type": "boolean"
							}
						}
					}
				},
				"description": {
					"type": "string"
				},
				"fieldGroups": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"fieldGroupDisplayName": {
								"type": "string"
							},
							"fieldGroupName": {
								"type": "string"
							},
							"fields": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"displayName": {
											"type": "string"
										},
										"name": {
											"type": "string"
										}
									}
								}
							},
							"tableId": {
								"type": "string"
							}
						}
					}
				},
				"filters": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"additionalInfo": {
								"type": "object",
								"properties": {}
							},
							"cacheFilter": {
								"type": "boolean"
							},
							"dataType": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							},
							"filterSource": {
								"type": "object",
								"properties": {
									"dataSource": {
										"type": "object"
									},
									"displayValuePath": {
										"type": "string"
									},
									"rootPath": {
										"type": "string"
									},
									"valuePath": {
										"type": "string"
									}
								}
							},
							"name": {
								"type": "string"
							},
							"required": {
								"type": "boolean"
							},
							"timeOptions": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"info": {
											"type": "string"
										},
										"maxValue": {
											"type": "integer"
										},
										"minValue": {
											"type": "integer"
										},
										"name": {
											"type": "string"
										},
										"value": {
											"type": "string"
										}
									}
								}
							},
							"type": {
								"type": "string"
							}
						}
					}
				},
				"formats": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"format": {
								"type": "string",
								"enum": [
									"CSV",
									"TDE",
									"JSON",
									"PDF"
								]
							},
							"name": {
								"type": "string"
							},
							"default": {
								"type": "boolean"
							},
							"template": {
								"type": "object",
								"properties": {
									"jsTemplateId": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"schedules": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"SCHEDULE_NOW",
									"SCHEDULE_LATER",
									"SCHEDULE_RECURRENCE"
								]
							},
							"default": {
								"type": "boolean"
							}
						}
					}
				},
				"viewId": {
					"type": "string"
				},
				"viewInfo": {
					"type": "string"
				},
				"viewName": {
					"type": "string"
				}
			}
		},
		"SNMPvCredentialDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"authPassword": {
						"type": "string"
					},
					"authType": {
						"type": "string",
						"enum": [
							"SHA",
							"MD5"
						]
					},
					"comments": {
						"type": "string"
					},
					"credentialType": {
						"type": "string",
						"enum": [
							"GLOBAL",
							"APP"
						]
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"instanceTenantId": {
						"type": "string"
					},
					"instanceUuid": {
						"type": "string"
					},
					"privacyPassword": {
						"type": "string"
					},
					"privacyType": {
						"type": "string",
						"enum": [
							"DES",
							"AES128"
						]
					},
					"snmpMode": {
						"type": "string",
						"enum": [
							"AUTHPRIV",
							"AUTHNOPRIV",
							"NOAUTHNOPRIV"
						]
					},
					"username": {
						"type": "string"
					}
				}
			}
		},
		"SAVAMapping": {
			"type": "object",
			"properties": {
				"autoSyncPeriod": {
					"type": "integer"
				},
				"ccoUser": {
					"type": "string"
				},
				"expiry": {
					"type": "integer"
				},
				"lastSync": {
					"type": "integer"
				},
				"profile": {
					"type": "object",
					"properties": {
						"addressFqdn": {
							"type": "string"
						},
						"addressIpV4": {
							"type": "string"
						},
						"cert": {
							"type": "string"
						},
						"makeDefault": {
							"type": "boolean"
						},
						"name": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"profileId": {
							"type": "string"
						},
						"proxy": {
							"type": "boolean"
						}
					}
				},
				"smartAccountId": {
					"type": "string"
				},
				"syncResult": {
					"type": "object",
					"properties": {
						"syncList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"deviceSnList": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"syncType": {
										"type": "string",
										"enum": [
											"Add",
											"Update",
											"Delete",
											"MismatchError"
										]
									}
								}
							}
						},
						"syncMsg": {
							"type": "string"
						}
					}
				},
				"syncResultStr": {
					"type": "string"
				},
				"syncStartTime": {
					"type": "integer"
				},
				"syncStatus": {
					"type": "string",
					"enum": [
						"NOT_SYNCED",
						"SYNCING",
						"SUCCESS",
						"FAILURE"
					]
				},
				"tenantId": {
					"type": "string"
				},
				"token": {
					"type": "string"
				},
				"virtualAccountId": {
					"type": "string"
				}
			}
		},
		"AddVirtualAccountResponse": {
			"type": "object",
			"properties": {
				"virtualAccountId": {
					"type": "string"
				},
				"autoSyncPeriod": {
					"type": "number"
				},
				"syncResultStr": {
					"type": "string"
				},
				"profile": {
					"type": "object",
					"properties": {
						"proxy": {
							"type": "boolean"
						},
						"makeDefault": {
							"type": "boolean"
						},
						"port": {
							"type": "number"
						},
						"profileId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"addressIpV4": {
							"type": "string"
						},
						"cert": {
							"type": "string"
						},
						"addressFqdn": {
							"type": "string"
						}
					}
				},
				"ccoUser": {
					"type": "string"
				},
				"syncResult": {
					"type": "object",
					"properties": {
						"syncList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"syncType": {
										"type": "string"
									},
									"deviceSnList": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								}
							}
						},
						"syncMsg": {
							"type": "string"
						}
					}
				},
				"token": {
					"type": "string"
				},
				"syncStartTime": {
					"type": "number"
				},
				"lastSync": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				},
				"smartAccountId": {
					"type": "string"
				},
				"expiry": {
					"type": "number"
				},
				"syncStatus": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"apManagerInterfaceIp": {
								"type": "string"
							},
							"associatedWlcIp": {
								"type": "string"
							},
							"bootDateTime": {
								"type": "string"
							},
							"collectionInterval": {
								"type": "string"
							},
							"collectionStatus": {
								"type": "string"
							},
							"errorCode": {
								"type": "string"
							},
							"errorDescription": {
								"type": "string"
							},
							"family": {
								"type": "string"
							},
							"hostname": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"interfaceCount": {
								"type": "string"
							},
							"inventoryStatusDetail": {
								"type": "string"
							},
							"lastUpdateTime": {
								"type": "string"
							},
							"lastUpdated": {
								"type": "string"
							},
							"lineCardCount": {
								"type": "string"
							},
							"lineCardId": {
								"type": "string"
							},
							"location": {
								"type": "string"
							},
							"locationName": {
								"type": "string"
							},
							"macAddress": {
								"type": "string"
							},
							"managementIpAddress": {
								"type": "string"
							},
							"memorySize": {
								"type": "string"
							},
							"platformId": {
								"type": "string"
							},
							"reachabilityFailureReason": {
								"type": "string"
							},
							"reachabilityStatus": {
								"type": "string"
							},
							"role": {
								"type": "string"
							},
							"roleSource": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"series": {
								"type": "string"
							},
							"snmpContact": {
								"type": "string"
							},
							"snmpLocation": {
								"type": "string"
							},
							"softwareType": {
								"type": "string"
							},
							"softwareVersion": {
								"type": "string"
							},
							"tagCount": {
								"type": "string"
							},
							"tunnelUdpPort": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"upTime": {
								"type": "string"
							},
							"waasDeviceMode": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetTheDetailsOfPhysicalComponentsOfTheGivenDeviceResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"operationalStateCode": {
								"type": "string"
							},
							"productId": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"vendorEquipmentType": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"manufacturer": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"InterfacePoeDetailResult": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"adminStatus": {
								"type": "string"
							},
							"operStatus": {
								"type": "string"
							},
							"interfaceName": {
								"type": "string"
							},
							"maxPortPower": {
								"type": "string"
							},
							"allocatedPower": {
								"type": "string"
							},
							"portPowerDrawn": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"GetApplicationPolicyDefaultResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"instanceId": {
								"type": "integer"
							},
							"displayName": {
								"type": "string"
							},
							"instanceCreatedOn": {
								"type": "integer"
							},
							"instanceUpdatedOn": {
								"type": "integer"
							},
							"instanceVersion": {
								"type": "number"
							},
							"createTime": {
								"type": "integer"
							},
							"deployed": {
								"type": "boolean"
							},
							"isSeeded": {
								"type": "boolean"
							},
							"isStale": {
								"type": "boolean"
							},
							"lastUpdateTime": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"namespace": {
								"type": "string"
							},
							"provisioningState": {
								"type": "string",
								"enum": [
									"UNKNOWN",
									"DEFINED",
									"DEPLOYED",
									"FAILED",
									"VERIFIED",
									"DEPLOYING",
									"SUBMITTED",
									"PREPROCESSED",
									"VALIDATED"
								]
							},
							"qualifier": {
								"type": "string"
							},
							"resourceVersion": {
								"type": "number"
							},
							"targetIdList": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"type": {
								"type": "string"
							},
							"cfsChangeInfo": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"customProvisions": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"deletePolicyStatus": {
								"type": "string",
								"enum": [
									"NONE",
									"DELETED",
									"RESTORED"
								]
							},
							"internal": {
								"type": "boolean"
							},
							"isDeleted": {
								"type": "boolean"
							},
							"isEnabled": {
								"type": "boolean"
							},
							"isScopeStale": {
								"type": "boolean"
							},
							"iseReserved": {
								"type": "boolean"
							},
							"policyStatus": {
								"type": "string",
								"enum": [
									"ENABLED",
									"DISABLED",
									"MONITOR"
								]
							},
							"priority": {
								"type": "integer"
							},
							"pushed": {
								"type": "boolean"
							},
							"contractList": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"exclusiveContract": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"instanceId": {
										"type": "integer"
									},
									"displayName": {
										"type": "string"
									},
									"instanceCreatedOn": {
										"type": "integer"
									},
									"instanceUpdatedOn": {
										"type": "integer"
									},
									"instanceVersion": {
										"type": "number"
									},
									"clause": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string"
												},
												"instanceId": {
													"type": "integer"
												},
												"displayName": {
													"type": "string"
												},
												"instanceCreatedOn": {
													"type": "integer"
												},
												"instanceUpdatedOn": {
													"type": "integer"
												},
												"instanceVersion": {
													"type": "number"
												},
												"priority": {
													"type": "integer"
												},
												"type": {
													"type": "string",
													"enum": [
														"BUSINESS_RELEVANCE"
													]
												},
												"relevanceLevel": {
													"type": "string",
													"enum": [
														"BUSINESS_RELEVANT",
														"BUSINESS_IRRELEVANT",
														"DEFAULT"
													]
												}
											}
										}
									}
								}
							},
							"identitySource": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"instanceId": {
										"type": "integer"
									},
									"displayName": {
										"type": "string"
									},
									"instanceCreatedOn": {
										"type": "integer"
									},
									"instanceUpdatedOn": {
										"type": "integer"
									},
									"instanceVersion": {
										"type": "number"
									},
									"state": {
										"type": "string",
										"enum": [
											"INACTIVE",
											"ACTIVE",
											"DELETED"
										]
									},
									"type": {
										"type": "string",
										"enum": [
											"APIC_EM",
											"NBAR"
										]
									}
								}
							},
							"producer": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"instanceId": {
										"type": "integer"
									},
									"displayName": {
										"type": "string"
									},
									"instanceCreatedOn": {
										"type": "integer"
									},
									"instanceUpdatedOn": {
										"type": "integer"
									},
									"instanceVersion": {
										"type": "number"
									},
									"scalableGroup": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"idRef": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeleteAScheduledReportResponse": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string"
				},
				"status": {
					"type": "integer"
				}
			}
		},
		"ImportDevicesInBulkResponse": {
			"type": "object",
			"properties": {
				"successList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"deviceInfo": {
								"type": "object",
								"properties": {
									"source": {
										"type": "string"
									},
									"serialNumber": {
										"type": "string"
									},
									"stack": {
										"type": "boolean"
									},
									"mode": {
										"type": "string"
									},
									"state": {
										"type": "string"
									},
									"location": {
										"type": "object",
										"properties": {
											"siteId": {
												"type": "string"
											},
											"address": {
												"type": "string"
											},
											"latitude": {
												"type": "string"
											},
											"longitude": {
												"type": "string"
											},
											"altitude": {
												"type": "string"
											}
										}
									},
									"description": {
										"type": "string"
									},
									"onbState": {
										"type": "string"
									},
									"authenticatedMicNumber": {
										"type": "string"
									},
									"authenticatedSudiSerialNo": {
										"type": "string"
									},
									"capabilitiesSupported": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"featuresSupported": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"cmState": {
										"type": "string"
									},
									"firstContact": {
										"type": "number"
									},
									"lastContact": {
										"type": "number"
									},
									"macAddress": {
										"type": "string"
									},
									"pid": {
										"type": "string"
									},
									"deviceSudiSerialNos": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"lastUpdateOn": {
										"type": "number"
									},
									"workflowId": {
										"type": "string"
									},
									"workflowName": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"projectName": {
										"type": "string"
									},
									"deviceType": {
										"type": "string"
									},
									"agentType": {
										"type": "string"
									},
									"imageVersion": {
										"type": "string"
									},
									"fileSystemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"type": {
													"type": "string"
												},
												"writeable": {
													"type": "boolean"
												},
												"freespace": {
													"type": "number"
												},
												"name": {
													"type": "string"
												},
												"readable": {
													"type": "boolean"
												},
												"size": {
													"type": "number"
												}
											}
										}
									},
									"pnpProfileList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"profileName": {
													"type": "string"
												},
												"discoveryCreated": {
													"type": "boolean"
												},
												"createdBy": {
													"type": "string"
												},
												"primaryEndpoint": {
													"type": "object",
													"properties": {
														"port": {
															"type": "number"
														},
														"protocol": {
															"type": "string"
														},
														"ipv4Address": {
															"type": "object",
															"properties": {}
														},
														"ipv6Address": {
															"type": "object",
															"properties": {}
														},
														"fqdn": {
															"type": "string"
														},
														"certificate": {
															"type": "string"
														}
													}
												},
												"secondaryEndpoint": {
													"type": "object",
													"properties": {
														"port": {
															"type": "number"
														},
														"protocol": {
															"type": "string"
														},
														"ipv4Address": {
															"type": "object",
															"properties": {}
														},
														"ipv6Address": {
															"type": "object",
															"properties": {}
														},
														"fqdn": {
															"type": "string"
														},
														"certificate": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"imageFile": {
										"type": "string"
									},
									"httpHeaders": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"key": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									},
									"neighborLinks": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"localInterfaceName": {
													"type": "string"
												},
												"localShortInterfaceName": {
													"type": "string"
												},
												"localMacAddress": {
													"type": "string"
												},
												"remoteInterfaceName": {
													"type": "string"
												},
												"remoteShortInterfaceName": {
													"type": "string"
												},
												"remoteMacAddress": {
													"type": "string"
												},
												"remoteDeviceName": {
													"type": "string"
												},
												"remotePlatform": {
													"type": "string"
												},
												"remoteVersion": {
													"type": "string"
												}
											}
										}
									},
									"lastSyncTime": {
										"type": "number"
									},
									"ipInterfaces": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"status": {
													"type": "string"
												},
												"macAddress": {
													"type": "string"
												},
												"ipv4Address": {
													"type": "object",
													"properties": {}
												},
												"ipv6AddressList": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {}
													}
												},
												"name": {
													"type": "string"
												}
											}
										}
									},
									"hostname": {
										"type": "string"
									},
									"authStatus": {
										"type": "string"
									},
									"stackInfo": {
										"type": "object",
										"properties": {
											"supportsStackWorkflows": {
												"type": "boolean"
											},
											"isFullRing": {
												"type": "boolean"
											},
											"stackMemberList": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"serialNumber": {
															"type": "string"
														},
														"state": {
															"type": "string"
														},
														"role": {
															"type": "string"
														},
														"macAddress": {
															"type": "string"
														},
														"pid": {
															"type": "string"
														},
														"licenseLevel": {
															"type": "string"
														},
														"licenseType": {
															"type": "string"
														},
														"sudiSerialNumber": {
															"type": "string"
														},
														"hardwareVersion": {
															"type": "string"
														},
														"stackNumber": {
															"type": "number"
														},
														"softwareVersion": {
															"type": "string"
														},
														"priority": {
															"type": "number"
														}
													}
												}
											},
											"stackRingProtocol": {
												"type": "string"
											},
											"validLicenseLevels": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"totalMemberCount": {
												"type": "number"
											}
										}
									},
									"reloadRequested": {
										"type": "boolean"
									},
									"addedOn": {
										"type": "number"
									},
									"siteId": {
										"type": "string"
									},
									"aaaCredentials": {
										"type": "object",
										"properties": {
											"password": {
												"type": "string"
											},
											"username": {
												"type": "string"
											}
										}
									},
									"userMicNumbers": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"userSudiSerialNos": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"addnMacAddrs": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"preWorkflowCliOuputs": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"cli": {
													"type": "string"
												},
												"cliOutput": {
													"type": "string"
												}
											}
										}
									},
									"tags": {
										"type": "object",
										"properties": {}
									},
									"sudiRequired": {
										"type": "boolean"
									},
									"smartAccountId": {
										"type": "string"
									},
									"virtualAccountId": {
										"type": "string"
									},
									"populateInventory": {
										"type": "boolean"
									},
									"siteName": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								}
							},
							"systemResetWorkflow": {
								"type": "object",
								"properties": {
									"_id": {
										"type": "string"
									},
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"lastupdateOn": {
										"type": "number"
									},
									"imageId": {
										"type": "string"
									},
									"currTaskIdx": {
										"type": "number"
									},
									"addedOn": {
										"type": "number"
									},
									"tasks": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"currWorkItemIdx": {
													"type": "number"
												},
												"taskSeqNo": {
													"type": "number"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"workItemList": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"state": {
																"type": "string"
															},
															"command": {
																"type": "string"
															},
															"outputStr": {
																"type": "string"
															},
															"endTime": {
																"type": "number"
															},
															"startTime": {
																"type": "number"
															},
															"timeTaken": {
																"type": "number"
															}
														}
													}
												},
												"timeTaken": {
													"type": "number"
												},
												"name": {
													"type": "string"
												}
											}
										}
									},
									"addToInventory": {
										"type": "boolean"
									},
									"instanceType": {
										"type": "string"
									},
									"endTime": {
										"type": "number"
									},
									"execTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"useState": {
										"type": "string"
									},
									"configId": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"version": {
										"type": "number"
									},
									"tenantId": {
										"type": "string"
									}
								}
							},
							"systemWorkflow": {
								"type": "object",
								"properties": {
									"_id": {
										"type": "string"
									},
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"lastupdateOn": {
										"type": "number"
									},
									"imageId": {
										"type": "string"
									},
									"currTaskIdx": {
										"type": "number"
									},
									"addedOn": {
										"type": "number"
									},
									"tasks": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"currWorkItemIdx": {
													"type": "number"
												},
												"taskSeqNo": {
													"type": "number"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"workItemList": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"state": {
																"type": "string"
															},
															"command": {
																"type": "string"
															},
															"outputStr": {
																"type": "string"
															},
															"endTime": {
																"type": "number"
															},
															"startTime": {
																"type": "number"
															},
															"timeTaken": {
																"type": "number"
															}
														}
													}
												},
												"timeTaken": {
													"type": "number"
												},
												"name": {
													"type": "string"
												}
											}
										}
									},
									"addToInventory": {
										"type": "boolean"
									},
									"instanceType": {
										"type": "string"
									},
									"endTime": {
										"type": "number"
									},
									"execTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"useState": {
										"type": "string"
									},
									"configId": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"version": {
										"type": "number"
									},
									"tenantId": {
										"type": "string"
									}
								}
							},
							"workflow": {
								"type": "object",
								"properties": {
									"_id": {
										"type": "string"
									},
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"lastupdateOn": {
										"type": "number"
									},
									"imageId": {
										"type": "string"
									},
									"currTaskIdx": {
										"type": "number"
									},
									"addedOn": {
										"type": "number"
									},
									"tasks": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"currWorkItemIdx": {
													"type": "number"
												},
												"taskSeqNo": {
													"type": "number"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"workItemList": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"state": {
																"type": "string"
															},
															"command": {
																"type": "string"
															},
															"outputStr": {
																"type": "string"
															},
															"endTime": {
																"type": "number"
															},
															"startTime": {
																"type": "number"
															},
															"timeTaken": {
																"type": "number"
															}
														}
													}
												},
												"timeTaken": {
													"type": "number"
												},
												"name": {
													"type": "string"
												}
											}
										}
									},
									"addToInventory": {
										"type": "boolean"
									},
									"instanceType": {
										"type": "string"
									},
									"endTime": {
										"type": "number"
									},
									"execTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"useState": {
										"type": "string"
									},
									"configId": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"version": {
										"type": "number"
									},
									"tenantId": {
										"type": "string"
									}
								}
							},
							"runSummaryList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"details": {
											"type": "string"
										},
										"historyTaskInfo": {
											"type": "object",
											"properties": {
												"type": {
													"type": "string"
												},
												"workItemList": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"state": {
																"type": "string"
															},
															"command": {
																"type": "string"
															},
															"outputStr": {
																"type": "string"
															},
															"endTime": {
																"type": "number"
															},
															"startTime": {
																"type": "number"
															},
															"timeTaken": {
																"type": "number"
															}
														}
													}
												},
												"timeTaken": {
													"type": "number"
												},
												"addnDetails": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"key": {
																"type": "string"
															},
															"value": {
																"type": "string"
															}
														}
													}
												},
												"name": {
													"type": "string"
												}
											}
										},
										"errorFlag": {
											"type": "boolean"
										},
										"timestamp": {
											"type": "number"
										}
									}
								}
							},
							"workflowParameters": {
								"type": "object",
								"properties": {
									"topOfStackSerialNumber": {
										"type": "string"
									},
									"licenseLevel": {
										"type": "string"
									},
									"licenseType": {
										"type": "string"
									},
									"configList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"configParameters": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"key": {
																"type": "string"
															},
															"value": {
																"type": "string"
															}
														}
													}
												},
												"configId": {
													"type": "string"
												}
											}
										}
									}
								}
							},
							"dayZeroConfig": {
								"type": "object",
								"properties": {
									"config": {
										"type": "string"
									}
								}
							},
							"dayZeroConfigPreview": {
								"type": "object",
								"properties": {}
							},
							"version": {
								"type": "number"
							},
							"tenantId": {
								"type": "string"
							}
						}
					}
				},
				"failureList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"index": {
								"type": "number"
							},
							"serialNum": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"msg": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"GetWebhookDestinationResponse": {
			"type": "object",
			"properties": {
				"errorMessage": {
					"type": "object",
					"properties": {
						"errors": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"apiStatus": {
					"type": "string"
				},
				"statusMessage": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"version": {
								"type": "string"
							},
							"tenantId": {
								"type": "string"
							},
							"webhookId": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"url": {
								"type": "string"
							},
							"method": {
								"type": "string"
							},
							"trustCert": {
								"type": "boolean"
							},
							"headers": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"value": {
											"type": "string"
										},
										"defaultValue": {
											"type": "string"
										},
										"encrypt": {
											"type": "boolean"
										}
									}
								}
							},
							"isProxyRoute": {
								"type": "boolean"
							}
						}
					}
				}
			}
		},
		"DeregisterVirtualAccountResponse": {
			"type": "object",
			"properties": {
				"virtualAccountId": {
					"type": "string"
				},
				"autoSyncPeriod": {
					"type": "number"
				},
				"syncResultStr": {
					"type": "string"
				},
				"profile": {
					"type": "object",
					"properties": {
						"proxy": {
							"type": "boolean"
						},
						"makeDefault": {
							"type": "boolean"
						},
						"port": {
							"type": "number"
						},
						"profileId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"addressIpV4": {
							"type": "string"
						},
						"cert": {
							"type": "string"
						},
						"addressFqdn": {
							"type": "string"
						}
					}
				},
				"ccoUser": {
					"type": "string"
				},
				"syncResult": {
					"type": "object",
					"properties": {
						"syncList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"syncType": {
										"type": "string"
									},
									"deviceSnList": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								}
							}
						},
						"syncMsg": {
							"type": "string"
						}
					}
				},
				"token": {
					"type": "string"
				},
				"syncStartTime": {
					"type": "number"
				},
				"lastSync": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				},
				"smartAccountId": {
					"type": "string"
				},
				"expiry": {
					"type": "number"
				},
				"syncStatus": {
					"type": "string"
				}
			}
		},
		"ClearMacAddressTableRequest": {
			"type": "object",
			"properties": {
				"operation": {
					"type": "string"
				},
				"payload": {
					"type": "object",
					"properties": {}
				}
			}
		},
		"ClearMacAddressTableResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DnacPlatformSiteHierarchyResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"siteName": {
								"type": "string"
							},
							"siteId": {
								"type": "string"
							},
							"parentSiteId": {
								"type": "string"
							},
							"parentSiteName": {
								"type": "string"
							},
							"siteType": {
								"type": "string"
							},
							"latitude": {
								"type": "number"
							},
							"longitude": {
								"type": "number"
							},
							"healthyNetworkDevicePercentage": {
								"type": "integer"
							},
							"healthyClientsPercentage": {
								"type": "integer"
							},
							"clientHealthWired": {
								"type": "integer"
							},
							"clientHealthWireless": {
								"type": "integer"
							},
							"numberOfClients": {
								"type": "integer"
							},
							"numberOfNetworkDevice": {
								"type": "integer"
							},
							"networkHealthAverage": {
								"type": "integer"
							},
							"networkHealthAccess": {
								"type": "integer"
							},
							"networkHealthCore": {
								"type": "integer"
							},
							"networkHealthDistribution": {
								"type": "integer"
							},
							"networkHealthRouter": {
								"type": "integer"
							},
							"networkHealthWireless": {
								"type": "integer"
							},
							"networkHealthAP": {
								"type": "integer"
							},
							"networkHealthWLC": {
								"type": "integer"
							},
							"networkHealthSwitch": {
								"type": "integer"
							},
							"networkHealthOthers": {
								"type": "integer"
							},
							"numberOfWiredClients": {
								"type": "integer"
							},
							"numberOfWirelessClients": {
								"type": "integer"
							},
							"totalNumberOfConnectedWiredClients": {
								"type": "integer"
							},
							"totalNumberOfActiveWirelessClients": {
								"type": "integer"
							},
							"wiredGoodClients": {
								"type": "integer"
							},
							"wirelessGoodClients": {
								"type": "integer"
							},
							"overallGoodDevices": {
								"type": "integer"
							},
							"accessGoodCount": {
								"type": "integer"
							},
							"accessTotalCount": {
								"type": "integer"
							},
							"coreGoodCount": {
								"type": "integer"
							},
							"coreTotalCount": {
								"type": "integer"
							},
							"distributionGoodCount": {
								"type": "integer"
							},
							"distributionTotalCount": {
								"type": "integer"
							},
							"routerGoodCount": {
								"type": "integer"
							},
							"routerTotalCount": {
								"type": "integer"
							},
							"wirelessDeviceGoodCount": {
								"type": "integer"
							},
							"wirelessDeviceTotalCount": {
								"type": "integer"
							},
							"apDeviceGoodCount": {
								"type": "integer"
							},
							"apDeviceTotalCount": {
								"type": "integer"
							},
							"wlcDeviceGoodCount": {
								"type": "integer"
							},
							"wlcDeviceTotalCount": {
								"type": "integer"
							},
							"switchDeviceGoodCount": {
								"type": "integer"
							},
							"switchDeviceTotalCount": {
								"type": "integer"
							},
							"applicationHealth": {
								"type": "integer"
							},
							"applicationHealthInfo": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"trafficClass": {
											"type": "string"
										},
										"bytesCount": {
											"type": "number"
										},
										"healthScore": {
											"type": "integer"
										}
									}
								}
							},
							"applicationGoodCount": {
								"type": "integer"
							},
							"applicationTotalCount": {
								"type": "integer"
							},
							"applicationBytesTotalCount": {
								"type": "number"
							},
							"dnacInfo": {
								"type": "object",
								"properties": {
									"uuid": {
										"type": "string"
									},
									"ip": {
										"type": "string"
									},
									"status": {
										"type": "string"
									}
								}
							},
							"usage": {
								"type": "number"
							},
							"applicationHealthStats": {
								"type": "object",
								"properties": {
									"appTotalCount": {
										"type": "number"
									},
									"businessRelevantAppCount": {
										"type": "object",
										"properties": {
											"poor": {
												"type": "number"
											},
											"fair": {
												"type": "number"
											},
											"good": {
												"type": "number"
											}
										}
									},
									"businessIrrelevantAppCount": {
										"type": "object",
										"properties": {
											"poor": {
												"type": "number"
											},
											"fair": {
												"type": "number"
											},
											"good": {
												"type": "number"
											}
										}
									},
									"defaultHealthAppCount": {
										"type": "object",
										"properties": {
											"poor": {
												"type": "number"
											},
											"fair": {
												"type": "number"
											},
											"good": {
												"type": "number"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"GetSiteCountVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "integer"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UpdateSNMPConfiguration": {
			"type": "object",
			"properties": {
				"errorMessage": {
					"type": "object",
					"properties": {
						"errors": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"apiStatus": {
					"type": "string"
				},
				"statusMessage": {
					"type": "string"
				}
			}
		},
		"AuthorizeDeviceRequest": {
			"type": "object",
			"properties": {
				"deviceIdList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"AuthorizeDeviceResponse": {
			"type": "object",
			"properties": {
				"jsonResponse": {
					"type": "object",
					"properties": {
						"empty": {
							"type": "boolean"
						}
					}
				},
				"message": {
					"type": "string"
				},
				"statusCode": {
					"type": "number"
				},
				"jsonArrayResponse": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"VlanListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"interfaceName": {
								"type": "string"
							},
							"ipAddress": {
								"type": "string"
							},
							"mask": {
								"type": "integer"
							},
							"networkAddress": {
								"type": "string"
							},
							"numberOfIPs": {
								"type": "integer"
							},
							"prefix": {
								"type": "string"
							},
							"vlanNumber": {
								"type": "integer"
							},
							"vlanType": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"TemplateDTO": {
			"type": "object",
			"properties": {
				"author": {
					"type": "string"
				},
				"composite": {
					"type": "boolean"
				},
				"containingTemplates": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"composite": {
								"type": "boolean"
							},
							"description": {
								"type": "string"
							},
							"deviceTypes": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"productFamily": {
											"type": "string"
										},
										"productSeries": {
											"type": "string"
										},
										"productType": {
											"type": "string"
										}
									}
								}
							},
							"id": {
								"type": "string"
							},
							"language": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"projectName": {
								"type": "string"
							},
							"rollbackTemplateParams": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"binding": {
											"type": "string"
										},
										"customOrder": {
											"type": "integer"
										},
										"dataType": {
											"type": "string",
											"enum": [
												"STRING",
												"INTEGER",
												"IPADDRESS",
												"MACADDRESS",
												"SECTIONDIVIDER"
											]
										},
										"defaultValue": {
											"type": "string"
										},
										"description": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"group": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"instructionText": {
											"type": "string"
										},
										"key": {
											"type": "string"
										},
										"notParam": {
											"type": "boolean"
										},
										"order": {
											"type": "integer"
										},
										"paramArray": {
											"type": "boolean"
										},
										"parameterName": {
											"type": "string"
										},
										"provider": {
											"type": "string"
										},
										"range": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string"
													},
													"maxValue": {
														"type": "integer"
													},
													"minValue": {
														"type": "integer"
													}
												}
											}
										},
										"required": {
											"type": "boolean"
										},
										"selection": {
											"type": "object",
											"properties": {
												"defaultSelectedValues": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"id": {
													"type": "string"
												},
												"selectionType": {
													"type": "string",
													"enum": [
														"SINGLE_SELECT",
														"MULTI_SELECT"
													]
												},
												"selectionValues": {
													"type": "object",
													"properties": {}
												}
											}
										}
									}
								}
							},
							"tags": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"name": {
											"type": "string"
										}
									}
								}
							},
							"templateContent": {
								"type": "string"
							},
							"templateParams": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"binding": {
											"type": "string"
										},
										"customOrder": {
											"type": "integer"
										},
										"dataType": {
											"type": "string",
											"enum": [
												"STRING",
												"INTEGER",
												"IPADDRESS",
												"MACADDRESS",
												"SECTIONDIVIDER"
											]
										},
										"defaultValue": {
											"type": "string"
										},
										"description": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"group": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"instructionText": {
											"type": "string"
										},
										"key": {
											"type": "string"
										},
										"notParam": {
											"type": "boolean"
										},
										"order": {
											"type": "integer"
										},
										"paramArray": {
											"type": "boolean"
										},
										"parameterName": {
											"type": "string"
										},
										"provider": {
											"type": "string"
										},
										"range": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string"
													},
													"maxValue": {
														"type": "integer"
													},
													"minValue": {
														"type": "integer"
													}
												}
											}
										},
										"required": {
											"type": "boolean"
										},
										"selection": {
											"type": "object",
											"properties": {
												"defaultSelectedValues": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"id": {
													"type": "string"
												},
												"selectionType": {
													"type": "string",
													"enum": [
														"SINGLE_SELECT",
														"MULTI_SELECT"
													]
												},
												"selectionValues": {
													"type": "object",
													"properties": {}
												}
											}
										}
									}
								}
							},
							"version": {
								"type": "string"
							}
						}
					}
				},
				"createTime": {
					"type": "integer"
				},
				"customParamsOrder": {
					"type": "boolean"
				},
				"description": {
					"type": "string"
				},
				"deviceTypes": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"productFamily": {
								"type": "string"
							},
							"productSeries": {
								"type": "string"
							},
							"productType": {
								"type": "string"
							}
						}
					}
				},
				"failurePolicy": {
					"type": "string",
					"enum": [
						"ABORT_ON_ERROR",
						"CONTINUE_ON_ERROR",
						"ROLLBACK_ON_ERROR",
						"ROLLBACK_TARGET_ON_ERROR",
						"ABORT_TARGET_ON_ERROR"
					]
				},
				"id": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"lastUpdateTime": {
					"type": "integer"
				},
				"latestVersionTime": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"parentTemplateId": {
					"type": "string"
				},
				"projectAssociated": {
					"type": "boolean"
				},
				"projectId": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"rollbackTemplateContent": {
					"type": "string"
				},
				"rollbackTemplateParams": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"binding": {
								"type": "string"
							},
							"customOrder": {
								"type": "integer"
							},
							"dataType": {
								"type": "string",
								"enum": [
									"STRING",
									"INTEGER",
									"IPADDRESS",
									"MACADDRESS",
									"SECTIONDIVIDER"
								]
							},
							"defaultValue": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							},
							"group": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instructionText": {
								"type": "string"
							},
							"key": {
								"type": "string"
							},
							"notParam": {
								"type": "boolean"
							},
							"order": {
								"type": "integer"
							},
							"paramArray": {
								"type": "boolean"
							},
							"parameterName": {
								"type": "string"
							},
							"provider": {
								"type": "string"
							},
							"range": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"maxValue": {
											"type": "integer"
										},
										"minValue": {
											"type": "integer"
										}
									}
								}
							},
							"required": {
								"type": "boolean"
							},
							"selection": {
								"type": "object",
								"properties": {
									"defaultSelectedValues": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"id": {
										"type": "string"
									},
									"selectionType": {
										"type": "string",
										"enum": [
											"SINGLE_SELECT",
											"MULTI_SELECT"
										]
									},
									"selectionValues": {
										"type": "object",
										"properties": {}
									}
								}
							}
						}
					}
				},
				"softwareType": {
					"type": "string"
				},
				"softwareVariant": {
					"type": "string"
				},
				"softwareVersion": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						}
					}
				},
				"templateContent": {
					"type": "string"
				},
				"templateParams": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"binding": {
								"type": "string"
							},
							"customOrder": {
								"type": "integer"
							},
							"dataType": {
								"type": "string",
								"enum": [
									"STRING",
									"INTEGER",
									"IPADDRESS",
									"MACADDRESS",
									"SECTIONDIVIDER"
								]
							},
							"defaultValue": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							},
							"group": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instructionText": {
								"type": "string"
							},
							"key": {
								"type": "string"
							},
							"notParam": {
								"type": "boolean"
							},
							"order": {
								"type": "integer"
							},
							"paramArray": {
								"type": "boolean"
							},
							"parameterName": {
								"type": "string"
							},
							"provider": {
								"type": "string"
							},
							"range": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"maxValue": {
											"type": "integer"
										},
										"minValue": {
											"type": "integer"
										}
									}
								}
							},
							"required": {
								"type": "boolean"
							},
							"selection": {
								"type": "object",
								"properties": {
									"defaultSelectedValues": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"id": {
										"type": "string"
									},
									"selectionType": {
										"type": "string",
										"enum": [
											"SINGLE_SELECT",
											"MULTI_SELECT"
										]
									},
									"selectionValues": {
										"type": "object",
										"properties": {}
									}
								}
							}
						}
					}
				},
				"validationErrors": {
					"type": "object",
					"properties": {
						"rollbackTemplateErrors": {
							"type": "object"
						},
						"templateErrors": {
							"type": "object"
						},
						"templateId": {
							"type": "string"
						},
						"templateVersion": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				},
				"versionsInfo": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"author": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"version": {
								"type": "string"
							},
							"versionComment": {
								"type": "string"
							},
							"versionTime": {
								"type": "integer"
							}
						}
					}
				}
			}
		},
		"CustompromptSupportGETAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"customUsernamePrompt": {
							"type": "string"
						},
						"customPasswordPrompt": {
							"type": "string"
						},
						"defaultUsernamePrompt": {
							"type": "string"
						},
						"defaultPasswordPrompt": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"report": {
			"type": "object",
			"properties": {
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"dataCategory": {
					"type": "string"
				},
				"deliveries": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"executionCount": {
					"type": "integer"
				},
				"executions": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"endTime": {
								"type": "integer"
							},
							"errors": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"executionId": {
								"type": "string"
							},
							"processStatus": {
								"type": "string"
							},
							"requestStatus": {
								"type": "string"
							},
							"startTime": {
								"type": "integer"
							},
							"warnings": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				},
				"name": {
					"type": "string"
				},
				"reportId": {
					"type": "string"
				},
				"reportWasExecuted": {
					"type": "boolean"
				},
				"schedule": {
					"type": "object"
				},
				"view": {
					"type": "object",
					"properties": {
						"fieldGroups": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"fieldGroupDisplayName": {
										"type": "string"
									},
									"fieldGroupName": {
										"type": "string"
									},
									"fields": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"displayName": {
													"type": "string"
												},
												"name": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						},
						"filters": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"displayName": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"value": {
										"type": "object"
									}
								}
							}
						},
						"format": {
							"type": "object",
							"properties": {
								"formatType": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"default": {
									"type": "boolean"
								}
							}
						},
						"name": {
							"type": "string"
						},
						"viewId": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"viewInfo": {
							"type": "string"
						}
					}
				},
				"viewGroupId": {
					"type": "string"
				},
				"viewGroupVersion": {
					"type": "string"
				}
			}
		},
		"viewgroupsummary": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"category": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"viewGroupId": {
						"type": "string"
					}
				}
			}
		},
		"Workflow": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"addToInventory": {
					"type": "boolean"
				},
				"addedOn": {
					"type": "integer"
				},
				"configId": {
					"type": "string"
				},
				"currTaskIdx": {
					"type": "integer"
				},
				"description": {
					"type": "string"
				},
				"endTime": {
					"type": "integer"
				},
				"execTime": {
					"type": "integer"
				},
				"imageId": {
					"type": "string"
				},
				"instanceType": {
					"type": "string",
					"enum": [
						"SystemWorkflow",
						"UserWorkflow",
						"SystemResetWorkflow"
					]
				},
				"lastupdateOn": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"startTime": {
					"type": "integer"
				},
				"state": {
					"type": "string"
				},
				"tasks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"currWorkItemIdx": {
								"type": "integer"
							},
							"endTime": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"startTime": {
								"type": "integer"
							},
							"state": {
								"type": "string"
							},
							"taskSeqNo": {
								"type": "integer"
							},
							"timeTaken": {
								"type": "integer"
							},
							"type": {
								"type": "string"
							},
							"workItemList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"command": {
											"type": "string"
										},
										"endTime": {
											"type": "integer"
										},
										"outputStr": {
											"type": "string"
										},
										"startTime": {
											"type": "integer"
										},
										"state": {
											"type": "string"
										},
										"timeTaken": {
											"type": "integer"
										}
									}
								}
							}
						}
					}
				},
				"tenantId": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"useState": {
					"type": "string"
				},
				"version": {
					"type": "integer"
				}
			}
		},
		"UpdateWorkflowResponse": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"lastupdateOn": {
					"type": "number"
				},
				"imageId": {
					"type": "string"
				},
				"currTaskIdx": {
					"type": "number"
				},
				"addedOn": {
					"type": "number"
				},
				"tasks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"state": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"currWorkItemIdx": {
								"type": "number"
							},
							"taskSeqNo": {
								"type": "number"
							},
							"endTime": {
								"type": "number"
							},
							"startTime": {
								"type": "number"
							},
							"workItemList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"state": {
											"type": "string"
										},
										"command": {
											"type": "string"
										},
										"outputStr": {
											"type": "string"
										},
										"endTime": {
											"type": "number"
										},
										"startTime": {
											"type": "number"
										},
										"timeTaken": {
											"type": "number"
										}
									}
								}
							},
							"timeTaken": {
								"type": "number"
							},
							"name": {
								"type": "string"
							}
						}
					}
				},
				"addToInventory": {
					"type": "boolean"
				},
				"instanceType": {
					"type": "string"
				},
				"endTime": {
					"type": "number"
				},
				"execTime": {
					"type": "number"
				},
				"startTime": {
					"type": "number"
				},
				"useState": {
					"type": "string"
				},
				"configId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"version": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"GetEoXStatusForAllDevicesResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"deviceId": {
								"type": "string"
							},
							"alertCount": {
								"type": "integer"
							},
							"summary": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"eoxType": {
											"type": "string"
										}
									}
								}
							},
							"scanStatus": {
								"type": "string"
							},
							"lastScanTime": {
								"type": "integer"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetEmailSubscriptionDetailsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"instanceId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"connectorType": {
						"type": "string"
					},
					"fromEmailAddress": {
						"type": "string"
					},
					"toEmailAddresses": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"subject": {
						"type": "string"
					}
				}
			}
		},
		"AssociateResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "object",
							"properties": {}
						},
						"url": {
							"type": "string"
						}
					}
				}
			}
		},
		"DiscoveryNIOListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"cdpLevel": {
								"type": "integer"
							},
							"deviceIds": {
								"type": "string"
							},
							"discoveryCondition": {
								"type": "string"
							},
							"discoveryStatus": {
								"type": "string"
							},
							"discoveryType": {
								"type": "string"
							},
							"enablePasswordList": {
								"type": "string"
							},
							"globalCredentialIdList": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"httpReadCredential": {
								"type": "object",
								"properties": {
									"comments": {
										"type": "string"
									},
									"credentialType": {
										"type": "string",
										"enum": [
											"GLOBAL",
											"APP"
										]
									},
									"description": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"instanceTenantId": {
										"type": "string"
									},
									"instanceUuid": {
										"type": "string"
									},
									"password": {
										"type": "string"
									},
									"port": {
										"type": "integer"
									},
									"secure": {
										"type": "boolean"
									},
									"username": {
										"type": "string"
									}
								}
							},
							"httpWriteCredential": {
								"type": "object",
								"properties": {
									"comments": {
										"type": "string"
									},
									"credentialType": {
										"type": "string",
										"enum": [
											"GLOBAL",
											"APP"
										]
									},
									"description": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"instanceTenantId": {
										"type": "string"
									},
									"instanceUuid": {
										"type": "string"
									},
									"password": {
										"type": "string"
									},
									"port": {
										"type": "integer"
									},
									"secure": {
										"type": "boolean"
									},
									"username": {
										"type": "string"
									}
								}
							},
							"id": {
								"type": "string"
							},
							"ipAddressList": {
								"type": "string"
							},
							"ipFilterList": {
								"type": "string"
							},
							"isAutoCdp": {
								"type": "boolean"
							},
							"lldpLevel": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"netconfPort": {
								"type": "string"
							},
							"numDevices": {
								"type": "integer"
							},
							"parentDiscoveryId": {
								"type": "string"
							},
							"passwordList": {
								"type": "string"
							},
							"preferredMgmtIPMethod": {
								"type": "string"
							},
							"protocolOrder": {
								"type": "string"
							},
							"retryCount": {
								"type": "integer"
							},
							"snmpAuthPassphrase": {
								"type": "string"
							},
							"snmpAuthProtocol": {
								"type": "string"
							},
							"snmpMode": {
								"type": "string"
							},
							"snmpPrivPassphrase": {
								"type": "string"
							},
							"snmpPrivProtocol": {
								"type": "string"
							},
							"snmpRoCommunity": {
								"type": "string"
							},
							"snmpRoCommunityDesc": {
								"type": "string"
							},
							"snmpRwCommunity": {
								"type": "string"
							},
							"snmpRwCommunityDesc": {
								"type": "string"
							},
							"snmpUserName": {
								"type": "string"
							},
							"timeOut": {
								"type": "integer"
							},
							"updateMgmtIp": {
								"type": "boolean"
							},
							"userNameList": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"LegitCliKeyResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeviceIfListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"adminStatus": {
								"type": "string"
							},
							"className": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"deviceId": {
								"type": "string"
							},
							"duplex": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"ifIndex": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"interfaceType": {
								"type": "string"
							},
							"ipv4Address": {
								"type": "string"
							},
							"ipv4Mask": {
								"type": "string"
							},
							"isisSupport": {
								"type": "string"
							},
							"lastUpdated": {
								"type": "string"
							},
							"macAddress": {
								"type": "string"
							},
							"mappedPhysicalInterfaceId": {
								"type": "string"
							},
							"mappedPhysicalInterfaceName": {
								"type": "string"
							},
							"mediaType": {
								"type": "string"
							},
							"nativeVlanId": {
								"type": "string"
							},
							"ospfSupport": {
								"type": "string"
							},
							"pid": {
								"type": "string"
							},
							"portMode": {
								"type": "string"
							},
							"portName": {
								"type": "string"
							},
							"portType": {
								"type": "string"
							},
							"serialNo": {
								"type": "string"
							},
							"series": {
								"type": "string"
							},
							"speed": {
								"type": "string"
							},
							"status": {
								"type": "string"
							},
							"vlanId": {
								"type": "string"
							},
							"voiceVlan": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CreateQosDeviceInterfaceInfoRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"excludedInterfaces": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"networkDeviceId": {
						"type": "string"
					},
					"qosDeviceInterfaceInfo": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"dmvpnRemoteSitesBw": {
									"type": "array",
									"items": {
										"type": "integer"
									}
								},
								"interfaceId": {
									"type": "string"
								},
								"interfaceName": {
									"type": "string"
								},
								"label": {
									"type": "string"
								},
								"role": {
									"type": "string",
									"enum": [
										"WAN",
										"DMVPN_HUB",
										"DMVPN_SPOKE"
									]
								},
								"uploadBW": {
									"type": "integer"
								}
							}
						}
					}
				}
			}
		},
		"CreateQosDeviceInterfaceInfoResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"PlannedAccessPointPublic": {
			"type": "object",
			"properties": {
				"attributes": {
					"type": "object",
					"properties": {
						"createDate": {
							"type": "integer"
						},
						"domain": {
							"type": "string"
						},
						"heirarchyName": {
							"type": "string"
						},
						"id": {
							"type": "number"
						},
						"instanceUuid": {
							"type": "string"
						},
						"macaddress": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"source": {
							"type": "string",
							"enum": [
								"EKAHAU",
								"MANUAL",
								"UNKNOWN"
							]
						},
						"typeString": {
							"type": "string"
						}
					}
				},
				"isSensor": {
					"type": "boolean"
				},
				"location": {
					"type": "object",
					"properties": {
						"altitude": {
							"type": "number"
						},
						"lattitude": {
							"type": "number"
						},
						"longtitude": {
							"type": "number"
						}
					}
				},
				"position": {
					"type": "object",
					"properties": {
						"x": {
							"type": "number"
						},
						"y": {
							"type": "number"
						},
						"z": {
							"type": "number"
						}
					}
				},
				"radioCount": {
					"type": "integer"
				},
				"radios": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"antenna": {
								"type": "object",
								"properties": {
									"azimuthAngle": {
										"type": "number"
									},
									"elevationAngle": {
										"type": "number"
									},
									"gain": {
										"type": "number"
									},
									"mode": {
										"type": "string",
										"enum": [
											"sector_a",
											"sector_b",
											"omni",
											"unknown"
										]
									},
									"name": {
										"type": "string"
									},
									"type": {
										"type": "string",
										"enum": [
											"internal",
											"external",
											"circular",
											"linear",
											"unknown"
										]
									}
								}
							},
							"attributes": {
								"type": "object",
								"properties": {
									"channel": {
										"type": "number"
									},
									"channelString": {
										"type": "string"
									},
									"id": {
										"type": "number"
									},
									"ifMode": {
										"type": "string",
										"enum": [
											"A",
											"B",
											"ABGN",
											"Monitor",
											"Sniffer",
											"XorMonitor",
											"Xor24",
											"Xor5",
											"Xor6",
											"XorUnknown",
											"_6GHZ",
											"XOR56GHZ",
											"Unknown"
										]
									},
									"ifTypeString": {
										"type": "string"
									},
									"ifTypeSubband": {
										"type": "string",
										"enum": [
											"A",
											"B",
											"ABGN",
											"_6GHZ",
											"_XOR_5_6GHZ",
											"Unknown"
										]
									},
									"instanceUuid": {
										"type": "string"
									},
									"slotId": {
										"type": "number"
									}
								}
							},
							"isSensor": {
								"type": "boolean"
							}
						}
					}
				}
			}
		},
		"DeviceFamilyIdentifierResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"deviceFamily": {
								"type": "string"
							},
							"deviceFamilyIdentifier": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"SyncDevicesRequest": {
			"type": "array",
			"items": {
				"type": "object"
			}
		},
		"DevicesResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"totalCount": {
					"type": "integer"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"deviceType": {
								"type": "string"
							},
							"cpuUtilization": {
								"type": "number"
							},
							"overallHealth": {
								"type": "integer"
							},
							"utilizationHealth": {
								"type": "object",
								"properties": {
									"radio0": {
										"type": "integer"
									},
									"radio1": {
										"type": "integer"
									},
									"Ghz24": {
										"type": "integer"
									},
									"Ghz50": {
										"type": "integer"
									}
								}
							},
							"airQualityHealth": {
								"type": "object",
								"properties": {
									"radio0": {
										"type": "integer"
									},
									"radio1": {
										"type": "integer"
									},
									"Ghz24": {
										"type": "integer"
									},
									"Ghz50": {
										"type": "integer"
									}
								}
							},
							"ipAddress": {
								"type": "string"
							},
							"cpuHealth": {
								"type": "integer"
							},
							"deviceFamily": {
								"type": "string"
							},
							"issueCount": {
								"type": "integer"
							},
							"macAddress": {
								"type": "string"
							},
							"noiseHealth": {
								"type": "object",
								"properties": {
									"radio0": {
										"type": "integer"
									},
									"radio1": {
										"type": "integer"
									},
									"Ghz24": {
										"type": "integer"
									},
									"Ghz50": {
										"type": "integer"
									}
								}
							},
							"osVersion": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"interfaceLinkErrHealth": {
								"type": "integer"
							},
							"memoryUtilization": {
								"type": "number"
							},
							"interDeviceLinkAvailHealth": {
								"type": "integer"
							},
							"interferenceHealth": {
								"type": "object",
								"properties": {
									"radio0": {
										"type": "integer"
									},
									"radio1": {
										"type": "integer"
									},
									"Ghz24": {
										"type": "integer"
									},
									"Ghz50": {
										"type": "integer"
									}
								}
							},
							"model": {
								"type": "string"
							},
							"location": {
								"type": "string"
							},
							"reachabilityHealth": {
								"type": "string"
							},
							"band": {
								"type": "object",
								"properties": {
									"radio0": {
										"type": "string"
									},
									"radio1": {
										"type": "string"
									}
								}
							},
							"memoryUtilizationHealth": {
								"type": "integer"
							},
							"clientCount": {
								"type": "object",
								"properties": {
									"radio0": {
										"type": "integer"
									},
									"radio1": {
										"type": "integer"
									},
									"Ghz24": {
										"type": "integer"
									},
									"Ghz50": {
										"type": "integer"
									}
								}
							},
							"avgTemperature": {
								"type": "number"
							},
							"maxTemperature": {
								"type": "number"
							},
							"interDeviceLinkAvailFabric": {
								"type": "integer"
							},
							"apCount": {
								"type": "integer"
							},
							"freeTimerScore": {
								"type": "integer"
							},
							"freeTimer": {
								"type": "integer"
							},
							"packetPoolHealth": {
								"type": "integer"
							},
							"packetPool": {
								"type": "integer"
							},
							"freeMemoryBufferHealth": {
								"type": "integer"
							},
							"freeMemoryBuffer": {
								"type": "number"
							},
							"wqePoolsHealth": {
								"type": "integer"
							},
							"wqePools": {
								"type": "number"
							},
							"wanLinkUtilization": {
								"type": "number"
							},
							"cpuUlitilization": {
								"type": "number"
							},
							"uuid": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"GetSmartAccountListResponse": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"GetConfigurationArchiveDetailsResponse": {
			"type": "object",
			"properties": {
				"archiveResultlist": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ipAddress": {
								"type": "string"
							},
							"deviceId": {
								"type": "string"
							},
							"versions": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"files": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"fileType": {
														"type": "string"
													},
													"fileId": {
														"type": "string"
													},
													"downloadPath": {
														"type": "string"
													},
													"name": {
														"type": "string"
													}
												}
											}
										},
										"configChangeType": {
											"type": "string"
										},
										"syslogConfigEventDto": {
											"type": "object",
											"properties": {
												"userName": {
													"type": "string"
												},
												"deviceUuid": {
													"type": "string"
												},
												"outOfBand": {
													"type": "boolean"
												},
												"configMethod": {
													"type": "string"
												},
												"terminalName": {
													"type": "string"
												},
												"loginIpAddress": {
													"type": "string"
												},
												"processName": {
													"type": "string"
												},
												"syslogTime": {
													"type": "string"
												}
											}
										},
										"createdBy": {
											"type": "string"
										},
										"createdTime": {
											"type": "number"
										},
										"startupRunningStatus": {
											"type": "string"
										},
										"id": {
											"type": "string"
										}
									}
								}
							},
							"deviceName": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"GetEmailEventSubscriptionsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"version": {
						"type": "string"
					},
					"subscriptionId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										},
										"instanceId": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"description": {
											"type": "string"
										},
										"fromEmailAddress": {
											"type": "string"
										},
										"toEmailAddresses": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"subject": {
											"type": "string"
										}
									}
								},
								"connectorType": {
									"type": "string"
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"others": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					},
					"isPrivate": {
						"type": "string"
					},
					"tenantId": {
						"type": "string"
					}
				}
			}
		},
		"GetApplicationPolicyResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"instanceId": {
								"type": "integer"
							},
							"displayName": {
								"type": "string"
							},
							"instanceCreatedOn": {
								"type": "integer"
							},
							"instanceUpdatedOn": {
								"type": "integer"
							},
							"instanceVersion": {
								"type": "number"
							},
							"createTime": {
								"type": "integer"
							},
							"deployed": {
								"type": "boolean"
							},
							"isSeeded": {
								"type": "boolean"
							},
							"isStale": {
								"type": "boolean"
							},
							"lastUpdateTime": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"namespace": {
								"type": "string"
							},
							"provisioningState": {
								"type": "string",
								"enum": [
									"UNKNOWN",
									"DEFINED",
									"DEPLOYED",
									"FAILED",
									"VERIFIED",
									"DEPLOYING",
									"SUBMITTED",
									"PREPROCESSED",
									"VALIDATED"
								]
							},
							"qualifier": {
								"type": "string"
							},
							"resourceVersion": {
								"type": "number"
							},
							"targetIdList": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"type": {
								"type": "string"
							},
							"cfsChangeInfo": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"customProvisions": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"deletePolicyStatus": {
								"type": "string",
								"enum": [
									"NONE",
									"DELETED",
									"RESTORED"
								]
							},
							"internal": {
								"type": "boolean"
							},
							"isDeleted": {
								"type": "boolean"
							},
							"isEnabled": {
								"type": "boolean"
							},
							"isScopeStale": {
								"type": "boolean"
							},
							"iseReserved": {
								"type": "boolean"
							},
							"policyScope": {
								"type": "string"
							},
							"policyStatus": {
								"type": "string",
								"enum": [
									"ENABLED",
									"DISABLED",
									"MONITOR"
								]
							},
							"priority": {
								"type": "integer"
							},
							"pushed": {
								"type": "boolean"
							},
							"advancedPolicyScope": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"instanceId": {
										"type": "integer"
									},
									"displayName": {
										"type": "string"
									},
									"instanceCreatedOn": {
										"type": "integer"
									},
									"instanceUpdatedOn": {
										"type": "integer"
									},
									"instanceVersion": {
										"type": "number"
									},
									"name": {
										"type": "string"
									},
									"advancedPolicyScopeElement": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string"
												},
												"instanceId": {
													"type": "integer"
												},
												"displayName": {
													"type": "string"
												},
												"instanceCreatedOn": {
													"type": "integer"
												},
												"instanceUpdatedOn": {
													"type": "integer"
												},
												"instanceVersion": {
													"type": "number"
												},
												"groupId": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"ssid": {
													"type": "array",
													"items": {
														"type": "object"
													}
												}
											}
										}
									}
								}
							},
							"contractList": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"exclusiveContract": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"instanceId": {
										"type": "integer"
									},
									"displayName": {
										"type": "string"
									},
									"instanceCreatedOn": {
										"type": "integer"
									},
									"instanceUpdatedOn": {
										"type": "integer"
									},
									"instanceVersion": {
										"type": "number"
									},
									"clause": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string"
												},
												"instanceId": {
													"type": "integer"
												},
												"displayName": {
													"type": "string"
												},
												"instanceCreatedOn": {
													"type": "integer"
												},
												"instanceUpdatedOn": {
													"type": "integer"
												},
												"instanceVersion": {
													"type": "number"
												},
												"priority": {
													"type": "integer"
												},
												"type": {
													"type": "string",
													"enum": [
														"BUSINESS_RELEVANCE",
														"APPLICATION_POLICY_KNOBS"
													]
												},
												"relevanceLevel": {
													"type": "string",
													"enum": [
														"BUSINESS_RELEVANT",
														"BUSINESS_IRRELEVANT",
														"DEFAULT"
													]
												},
												"deviceRemovalBehavior": {
													"type": "string",
													"enum": [
														"DELETE",
														"RESTORE",
														"IGNORE"
													]
												},
												"hostTrackingEnabled": {
													"type": "boolean"
												}
											}
										}
									}
								}
							},
							"identitySource": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"instanceId": {
										"type": "integer"
									},
									"displayName": {
										"type": "string"
									},
									"instanceCreatedOn": {
										"type": "integer"
									},
									"instanceUpdatedOn": {
										"type": "integer"
									},
									"instanceVersion": {
										"type": "number"
									},
									"state": {
										"type": "string",
										"enum": [
											"INACTIVE",
											"ACTIVE",
											"DELETED"
										]
									},
									"type": {
										"type": "string",
										"enum": [
											"APIC_EM",
											"NBAR"
										]
									}
								}
							},
							"producer": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"instanceId": {
										"type": "integer"
									},
									"displayName": {
										"type": "string"
									},
									"instanceCreatedOn": {
										"type": "integer"
									},
									"instanceUpdatedOn": {
										"type": "integer"
									},
									"instanceVersion": {
										"type": "number"
									},
									"scalableGroup": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"idRef": {
													"type": "string"
												}
											}
										}
									}
								}
							},
							"consumer": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"instanceId": {
										"type": "integer"
									},
									"displayName": {
										"type": "string"
									},
									"instanceCreatedOn": {
										"type": "integer"
									},
									"instanceUpdatedOn": {
										"type": "integer"
									},
									"instanceVersion": {
										"type": "number"
									},
									"scalableGroup": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"idRef": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetAdvisoriesSummaryResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"NA": {
							"type": "object",
							"properties": {
								"CONFIG": {
									"type": "number"
								},
								"VERSION": {
									"type": "number"
								},
								"TOTAL": {
									"type": "number"
								}
							}
						},
						"INFORMATIONAL": {
							"type": "object",
							"properties": {
								"CONFIG": {
									"type": "number"
								},
								"VERSION": {
									"type": "number"
								},
								"TOTAL": {
									"type": "number"
								}
							}
						},
						"LOW": {
							"type": "object",
							"properties": {
								"CONFIG": {
									"type": "number"
								},
								"VERSION": {
									"type": "number"
								},
								"TOTAL": {
									"type": "number"
								}
							}
						},
						"MEDIUM": {
							"type": "object",
							"properties": {
								"CONFIG": {
									"type": "number"
								},
								"VERSION": {
									"type": "integer"
								},
								"TOTAL": {
									"type": "integer"
								}
							}
						},
						"HIGH": {
							"type": "object",
							"properties": {
								"CONFIG": {
									"type": "number"
								},
								"VERSION": {
									"type": "integer"
								},
								"TOTAL": {
									"type": "integer"
								}
							}
						},
						"CRITICAL": {
							"type": "object",
							"properties": {
								"CONFIG": {
									"type": "number"
								},
								"VERSION": {
									"type": "integer"
								},
								"TOTAL": {
									"type": "integer"
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetComplianceDetailCountResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "number"
				}
			}
		},
		"HealthDetail": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"siteId": {
								"type": "string"
							},
							"scoreDetail": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"scoreCategory": {
											"type": "object",
											"properties": {
												"scoreCategory": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										},
										"scoreValue": {
											"type": "number"
										},
										"clientCount": {
											"type": "integer"
										},
										"clientUniqueCount": {
											"type": "integer"
										},
										"maintenanceAffectedClientCount": {
											"type": "integer"
										},
										"randomMacCount": {
											"type": "integer"
										},
										"duidCount": {
											"type": "integer"
										},
										"starttime": {
											"type": "integer"
										},
										"endtime": {
											"type": "integer"
										},
										"connectedToUdnCount": {
											"type": "integer"
										},
										"unconnectedToUdnCount": {
											"type": "integer"
										},
										"scoreList": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"scoreCategory": {
														"type": "object",
														"properties": {
															"scoreCategory": {
																"type": "string"
															},
															"value": {
																"type": "string"
															}
														}
													},
													"scoreValue": {
														"type": "number"
													},
													"clientCount": {
														"type": "integer"
													},
													"clientUniqueCount": {
														"type": "integer"
													},
													"maintenanceAffectedClientCount": {
														"type": "integer"
													},
													"randomMacCount": {
														"type": "integer"
													},
													"duidCount": {
														"type": "integer"
													},
													"starttime": {
														"type": "integer"
													},
													"endtime": {
														"type": "integer"
													},
													"connectedToUdnCount": {
														"type": "integer"
													},
													"unconnectedToUdnCount": {
														"type": "integer"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"NameSpaceListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"LicenseUsageDetailsResponse": {
			"type": "object",
			"properties": {
				"purchased_dna_license": {
					"type": "object",
					"properties": {
						"total_license_count": {
							"type": "integer"
						},
						"license_count_by_type": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"license_type": {
										"type": "string"
									},
									"license_count": {
										"type": "integer"
									}
								}
							}
						}
					}
				},
				"purchased_network_license": {
					"type": "object",
					"properties": {
						"total_license_count": {
							"type": "integer"
						},
						"license_count_by_type": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"license_type": {
										"type": "string"
									},
									"license_count": {
										"type": "integer"
									}
								}
							}
						}
					}
				},
				"used_dna_license": {
					"type": "object",
					"properties": {
						"total_license_count": {
							"type": "integer"
						},
						"license_count_by_type": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"license_type": {
										"type": "string"
									},
									"license_count": {
										"type": "integer"
									}
								}
							}
						}
					}
				},
				"used_network_license": {
					"type": "object",
					"properties": {
						"total_license_count": {
							"type": "integer"
						},
						"license_count_by_type": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"license_type": {
										"type": "string"
									},
									"license_count": {
										"type": "integer"
									}
								}
							}
						}
					}
				},
				"purchased_ise_license": {
					"type": "object",
					"properties": {
						"total_license_count": {
							"type": "integer"
						},
						"license_count_by_type": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"license_type": {
										"type": "string"
									},
									"license_count": {
										"type": "integer"
									}
								}
							}
						}
					}
				},
				"used_ise_license": {
					"type": "object",
					"properties": {
						"total_license_count": {
							"type": "integer"
						},
						"license_count_by_type": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"license_type": {
										"type": "string"
									},
									"license_count": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			}
		},
		"GetAdvisoriesListResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"advisoryId": {
								"type": "string"
							},
							"deviceCount": {
								"type": "integer"
							},
							"hiddenDeviceCount": {
								"type": "number"
							},
							"cves": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"publicationUrl": {
								"type": "string"
							},
							"sir": {
								"type": "string"
							},
							"detectionType": {
								"type": "string"
							},
							"defaultDetectionType": {
								"type": "string"
							},
							"defaultConfigMatchPattern": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"TemplatePreviewRequestDTO": {
			"type": "object",
			"properties": {
				"deviceId": {
					"type": "string"
				},
				"params": {
					"type": "object",
					"properties": {}
				},
				"resourceParams": {
					"type": "object"
				},
				"templateId": {
					"type": "string"
				}
			}
		},
		"TemplatePreviewResponseDTO": {
			"type": "object",
			"properties": {
				"cliPreview": {
					"type": "string"
				},
				"deviceId": {
					"type": "string"
				},
				"templateId": {
					"type": "string"
				},
				"validationErrors": {
					"type": "object"
				}
			}
		},
		"GetQosDeviceInterfaceInfoResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"instanceId": {
								"type": "integer"
							},
							"displayName": {
								"type": "string"
							},
							"instanceCreatedOn": {
								"type": "integer"
							},
							"instanceUpdatedOn": {
								"type": "integer"
							},
							"instanceVersion": {
								"type": "integer"
							},
							"createTime": {
								"type": "integer"
							},
							"deployed": {
								"type": "boolean"
							},
							"isSeeded": {
								"type": "boolean"
							},
							"isStale": {
								"type": "boolean"
							},
							"lastUpdateTime": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"namespace": {
								"type": "string"
							},
							"provisioningState": {
								"type": "string",
								"enum": [
									"UNKNOWN",
									"DEFINED",
									"DEPLOYED",
									"FAILED",
									"VERIFIED",
									"DEPLOYING",
									"SUBMITTED",
									"PREPROCESSED",
									"VALIDATED"
								]
							},
							"qualifier": {
								"type": "string"
							},
							"resourceVersion": {
								"type": "integer"
							},
							"targetIdList": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"type": {
								"type": "string"
							},
							"cfsChangeInfo": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"customProvisions": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"excludedInterfaces": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"isExcluded": {
								"type": "boolean"
							},
							"networkDeviceId": {
								"type": "string"
							},
							"qosDeviceInterfaceInfo": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"instanceId": {
											"type": "integer"
										},
										"displayName": {
											"type": "string"
										},
										"instanceCreatedOn": {
											"type": "integer"
										},
										"instanceUpdatedOn": {
											"type": "integer"
										},
										"instanceVersion": {
											"type": "number"
										},
										"dmvpnRemoteSitesBw": {
											"type": "array",
											"items": {
												"type": "integer"
											}
										},
										"downloadBW": {
											"type": "number"
										},
										"interfaceId": {
											"type": "string"
										},
										"interfaceName": {
											"type": "string"
										},
										"label": {
											"type": "string"
										},
										"role": {
											"type": "string",
											"enum": [
												"WAN",
												"DMVPN_HUB",
												"DMVPN_SPOKE"
											]
										},
										"uploadBW": {
											"type": "integer"
										}
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeviceReplacementWorkflowDTO": {
			"type": "object",
			"properties": {
				"faultyDeviceSerialNumber": {
					"type": "string"
				},
				"replacementDeviceSerialNumber": {
					"type": "string"
				}
			}
		},
		"SystemPropertyListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"intValue": {
								"type": "integer"
							},
							"systemPropertyName": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetEventsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"eventId": {
						"type": "string"
					},
					"nameSpace": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"category": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"subDomain": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"severity": {
						"type": "number"
					},
					"details": {
						"type": "object",
						"properties": {}
					},
					"subscriptionTypes": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			}
		},
		"TagMemberDTO": {
			"type": "object",
			"properties": {
				"memberToTags": {
					"type": "object",
					"properties": {
						"key": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"memberType": {
					"type": "string"
				}
			}
		},
		"FileObjectListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"downloadPath": {
								"type": "string"
							},
							"encrypted": {
								"type": "boolean"
							},
							"fileFormat": {
								"type": "string"
							},
							"fileSize": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"md5Checksum": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"nameSpace": {
								"type": "string"
							},
							"sftpServerList": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"sha1Checksum": {
								"type": "string"
							},
							"taskId": {
								"type": "object"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"TagTypesResult": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"CreateNetworkVRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"dhcpServer": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"dnsServer": {
							"type": "object",
							"properties": {
								"domainName": {
									"type": "string",
									"enum": [
										"can only contain alphanumeric characters or hyphen"
									]
								},
								"primaryIpAddress": {
									"type": "string",
									"enum": [
										"valid range : 1.0.0.0 - 223.255.255.255"
									]
								},
								"secondaryIpAddress": {
									"type": "string",
									"enum": [
										"valid range : 1.0.0.0 - 223.255.255.255"
									]
								}
							}
						},
						"syslogServer": {
							"type": "object",
							"properties": {
								"ipAddresses": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"configureDnacIP": {
									"type": "boolean"
								}
							}
						},
						"snmpServer": {
							"type": "object",
							"properties": {
								"ipAddresses": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"configureDnacIP": {
									"type": "boolean"
								}
							}
						},
						"netflowcollector": {
							"type": "object",
							"properties": {
								"ipAddress": {
									"type": "string"
								},
								"port": {
									"type": "number"
								}
							}
						},
						"ntpServer": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"timezone": {
							"type": "string"
						},
						"messageOfTheday": {
							"type": "object",
							"properties": {
								"bannerMessage": {
									"type": "string"
								},
								"retainExistingBanner": {
									"type": "string"
								}
							}
						},
						"network_aaa": {
							"type": "object",
							"properties": {
								"servers": {
									"type": "string",
									"enum": [
										"Server type supported by ISE and AAA"
									]
								},
								"ipAddress": {
									"type": "string",
									"enum": [
										"Mandatory for ISE servers and for AAA consider this as additional IP."
									]
								},
								"network": {
									"type": "string",
									"enum": [
										"For AAA server consider it as primary IP and For ISE consider as Network"
									]
								},
								"protocol": {
									"type": "string"
								},
								"sharedSecret": {
									"type": "string",
									"enum": [
										"Supported only by ISE Servers"
									]
								}
							}
						},
						"clientAndEndpoint_aaa": {
							"type": "object",
							"properties": {
								"servers": {
									"type": "string"
								},
								"ipAddress": {
									"type": "string",
									"enum": [
										"Mandatory for ISE servers."
									]
								},
								"network": {
									"type": "string"
								},
								"protocol": {
									"type": "string"
								},
								"sharedSecret": {
									"type": "string",
									"enum": [
										"Supported only by ISE servers"
									]
								}
							}
						}
					}
				}
			}
		},
		"CreateNetworkVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetAdvisoriesPerDeviceResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"advisoryId": {
								"type": "string"
							},
							"deviceCount": {
								"type": "integer"
							},
							"hiddenDeviceCount": {
								"type": "number"
							},
							"cves": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"publicationUrl": {
								"type": "string"
							},
							"sir": {
								"type": "string"
							},
							"detectionType": {
								"type": "string"
							},
							"defaultDetectionType": {
								"type": "string"
							},
							"defaultConfigMatchPattern": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetAllITSMIntegrationSettingsRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"dypName": {
					"type": "string"
				},
				"dypMajorVersion": {
					"type": "integer"
				},
				"dypId": {
					"type": "string"
				},
				"dypInstanceId": {
					"type": "string"
				},
				"data": {
					"type": "object",
					"properties": {
						"ConnectionSettings": {
							"type": "object",
							"properties": {
								"Url": {
									"type": "string"
								},
								"Auth_UserName": {
									"type": "string"
								},
								"Auth_Password": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"GetAllITSMIntegrationSettingsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"dypId": {
						"type": "string"
					},
					"dypName": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"uniqueKey": {
						"type": "string"
					},
					"dypMajorVersion": {
						"type": "integer"
					},
					"description": {
						"type": "string"
					},
					"createdDate": {
						"type": "integer"
					},
					"createdBy": {
						"type": "string"
					},
					"updatedBy": {
						"type": "string"
					},
					"softwareVersionLog": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"schemaVersion": {
						"type": "number"
					},
					"tenantId": {
						"type": "string"
					}
				}
			}
		},
		"SNMPvReadCommunityDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"comments": {
						"type": "string"
					},
					"credentialType": {
						"type": "string",
						"enum": [
							"GLOBAL",
							"APP"
						]
					},
					"description": {
						"type": "string"
					},
					"readCommunity": {
						"type": "string"
					}
				}
			}
		},
		"DeviceReplacementDataDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"creationTime": {
						"type": "integer"
					},
					"family": {
						"type": "string"
					},
					"faultyDeviceId": {
						"type": "string"
					},
					"faultyDeviceName": {
						"type": "string"
					},
					"faultyDevicePlatform": {
						"type": "string"
					},
					"faultyDeviceSerialNumber": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"neighbourDeviceId": {
						"type": "string"
					},
					"networkReadinessTaskId": {
						"type": "string"
					},
					"replacementDevicePlatform": {
						"type": "string"
					},
					"replacementDeviceSerialNumber": {
						"type": "string"
					},
					"replacementStatus": {
						"type": "string"
					},
					"replacementTime": {
						"type": "integer"
					},
					"workflowId": {
						"type": "string"
					}
				}
			}
		},
		"InventoryDeviceInfo": {
			"type": "object",
			"properties": {
				"cliTransport": {
					"type": "string"
				},
				"computeDevice": {
					"type": "boolean"
				},
				"enablePassword": {
					"type": "string"
				},
				"extendedDiscoveryInfo": {
					"type": "string"
				},
				"httpPassword": {
					"type": "string"
				},
				"httpPort": {
					"type": "string"
				},
				"httpSecure": {
					"type": "boolean"
				},
				"httpUserName": {
					"type": "string"
				},
				"ipAddress": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"merakiOrgId": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"netconfPort": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"serialNumber": {
					"type": "string"
				},
				"snmpAuthPassphrase": {
					"type": "string"
				},
				"snmpAuthProtocol": {
					"type": "string"
				},
				"snmpMode": {
					"type": "string"
				},
				"snmpPrivPassphrase": {
					"type": "string"
				},
				"snmpPrivProtocol": {
					"type": "string"
				},
				"snmpROCommunity": {
					"type": "string"
				},
				"snmpRWCommunity": {
					"type": "string"
				},
				"snmpRetry": {
					"type": "integer"
				},
				"snmpTimeout": {
					"type": "integer"
				},
				"snmpUserName": {
					"type": "string"
				},
				"snmpVersion": {
					"type": "string"
				},
				"type": {
					"type": "string",
					"enum": [
						"COMPUTE_DEVICE",
						"MERAKI_DASHBOARD",
						"NETWORK_DEVICE",
						"NODATACHANGE"
					]
				},
				"updateMgmtIPaddressList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"existMgmtIpAddress": {
								"type": "string"
							},
							"newMgmtIpAddress": {
								"type": "string"
							}
						}
					}
				},
				"userName": {
					"type": "string"
				}
			}
		},
		"GetAuditLogSummaryResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer"
					},
					"maxTimestamp": {
						"type": "integer"
					},
					"minTimestamp": {
						"type": "integer"
					}
				}
			}
		},
		"GetLinecardDetailsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"serialno": {
								"type": "string"
							},
							"partno": {
								"type": "string"
							},
							"switchno": {
								"type": "string"
							},
							"slotno": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CreateGlobalCredentialsVRequest": {
			"type": "object",
			"properties": {
				"cliCredential": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"description": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"enablePassword": {
								"type": "string"
							}
						}
					}
				},
				"snmpV2cRead": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"description": {
								"type": "string"
							},
							"readCommunity": {
								"type": "string"
							}
						}
					}
				},
				"snmpV2cWrite": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"description": {
								"type": "string"
							},
							"writeCommunity": {
								"type": "string"
							}
						}
					}
				},
				"snmpV3": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"description": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"privacyType": {
								"type": "string"
							},
							"privacyPassword": {
								"type": "string"
							},
							"authType": {
								"type": "string"
							},
							"authPassword": {
								"type": "string"
							},
							"snmpMode": {
								"type": "string"
							}
						}
					}
				},
				"httpsRead": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"port": {
								"type": "integer"
							}
						}
					}
				},
				"httpsWrite": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"port": {
								"type": "integer"
							}
						}
					}
				}
			}
		},
		"CreateGlobalCredentialsVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ProjectDTO": {
			"type": "object",
			"properties": {
				"tags": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						}
					}
				},
				"createTime": {
					"type": "integer"
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"lastUpdateTime": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"templates": {
					"type": "object"
				}
			}
		},
		"DeleteQosDeviceInterfaceInfoResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CreateEventSubscriptionsRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"subscriptionId": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"CreateEventSubscriptionsResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"CreatewebhookConfiguration": {
			"type": "object",
			"properties": {
				"webhookId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"url": {
					"type": "string"
				},
				"method": {
					"type": "string",
					"enum": [
						"POST",
						"PUT"
					]
				},
				"trustCert": {
					"type": "boolean"
				},
				"headers": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"value": {
								"type": "string"
							},
							"defaultValue": {
								"type": "string"
							},
							"encrypt": {
								"type": "boolean"
							}
						}
					}
				},
				"isProxyRoute": {
					"type": "boolean"
				}
			}
		},
		"CreateWebhookDestinationResponse": {
			"type": "object",
			"properties": {
				"errorMessage": {
					"type": "object",
					"properties": {
						"errors": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"apiStatus": {
					"type": "string"
				},
				"statusMessage": {
					"type": "string"
				}
			}
		},
		"SystemHealthCountAPIResponse": {
			"type": "object",
			"properties": {
				"count": {
					"type": "number"
				}
			}
		},
		"DeviceIfResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"adminStatus": {
							"type": "string"
						},
						"className": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"deviceId": {
							"type": "string"
						},
						"duplex": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"ifIndex": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"interfaceType": {
							"type": "string"
						},
						"ipv4Address": {
							"type": "string"
						},
						"ipv4Mask": {
							"type": "string"
						},
						"isisSupport": {
							"type": "string"
						},
						"lastUpdated": {
							"type": "string"
						},
						"macAddress": {
							"type": "string"
						},
						"mappedPhysicalInterfaceId": {
							"type": "string"
						},
						"mappedPhysicalInterfaceName": {
							"type": "string"
						},
						"mediaType": {
							"type": "string"
						},
						"nativeVlanId": {
							"type": "string"
						},
						"ospfSupport": {
							"type": "string"
						},
						"pid": {
							"type": "string"
						},
						"portMode": {
							"type": "string"
						},
						"portName": {
							"type": "string"
						},
						"portType": {
							"type": "string"
						},
						"serialNo": {
							"type": "string"
						},
						"series": {
							"type": "string"
						},
						"speed": {
							"type": "string"
						},
						"status": {
							"type": "string"
						},
						"vlanId": {
							"type": "string"
						},
						"voiceVlan": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ComplianceDetailsOfDeviceResponse": {
			"type": "object",
			"properties": {
				"deviceUuid": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"displayName": {
								"type": "string"
							},
							"complianceType": {
								"type": "string"
							},
							"lastSyncTime": {
								"type": "string"
							},
							"additionalDataURL": {
								"type": "string"
							},
							"sourceInfoList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"count": {
											"type": "number"
										},
										"displayName": {
											"type": "string"
										},
										"diffList": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"displayName": {
														"type": "string"
													},
													"moveFromPath": {
														"type": "string"
													},
													"op": {
														"type": "string"
													},
													"configuredValue": {
														"type": "string"
													},
													"intendedValue": {
														"type": "string"
													},
													"path": {
														"type": "string"
													},
													"businessKey": {
														"type": "string"
													},
													"extendedAttributes": {
														"type": "string"
													}
												}
											}
										},
										"sourceEnum": {
											"type": "string"
										},
										"licenseAppName": {
											"type": "string"
										},
										"provisioningArea": {
											"type": "string"
										},
										"networkProfileName": {
											"type": "string"
										},
										"nameWithBusinessKey": {
											"type": "string"
										},
										"appName": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"type": {
											"type": "string"
										},
										"businessKey": {
											"type": "object",
											"properties": {
												"otherAttributes": {
													"type": "object",
													"properties": {
														"cfsAttributes": {
															"type": "string"
														},
														"name": {
															"type": "string"
														}
													}
												},
												"resourceName": {
													"type": "string"
												},
												"businessKeyAttributes": {
													"type": "string"
												}
											}
										}
									}
								}
							},
							"deviceUuid": {
								"type": "string"
							},
							"message": {
								"type": "string"
							},
							"state": {
								"type": "string"
							},
							"status": {
								"type": "string"
							},
							"category": {
								"type": "string"
							},
							"lastUpdateTime": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"CommitDeviceConfigurationRequest": {
			"type": "object",
			"properties": {
				"deviceId": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"CommitDeviceConfigurationResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"url": {
							"type": "string"
						},
						"taskId": {
							"type": "object",
							"properties": {}
						}
					}
				}
			}
		},
		"DeviceLicenseSummaryResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"authorization_status": {
								"type": "string"
							},
							"last_updated_time": {
								"type": "string"
							},
							"is_performance_allowed": {
								"type": "boolean"
							},
							"sle_auth_code": {
								"type": "string"
							},
							"throughput_level": {
								"type": "string"
							},
							"hsec_status": {
								"type": "string"
							},
							"device_uuid": {
								"type": "string"
							},
							"site": {
								"type": "string"
							},
							"total_access_point_count": {
								"type": "integer"
							},
							"model": {
								"type": "string"
							},
							"is_wireless_capable": {
								"type": "boolean"
							},
							"registration_status": {
								"type": "string"
							},
							"sle_state": {
								"type": "string"
							},
							"performance_license": {
								"type": "string"
							},
							"license_mode": {
								"type": "string"
							},
							"is_license_expired": {
								"type": "boolean"
							},
							"software_version": {
								"type": "string"
							},
							"reservation_status": {
								"type": "string"
							},
							"is_wireless": {
								"type": "boolean"
							},
							"network_license": {
								"type": "string"
							},
							"evaluation_license_expiry": {
								"type": "string"
							},
							"wireless_capable_network_license": {
								"type": "string"
							},
							"device_name": {
								"type": "string"
							},
							"device_type": {
								"type": "string"
							},
							"dna_level": {
								"type": "string"
							},
							"virtual_account_name": {
								"type": "string"
							},
							"last_successful_rum_usage_upload_time": {
								"type": "string"
							},
							"ip_address": {
								"type": "string"
							},
							"wireless_capable_dna_license": {
								"type": "string"
							},
							"mac_address": {
								"type": "string"
							},
							"customer_tag1": {
								"type": "string"
							},
							"customer_tag2": {
								"type": "string"
							},
							"customer_tag3": {
								"type": "string"
							},
							"customer_tag4": {
								"type": "string"
							},
							"smart_account_name": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"HTTPWriteCredentialDTO": {
			"type": "object",
			"properties": {
				"comments": {
					"type": "string"
				},
				"credentialType": {
					"type": "string",
					"enum": [
						"GLOBAL",
						"APP"
					]
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"instanceTenantId": {
					"type": "string"
				},
				"instanceUuid": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"port": {
					"type": "integer"
				},
				"secure": {
					"type": "boolean"
				},
				"username": {
					"type": "string"
				}
			}
		},
		"AddAuthenticationAndPolicyServerAccessConfigurationRequest": {
			"type": "object",
			"properties": {
				"authenticationPort": {
					"type": "string"
				},
				"accountingPort": {
					"type": "string"
				},
				"ciscoIseDtos": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"description": {
								"type": "string"
							},
							"fqdn": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"sshkey": {
								"type": "string"
							},
							"ipAddress": {
								"type": "string"
							},
							"subscriberName": {
								"type": "string"
							},
							"userName": {
								"type": "string"
							}
						}
					}
				},
				"ipAddress": {
					"type": "string"
				},
				"pxgridEnabled": {
					"type": "boolean"
				},
				"useDnacCertForPxgrid": {
					"type": "boolean"
				},
				"isIseEnabled": {
					"type": "boolean"
				},
				"port": {
					"type": "string"
				},
				"protocol": {
					"type": "string",
					"enum": [
						"TACACS",
						"RADIUS",
						"RADIUS_TACACS"
					]
				},
				"retries": {
					"type": "string"
				},
				"role": {
					"type": "string"
				},
				"sharedSecret": {
					"type": "string"
				},
				"timeoutSeconds": {
					"type": "string"
				},
				"encryptionScheme": {
					"type": "string",
					"enum": [
						"KEYWRAP",
						"RADSEC"
					]
				},
				"messageKey": {
					"type": "string"
				},
				"encryptionKey": {
					"type": "string"
				},
				"externalCiscoIseIpAddrDtos": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"externalCiscoIseIpAddresses": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"externalIpAddress": {
											"type": "string"
										}
									}
								}
							},
							"type": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"AddAuthenticationAndPolicyServerAccessConfigurationResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"FlowAnalysisListOutput": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"controlPath": {
								"type": "boolean"
							},
							"createTime": {
								"type": "integer"
							},
							"destIP": {
								"type": "string"
							},
							"destPort": {
								"type": "string"
							},
							"failureReason": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"inclusions": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"lastUpdateTime": {
								"type": "integer"
							},
							"periodicRefresh": {
								"type": "boolean"
							},
							"protocol": {
								"type": "string"
							},
							"sourceIP": {
								"type": "string"
							},
							"sourcePort": {
								"type": "string"
							},
							"status": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"InventoryInsightDeviceLinkMismatchAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"endPortAllowedVlanIds": {
								"type": "string"
							},
							"endPortNativeVlanId": {
								"type": "string"
							},
							"startPortAllowedVlanIds": {
								"type": "string"
							},
							"startPortNativeVlanId": {
								"type": "string"
							},
							"linkStatus": {
								"type": "string"
							},
							"endDeviceHostName": {
								"type": "string"
							},
							"endDeviceId": {
								"type": "string"
							},
							"endDeviceIpAddress": {
								"type": "string"
							},
							"endPortAddress": {
								"type": "string"
							},
							"endPortDuplex": {
								"type": "string"
							},
							"endPortId": {
								"type": "string"
							},
							"endPortMask": {
								"type": "string"
							},
							"endPortName": {
								"type": "string"
							},
							"endPortPepId": {
								"type": "string"
							},
							"endPortSpeed": {
								"type": "string"
							},
							"startDeviceHostName": {
								"type": "string"
							},
							"startDeviceId": {
								"type": "string"
							},
							"startDeviceIpAddress": {
								"type": "string"
							},
							"startPortAddress": {
								"type": "string"
							},
							"startPortDuplex": {
								"type": "string"
							},
							"startPortId": {
								"type": "string"
							},
							"startPortMask": {
								"type": "string"
							},
							"startPortName": {
								"type": "string"
							},
							"startPortPepId": {
								"type": "string"
							},
							"startPortSpeed": {
								"type": "string"
							},
							"lastUpdated": {
								"type": "string"
							},
							"numUpdates": {
								"type": "number"
							},
							"avgUpdateFrequency": {
								"type": "number"
							},
							"type": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UpdateRoleAPIRequest": {
			"type": "object",
			"properties": {
				"roleId": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"resourceTypes": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"type": {
								"type": "string"
							},
							"operations": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"UpdateRoleAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"roleId": {
							"type": "string"
						},
						"message": {
							"type": "string"
						}
					}
				}
			}
		},
		"ExportDeviceConfigurationsRequest": {
			"type": "object",
			"properties": {
				"password": {
					"type": "string"
				},
				"deviceId": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"ExportDeviceConfigurationsResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"url": {
							"type": "string"
						},
						"taskId": {
							"type": "object",
							"properties": {}
						}
					}
				}
			}
		},
		"InventoryRequest": {
			"type": "object",
			"properties": {
				"cdpLevel": {
					"type": "integer"
				},
				"discoveryType": {
					"type": "string"
				},
				"enablePasswordList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"globalCredentialIdList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"httpReadCredential": {
					"type": "object",
					"properties": {
						"password": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"secure": {
							"type": "boolean"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"httpWriteCredential": {
					"type": "object",
					"properties": {
						"password": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"secure": {
							"type": "boolean"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"ipAddressList": {
					"type": "string"
				},
				"ipFilterList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"lldpLevel": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"netconfPort": {
					"type": "string"
				},
				"passwordList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"preferredMgmtIPMethod": {
					"type": "string"
				},
				"protocolOrder": {
					"type": "string"
				},
				"retry": {
					"type": "integer"
				},
				"snmpAuthPassphrase": {
					"type": "string"
				},
				"snmpAuthProtocol": {
					"type": "string"
				},
				"snmpMode": {
					"type": "string"
				},
				"snmpPrivPassphrase": {
					"type": "string"
				},
				"snmpPrivProtocol": {
					"type": "string"
				},
				"snmpROCommunity": {
					"type": "string"
				},
				"snmpROCommunityDesc": {
					"type": "string"
				},
				"snmpRWCommunity": {
					"type": "string"
				},
				"snmpRWCommunityDesc": {
					"type": "string"
				},
				"snmpUserName": {
					"type": "string"
				},
				"snmpVersion": {
					"type": "string"
				},
				"timeout": {
					"type": "integer"
				},
				"userNameList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"GlobalCredentialSubTypeResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "string"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ImportMapArchiveCancelAnImportResponse": {
			"type": "object"
		},
		"CreateProjectRequest": {
			"type": "object",
			"properties": {
				"tags": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						}
					}
				},
				"createTime": {
					"type": "integer"
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"lastUpdateTime": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"templates": {
					"type": "array",
					"items": {
						"type": "object"
					}
				}
			}
		},
		"CreateProjectResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "object"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UpdateEventSubscriptionsRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"subscriptionId": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"UpdateEventSubscriptionsResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"ImportMapArchivePerformImportResponse": {
			"type": "object"
		},
		"SwimGoldenTagDTO": {
			"type": "object",
			"properties": {
				"imageId": {
					"type": "string"
				},
				"siteId": {
					"type": "string"
				},
				"deviceRole": {
					"type": "string"
				},
				"deviceFamilyIdentifier": {
					"type": "string"
				}
			}
		},
		"LANAutomationLogByIdResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"nwOrchId": {
								"type": "string"
							},
							"entry": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"logLevel": {
											"type": "string"
										},
										"timeStamp": {
											"type": "string"
										},
										"record": {
											"type": "string"
										},
										"deviceId": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"RebootAccessPointsRequest": {
			"type": "object",
			"properties": {
				"apMacAddresses": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"RebootAccessPointsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"SystemHealthAPIResponse": {
			"type": "object",
			"properties": {
				"healthEvents": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"severity": {
								"type": "string"
							},
							"hostname": {
								"type": "string"
							},
							"instance": {
								"type": "string"
							},
							"subDomain": {
								"type": "string"
							},
							"domain": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"state": {
								"type": "string"
							},
							"timestamp": {
								"type": "string"
							},
							"status": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				},
				"hostName": {
					"type": "string"
				},
				"cimcaddress": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"CiscoDNACenterReleaseSummaryResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"corePackages": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"packages": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"name": {
							"type": "string"
						},
						"installedVersion": {
							"type": "string"
						},
						"systemVersion": {
							"type": "string"
						},
						"supportedDirectUpdates": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"tenantId": {
							"type": "string"
						}
					}
				}
			}
		},
		"SiteProvisionRequest": {
			"type": "object",
			"properties": {
				"deviceId": {
					"type": "string"
				},
				"siteId": {
					"type": "string"
				},
				"type": {
					"type": "string",
					"enum": [
						"Default",
						"AccessPoint",
						"StackSwitch",
						"Sensor",
						"MobilityExpress"
					]
				}
			}
		},
		"SiteClaimResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "string"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetSiteVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"parentId": {
								"type": "string"
							},
							"groupTypeList": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"groupHierarchy": {
								"type": "string"
							},
							"additionalInfo": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"nameSpace": {
											"type": "string"
										},
										"attributes": {
											"type": "object",
											"properties": {
												"addressInheritedFrom": {
													"type": "string"
												},
												"type": {
													"type": "string",
													"enum": [
														"area",
														"building",
														"floor"
													]
												},
												"country": {
													"type": "string"
												},
												"address": {
													"type": "string"
												},
												"latitude": {
													"type": "string"
												},
												"longitude": {
													"type": "string"
												}
											}
										}
									}
								}
							},
							"groupNameHierarchy": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"DiscoveryNIOResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"attributeInfo": {
							"type": "object",
							"properties": {}
						},
						"cdpLevel": {
							"type": "integer"
						},
						"deviceIds": {
							"type": "string"
						},
						"discoveryCondition": {
							"type": "string"
						},
						"discoveryStatus": {
							"type": "string"
						},
						"discoveryType": {
							"type": "string"
						},
						"enablePasswordList": {
							"type": "string"
						},
						"globalCredentialIdList": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"httpReadCredential": {
							"type": "object",
							"properties": {
								"comments": {
									"type": "string"
								},
								"credentialType": {
									"type": "string",
									"enum": [
										"GLOBAL",
										"APP"
									]
								},
								"description": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"instanceTenantId": {
									"type": "string"
								},
								"instanceUuid": {
									"type": "string"
								},
								"password": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								},
								"secure": {
									"type": "boolean"
								},
								"username": {
									"type": "string"
								}
							}
						},
						"httpWriteCredential": {
							"type": "object",
							"properties": {
								"comments": {
									"type": "string"
								},
								"credentialType": {
									"type": "string",
									"enum": [
										"GLOBAL",
										"APP"
									]
								},
								"description": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"instanceTenantId": {
									"type": "string"
								},
								"instanceUuid": {
									"type": "string"
								},
								"password": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								},
								"secure": {
									"type": "boolean"
								},
								"username": {
									"type": "string"
								}
							}
						},
						"id": {
							"type": "string"
						},
						"ipAddressList": {
							"type": "string"
						},
						"ipFilterList": {
							"type": "string"
						},
						"isAutoCdp": {
							"type": "boolean"
						},
						"lldpLevel": {
							"type": "integer"
						},
						"name": {
							"type": "string"
						},
						"netconfPort": {
							"type": "string"
						},
						"numDevices": {
							"type": "integer"
						},
						"parentDiscoveryId": {
							"type": "string"
						},
						"passwordList": {
							"type": "string"
						},
						"preferredMgmtIPMethod": {
							"type": "string"
						},
						"protocolOrder": {
							"type": "string"
						},
						"retryCount": {
							"type": "integer"
						},
						"snmpAuthPassphrase": {
							"type": "string"
						},
						"snmpAuthProtocol": {
							"type": "string"
						},
						"snmpMode": {
							"type": "string"
						},
						"snmpPrivPassphrase": {
							"type": "string"
						},
						"snmpPrivProtocol": {
							"type": "string"
						},
						"snmpRoCommunity": {
							"type": "string"
						},
						"snmpRoCommunityDesc": {
							"type": "string"
						},
						"snmpRwCommunity": {
							"type": "string"
						},
						"snmpRwCommunityDesc": {
							"type": "string"
						},
						"snmpUserName": {
							"type": "string"
						},
						"timeOut": {
							"type": "integer"
						},
						"updateMgmtIp": {
							"type": "boolean"
						},
						"userNameList": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeleteSPProfileVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetAllGlobalCredentialsVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"cliCredential": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"password": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"enablePassword": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"comments": {
										"type": "string"
									},
									"credentialType": {
										"type": "string",
										"enum": [
											"GLOBAL",
											"APP"
										]
									},
									"instanceTenantId": {
										"type": "string"
									},
									"instanceUuid": {
										"type": "string"
									},
									"id": {
										"type": "string"
									}
								}
							}
						},
						"snmpV2cRead": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"readCommunity": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"comments": {
										"type": "string"
									},
									"credentialType": {
										"type": "string",
										"enum": [
											"GLOBAL",
											"APP"
										]
									},
									"instanceTenantId": {
										"type": "string"
									},
									"instanceUuid": {
										"type": "string"
									},
									"id": {
										"type": "string"
									}
								}
							}
						},
						"snmpV2cWrite": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"writeCommunity": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"comments": {
										"type": "string"
									},
									"credentialType": {
										"type": "string",
										"enum": [
											"GLOBAL",
											"APP"
										]
									},
									"instanceTenantId": {
										"type": "string"
									},
									"instanceUuid": {
										"type": "string"
									},
									"id": {
										"type": "string"
									}
								}
							}
						},
						"httpsRead": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"password": {
										"type": "string"
									},
									"port": {
										"type": "integer"
									},
									"username": {
										"type": "string"
									},
									"secure": {
										"type": "boolean"
									},
									"description": {
										"type": "string"
									},
									"comments": {
										"type": "string"
									},
									"credentialType": {
										"type": "string",
										"enum": [
											"GLOBAL",
											"APP"
										]
									},
									"instanceTenantId": {
										"type": "string"
									},
									"instanceUuid": {
										"type": "string"
									},
									"id": {
										"type": "string"
									}
								}
							}
						},
						"httpsWrite": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"password": {
										"type": "string"
									},
									"port": {
										"type": "integer"
									},
									"username": {
										"type": "string"
									},
									"secure": {
										"type": "boolean"
									},
									"description": {
										"type": "string"
									},
									"comments": {
										"type": "string"
									},
									"credentialType": {
										"type": "string",
										"enum": [
											"GLOBAL",
											"APP"
										]
									},
									"instanceTenantId": {
										"type": "string"
									},
									"instanceUuid": {
										"type": "string"
									},
									"id": {
										"type": "string"
									}
								}
							}
						},
						"snmpV3": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"username": {
										"type": "string"
									},
									"authPassword": {
										"type": "string"
									},
									"authType": {
										"type": "string"
									},
									"privacyPassword": {
										"type": "string"
									},
									"privacyType": {
										"type": "string"
									},
									"snmpMode": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"comments": {
										"type": "string"
									},
									"credentialType": {
										"type": "string",
										"enum": [
											"GLOBAL",
											"APP"
										]
									},
									"instanceTenantId": {
										"type": "string"
									},
									"instanceUuid": {
										"type": "string"
									},
									"id": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"LANAutomationStatusByIdResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"discoveredDeviceSiteNameHierarchy": {
								"type": "string"
							},
							"primaryDeviceManagmentIPAddress": {
								"type": "string"
							},
							"ipPoolList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ipPoolName": {
											"type": "string"
										},
										"ipPoolRole": {
											"type": "string"
										}
									}
								}
							},
							"primaryDeviceInterfaceNames": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"status": {
								"type": "string"
							},
							"action": {
								"type": "string"
							},
							"creationTime": {
								"type": "string"
							},
							"multicastEnabled": {
								"type": "boolean"
							},
							"peerDeviceManagmentIPAddress": {
								"type": "string"
							},
							"discoveredDeviceList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"serialNumber": {
											"type": "string"
										},
										"state": {
											"type": "string"
										},
										"ipAddressInUseList": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"redistributeIsisToBgp": {
								"type": "boolean"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"VlanNamesResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetPlannedAccessPointsForFloorResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributes": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"instanceUuid": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"typeString": {
										"type": "string"
									},
									"domain": {
										"type": "string"
									},
									"heirarchyName": {
										"type": "string"
									},
									"source": {
										"type": "string"
									},
									"createDate": {
										"type": "integer"
									},
									"macaddress": {
										"type": "object",
										"properties": {}
									}
								}
							},
							"location": {
								"type": "object",
								"properties": {}
							},
							"position": {
								"type": "object",
								"properties": {
									"x": {
										"type": "number"
									},
									"y": {
										"type": "number"
									},
									"z": {
										"type": "number"
									}
								}
							},
							"radioCount": {
								"type": "integer"
							},
							"radios": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"attributes": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"instanceUuid": {
													"type": "string"
												},
												"slotId": {
													"type": "integer"
												},
												"ifTypeString": {
													"type": "string"
												},
												"ifTypeSubband": {
													"type": "string"
												},
												"channel": {
													"type": "object",
													"properties": {}
												},
												"channelString": {
													"type": "object",
													"properties": {}
												},
												"ifMode": {
													"type": "string"
												}
											}
										},
										"antenna": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"mode": {
													"type": "string"
												},
												"azimuthAngle": {
													"type": "number"
												},
												"elevationAngle": {
													"type": "number"
												},
												"gain": {
													"type": "number"
												}
											}
										},
										"isSensor": {
											"type": "boolean"
										}
									}
								}
							},
							"isSensor": {
								"type": "boolean"
							}
						}
					}
				},
				"version": {
					"type": "integer"
				},
				"total": {
					"type": "integer"
				}
			}
		},
		"Applications": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"networkApplications": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"helpString": {
									"type": "string"
								},
								"applicationType": {
									"type": "string",
									"enum": [
										"CUSTOM"
									]
								},
								"type": {
									"type": "string",
									"enum": [
										"_servername",
										"_url",
										"_server-ip"
									]
								},
								"dscp": {
									"type": "string"
								},
								"appProtocol": {
									"type": "string",
									"enum": [
										"TCP",
										"UDP",
										"TCP/UDP",
										"IP"
									]
								},
								"serverName": {
									"type": "string"
								},
								"url": {
									"type": "string"
								},
								"trafficClass": {
									"type": "string",
									"enum": [
										"BROADCAST_VIDEO",
										"BULK_DATA",
										"MULTIMEDIA_CONFERENCING",
										"MULTIMEDIA_STREAMING",
										"NETWORK_CONTROL",
										"OPS_ADMIN_MGMT",
										"REAL_TIME_INTERACTIVE",
										"SIGNALING",
										"TRANSACTIONAL_DATA",
										"VOIP_TELEPHONY",
										"BEST_EFFORT",
										"SCAVENGER"
									]
								},
								"categoryId": {
									"type": "string"
								},
								"ignoreConflict": {
									"type": "boolean"
								},
								"rank": {
									"type": "integer"
								},
								"engineId": {
									"type": "integer"
								}
							}
						}
					},
					"parentScalableGroup": {
						"type": "object",
						"properties": {
							"idRef": {
								"type": "string"
							}
						}
					},
					"networkIdentity": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"protocol": {
									"type": "string",
									"enum": [
										"TCP_OR_UDP",
										"TCP",
										"UDP",
										"IP"
									]
								},
								"ports": {
									"type": "string"
								},
								"ipv4Subnet": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"lowerPort": {
									"type": "number"
								},
								"upperPort": {
									"type": "number"
								}
							}
						}
					},
					"indicativeNetworkIdentity": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"protocol": {
									"type": "string",
									"enum": [
										"TCP_OR_UDP",
										"TCP",
										"UDP",
										"IP"
									]
								},
								"ports": {
									"type": "string"
								},
								"ipv4Subnet": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"ipv6Subnet": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"lowerPort": {
									"type": "number"
								},
								"upperPort": {
									"type": "number"
								}
							}
						}
					},
					"scalableGroupType": {
						"type": "string"
					},
					"type": {
						"type": "string"
					}
				}
			}
		},
		"Response": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeleteGlobalCredentialVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UpdateITSMIntegrationSettingRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"data": {
					"type": "object",
					"properties": {
						"ConnectionSettings": {
							"type": "object",
							"properties": {
								"Url": {
									"type": "string"
								},
								"Auth_UserName": {
									"type": "string"
								},
								"Auth_Password": {
									"type": "string"
								}
							}
						}
					}
				},
				"dypName": {
					"type": "string"
				}
			}
		},
		"UpdateITSMIntegrationSettingResponse": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"dypId": {
					"type": "string"
				},
				"dypName": {
					"type": "string"
				},
				"dypMajorVersion": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"uniqueKey": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"data": {
					"type": "object",
					"properties": {
						"ConnectionSettings": {
							"type": "object",
							"properties": {
								"Url": {
									"type": "string"
								},
								"Auth_UserName": {
									"type": "string"
								},
								"Auth_Password": {
									"type": "string"
								}
							}
						}
					}
				},
				"updatedDate": {
					"type": "integer"
				},
				"updatedBy": {
					"type": "string"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"ExportsTheProjectsForAGivenCriteriaRequest": {
			"type": "array",
			"items": {
				"type": "object"
			}
		},
		"DeleteUserAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						}
					}
				}
			}
		},
		"UpdateQosDeviceInterfaceInfoRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"excludedInterfaces": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"networkDeviceId": {
						"type": "string"
					},
					"qosDeviceInterfaceInfo": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "integer"
								},
								"dmvpnRemoteSitesBw": {
									"type": "array",
									"items": {
										"type": "integer"
									}
								},
								"interfaceId": {
									"type": "string"
								},
								"interfaceName": {
									"type": "string"
								},
								"label": {
									"type": "string"
								},
								"role": {
									"type": "string",
									"enum": [
										"WAN",
										"DMVPN_HUB",
										"DMVPN_SPOKE"
									]
								},
								"uploadBW": {
									"type": "integer"
								}
							}
						}
					}
				}
			}
		},
		"UpdateQosDeviceInterfaceInfoResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetVirtualAccountListResponse": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"UpdateSyslogEventSubscription": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"subscriptionId": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"UpdateSyslogEventSubscriptionResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"AddUserAPIRequest": {
			"type": "object",
			"properties": {
				"firstName": {
					"type": "string"
				},
				"lastName": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"roleList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"AddUserAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"userId": {
							"type": "string"
						}
					}
				}
			}
		},
		"UpdatePnPServerProfileResponse": {
			"type": "object",
			"properties": {
				"virtualAccountId": {
					"type": "string"
				},
				"autoSyncPeriod": {
					"type": "number"
				},
				"syncResultStr": {
					"type": "string"
				},
				"profile": {
					"type": "object",
					"properties": {
						"proxy": {
							"type": "boolean"
						},
						"makeDefault": {
							"type": "boolean"
						},
						"port": {
							"type": "number"
						},
						"profileId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"addressIpV4": {
							"type": "string"
						},
						"cert": {
							"type": "string"
						},
						"addressFqdn": {
							"type": "string"
						}
					}
				},
				"ccoUser": {
					"type": "string"
				},
				"syncResult": {
					"type": "object",
					"properties": {
						"syncList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"syncType": {
										"type": "string"
									},
									"deviceSnList": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								}
							}
						},
						"syncMsg": {
							"type": "string"
						}
					}
				},
				"token": {
					"type": "string"
				},
				"syncStartTime": {
					"type": "number"
				},
				"lastSync": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				},
				"smartAccountId": {
					"type": "string"
				},
				"expiry": {
					"type": "number"
				},
				"syncStatus": {
					"type": "string"
				}
			}
		},
		"StackDTOResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"deviceId": {
							"type": "string"
						},
						"stackPortInfo": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"isSynchOk": {
										"type": "string"
									},
									"linkActive": {
										"type": "boolean"
									},
									"linkOk": {
										"type": "boolean"
									},
									"name": {
										"type": "string"
									},
									"neighborPort": {
										"type": "string"
									},
									"nrLinkOkChanges": {
										"type": "integer"
									},
									"stackCableLengthInfo": {
										"type": "string",
										"enum": [
											"NO_CABLE",
											"_50_CM",
											"_1_M",
											"_3_M",
											"UNKNOWN"
										]
									},
									"stackPortOperStatusInfo": {
										"type": "string",
										"enum": [
											"OK",
											"UP",
											"DOWN",
											"FORCEDDOWN",
											"ABSENT",
											"UNKNOWN"
										]
									},
									"switchPort": {
										"type": "string"
									}
								}
							}
						},
						"stackSwitchInfo": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"entPhysicalIndex": {
										"type": "string"
									},
									"hwPriority": {
										"type": "integer"
									},
									"macAddress": {
										"type": "string"
									},
									"numNextReload": {
										"type": "integer"
									},
									"platformId": {
										"type": "string"
									},
									"role": {
										"type": "string",
										"enum": [
											"MASTER",
											"MEMBER",
											"NOTMEMBER",
											"STANDBY",
											"UNKNOWN"
										]
									},
									"serialNumber": {
										"type": "string"
									},
									"softwareImage": {
										"type": "string"
									},
									"stackMemberNumber": {
										"type": "integer"
									},
									"state": {
										"type": "string",
										"enum": [
											"WAITING",
											"PROGRESSING",
											"ADDED",
											"READY",
											"SDMMISMATCH",
											"VERMISMATCH",
											"FEATUREMISMATCH",
											"NEWMASTERINIT",
											"PROVISIONED",
											"INVALID",
											"UNKNOWN"
										]
									},
									"switchPriority": {
										"type": "integer"
									}
								}
							}
						},
						"svlSwitchInfo": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dadProtocol": {
										"type": "string",
										"enum": [
											"NONE",
											"PAGP",
											"UNKNOWN"
										]
									},
									"dadRecoveryReloadEnabled": {
										"type": "boolean"
									},
									"domainNumber": {
										"type": "integer"
									},
									"inDadRecoveryMode": {
										"type": "boolean"
									},
									"swVirtualStatus": {
										"type": "string"
									},
									"switchMembers": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"bandwidth": {
													"type": "string"
												},
												"svlMemberEndPoints": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"svlMemberEndPointPorts": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"svlProtocolStatus": {
																			"type": "string",
																			"enum": [
																				"SUSPENDED",
																				"PENDING",
																				"ERROR",
																				"TIMEOUT",
																				"READY",
																				"UNKNOWN"
																			]
																		},
																		"swLocalInterface": {
																			"type": "string"
																		},
																		"swRemoteInterface": {
																			"type": "string"
																		}
																	}
																}
															},
															"svlNumber": {
																"type": "integer"
															},
															"svlStatus": {
																"type": "string",
																"enum": [
																	"UP",
																	"DOWN",
																	"UNKNOWN"
																]
															}
														}
													}
												},
												"svlMemberNumber": {
													"type": "integer"
												},
												"svlMemberPepSettings": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"dadEnabled": {
																"type": "boolean"
															},
															"dadInterfaceName": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"AnalyticsRequest": {
			"type": "object",
			"properties": {
				"startTime": {
					"type": "integer"
				},
				"endTime": {
					"type": "integer"
				},
				"query": {
					"type": "object",
					"properties": {
						"fields": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"filters": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"key": {
										"type": "string"
									},
									"operator": {
										"type": "string"
									},
									"value": {
										"type": "string"
									}
								}
							}
						},
						"page": {
							"type": "object",
							"properties": {
								"limit": {
									"type": "integer"
								},
								"offset": {
									"type": "number"
								},
								"orderBy": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"order": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"GetDeviceInterfaceStatsInfoResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"totalCount": {
					"type": "number"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"values": {
								"type": "object",
								"properties": {
									"adminStatus": {
										"type": "string"
									},
									"deviceId": {
										"type": "string"
									},
									"duplexConfig": {
										"type": "string"
									},
									"duplexOper": {
										"type": "string"
									},
									"interfaceId": {
										"type": "string"
									},
									"interfaceType": {
										"type": "string"
									},
									"instanceId": {
										"type": "string"
									},
									"ipv4Address": {
										"type": "string"
									},
									"ipv6AddressList": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"isL3Interface": {
										"type": "string"
									},
									"isWan": {
										"type": "string"
									},
									"macAddr": {
										"type": "string"
									},
									"mediaType": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"operStatus": {
										"type": "string"
									},
									"peerStackMember": {
										"type": "string"
									},
									"peerStackPort": {
										"type": "string"
									},
									"portChannelId": {
										"type": "string"
									},
									"portMode": {
										"type": "string"
									},
									"portType": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"rxDiscards": {
										"type": "string"
									},
									"rxError": {
										"type": "string"
									},
									"rxRate": {
										"type": "string"
									},
									"rxUtilization": {
										"type": "string"
									},
									"speed": {
										"type": "string"
									},
									"stackPortType": {
										"type": "string"
									},
									"timestamp": {
										"type": "string"
									},
									"txDiscards": {
										"type": "string"
									},
									"txError": {
										"type": "string"
									},
									"txRate": {
										"type": "string"
									},
									"txUtilization": {
										"type": "string"
									},
									"vlanId": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"page": {
					"type": "object",
					"properties": {
						"limit": {
							"type": "integer"
						},
						"offset": {
							"type": "number"
						},
						"count": {
							"type": "integer"
						}
					}
				}
			}
		},
		"GetQosDeviceInterfaceInfoCountResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "integer"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CountOfEventsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "number"
				}
			}
		},
		"GetWorkflowCountResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "number"
				}
			}
		},
		"DeleteUserDefinedFieldResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetOverallNetworkHealthResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"time": {
								"type": "string"
							},
							"healthScore": {
								"type": "integer"
							},
							"totalCount": {
								"type": "integer"
							},
							"goodCount": {
								"type": "integer"
							},
							"noHealthCount": {
								"type": "integer"
							},
							"unmonCount": {
								"type": "integer"
							},
							"fairCount": {
								"type": "integer"
							},
							"badCount": {
								"type": "integer"
							},
							"maintenanceModeCount": {
								"type": "integer"
							},
							"entity": {
								"type": "string"
							},
							"timeinMillis": {
								"type": "integer"
							}
						}
					}
				},
				"measuredBy": {
					"type": "string"
				},
				"latestMeasuredByEntity": {
					"type": "string"
				},
				"latestHealthScore": {
					"type": "integer"
				},
				"monitoredDevices": {
					"type": "integer"
				},
				"monitoredHealthyDevices": {
					"type": "integer"
				},
				"monitoredUnHealthyDevices": {
					"type": "integer"
				},
				"unMonitoredDevices": {
					"type": "integer"
				},
				"noHealthDevices": {
					"type": "integer"
				},
				"totalDevices": {
					"type": "integer"
				},
				"monitoredPoorHealthDevices": {
					"type": "integer"
				},
				"monitoredFairHealthDevices": {
					"type": "integer"
				},
				"healthContributingDevices": {
					"type": "integer"
				},
				"healthDistirubution": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"category": {
								"type": "string"
							},
							"totalCount": {
								"type": "integer"
							},
							"healthScore": {
								"type": "integer"
							},
							"goodPercentage": {
								"type": "number"
							},
							"badPercentage": {
								"type": "number"
							},
							"fairPercentage": {
								"type": "number"
							},
							"noHealthPercentage": {
								"type": "number"
							},
							"unmonPercentage": {
								"type": "number"
							},
							"goodCount": {
								"type": "number"
							},
							"badCount": {
								"type": "number"
							},
							"fairCount": {
								"type": "number"
							},
							"noHealthCount": {
								"type": "number"
							},
							"unmonCount": {
								"type": "number"
							},
							"thirdPartyDeviceCount": {
								"type": "number"
							},
							"kpiMetrics": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"key": {
											"type": "string"
										},
										"value": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"CreateApplicationPolicyQueuingProfileRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"clause": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"type": {
									"type": "string",
									"enum": [
										"BANDWIDTH",
										"DSCP_CUSTOMIZATION"
									]
								},
								"isCommonBetweenAllInterfaceSpeeds": {
									"type": "boolean"
								},
								"interfaceSpeedBandwidthClauses": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"interfaceSpeed": {
												"type": "string",
												"enum": [
													"ALL",
													"HUNDRED_GBPS",
													"TEN_GBPS",
													"ONE_GBPS",
													"HUNDRED_MBPS",
													"TEN_MBPS",
													"ONE_MBPS"
												]
											},
											"tcBandwidthSettings": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"bandwidthPercentage": {
															"type": "integer"
														},
														"trafficClass": {
															"type": "string",
															"enum": [
																"BROADCAST_VIDEO",
																"REAL_TIME_INTERACTIVE",
																"VOIP_TELEPHONY",
																"SCAVENGER",
																"TRANSACTIONAL_DATA",
																"MULTIMEDIA_CONFERENCING",
																"NETWORK_CONTROL",
																"MULTIMEDIA_STREAMING",
																"BEST_EFFORT",
																"SIGNALING",
																"BULK_DATA",
																"OPS_ADMIN_MGMT"
															]
														}
													}
												}
											}
										}
									}
								},
								"tcDscpSettings": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"dscp": {
												"type": "string"
											},
											"trafficClass": {
												"type": "string",
												"enum": [
													"BROADCAST_VIDEO",
													"REAL_TIME_INTERACTIVE",
													"VOIP_TELEPHONY",
													"SCAVENGER",
													"TRANSACTIONAL_DATA",
													"MULTIMEDIA_CONFERENCING",
													"NETWORK_CONTROL",
													"MULTIMEDIA_STREAMING",
													"BEST_EFFORT",
													"SIGNALING",
													"BULK_DATA",
													"OPS_ADMIN_MGMT"
												]
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"CreateApplicationPolicyQueuingProfileResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"SitesInfoDTO": {
			"type": "object",
			"properties": {
				"siteUuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"ResponseCount": {
			"type": "object",
			"properties": {
				"response": {
					"type": "integer"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"dnacsystemrole": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"roles": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"resourceTypes": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"operations": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"type": {
													"type": "string"
												}
											}
										}
									},
									"meta": {
										"type": "object",
										"properties": {
											"createdBy": {
												"type": "string"
											},
											"created": {
												"type": "string"
											},
											"lastModified": {
												"type": "string"
											}
										}
									},
									"roleId": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"type": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"PathResponseResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"detailedStatus": {
							"type": "object",
							"properties": {
								"aclTraceCalculation": {
									"type": "string"
								},
								"aclTraceCalculationFailureReason": {
									"type": "string"
								}
							}
						},
						"lastUpdate": {
							"type": "string"
						},
						"networkElements": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"accuracyList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"percent": {
													"type": "integer"
												},
												"reason": {
													"type": "string"
												}
											}
										}
									},
									"detailedStatus": {
										"type": "object",
										"properties": {
											"aclTraceCalculation": {
												"type": "string"
											},
											"aclTraceCalculationFailureReason": {
												"type": "string"
											}
										}
									},
									"deviceStatistics": {
										"type": "object",
										"properties": {
											"cpuStatistics": {
												"type": "object",
												"properties": {
													"fiveMinUsageInPercentage": {
														"type": "number"
													},
													"fiveSecsUsageInPercentage": {
														"type": "number"
													},
													"oneMinUsageInPercentage": {
														"type": "number"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"memoryStatistics": {
												"type": "object",
												"properties": {
													"memoryUsage": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													},
													"totalMemory": {
														"type": "integer"
													}
												}
											}
										}
									},
									"deviceStatsCollection": {
										"type": "string"
									},
									"deviceStatsCollectionFailureReason": {
										"type": "string"
									},
									"egressPhysicalInterface": {
										"type": "object",
										"properties": {
											"aclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"id": {
												"type": "string"
											},
											"interfaceStatistics": {
												"type": "object",
												"properties": {
													"adminStatus": {
														"type": "string"
													},
													"inputPackets": {
														"type": "integer"
													},
													"inputQueueCount": {
														"type": "integer"
													},
													"inputQueueDrops": {
														"type": "integer"
													},
													"inputQueueFlushes": {
														"type": "integer"
													},
													"inputQueueMaxDepth": {
														"type": "integer"
													},
													"inputRatebps": {
														"type": "integer"
													},
													"operationalStatus": {
														"type": "string"
													},
													"outputDrop": {
														"type": "integer"
													},
													"outputPackets": {
														"type": "integer"
													},
													"outputQueueCount": {
														"type": "integer"
													},
													"outputQueueDepth": {
														"type": "integer"
													},
													"outputRatebps": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"interfaceStatsCollection": {
												"type": "string"
											},
											"interfaceStatsCollectionFailureReason": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"pathOverlayInfo": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"controlPlane": {
															"type": "string"
														},
														"dataPacketEncapsulation": {
															"type": "string"
														},
														"destIp": {
															"type": "string"
														},
														"destPort": {
															"type": "string"
														},
														"protocol": {
															"type": "string"
														},
														"sourceIp": {
															"type": "string"
														},
														"sourcePort": {
															"type": "string"
														},
														"vxlanInfo": {
															"type": "object",
															"properties": {
																"dscp": {
																	"type": "string"
																},
																"vnid": {
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"qosStatistics": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"classMapName": {
															"type": "string"
														},
														"dropRate": {
															"type": "integer"
														},
														"numBytes": {
															"type": "integer"
														},
														"numPackets": {
															"type": "integer"
														},
														"offeredRate": {
															"type": "integer"
														},
														"queueBandwidthbps": {
															"type": "string"
														},
														"queueDepth": {
															"type": "integer"
														},
														"queueNoBufferDrops": {
															"type": "integer"
														},
														"queueTotalDrops": {
															"type": "integer"
														},
														"refreshedAt": {
															"type": "integer"
														}
													}
												}
											},
											"qosStatsCollection": {
												"type": "string"
											},
											"qosStatsCollectionFailureReason": {
												"type": "string"
											},
											"usedVlan": {
												"type": "string"
											},
											"vrfName": {
												"type": "string"
											}
										}
									},
									"egressVirtualInterface": {
										"type": "object",
										"properties": {
											"aclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"id": {
												"type": "string"
											},
											"interfaceStatistics": {
												"type": "object",
												"properties": {
													"adminStatus": {
														"type": "string"
													},
													"inputPackets": {
														"type": "integer"
													},
													"inputQueueCount": {
														"type": "integer"
													},
													"inputQueueDrops": {
														"type": "integer"
													},
													"inputQueueFlushes": {
														"type": "integer"
													},
													"inputQueueMaxDepth": {
														"type": "integer"
													},
													"inputRatebps": {
														"type": "integer"
													},
													"operationalStatus": {
														"type": "string"
													},
													"outputDrop": {
														"type": "integer"
													},
													"outputPackets": {
														"type": "integer"
													},
													"outputQueueCount": {
														"type": "integer"
													},
													"outputQueueDepth": {
														"type": "integer"
													},
													"outputRatebps": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"interfaceStatsCollection": {
												"type": "string"
											},
											"interfaceStatsCollectionFailureReason": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"pathOverlayInfo": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"controlPlane": {
															"type": "string"
														},
														"dataPacketEncapsulation": {
															"type": "string"
														},
														"destIp": {
															"type": "string"
														},
														"destPort": {
															"type": "string"
														},
														"protocol": {
															"type": "string"
														},
														"sourceIp": {
															"type": "string"
														},
														"sourcePort": {
															"type": "string"
														},
														"vxlanInfo": {
															"type": "object",
															"properties": {
																"dscp": {
																	"type": "string"
																},
																"vnid": {
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"qosStatistics": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"classMapName": {
															"type": "string"
														},
														"dropRate": {
															"type": "integer"
														},
														"numBytes": {
															"type": "integer"
														},
														"numPackets": {
															"type": "integer"
														},
														"offeredRate": {
															"type": "integer"
														},
														"queueBandwidthbps": {
															"type": "string"
														},
														"queueDepth": {
															"type": "integer"
														},
														"queueNoBufferDrops": {
															"type": "integer"
														},
														"queueTotalDrops": {
															"type": "integer"
														},
														"refreshedAt": {
															"type": "integer"
														}
													}
												}
											},
											"qosStatsCollection": {
												"type": "string"
											},
											"qosStatsCollectionFailureReason": {
												"type": "string"
											},
											"usedVlan": {
												"type": "string"
											},
											"vrfName": {
												"type": "string"
											}
										}
									},
									"flexConnect": {
										"type": "object",
										"properties": {
											"authentication": {
												"type": "string",
												"enum": [
													"LOCAL",
													"CENTRAL"
												]
											},
											"dataSwitching": {
												"type": "string",
												"enum": [
													"LOCAL",
													"CENTRAL"
												]
											},
											"egressAclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"ingressAclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"wirelessLanControllerId": {
												"type": "string"
											},
											"wirelessLanControllerName": {
												"type": "string"
											}
										}
									},
									"id": {
										"type": "string"
									},
									"ingressPhysicalInterface": {
										"type": "object",
										"properties": {
											"aclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"id": {
												"type": "string"
											},
											"interfaceStatistics": {
												"type": "object",
												"properties": {
													"adminStatus": {
														"type": "string"
													},
													"inputPackets": {
														"type": "integer"
													},
													"inputQueueCount": {
														"type": "integer"
													},
													"inputQueueDrops": {
														"type": "integer"
													},
													"inputQueueFlushes": {
														"type": "integer"
													},
													"inputQueueMaxDepth": {
														"type": "integer"
													},
													"inputRatebps": {
														"type": "integer"
													},
													"operationalStatus": {
														"type": "string"
													},
													"outputDrop": {
														"type": "integer"
													},
													"outputPackets": {
														"type": "integer"
													},
													"outputQueueCount": {
														"type": "integer"
													},
													"outputQueueDepth": {
														"type": "integer"
													},
													"outputRatebps": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"interfaceStatsCollection": {
												"type": "string"
											},
											"interfaceStatsCollectionFailureReason": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"pathOverlayInfo": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"controlPlane": {
															"type": "string"
														},
														"dataPacketEncapsulation": {
															"type": "string"
														},
														"destIp": {
															"type": "string"
														},
														"destPort": {
															"type": "string"
														},
														"protocol": {
															"type": "string"
														},
														"sourceIp": {
															"type": "string"
														},
														"sourcePort": {
															"type": "string"
														},
														"vxlanInfo": {
															"type": "object",
															"properties": {
																"dscp": {
																	"type": "string"
																},
																"vnid": {
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"qosStatistics": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"classMapName": {
															"type": "string"
														},
														"dropRate": {
															"type": "integer"
														},
														"numBytes": {
															"type": "integer"
														},
														"numPackets": {
															"type": "integer"
														},
														"offeredRate": {
															"type": "integer"
														},
														"queueBandwidthbps": {
															"type": "string"
														},
														"queueDepth": {
															"type": "integer"
														},
														"queueNoBufferDrops": {
															"type": "integer"
														},
														"queueTotalDrops": {
															"type": "integer"
														},
														"refreshedAt": {
															"type": "integer"
														}
													}
												}
											},
											"qosStatsCollection": {
												"type": "string"
											},
											"qosStatsCollectionFailureReason": {
												"type": "string"
											},
											"usedVlan": {
												"type": "string"
											},
											"vrfName": {
												"type": "string"
											}
										}
									},
									"ingressVirtualInterface": {
										"type": "object",
										"properties": {
											"aclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"id": {
												"type": "string"
											},
											"interfaceStatistics": {
												"type": "object",
												"properties": {
													"adminStatus": {
														"type": "string"
													},
													"inputPackets": {
														"type": "integer"
													},
													"inputQueueCount": {
														"type": "integer"
													},
													"inputQueueDrops": {
														"type": "integer"
													},
													"inputQueueFlushes": {
														"type": "integer"
													},
													"inputQueueMaxDepth": {
														"type": "integer"
													},
													"inputRatebps": {
														"type": "integer"
													},
													"operationalStatus": {
														"type": "string"
													},
													"outputDrop": {
														"type": "integer"
													},
													"outputPackets": {
														"type": "integer"
													},
													"outputQueueCount": {
														"type": "integer"
													},
													"outputQueueDepth": {
														"type": "integer"
													},
													"outputRatebps": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"interfaceStatsCollection": {
												"type": "string"
											},
											"interfaceStatsCollectionFailureReason": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"pathOverlayInfo": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"controlPlane": {
															"type": "string"
														},
														"dataPacketEncapsulation": {
															"type": "string"
														},
														"destIp": {
															"type": "string"
														},
														"destPort": {
															"type": "string"
														},
														"protocol": {
															"type": "string"
														},
														"sourceIp": {
															"type": "string"
														},
														"sourcePort": {
															"type": "string"
														},
														"vxlanInfo": {
															"type": "object",
															"properties": {
																"dscp": {
																	"type": "string"
																},
																"vnid": {
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"qosStatistics": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"classMapName": {
															"type": "string"
														},
														"dropRate": {
															"type": "integer"
														},
														"numBytes": {
															"type": "integer"
														},
														"numPackets": {
															"type": "integer"
														},
														"offeredRate": {
															"type": "integer"
														},
														"queueBandwidthbps": {
															"type": "string"
														},
														"queueDepth": {
															"type": "integer"
														},
														"queueNoBufferDrops": {
															"type": "integer"
														},
														"queueTotalDrops": {
															"type": "integer"
														},
														"refreshedAt": {
															"type": "integer"
														}
													}
												}
											},
											"qosStatsCollection": {
												"type": "string"
											},
											"qosStatsCollectionFailureReason": {
												"type": "string"
											},
											"usedVlan": {
												"type": "string"
											},
											"vrfName": {
												"type": "string"
											}
										}
									},
									"ip": {
										"type": "string"
									},
									"linkInformationSource": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"perfMonCollection": {
										"type": "string"
									},
									"perfMonCollectionFailureReason": {
										"type": "string"
									},
									"perfMonStatistics": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"byteRate": {
													"type": "integer"
												},
												"destIpAddress": {
													"type": "string"
												},
												"destPort": {
													"type": "string"
												},
												"inputInterface": {
													"type": "string"
												},
												"ipv4DSCP": {
													"type": "string"
												},
												"ipv4TTL": {
													"type": "integer"
												},
												"outputInterface": {
													"type": "string"
												},
												"packetBytes": {
													"type": "integer"
												},
												"packetCount": {
													"type": "integer"
												},
												"packetLoss": {
													"type": "integer"
												},
												"packetLossPercentage": {
													"type": "number"
												},
												"protocol": {
													"type": "string"
												},
												"refreshedAt": {
													"type": "integer"
												},
												"rtpJitterMax": {
													"type": "integer"
												},
												"rtpJitterMean": {
													"type": "integer"
												},
												"rtpJitterMin": {
													"type": "integer"
												},
												"sourceIpAddress": {
													"type": "string"
												},
												"sourcePort": {
													"type": "string"
												}
											}
										}
									},
									"role": {
										"type": "string"
									},
									"ssid": {
										"type": "string"
									},
									"tunnels": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"type": {
										"type": "string"
									},
									"wlanId": {
										"type": "string"
									}
								}
							}
						},
						"networkElementsInfo": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"accuracyList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"percent": {
													"type": "integer"
												},
												"reason": {
													"type": "string"
												}
											}
										}
									},
									"detailedStatus": {
										"type": "object",
										"properties": {
											"aclTraceCalculation": {
												"type": "string"
											},
											"aclTraceCalculationFailureReason": {
												"type": "string"
											}
										}
									},
									"deviceStatistics": {
										"type": "object",
										"properties": {
											"cpuStatistics": {
												"type": "object",
												"properties": {
													"fiveMinUsageInPercentage": {
														"type": "number"
													},
													"fiveSecsUsageInPercentage": {
														"type": "number"
													},
													"oneMinUsageInPercentage": {
														"type": "number"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"memoryStatistics": {
												"type": "object",
												"properties": {
													"memoryUsage": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													},
													"totalMemory": {
														"type": "integer"
													}
												}
											}
										}
									},
									"deviceStatsCollection": {
										"type": "string"
									},
									"deviceStatsCollectionFailureReason": {
										"type": "string"
									},
									"egressInterface": {
										"type": "object",
										"properties": {
											"physicalInterface": {
												"type": "object",
												"properties": {
													"aclAnalysis": {
														"type": "object",
														"properties": {
															"aclName": {
																"type": "string"
															},
															"matchingAces": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"ace": {
																			"type": "string"
																		},
																		"matchingPorts": {
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"ports": {
																						"type": "array",
																						"items": {
																							"type": "object",
																							"properties": {
																								"destPorts": {
																									"type": "array",
																									"items": {
																										"type": "string"
																									}
																								},
																								"sourcePorts": {
																									"type": "array",
																									"items": {
																										"type": "string"
																									}
																								}
																							}
																						}
																					},
																					"protocol": {
																						"type": "string"
																					}
																				}
																			}
																		},
																		"result": {
																			"type": "string"
																		}
																	}
																}
															},
															"result": {
																"type": "string"
															}
														}
													},
													"id": {
														"type": "string"
													},
													"interfaceStatistics": {
														"type": "object",
														"properties": {
															"adminStatus": {
																"type": "string"
															},
															"inputPackets": {
																"type": "integer"
															},
															"inputQueueCount": {
																"type": "integer"
															},
															"inputQueueDrops": {
																"type": "integer"
															},
															"inputQueueFlushes": {
																"type": "integer"
															},
															"inputQueueMaxDepth": {
																"type": "integer"
															},
															"inputRatebps": {
																"type": "integer"
															},
															"operationalStatus": {
																"type": "string"
															},
															"outputDrop": {
																"type": "integer"
															},
															"outputPackets": {
																"type": "integer"
															},
															"outputQueueCount": {
																"type": "integer"
															},
															"outputQueueDepth": {
																"type": "integer"
															},
															"outputRatebps": {
																"type": "integer"
															},
															"refreshedAt": {
																"type": "integer"
															}
														}
													},
													"interfaceStatsCollection": {
														"type": "string"
													},
													"interfaceStatsCollectionFailureReason": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"pathOverlayInfo": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"controlPlane": {
																	"type": "string"
																},
																"dataPacketEncapsulation": {
																	"type": "string"
																},
																"destIp": {
																	"type": "string"
																},
																"destPort": {
																	"type": "string"
																},
																"protocol": {
																	"type": "string"
																},
																"sourceIp": {
																	"type": "string"
																},
																"sourcePort": {
																	"type": "string"
																},
																"vxlanInfo": {
																	"type": "object",
																	"properties": {
																		"dscp": {
																			"type": "string"
																		},
																		"vnid": {
																			"type": "string"
																		}
																	}
																}
															}
														}
													},
													"qosStatistics": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"classMapName": {
																	"type": "string"
																},
																"dropRate": {
																	"type": "integer"
																},
																"numBytes": {
																	"type": "integer"
																},
																"numPackets": {
																	"type": "integer"
																},
																"offeredRate": {
																	"type": "integer"
																},
																"queueBandwidthbps": {
																	"type": "string"
																},
																"queueDepth": {
																	"type": "integer"
																},
																"queueNoBufferDrops": {
																	"type": "integer"
																},
																"queueTotalDrops": {
																	"type": "integer"
																},
																"refreshedAt": {
																	"type": "integer"
																}
															}
														}
													},
													"qosStatsCollection": {
														"type": "string"
													},
													"qosStatsCollectionFailureReason": {
														"type": "string"
													},
													"usedVlan": {
														"type": "string"
													},
													"vrfName": {
														"type": "string"
													}
												}
											},
											"virtualInterface": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"aclAnalysis": {
															"type": "object",
															"properties": {
																"aclName": {
																	"type": "string"
																},
																"matchingAces": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ace": {
																				"type": "string"
																			},
																			"matchingPorts": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"ports": {
																							"type": "array",
																							"items": {
																								"type": "object",
																								"properties": {
																									"destPorts": {
																										"type": "array",
																										"items": {
																											"type": "string"
																										}
																									},
																									"sourcePorts": {
																										"type": "array",
																										"items": {
																											"type": "string"
																										}
																									}
																								}
																							}
																						},
																						"protocol": {
																							"type": "string"
																						}
																					}
																				}
																			},
																			"result": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														},
														"id": {
															"type": "string"
														},
														"interfaceStatistics": {
															"type": "object",
															"properties": {
																"adminStatus": {
																	"type": "string"
																},
																"inputPackets": {
																	"type": "integer"
																},
																"inputQueueCount": {
																	"type": "integer"
																},
																"inputQueueDrops": {
																	"type": "integer"
																},
																"inputQueueFlushes": {
																	"type": "integer"
																},
																"inputQueueMaxDepth": {
																	"type": "integer"
																},
																"inputRatebps": {
																	"type": "integer"
																},
																"operationalStatus": {
																	"type": "string"
																},
																"outputDrop": {
																	"type": "integer"
																},
																"outputPackets": {
																	"type": "integer"
																},
																"outputQueueCount": {
																	"type": "integer"
																},
																"outputQueueDepth": {
																	"type": "integer"
																},
																"outputRatebps": {
																	"type": "integer"
																},
																"refreshedAt": {
																	"type": "integer"
																}
															}
														},
														"interfaceStatsCollection": {
															"type": "string"
														},
														"interfaceStatsCollectionFailureReason": {
															"type": "string"
														},
														"name": {
															"type": "string"
														},
														"pathOverlayInfo": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"controlPlane": {
																		"type": "string"
																	},
																	"dataPacketEncapsulation": {
																		"type": "string"
																	},
																	"destIp": {
																		"type": "string"
																	},
																	"destPort": {
																		"type": "string"
																	},
																	"protocol": {
																		"type": "string"
																	},
																	"sourceIp": {
																		"type": "string"
																	},
																	"sourcePort": {
																		"type": "string"
																	},
																	"vxlanInfo": {
																		"type": "object",
																		"properties": {
																			"dscp": {
																				"type": "string"
																			},
																			"vnid": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														},
														"qosStatistics": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"classMapName": {
																		"type": "string"
																	},
																	"dropRate": {
																		"type": "integer"
																	},
																	"numBytes": {
																		"type": "integer"
																	},
																	"numPackets": {
																		"type": "integer"
																	},
																	"offeredRate": {
																		"type": "integer"
																	},
																	"queueBandwidthbps": {
																		"type": "string"
																	},
																	"queueDepth": {
																		"type": "integer"
																	},
																	"queueNoBufferDrops": {
																		"type": "integer"
																	},
																	"queueTotalDrops": {
																		"type": "integer"
																	},
																	"refreshedAt": {
																		"type": "integer"
																	}
																}
															}
														},
														"qosStatsCollection": {
															"type": "string"
														},
														"qosStatsCollectionFailureReason": {
															"type": "string"
														},
														"usedVlan": {
															"type": "string"
														},
														"vrfName": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"flexConnect": {
										"type": "object",
										"properties": {
											"authentication": {
												"type": "string",
												"enum": [
													"LOCAL",
													"CENTRAL"
												]
											},
											"dataSwitching": {
												"type": "string",
												"enum": [
													"LOCAL",
													"CENTRAL"
												]
											},
											"egressAclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"ingressAclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"wirelessLanControllerId": {
												"type": "string"
											},
											"wirelessLanControllerName": {
												"type": "string"
											}
										}
									},
									"id": {
										"type": "string"
									},
									"ingressInterface": {
										"type": "object",
										"properties": {
											"physicalInterface": {
												"type": "object",
												"properties": {
													"aclAnalysis": {
														"type": "object",
														"properties": {
															"aclName": {
																"type": "string"
															},
															"matchingAces": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"ace": {
																			"type": "string"
																		},
																		"matchingPorts": {
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"ports": {
																						"type": "array",
																						"items": {
																							"type": "object",
																							"properties": {
																								"destPorts": {
																									"type": "array",
																									"items": {
																										"type": "string"
																									}
																								},
																								"sourcePorts": {
																									"type": "array",
																									"items": {
																										"type": "string"
																									}
																								}
																							}
																						}
																					},
																					"protocol": {
																						"type": "string"
																					}
																				}
																			}
																		},
																		"result": {
																			"type": "string"
																		}
																	}
																}
															},
															"result": {
																"type": "string"
															}
														}
													},
													"id": {
														"type": "string"
													},
													"interfaceStatistics": {
														"type": "object",
														"properties": {
															"adminStatus": {
																"type": "string"
															},
															"inputPackets": {
																"type": "integer"
															},
															"inputQueueCount": {
																"type": "integer"
															},
															"inputQueueDrops": {
																"type": "integer"
															},
															"inputQueueFlushes": {
																"type": "integer"
															},
															"inputQueueMaxDepth": {
																"type": "integer"
															},
															"inputRatebps": {
																"type": "integer"
															},
															"operationalStatus": {
																"type": "string"
															},
															"outputDrop": {
																"type": "integer"
															},
															"outputPackets": {
																"type": "integer"
															},
															"outputQueueCount": {
																"type": "integer"
															},
															"outputQueueDepth": {
																"type": "integer"
															},
															"outputRatebps": {
																"type": "integer"
															},
															"refreshedAt": {
																"type": "integer"
															}
														}
													},
													"interfaceStatsCollection": {
														"type": "string"
													},
													"interfaceStatsCollectionFailureReason": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"pathOverlayInfo": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"controlPlane": {
																	"type": "string"
																},
																"dataPacketEncapsulation": {
																	"type": "string"
																},
																"destIp": {
																	"type": "string"
																},
																"destPort": {
																	"type": "string"
																},
																"protocol": {
																	"type": "string"
																},
																"sourceIp": {
																	"type": "string"
																},
																"sourcePort": {
																	"type": "string"
																},
																"vxlanInfo": {
																	"type": "object",
																	"properties": {
																		"dscp": {
																			"type": "string"
																		},
																		"vnid": {
																			"type": "string"
																		}
																	}
																}
															}
														}
													},
													"qosStatistics": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"classMapName": {
																	"type": "string"
																},
																"dropRate": {
																	"type": "integer"
																},
																"numBytes": {
																	"type": "integer"
																},
																"numPackets": {
																	"type": "integer"
																},
																"offeredRate": {
																	"type": "integer"
																},
																"queueBandwidthbps": {
																	"type": "string"
																},
																"queueDepth": {
																	"type": "integer"
																},
																"queueNoBufferDrops": {
																	"type": "integer"
																},
																"queueTotalDrops": {
																	"type": "integer"
																},
																"refreshedAt": {
																	"type": "integer"
																}
															}
														}
													},
													"qosStatsCollection": {
														"type": "string"
													},
													"qosStatsCollectionFailureReason": {
														"type": "string"
													},
													"usedVlan": {
														"type": "string"
													},
													"vrfName": {
														"type": "string"
													}
												}
											},
											"virtualInterface": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"aclAnalysis": {
															"type": "object",
															"properties": {
																"aclName": {
																	"type": "string"
																},
																"matchingAces": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ace": {
																				"type": "string"
																			},
																			"matchingPorts": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"ports": {
																							"type": "array",
																							"items": {
																								"type": "object",
																								"properties": {
																									"destPorts": {
																										"type": "array",
																										"items": {
																											"type": "string"
																										}
																									},
																									"sourcePorts": {
																										"type": "array",
																										"items": {
																											"type": "string"
																										}
																									}
																								}
																							}
																						},
																						"protocol": {
																							"type": "string"
																						}
																					}
																				}
																			},
																			"result": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														},
														"id": {
															"type": "string"
														},
														"interfaceStatistics": {
															"type": "object",
															"properties": {
																"adminStatus": {
																	"type": "string"
																},
																"inputPackets": {
																	"type": "integer"
																},
																"inputQueueCount": {
																	"type": "integer"
																},
																"inputQueueDrops": {
																	"type": "integer"
																},
																"inputQueueFlushes": {
																	"type": "integer"
																},
																"inputQueueMaxDepth": {
																	"type": "integer"
																},
																"inputRatebps": {
																	"type": "integer"
																},
																"operationalStatus": {
																	"type": "string"
																},
																"outputDrop": {
																	"type": "integer"
																},
																"outputPackets": {
																	"type": "integer"
																},
																"outputQueueCount": {
																	"type": "integer"
																},
																"outputQueueDepth": {
																	"type": "integer"
																},
																"outputRatebps": {
																	"type": "integer"
																},
																"refreshedAt": {
																	"type": "integer"
																}
															}
														},
														"interfaceStatsCollection": {
															"type": "string"
														},
														"interfaceStatsCollectionFailureReason": {
															"type": "string"
														},
														"name": {
															"type": "string"
														},
														"pathOverlayInfo": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"controlPlane": {
																		"type": "string"
																	},
																	"dataPacketEncapsulation": {
																		"type": "string"
																	},
																	"destIp": {
																		"type": "string"
																	},
																	"destPort": {
																		"type": "string"
																	},
																	"protocol": {
																		"type": "string"
																	},
																	"sourceIp": {
																		"type": "string"
																	},
																	"sourcePort": {
																		"type": "string"
																	},
																	"vxlanInfo": {
																		"type": "object",
																		"properties": {
																			"dscp": {
																				"type": "string"
																			},
																			"vnid": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														},
														"qosStatistics": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"classMapName": {
																		"type": "string"
																	},
																	"dropRate": {
																		"type": "integer"
																	},
																	"numBytes": {
																		"type": "integer"
																	},
																	"numPackets": {
																		"type": "integer"
																	},
																	"offeredRate": {
																		"type": "integer"
																	},
																	"queueBandwidthbps": {
																		"type": "string"
																	},
																	"queueDepth": {
																		"type": "integer"
																	},
																	"queueNoBufferDrops": {
																		"type": "integer"
																	},
																	"queueTotalDrops": {
																		"type": "integer"
																	},
																	"refreshedAt": {
																		"type": "integer"
																	}
																}
															}
														},
														"qosStatsCollection": {
															"type": "string"
														},
														"qosStatsCollectionFailureReason": {
															"type": "string"
														},
														"usedVlan": {
															"type": "string"
														},
														"vrfName": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"ip": {
										"type": "string"
									},
									"linkInformationSource": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"perfMonCollection": {
										"type": "string"
									},
									"perfMonCollectionFailureReason": {
										"type": "string"
									},
									"perfMonitorStatistics": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"byteRate": {
													"type": "integer"
												},
												"destIpAddress": {
													"type": "string"
												},
												"destPort": {
													"type": "string"
												},
												"inputInterface": {
													"type": "string"
												},
												"ipv4DSCP": {
													"type": "string"
												},
												"ipv4TTL": {
													"type": "integer"
												},
												"outputInterface": {
													"type": "string"
												},
												"packetBytes": {
													"type": "integer"
												},
												"packetCount": {
													"type": "integer"
												},
												"packetLoss": {
													"type": "integer"
												},
												"packetLossPercentage": {
													"type": "number"
												},
												"protocol": {
													"type": "string"
												},
												"refreshedAt": {
													"type": "integer"
												},
												"rtpJitterMax": {
													"type": "integer"
												},
												"rtpJitterMean": {
													"type": "integer"
												},
												"rtpJitterMin": {
													"type": "integer"
												},
												"sourceIpAddress": {
													"type": "string"
												},
												"sourcePort": {
													"type": "string"
												}
											}
										}
									},
									"role": {
										"type": "string"
									},
									"ssid": {
										"type": "string"
									},
									"tunnels": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"type": {
										"type": "string"
									},
									"wlanId": {
										"type": "string"
									}
								}
							}
						},
						"properties": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"request": {
							"type": "object",
							"properties": {
								"controlPath": {
									"type": "boolean"
								},
								"createTime": {
									"type": "integer"
								},
								"destIP": {
									"type": "string"
								},
								"destPort": {
									"type": "string"
								},
								"failureReason": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"inclusions": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"lastUpdateTime": {
									"type": "integer"
								},
								"periodicRefresh": {
									"type": "boolean"
								},
								"protocol": {
									"type": "string"
								},
								"sourceIP": {
									"type": "string"
								},
								"sourcePort": {
									"type": "string"
								},
								"status": {
									"type": "string"
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetEventArtifactsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"version": {
						"type": "string"
					},
					"artifactId": {
						"type": "string"
					},
					"namespace": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"subDomain": {
						"type": "string"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"isTemplateEnabled": {
						"type": "string"
					},
					"ciscoDNAEventLink": {
						"type": "string"
					},
					"note": {
						"type": "string"
					},
					"isPrivate": {
						"type": "string"
					},
					"eventPayload": {
						"type": "object",
						"properties": {
							"eventId": {
								"type": "string"
							},
							"version": {
								"type": "string"
							},
							"category": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"source": {
								"type": "string"
							},
							"severity": {
								"type": "string"
							},
							"details": {
								"type": "object",
								"properties": {
									"device_ip": {
										"type": "string"
									},
									"message": {
										"type": "string"
									}
								}
							},
							"additionalDetails": {
								"type": "object",
								"properties": {}
							}
						}
					},
					"eventTemplates": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"isTenantAware": {
						"type": "string"
					},
					"supportedConnectorTypes": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"tenantId": {
						"type": "string"
					}
				}
			}
		},
		"CreateEmailEventSubscription": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"subscriptionId": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										},
										"fromEmailAddress": {
											"type": "string"
										},
										"toEmailAddresses": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"subject": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"description": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "integer"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"CreateEmailEventSubscriptionResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"DeviceReplacementResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"creationTime": {
								"type": "integer"
							},
							"family": {
								"type": "string"
							},
							"faultyDeviceId": {
								"type": "string"
							},
							"faultyDeviceName": {
								"type": "string"
							},
							"faultyDevicePlatform": {
								"type": "string"
							},
							"faultyDeviceSerialNumber": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"neighbourDeviceId": {
								"type": "string"
							},
							"networkReadinessTaskId": {
								"type": "string"
							},
							"replacementDevicePlatform": {
								"type": "string"
							},
							"replacementDeviceSerialNumber": {
								"type": "string"
							},
							"replacementStatus": {
								"type": "string"
							},
							"replacementTime": {
								"type": "integer"
							},
							"workflowId": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetPnPGlobalSettingsResponse": {
			"type": "object",
			"properties": {
				"savaMappingList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"syncStatus": {
								"type": "string"
							},
							"syncStartTime": {
								"type": "number"
							},
							"syncResult": {
								"type": "object",
								"properties": {
									"syncList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"syncType": {
													"type": "string"
												},
												"deviceSnList": {
													"type": "array",
													"items": {
														"type": "string"
													}
												}
											}
										}
									},
									"syncMsg": {
										"type": "string"
									}
								}
							},
							"lastSync": {
								"type": "number"
							},
							"tenantId": {
								"type": "string"
							},
							"profile": {
								"type": "object",
								"properties": {
									"port": {
										"type": "number"
									},
									"addressIpV4": {
										"type": "string"
									},
									"addressFqdn": {
										"type": "string"
									},
									"profileId": {
										"type": "string"
									},
									"proxy": {
										"type": "boolean"
									},
									"makeDefault": {
										"type": "boolean"
									},
									"cert": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								}
							},
							"token": {
								"type": "string"
							},
							"expiry": {
								"type": "number"
							},
							"ccoUser": {
								"type": "string"
							},
							"smartAccountId": {
								"type": "string"
							},
							"virtualAccountId": {
								"type": "string"
							},
							"autoSyncPeriod": {
								"type": "number"
							},
							"syncResultStr": {
								"type": "string"
							}
						}
					}
				},
				"taskTimeOuts": {
					"type": "object",
					"properties": {
						"imageDownloadTimeOut": {
							"type": "number"
						},
						"configTimeOut": {
							"type": "number"
						},
						"generalTimeOut": {
							"type": "number"
						}
					}
				},
				"tenantId": {
					"type": "string"
				},
				"aaaCredentials": {
					"type": "object",
					"properties": {
						"password": {
							"type": "string"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"defaultProfile": {
					"type": "object",
					"properties": {
						"fqdnAddresses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"proxy": {
							"type": "boolean"
						},
						"cert": {
							"type": "string"
						},
						"ipAddresses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"port": {
							"type": "number"
						}
					}
				},
				"acceptEula": {
					"type": "boolean"
				},
				"id": {
					"type": "string"
				},
				"version": {
					"type": "number"
				}
			}
		},
		"UpdateSPProfileVRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"qos": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"profileName": {
										"type": "string"
									},
									"model": {
										"type": "string"
									},
									"wanProvider": {
										"type": "string"
									},
									"oldProfileName": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"UpdateSPProfileVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UpdateEmailConfiguration": {
			"type": "object",
			"properties": {
				"emailConfigId": {
					"type": "string"
				},
				"primarySMTPConfig": {
					"type": "object",
					"properties": {
						"hostName": {
							"type": "string"
						},
						"port": {
							"type": "string"
						},
						"userName": {
							"type": "string"
						},
						"password": {
							"type": "string"
						}
					}
				},
				"secondarySMTPConfig": {
					"type": "object",
					"properties": {
						"hostName": {
							"type": "string"
						},
						"port": {
							"type": "string"
						},
						"userName": {
							"type": "string"
						},
						"password": {
							"type": "string"
						}
					}
				},
				"fromEmail": {
					"type": "string"
				},
				"toEmail": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				}
			}
		},
		"UpdateEmailDestinationResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"GetWorkflowByIdResponse": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"lastupdateOn": {
					"type": "number"
				},
				"imageId": {
					"type": "string"
				},
				"currTaskIdx": {
					"type": "number"
				},
				"addedOn": {
					"type": "number"
				},
				"tasks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"state": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"currWorkItemIdx": {
								"type": "number"
							},
							"taskSeqNo": {
								"type": "number"
							},
							"endTime": {
								"type": "number"
							},
							"startTime": {
								"type": "number"
							},
							"workItemList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"state": {
											"type": "string"
										},
										"command": {
											"type": "string"
										},
										"outputStr": {
											"type": "string"
										},
										"endTime": {
											"type": "number"
										},
										"startTime": {
											"type": "number"
										},
										"timeTaken": {
											"type": "number"
										}
									}
								}
							},
							"timeTaken": {
								"type": "number"
							},
							"name": {
								"type": "string"
							}
						}
					}
				},
				"addToInventory": {
					"type": "boolean"
				},
				"instanceType": {
					"type": "string"
				},
				"endTime": {
					"type": "number"
				},
				"execTime": {
					"type": "number"
				},
				"startTime": {
					"type": "number"
				},
				"useState": {
					"type": "string"
				},
				"configId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"version": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"DeviceComplianceStatusResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"deviceUuid": {
							"type": "string"
						},
						"complianceStatus": {
							"type": "string"
						},
						"message": {
							"type": "string"
						},
						"scheduleTime": {
							"type": "number"
						},
						"lastUpdateTime": {
							"type": "number"
						}
					}
				}
			}
		},
		"FunctionalCapabilityResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"attributeInfo": {
							"type": "object",
							"properties": {}
						},
						"functionDetails": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"attributeInfo": {
										"type": "object",
										"properties": {}
									},
									"id": {
										"type": "string"
									},
									"propertyName": {
										"type": "string"
									},
									"stringValue": {
										"type": "string"
									}
								}
							}
						},
						"functionName": {
							"type": "string"
						},
						"functionOpState": {
							"type": "string",
							"enum": [
								"UNKNOWN",
								"NOT_APPLICABLE",
								"DISABLED",
								"ENABLED"
							]
						},
						"id": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceBriefNIOResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"role": {
							"type": "string"
						},
						"roleSource": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"AddAWorkflowResponse": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"lastupdateOn": {
					"type": "number"
				},
				"imageId": {
					"type": "string"
				},
				"currTaskIdx": {
					"type": "number"
				},
				"addedOn": {
					"type": "number"
				},
				"tasks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"state": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"currWorkItemIdx": {
								"type": "number"
							},
							"taskSeqNo": {
								"type": "number"
							},
							"endTime": {
								"type": "number"
							},
							"startTime": {
								"type": "number"
							},
							"workItemList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"state": {
											"type": "string"
										},
										"command": {
											"type": "string"
										},
										"outputStr": {
											"type": "string"
										},
										"endTime": {
											"type": "number"
										},
										"startTime": {
											"type": "number"
										},
										"timeTaken": {
											"type": "number"
										}
									}
								}
							},
							"timeTaken": {
								"type": "number"
							},
							"name": {
								"type": "string"
							}
						}
					}
				},
				"addToInventory": {
					"type": "boolean"
				},
				"instanceType": {
					"type": "string"
				},
				"endTime": {
					"type": "number"
				},
				"execTime": {
					"type": "number"
				},
				"startTime": {
					"type": "number"
				},
				"useState": {
					"type": "string"
				},
				"configId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"version": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"VirtualAccountDetailsResponse": {
			"type": "object",
			"properties": {
				"smart_account_id": {
					"type": "string"
				},
				"smart_account_name": {
					"type": "string"
				},
				"virtual_account_details": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"virtual_account_id": {
								"type": "string"
							},
							"virtual_account_name": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"GetNotificationsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"eventId": {
						"type": "string"
					},
					"instanceId": {
						"type": "string"
					},
					"namespace": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"category": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"subDomain": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"severity": {
						"type": "string"
					},
					"source": {
						"type": "string"
					},
					"timestamp": {
						"type": "string"
					},
					"details": {
						"type": "string"
					},
					"eventHierarchy": {
						"type": "string"
					},
					"network": {
						"type": "object",
						"properties": {
							"siteId": {
								"type": "string"
							},
							"deviceId": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"SuccessResultList": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"SuccessResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "string"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetConfigTaskDetailsResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"startTime": {
								"type": "number"
							},
							"errorCode": {
								"type": "string"
							},
							"deviceId": {
								"type": "string"
							},
							"taskId": {
								"type": "string"
							},
							"taskStatus": {
								"type": "string"
							},
							"parentTaskId": {
								"type": "string"
							},
							"deviceIpAddress": {
								"type": "string"
							},
							"detailMessage": {
								"type": "string"
							},
							"failureMessage": {
								"type": "string"
							},
							"taskType": {
								"type": "string"
							},
							"completionTime": {
								"type": "number"
							},
							"hostName": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"UpdateInterfaceDetailsRequest": {
			"type": "object",
			"properties": {
				"description": {
					"type": "string"
				},
				"adminStatus": {
					"type": "string"
				},
				"vlanId": {
					"type": "integer"
				},
				"voiceVlanId": {
					"type": "integer"
				}
			}
		},
		"UpdateInterfaceDetailsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"type": {
							"type": "string"
						},
						"properties": {
							"type": "object",
							"properties": {
								"taskId": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string"
										}
									}
								},
								"url": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string"
										}
									}
								}
							}
						},
						"required": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "object",
					"properties": {
						"type": {
							"type": "string"
						}
					}
				}
			}
		},
		"UpdateEmailEventSubscription": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"subscriptionId": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										},
										"fromEmailAddress": {
											"type": "string"
										},
										"toEmailAddresses": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"subject": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"description": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "integer"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"UpdateEmailEventSubscriptionResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"SystemPerformanceHistoricalAPIResponse": {
			"type": "object",
			"properties": {
				"hostName": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"kpis": {
					"type": "object",
					"properties": {
						"legends": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "object",
									"properties": {
										"units": {
											"type": "string"
										}
									}
								},
								"memory": {
									"type": "object",
									"properties": {
										"units": {
											"type": "string"
										}
									}
								},
								"network tx_rate": {
									"type": "object",
									"properties": {
										"units": {
											"type": "string"
										}
									}
								},
								"network rx_rate": {
									"type": "object",
									"properties": {
										"units": {
											"type": "string"
										}
									}
								}
							}
						},
						"data": {
							"type": "object",
							"properties": {
								"t1": {
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"LegitOperationsForInterfaceResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"type": {
							"type": "string"
						},
						"properties": {
							"type": "object",
							"properties": {
								"interfaceUuid": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string"
										}
									}
								},
								"properties": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string"
										},
										"items": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": {
														"type": "string"
													},
													"properties": {
														"type": "object",
														"properties": {
															"name": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	}
																}
															},
															"applicable": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	}
																}
															},
															"failureReason": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"required": {
														"type": "array",
														"items": {
															"type": "string"
														}
													}
												}
											}
										}
									}
								},
								"operations": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string"
										},
										"items": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": {
														"type": "string"
													},
													"properties": {
														"type": "object",
														"properties": {
															"name": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	}
																}
															},
															"applicable": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	}
																}
															},
															"failureReason": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	}
																}
															}
														}
													},
													"required": {
														"type": "array",
														"items": {
															"type": "string"
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"required": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "object",
					"properties": {
						"type": {
							"type": "string"
						}
					}
				}
			}
		},
		"HTTPReadCredentialDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"comments": {
						"type": "string"
					},
					"credentialType": {
						"type": "string",
						"enum": [
							"GLOBAL",
							"APP"
						]
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"instanceTenantId": {
						"type": "string"
					},
					"instanceUuid": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"port": {
						"type": "integer"
					},
					"secure": {
						"type": "boolean"
					},
					"username": {
						"type": "string"
					}
				}
			}
		},
		"GetPermissionsAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"resource-types": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"displayName": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"defaultPermission": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"GetAuditLogRecordsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"version": {
						"type": "string"
					},
					"instanceId": {
						"type": "string"
					},
					"eventId": {
						"type": "string"
					},
					"namespace": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"category": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"subDomain": {
						"type": "string"
					},
					"severity": {
						"type": "integer"
					},
					"source": {
						"type": "string"
					},
					"timestamp": {
						"type": "integer"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"details": {
						"type": "object",
						"properties": {}
					},
					"ciscoDnaEventLink": {
						"type": "string"
					},
					"note": {
						"type": "string"
					},
					"tntId": {
						"type": "string"
					},
					"context": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					},
					"i18n": {
						"type": "string"
					},
					"eventHierarchy": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"messageParams": {
						"type": "string"
					},
					"additionalDetails": {
						"type": "object",
						"properties": {}
					},
					"parentInstanceId": {
						"type": "string"
					},
					"network": {
						"type": "string"
					},
					"childCount": {
						"type": "number"
					},
					"tenantId": {
						"type": "string"
					}
				}
			}
		},
		"CreateEmailConfiguration": {
			"type": "object",
			"properties": {
				"emailConfigId": {
					"type": "string"
				},
				"primarySMTPConfig": {
					"type": "object",
					"properties": {
						"hostName": {
							"type": "string"
						},
						"port": {
							"type": "string"
						},
						"userName": {
							"type": "string"
						},
						"password": {
							"type": "string"
						}
					}
				},
				"secondarySMTPConfig": {
					"type": "object",
					"properties": {
						"hostName": {
							"type": "string"
						},
						"port": {
							"type": "string"
						},
						"userName": {
							"type": "string"
						},
						"password": {
							"type": "string"
						}
					}
				},
				"fromEmail": {
					"type": "string"
				},
				"toEmail": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				}
			}
		},
		"CreateEmailDestinationResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"DeviceDeregistrationRequest": {
			"type": "object",
			"properties": {
				"device_uuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"DeviceDeregistrationResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				}
			}
		},
		"reportAPIBody": {
			"type": "object",
			"properties": {
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"deliveries": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"name": {
					"type": "string"
				},
				"schedule": {
					"type": "object"
				},
				"view": {
					"type": "object",
					"properties": {
						"fieldGroups": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"fieldGroupDisplayName": {
										"type": "string"
									},
									"fieldGroupName": {
										"type": "string"
									},
									"fields": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"displayName": {
													"type": "string"
												},
												"name": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						},
						"filters": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"displayName": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"value": {
										"type": "object"
									}
								}
							}
						},
						"format": {
							"type": "object",
							"properties": {
								"formatType": {
									"type": "string"
								},
								"name": {
									"type": "string"
								}
							}
						},
						"name": {
							"type": "string"
						},
						"viewId": {
							"type": "string"
						}
					}
				},
				"viewGroupId": {
					"type": "string"
				},
				"viewGroupVersion": {
					"type": "string"
				},
				"dataCategory": {
					"type": "string"
				}
			}
		},
		"PoeDetailsResultDTO": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"powerAllocated": {
							"type": "string"
						},
						"powerConsumed": {
							"type": "string"
						},
						"powerRemaining": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"Settings": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"acceptEula": {
					"type": "string"
				},
				"defaultProfile": {
					"type": "object",
					"properties": {
						"cert": {
							"type": "string"
						},
						"fqdnAddresses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"ipAddresses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"port": {
							"type": "string"
						},
						"proxy": {
							"type": "string"
						}
					}
				},
				"savaMappingList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ccoUser": {
								"type": "string"
							},
							"expiry": {
								"type": "string"
							},
							"profile": {
								"type": "object",
								"properties": {
									"addressFqdn": {
										"type": "string"
									},
									"addressIpV4": {
										"type": "string"
									},
									"cert": {
										"type": "string"
									},
									"makeDefault": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"port": {
										"type": "string"
									},
									"profileId": {
										"type": "string"
									},
									"proxy": {
										"type": "string"
									}
								}
							},
							"smartAccountId": {
								"type": "string"
							},
							"virtualAccountId": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"UpdatePnPGlobalSettingsResponse": {
			"type": "object",
			"properties": {
				"savaMappingList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"syncStatus": {
								"type": "string"
							},
							"syncStartTime": {
								"type": "number"
							},
							"syncResult": {
								"type": "object",
								"properties": {
									"syncList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"syncType": {
													"type": "string"
												},
												"deviceSnList": {
													"type": "array",
													"items": {
														"type": "string"
													}
												}
											}
										}
									},
									"syncMsg": {
										"type": "string"
									}
								}
							},
							"lastSync": {
								"type": "number"
							},
							"tenantId": {
								"type": "string"
							},
							"profile": {
								"type": "object",
								"properties": {
									"port": {
										"type": "number"
									},
									"addressIpV4": {
										"type": "string"
									},
									"addressFqdn": {
										"type": "string"
									},
									"profileId": {
										"type": "string"
									},
									"proxy": {
										"type": "boolean"
									},
									"makeDefault": {
										"type": "boolean"
									},
									"cert": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								}
							},
							"token": {
								"type": "string"
							},
							"expiry": {
								"type": "number"
							},
							"ccoUser": {
								"type": "string"
							},
							"smartAccountId": {
								"type": "string"
							},
							"virtualAccountId": {
								"type": "string"
							},
							"autoSyncPeriod": {
								"type": "number"
							},
							"syncResultStr": {
								"type": "string"
							}
						}
					}
				},
				"taskTimeOuts": {
					"type": "object",
					"properties": {
						"imageDownloadTimeOut": {
							"type": "number"
						},
						"configTimeOut": {
							"type": "number"
						},
						"generalTimeOut": {
							"type": "number"
						}
					}
				},
				"tenantId": {
					"type": "string"
				},
				"aaaCredentials": {
					"type": "object",
					"properties": {
						"password": {
							"type": "string"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"defaultProfile": {
					"type": "object",
					"properties": {
						"fqdnAddresses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"proxy": {
							"type": "boolean"
						},
						"cert": {
							"type": "string"
						},
						"ipAddresses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"port": {
							"type": "number"
						}
					}
				},
				"acceptEula": {
					"type": "boolean"
				},
				"id": {
					"type": "string"
				},
				"version": {
					"type": "number"
				}
			}
		},
		"GetSyslogDestinationResponse": {
			"type": "object",
			"properties": {
				"errorMessage": {
					"type": "object",
					"properties": {
						"errors": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"apiStatus": {
					"type": "string"
				},
				"statusMessage": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"version": {
								"type": "string"
							},
							"tenantId": {
								"type": "string"
							},
							"configId": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"host": {
								"type": "string"
							},
							"port": {
								"type": "integer"
							},
							"protocol": {
								"type": "string",
								"enum": [
									"TCP",
									"UDP"
								]
							}
						}
					}
				}
			}
		},
		"DistributeDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"deviceUuid": {
						"type": "string"
					},
					"imageUuid": {
						"type": "string"
					}
				}
			}
		},
		"CreateSyslogEventSubscription": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"subscriptionId": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"CreateSyslogEventSubscriptionResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"reportExecutions": {
			"type": "object",
			"properties": {
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"dataCategory": {
					"type": "string"
				},
				"deliveries": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"executionCount": {
					"type": "integer"
				},
				"executions": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"endTime": {
								"type": "integer"
							},
							"errors": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"executionId": {
								"type": "string"
							},
							"processStatus": {
								"type": "string"
							},
							"requestStatus": {
								"type": "string"
							},
							"startTime": {
								"type": "integer"
							},
							"warnings": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				},
				"name": {
					"type": "string"
				},
				"reportId": {
					"type": "string"
				},
				"reportWasExecuted": {
					"type": "boolean"
				},
				"schedule": {
					"type": "object"
				},
				"view": {
					"type": "object",
					"properties": {
						"fieldGroups": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"filters": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"format": {
							"type": "object"
						},
						"name": {
							"type": "string"
						},
						"viewId": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"viewInfo": {
							"type": "string"
						}
					}
				},
				"viewGroupId": {
					"type": "string"
				},
				"viewGroupVersion": {
					"type": "string"
				}
			}
		},
		"GetSupervisorCardDetailResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"serialno": {
								"type": "string"
							},
							"partno": {
								"type": "string"
							},
							"switchno": {
								"type": "string"
							},
							"slotno": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetUsersAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"users": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"firstName": {
										"type": "string"
									},
									"lastName": {
										"type": "string"
									},
									"authSource": {
										"type": "string"
									},
									"passphraseUpdateTime": {
										"type": "string"
									},
									"roleList": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"userId": {
										"type": "string"
									},
									"email": {
										"type": "string"
									},
									"username": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"DeviceCountDetailsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "integer"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CreateRestWebhookEventSubscription": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"subscriptionId": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"CreateRestWebhookEventSubscriptionResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"LANAutomationLogResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"nwOrchId": {
								"type": "string"
							},
							"entry": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"logLevel": {
											"type": "string"
										},
										"timeStamp": {
											"type": "string"
										},
										"record": {
											"type": "string"
										},
										"deviceId": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CLICredentialDTO": {
			"type": "object",
			"properties": {
				"comments": {
					"type": "string"
				},
				"credentialType": {
					"type": "string",
					"enum": [
						"GLOBAL",
						"APP"
					]
				},
				"description": {
					"type": "string"
				},
				"enablePassword": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"instanceTenantId": {
					"type": "string"
				},
				"instanceUuid": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"username": {
					"type": "string"
				}
			}
		},
		"DiscoveryNIO": {
			"type": "object",
			"properties": {
				"attributeInfo": {
					"type": "object",
					"properties": {}
				},
				"cdpLevel": {
					"type": "integer"
				},
				"deviceIds": {
					"type": "string"
				},
				"discoveryCondition": {
					"type": "string"
				},
				"discoveryStatus": {
					"type": "string"
				},
				"discoveryType": {
					"type": "string"
				},
				"enablePasswordList": {
					"type": "string"
				},
				"globalCredentialIdList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"httpReadCredential": {
					"type": "object",
					"properties": {
						"comments": {
							"type": "string"
						},
						"credentialType": {
							"type": "string",
							"enum": [
								"GLOBAL",
								"APP"
							]
						},
						"description": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"password": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"secure": {
							"type": "boolean"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"httpWriteCredential": {
					"type": "object",
					"properties": {
						"comments": {
							"type": "string"
						},
						"credentialType": {
							"type": "string",
							"enum": [
								"GLOBAL",
								"APP"
							]
						},
						"description": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"password": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"secure": {
							"type": "boolean"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"id": {
					"type": "string"
				},
				"ipAddressList": {
					"type": "string"
				},
				"ipFilterList": {
					"type": "string"
				},
				"isAutoCdp": {
					"type": "boolean"
				},
				"lldpLevel": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"netconfPort": {
					"type": "string"
				},
				"numDevices": {
					"type": "integer"
				},
				"parentDiscoveryId": {
					"type": "string"
				},
				"passwordList": {
					"type": "string"
				},
				"preferredMgmtIPMethod": {
					"type": "string"
				},
				"protocolOrder": {
					"type": "string"
				},
				"retryCount": {
					"type": "integer"
				},
				"snmpAuthPassphrase": {
					"type": "string"
				},
				"snmpAuthProtocol": {
					"type": "string"
				},
				"snmpMode": {
					"type": "string"
				},
				"snmpPrivPassphrase": {
					"type": "string"
				},
				"snmpPrivProtocol": {
					"type": "string"
				},
				"snmpRoCommunity": {
					"type": "string"
				},
				"snmpRoCommunityDesc": {
					"type": "string"
				},
				"snmpRwCommunity": {
					"type": "string"
				},
				"snmpRwCommunityDesc": {
					"type": "string"
				},
				"snmpUserName": {
					"type": "string"
				},
				"timeOut": {
					"type": "integer"
				},
				"updateMgmtIp": {
					"type": "boolean"
				},
				"userNameList": {
					"type": "string"
				}
			}
		},
		"LANAutomationStartRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"discoveredDeviceSiteNameHierarchy": {
						"type": "string"
					},
					"primaryDeviceManagmentIPAddress": {
						"type": "string"
					},
					"peerDeviceManagmentIPAddress": {
						"type": "string"
					},
					"primaryDeviceInterfaceNames": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"ipPools": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"ipPoolName": {
									"type": "string"
								},
								"ipPoolRole": {
									"type": "string"
								}
							}
						}
					},
					"mulitcastEnabled": {
						"type": "boolean"
					},
					"hostNamePrefix": {
						"type": "string"
					},
					"hostNameFileId": {
						"type": "string"
					},
					"isisDomainPwd": {
						"type": "string"
					},
					"redistributeIsisToBgp": {
						"type": "boolean"
					}
				}
			}
		},
		"LANAutomationStartResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DownloadAFileByFileIdResponse": {
			"type": "object"
		},
		"IsGoldenTaggedResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"deviceRole": {
							"type": "string"
						},
						"taggedGolden": {
							"type": "boolean"
						},
						"inheritedSiteName": {
							"type": "string"
						},
						"inheritedSiteId": {
							"type": "string"
						}
					}
				}
			}
		},
		"RemoveUserDefinedFieldFromDeviceResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"SiteResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"sites": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"displayName": {
										"type": "string"
									},
									"groupNameHierarchy": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"latitude": {
										"type": "string"
									},
									"locationAddress": {
										"type": "string"
									},
									"locationCountry": {
										"type": "string"
									},
									"locationType": {
										"type": "string"
									},
									"longitude": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"parentId": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ApAntennaMapping": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"antennaPatterns": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"band": {
									"type": "string"
								},
								"names": {
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							}
						}
					},
					"apType": {
						"type": "string"
					}
				}
			}
		},
		"DiscoveryJobNIOListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"cliStatus": {
								"type": "string"
							},
							"discoveryStatus": {
								"type": "string"
							},
							"endTime": {
								"type": "string"
							},
							"httpStatus": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"inventoryCollectionStatus": {
								"type": "string"
							},
							"inventoryReachabilityStatus": {
								"type": "string"
							},
							"ipAddress": {
								"type": "string"
							},
							"jobStatus": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"netconfStatus": {
								"type": "string"
							},
							"pingStatus": {
								"type": "string"
							},
							"snmpStatus": {
								"type": "string"
							},
							"startTime": {
								"type": "string"
							},
							"taskId": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeviceRegistrationRequest": {
			"type": "object",
			"properties": {
				"device_uuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"DeviceRegistrationResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				}
			}
		},
		"ResetRequest": {
			"type": "object",
			"properties": {
				"deviceResetList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"configList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"configId": {
											"type": "string"
										},
										"configParameters": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"key": {
														"type": "string"
													},
													"value": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							},
							"deviceId": {
								"type": "string"
							},
							"licenseLevel": {
								"type": "string"
							},
							"licenseType": {
								"type": "string"
							},
							"topOfStackSerialNumber": {
								"type": "string"
							}
						}
					}
				},
				"projectId": {
					"type": "string"
				},
				"workflowId": {
					"type": "string"
				}
			}
		},
		"ResetDeviceResponse": {
			"type": "object",
			"properties": {
				"jsonArrayResponse": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"jsonResponse": {
					"type": "object",
					"properties": {}
				},
				"message": {
					"type": "string"
				},
				"statusCode": {
					"type": "number"
				}
			}
		},
		"NetworkDeviceResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"apManagerInterfaceIp": {
							"type": "string"
						},
						"associatedWlcIp": {
							"type": "string"
						},
						"bootDateTime": {
							"type": "string"
						},
						"collectionInterval": {
							"type": "string"
						},
						"collectionStatus": {
							"type": "string"
						},
						"errorCode": {
							"type": "string"
						},
						"errorDescription": {
							"type": "string"
						},
						"family": {
							"type": "string"
						},
						"hostname": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"interfaceCount": {
							"type": "string"
						},
						"inventoryStatusDetail": {
							"type": "string"
						},
						"lastUpdateTime": {
							"type": "string"
						},
						"lastUpdated": {
							"type": "string"
						},
						"lineCardCount": {
							"type": "string"
						},
						"lineCardId": {
							"type": "string"
						},
						"location": {
							"type": "string"
						},
						"locationName": {
							"type": "string"
						},
						"macAddress": {
							"type": "string"
						},
						"managementIpAddress": {
							"type": "string"
						},
						"memorySize": {
							"type": "string"
						},
						"platformId": {
							"type": "string"
						},
						"reachabilityFailureReason": {
							"type": "string"
						},
						"reachabilityStatus": {
							"type": "string"
						},
						"role": {
							"type": "string"
						},
						"roleSource": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"series": {
							"type": "string"
						},
						"snmpContact": {
							"type": "string"
						},
						"snmpLocation": {
							"type": "string"
						},
						"softwareType": {
							"type": "string"
						},
						"softwareVersion": {
							"type": "string"
						},
						"tagCount": {
							"type": "string"
						},
						"tunnelUdpPort": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"upTime": {
							"type": "string"
						},
						"waasDeviceMode": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"FlowAnalysisRequest": {
			"type": "object",
			"properties": {
				"controlPath": {
					"type": "boolean"
				},
				"destIP": {
					"type": "string"
				},
				"destPort": {
					"type": "string"
				},
				"inclusions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"periodicRefresh": {
					"type": "boolean"
				},
				"protocol": {
					"type": "string"
				},
				"sourceIP": {
					"type": "string"
				},
				"sourcePort": {
					"type": "string"
				}
			}
		},
		"FlowAnalysisRequestResultOutput": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"flowAnalysisId": {
							"type": "string"
						},
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"TaskDTOResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"additionalStatusURL": {
							"type": "string"
						},
						"data": {
							"type": "string"
						},
						"endTime": {
							"type": "string"
						},
						"errorCode": {
							"type": "string"
						},
						"errorKey": {
							"type": "string"
						},
						"failureReason": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"isError": {
							"type": "boolean"
						},
						"lastUpdate": {
							"type": "string"
						},
						"operationIdList": {
							"type": "object"
						},
						"parentId": {
							"type": "string"
						},
						"progress": {
							"type": "string"
						},
						"rootId": {
							"type": "string"
						},
						"serviceType": {
							"type": "string"
						},
						"startTime": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"version": {
							"type": "integer"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeleteEventSubscriptionsResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"GetAuthenticationAndPolicyServersResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ipAddress": {
								"type": "string"
							},
							"sharedSecret": {
								"type": "string"
							},
							"protocol": {
								"type": "string",
								"enum": [
									"TACACS",
									"RADIUS",
									"RADIUS_TACACS"
								]
							},
							"role": {
								"type": "string"
							},
							"port": {
								"type": "integer"
							},
							"authenticationPort": {
								"type": "string"
							},
							"accountingPort": {
								"type": "string"
							},
							"retries": {
								"type": "integer"
							},
							"timeoutSeconds": {
								"type": "integer"
							},
							"isIseEnabled": {
								"type": "boolean"
							},
							"instanceUuid": {
								"type": "string"
							},
							"state": {
								"type": "string",
								"enum": [
									"ACTIVE",
									"INACTIVE",
									"RBAC_SUCCESS",
									"RBAC_FAILURE",
									"DELETED",
									"FAILED",
									"INPROGRESS"
								]
							},
							"ciscoIseDtos": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"subscriberName": {
											"type": "string"
										},
										"description": {
											"type": "string"
										},
										"password": {
											"type": "string"
										},
										"userName": {
											"type": "string"
										},
										"fqdn": {
											"type": "string"
										},
										"ipAddress": {
											"type": "string"
										},
										"trustState": {
											"type": "string",
											"enum": [
												"TRUSTED",
												"UNTRUSTED",
												"INIT"
											]
										},
										"instanceUuid": {
											"type": "string"
										},
										"sshkey": {
											"type": "string"
										},
										"type": {
											"type": "string"
										},
										"failureReason": {
											"type": "string"
										},
										"role": {
											"type": "string",
											"enum": [
												"PRIMARY",
												"SECONDARY",
												"PXGRID"
											]
										},
										"externalCiscoIseIpAddrDtos": {
											"type": "object",
											"properties": {
												"type": {
													"type": "string"
												},
												"externalCiscoIseIpAddresses": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"externalIpAddress": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									}
								}
							},
							"encryptionScheme": {
								"type": "string",
								"enum": [
									"KEYWRAP",
									"RADSEC"
								]
							},
							"messageKey": {
								"type": "string"
							},
							"encryptionKey": {
								"type": "string"
							},
							"useDnacCertForPxgrid": {
								"type": "boolean"
							},
							"iseEnabled": {
								"type": "boolean"
							},
							"pxgridEnabled": {
								"type": "boolean"
							}
						}
					}
				}
			}
		},
		"SyncVirtualAccountDevicesResponse": {
			"type": "object",
			"properties": {
				"virtualAccountId": {
					"type": "string"
				},
				"autoSyncPeriod": {
					"type": "number"
				},
				"syncResultStr": {
					"type": "string"
				},
				"profile": {
					"type": "object",
					"properties": {
						"proxy": {
							"type": "boolean"
						},
						"makeDefault": {
							"type": "boolean"
						},
						"port": {
							"type": "number"
						},
						"profileId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"addressIpV4": {
							"type": "string"
						},
						"cert": {
							"type": "string"
						},
						"addressFqdn": {
							"type": "string"
						}
					}
				},
				"ccoUser": {
					"type": "string"
				},
				"syncResult": {
					"type": "object",
					"properties": {
						"syncList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"syncType": {
										"type": "string"
									},
									"deviceSnList": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								}
							}
						},
						"syncMsg": {
							"type": "string"
						}
					}
				},
				"token": {
					"type": "string"
				},
				"syncStartTime": {
					"type": "number"
				},
				"lastSync": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				},
				"smartAccountId": {
					"type": "string"
				},
				"expiry": {
					"type": "number"
				},
				"syncStatus": {
					"type": "string"
				}
			}
		},
		"LANAutomationStatusResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"discoveredDeviceSiteNameHierarchy": {
								"type": "string"
							},
							"primaryDeviceManagmentIPAddress": {
								"type": "string"
							},
							"ipPoolList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ipPoolName": {
											"type": "string"
										},
										"ipPoolRole": {
											"type": "string"
										}
									}
								}
							},
							"primaryDeviceInterfaceNames": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"status": {
								"type": "string"
							},
							"action": {
								"type": "string"
							},
							"creationTime": {
								"type": "string"
							},
							"multicastEnabled": {
								"type": "boolean"
							},
							"peerDeviceManagmentIPAddress": {
								"type": "string"
							},
							"discoveredDeviceList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"serialNumber": {
											"type": "string"
										},
										"state": {
											"type": "string"
										},
										"ipAddressInUseList": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"redistributeIsisToBgp": {
								"type": "boolean"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetAuditLogParentRecordsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"version": {
						"type": "string"
					},
					"instanceId": {
						"type": "string"
					},
					"eventId": {
						"type": "string"
					},
					"namespace": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"category": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"subDomain": {
						"type": "string"
					},
					"severity": {
						"type": "integer"
					},
					"source": {
						"type": "string"
					},
					"timestamp": {
						"type": "integer"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"details": {
						"type": "object",
						"properties": {}
					},
					"ciscoDnaEventLink": {
						"type": "string"
					},
					"note": {
						"type": "string"
					},
					"tntId": {
						"type": "string"
					},
					"context": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					},
					"i18n": {
						"type": "string"
					},
					"eventHierarchy": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"messageParams": {
						"type": "string"
					},
					"additionalDetails": {
						"type": "object",
						"properties": {}
					},
					"parentInstanceId": {
						"type": "string"
					},
					"network": {
						"type": "string"
					},
					"childCount": {
						"type": "number"
					},
					"tenantId": {
						"type": "string"
					}
				}
			}
		},
		"UpdateGlobalCredentialsVRequest": {
			"type": "object",
			"properties": {
				"cliCredential": {
					"type": "object",
					"properties": {
						"description": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"password": {
							"type": "string"
						},
						"enablePassword": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"snmpV2cRead": {
					"type": "object",
					"properties": {
						"description": {
							"type": "string"
						},
						"readCommunity": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"snmpV2cWrite": {
					"type": "object",
					"properties": {
						"description": {
							"type": "string"
						},
						"writeCommunity": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"snmpV3": {
					"type": "object",
					"properties": {
						"authPassword": {
							"type": "string"
						},
						"authType": {
							"type": "string"
						},
						"snmpMode": {
							"type": "string"
						},
						"privacyPassword": {
							"type": "string"
						},
						"privacyType": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"httpsRead": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"password": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"httpsWrite": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"password": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"id": {
							"type": "string"
						}
					}
				}
			}
		},
		"UpdateGlobalCredentialsVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NeighborResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"neighborDevice": {
							"type": "string"
						},
						"neighborPort": {
							"type": "string"
						},
						"capabilities": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceNIOListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"anchorWlcForAp": {
								"type": "string"
							},
							"authModelId": {
								"type": "string"
							},
							"avgUpdateFrequency": {
								"type": "integer"
							},
							"bootDateTime": {
								"type": "string"
							},
							"cliStatus": {
								"type": "string"
							},
							"duplicateDeviceId": {
								"type": "string"
							},
							"errorCode": {
								"type": "string"
							},
							"errorDescription": {
								"type": "string"
							},
							"family": {
								"type": "string"
							},
							"hostname": {
								"type": "string"
							},
							"httpStatus": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"imageName": {
								"type": "string"
							},
							"ingressQueueConfig": {
								"type": "string"
							},
							"interfaceCount": {
								"type": "string"
							},
							"inventoryCollectionStatus": {
								"type": "string"
							},
							"inventoryReachabilityStatus": {
								"type": "string"
							},
							"lastUpdated": {
								"type": "string"
							},
							"lineCardCount": {
								"type": "string"
							},
							"lineCardId": {
								"type": "string"
							},
							"location": {
								"type": "string"
							},
							"locationName": {
								"type": "string"
							},
							"macAddress": {
								"type": "string"
							},
							"managementIpAddress": {
								"type": "string"
							},
							"memorySize": {
								"type": "string"
							},
							"netconfStatus": {
								"type": "string"
							},
							"numUpdates": {
								"type": "integer"
							},
							"pingStatus": {
								"type": "string"
							},
							"platformId": {
								"type": "string"
							},
							"portRange": {
								"type": "string"
							},
							"qosStatus": {
								"type": "string"
							},
							"reachabilityFailureReason": {
								"type": "string"
							},
							"reachabilityStatus": {
								"type": "string"
							},
							"role": {
								"type": "string"
							},
							"roleSource": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"snmpContact": {
								"type": "string"
							},
							"snmpLocation": {
								"type": "string"
							},
							"snmpStatus": {
								"type": "string"
							},
							"softwareVersion": {
								"type": "string"
							},
							"tag": {
								"type": "string"
							},
							"tagCount": {
								"type": "integer"
							},
							"type": {
								"type": "string"
							},
							"upTime": {
								"type": "string"
							},
							"vendor": {
								"type": "string"
							},
							"wlcApDeviceStatus": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"AuthenticationAPIResponse": {
			"type": "object",
			"properties": {
				"Token": {
					"type": "string"
				}
			}
		},
		"GetDevicesThatAreAssignedToASiteResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"instanceUuid": {
								"type": "string"
							},
							"instanceId": {
								"type": "integer"
							},
							"authEntityId": {
								"type": "integer"
							},
							"authEntityClass": {
								"type": "integer"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"deployPending": {
								"type": "string"
							},
							"instanceVersion": {
								"type": "integer"
							},
							"apManagerInterfaceIp": {
								"type": "string"
							},
							"associatedWlcIp": {
								"type": "string"
							},
							"bootDateTime": {
								"type": "string"
							},
							"collectionInterval": {
								"type": "string"
							},
							"collectionIntervalValue": {
								"type": "string"
							},
							"collectionStatus": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"deviceSupportLevel": {
								"type": "string"
							},
							"dnsResolvedManagementAddress": {
								"type": "string"
							},
							"family": {
								"type": "string"
							},
							"hostname": {
								"type": "string"
							},
							"interfaceCount": {
								"type": "string"
							},
							"inventoryStatusDetail": {
								"type": "string"
							},
							"lastUpdateTime": {
								"type": "integer"
							},
							"lastUpdated": {
								"type": "string"
							},
							"lineCardCount": {
								"type": "string"
							},
							"lineCardId": {
								"type": "string"
							},
							"lastDeviceResyncStartTime": {
								"type": "string"
							},
							"macAddress": {
								"type": "string"
							},
							"managedAtleastOnce": {
								"type": "boolean"
							},
							"managementIpAddress": {
								"type": "string"
							},
							"managementState": {
								"type": "string"
							},
							"memorySize": {
								"type": "string"
							},
							"paddedMgmtIpAddress": {
								"type": "string"
							},
							"pendingSyncRequestsCount": {
								"type": "string"
							},
							"platformId": {
								"type": "string"
							},
							"reachabilityFailureReason": {
								"type": "string"
							},
							"reachabilityStatus": {
								"type": "string"
							},
							"reasonsForDeviceResync": {
								"type": "string"
							},
							"reasonsForPendingSyncRequests": {
								"type": "string"
							},
							"role": {
								"type": "string"
							},
							"roleSource": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"series": {
								"type": "string"
							},
							"snmpContact": {
								"type": "string"
							},
							"snmpLocation": {
								"type": "string"
							},
							"softwareType": {
								"type": "string"
							},
							"softwareVersion": {
								"type": "string"
							},
							"tagCount": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"upTime": {
								"type": "string"
							},
							"uptimeSeconds": {
								"type": "integer"
							},
							"vendor": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"UpdateNetworkVRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"dhcpServer": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"dnsServer": {
							"type": "object",
							"properties": {
								"domainName": {
									"type": "string",
									"enum": [
										"can only contain alphanumeric characters or hyphen"
									]
								},
								"primaryIpAddress": {
									"type": "string",
									"enum": [
										"valid range : 1.0.0.0 - 223.255.255.255"
									]
								},
								"secondaryIpAddress": {
									"type": "string",
									"enum": [
										"valid range : 1.0.0.0 - 223.255.255.255"
									]
								}
							}
						},
						"syslogServer": {
							"type": "object",
							"properties": {
								"ipAddresses": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"configureDnacIP": {
									"type": "boolean"
								}
							}
						},
						"snmpServer": {
							"type": "object",
							"properties": {
								"ipAddresses": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"configureDnacIP": {
									"type": "boolean"
								}
							}
						},
						"netflowcollector": {
							"type": "object",
							"properties": {
								"ipAddress": {
									"type": "string"
								},
								"port": {
									"type": "number"
								}
							}
						},
						"ntpServer": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"timezone": {
							"type": "string"
						},
						"messageOfTheday": {
							"type": "object",
							"properties": {
								"bannerMessage": {
									"type": "string"
								},
								"retainExistingBanner": {
									"type": "string"
								}
							}
						},
						"network_aaa": {
							"type": "object",
							"properties": {
								"servers": {
									"type": "string",
									"enum": [
										"Server type supported by ISE and AAA"
									]
								},
								"ipAddress": {
									"type": "string",
									"enum": [
										"Mandatory for ISE servers and for AAA consider this as additional IP."
									]
								},
								"network": {
									"type": "string",
									"enum": [
										"For AAA server consider it as primary IP and For ISE consider as Network"
									]
								},
								"protocol": {
									"type": "string"
								},
								"sharedSecret": {
									"type": "string",
									"enum": [
										"Supported only by ISE Servers"
									]
								}
							}
						},
						"clientAndEndpoint_aaa": {
							"type": "object",
							"properties": {
								"servers": {
									"type": "string"
								},
								"ipAddress": {
									"type": "string",
									"enum": [
										"Mandatory for ISE servers."
									]
								},
								"network": {
									"type": "string"
								},
								"protocol": {
									"type": "string"
								},
								"sharedSecret": {
									"type": "string",
									"enum": [
										"Supported only by ISE servers"
									]
								}
							}
						}
					}
				}
			}
		},
		"UpdateNetworkVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetExternalAuthenticationServersAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"aaa-servers": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"accountingPort": {
										"type": "integer"
									},
									"retries": {
										"type": "integer"
									},
									"protocol": {
										"type": "string"
									},
									"socketTimeout": {
										"type": "integer"
									},
									"serverIp": {
										"type": "string"
									},
									"sharedSecret": {
										"type": "string"
									},
									"serverId": {
										"type": "string"
									},
									"authenticationPort": {
										"type": "integer"
									},
									"aaaAttribute": {
										"type": "string"
									},
									"role": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"GetEmailDestinationResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"emailConfigId": {
						"type": "string"
					},
					"primarySMTPConfig": {
						"type": "object",
						"properties": {
							"hostName": {
								"type": "string"
							},
							"port": {
								"type": "string"
							},
							"userName": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"security": {
								"type": "string"
							}
						}
					},
					"secondarySMTPConfig": {
						"type": "object",
						"properties": {
							"hostName": {
								"type": "string"
							},
							"port": {
								"type": "string"
							},
							"userName": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"security": {
								"type": "string"
							}
						}
					},
					"fromEmail": {
						"type": "string"
					},
					"toEmail": {
						"type": "string"
					},
					"subject": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"tenantId": {
						"type": "string"
					}
				}
			}
		},
		"ApplicationPolicyIntentRequest": {
			"type": "object",
			"properties": {
				"createList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"deletePolicyStatus": {
								"type": "string",
								"enum": [
									"NONE",
									"DELETED",
									"RESTORED"
								]
							},
							"policyScope": {
								"type": "string"
							},
							"priority": {
								"type": "string"
							},
							"advancedPolicyScope": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"advancedPolicyScopeElement": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"groupId": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"ssid": {
													"type": "array",
													"items": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							},
							"exclusiveContract": {
								"type": "object",
								"properties": {
									"clause": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"type": {
													"type": "string",
													"enum": [
														"BUSINESS_RELEVANCE",
														"APPLICATION_POLICY_KNOBS"
													]
												},
												"relevanceLevel": {
													"type": "string",
													"enum": [
														"BUSINESS_RELEVANT",
														"BUSINESS_IRRELEVANT",
														"DEFAULT"
													]
												},
												"deviceRemovalBehavior": {
													"type": "string",
													"enum": [
														"DELETE",
														"RESTORE",
														"IGNORE"
													]
												},
												"hostTrackingEnabled": {
													"type": "boolean"
												}
											}
										}
									}
								}
							},
							"contract": {
								"type": "object",
								"properties": {
									"idRef": {
										"type": "string"
									}
								}
							},
							"producer": {
								"type": "object",
								"properties": {
									"scalableGroup": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"idRef": {
													"type": "string"
												}
											}
										}
									}
								}
							},
							"consumer": {
								"type": "object",
								"properties": {
									"scalableGroup": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"idRef": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"updateList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"deletePolicyStatus": {
								"type": "string",
								"enum": [
									"NONE",
									"DELETED",
									"RESTORED"
								]
							},
							"policyScope": {
								"type": "string"
							},
							"priority": {
								"type": "string"
							},
							"advancedPolicyScope": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"advancedPolicyScopeElement": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string"
												},
												"groupId": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"ssid": {
													"type": "array",
													"items": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							},
							"exclusiveContract": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"clause": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string"
												},
												"type": {
													"type": "string",
													"enum": [
														"BUSINESS_RELEVANCE",
														"APPLICATION_POLICY_KNOBS"
													]
												},
												"relevanceLevel": {
													"type": "string",
													"enum": [
														"BUSINESS_RELEVANT",
														"BUSINESS_IRRELEVANT",
														"DEFAULT"
													]
												},
												"deviceRemovalBehavior": {
													"type": "string",
													"enum": [
														"DELETE",
														"RESTORE",
														"IGNORE"
													]
												},
												"hostTrackingEnabled": {
													"type": "boolean"
												}
											}
										}
									}
								}
							},
							"contract": {
								"type": "object",
								"properties": {
									"idRef": {
										"type": "string"
									}
								}
							},
							"producer": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"scalableGroup": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"idRef": {
													"type": "string"
												}
											}
										}
									}
								}
							},
							"consumer": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"scalableGroup": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"idRef": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"deleteList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"ApplicationPolicyIntentResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetWorkflowsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"lastupdateOn": {
						"type": "number"
					},
					"imageId": {
						"type": "string"
					},
					"currTaskIdx": {
						"type": "number"
					},
					"addedOn": {
						"type": "number"
					},
					"tasks": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"state": {
									"type": "string"
								},
								"type": {
									"type": "string"
								},
								"currWorkItemIdx": {
									"type": "number"
								},
								"taskSeqNo": {
									"type": "number"
								},
								"endTime": {
									"type": "number"
								},
								"startTime": {
									"type": "number"
								},
								"workItemList": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"state": {
												"type": "string"
											},
											"command": {
												"type": "string"
											},
											"outputStr": {
												"type": "string"
											},
											"endTime": {
												"type": "number"
											},
											"startTime": {
												"type": "number"
											},
											"timeTaken": {
												"type": "number"
											}
										}
									}
								},
								"timeTaken": {
									"type": "number"
								},
								"name": {
									"type": "string"
								}
							}
						}
					},
					"addToInventory": {
						"type": "boolean"
					},
					"instanceType": {
						"type": "string"
					},
					"endTime": {
						"type": "number"
					},
					"execTime": {
						"type": "number"
					},
					"startTime": {
						"type": "number"
					},
					"useState": {
						"type": "string"
					},
					"configId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"version": {
						"type": "number"
					},
					"tenantId": {
						"type": "string"
					}
				}
			}
		},
		"LANAutomationSessionCountResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"sessionCount": {
							"type": "string"
						}
					}
				}
			}
		},
		"GetAccessPointConfigurationResponse": {
			"type": "object",
			"properties": {
				"instanceUuid": {
					"type": "object",
					"properties": {}
				},
				"instanceId": {
					"type": "number"
				},
				"authEntityId": {
					"type": "object",
					"properties": {}
				},
				"displayName": {
					"type": "string"
				},
				"authEntityClass": {
					"type": "object",
					"properties": {}
				},
				"instanceTenantId": {
					"type": "string"
				},
				"_orderedListOEIndex": {
					"type": "number"
				},
				"_orderedListOEAssocName": {
					"type": "object",
					"properties": {}
				},
				"_creationOrderIndex": {
					"type": "number"
				},
				"_isBeingChanged": {
					"type": "boolean"
				},
				"deployPending": {
					"type": "string"
				},
				"instanceCreatedOn": {
					"type": "object",
					"properties": {}
				},
				"instanceUpdatedOn": {
					"type": "object",
					"properties": {}
				},
				"changeLogList": {
					"type": "object",
					"properties": {}
				},
				"instanceOrigin": {
					"type": "object",
					"properties": {}
				},
				"lazyLoadedEntities": {
					"type": "object",
					"properties": {}
				},
				"instanceVersion": {
					"type": "number"
				},
				"adminStatus": {
					"type": "string"
				},
				"apHeight": {
					"type": "number"
				},
				"apMode": {
					"type": "string"
				},
				"apName": {
					"type": "string"
				},
				"ethMac": {
					"type": "string"
				},
				"failoverPriority": {
					"type": "string"
				},
				"ledBrightnessLevel": {
					"type": "integer"
				},
				"ledStatus": {
					"type": "string"
				},
				"location": {
					"type": "string"
				},
				"macAddress": {
					"type": "string"
				},
				"primaryControllerName": {
					"type": "string"
				},
				"primaryIpAddress": {
					"type": "string"
				},
				"secondaryControllerName": {
					"type": "string"
				},
				"secondaryIpAddress": {
					"type": "string"
				},
				"tertiaryControllerName": {
					"type": "string"
				},
				"tertiaryIpAddress": {
					"type": "string"
				},
				"meshDTOs": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {}
					}
				},
				"radioDTOs": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"instanceUuid": {
								"type": "object",
								"properties": {}
							},
							"instanceId": {
								"type": "number"
							},
							"authEntityId": {
								"type": "object",
								"properties": {}
							},
							"displayName": {
								"type": "string"
							},
							"authEntityClass": {
								"type": "object",
								"properties": {}
							},
							"instanceTenantId": {
								"type": "string"
							},
							"_orderedListOEIndex": {
								"type": "number"
							},
							"_orderedListOEAssocName": {
								"type": "object",
								"properties": {}
							},
							"_creationOrderIndex": {
								"type": "number"
							},
							"_isBeingChanged": {
								"type": "boolean"
							},
							"deployPending": {
								"type": "string"
							},
							"instanceCreatedOn": {
								"type": "object",
								"properties": {}
							},
							"instanceUpdatedOn": {
								"type": "object",
								"properties": {}
							},
							"changeLogList": {
								"type": "object",
								"properties": {}
							},
							"instanceOrigin": {
								"type": "object",
								"properties": {}
							},
							"lazyLoadedEntities": {
								"type": "object",
								"properties": {}
							},
							"instanceVersion": {
								"type": "number"
							},
							"adminStatus": {
								"type": "string"
							},
							"antennaAngle": {
								"type": "number"
							},
							"antennaElevAngle": {
								"type": "number"
							},
							"antennaGain": {
								"type": "integer"
							},
							"antennaPatternName": {
								"type": "string"
							},
							"channelAssignmentMode": {
								"type": "string"
							},
							"channelNumber": {
								"type": "integer"
							},
							"channelWidth": {
								"type": "string"
							},
							"cleanAirSI": {
								"type": "string"
							},
							"ifType": {
								"type": "integer"
							},
							"ifTypeValue": {
								"type": "string"
							},
							"macAddress": {
								"type": "string"
							},
							"powerAssignmentMode": {
								"type": "string"
							},
							"powerlevel": {
								"type": "integer"
							},
							"radioBand": {
								"type": "object",
								"properties": {}
							},
							"radioRoleAssignment": {
								"type": "object",
								"properties": {}
							},
							"slotId": {
								"type": "integer"
							},
							"internalKey": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"id": {
										"type": "number"
									},
									"longType": {
										"type": "string"
									},
									"url": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"internalKey": {
					"type": "object",
					"properties": {
						"type": {
							"type": "string"
						},
						"id": {
							"type": "number"
						},
						"longType": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				}
			}
		},
		"ReturnsDevicesAddedToCiscoDNACenterWithSnmpVDESResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"managementIpAddress": {
								"type": "string"
							},
							"hostname": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"family": {
								"type": "string"
							},
							"lastUpdated": {
								"type": "string"
							},
							"upTime": {
								"type": "string"
							},
							"reachabilityStatus": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UpdateDeviceManagementAddressRequest": {
			"type": "object",
			"properties": {
				"newIP": {
					"type": "string"
				}
			}
		},
		"UpdateDeviceManagementAddressResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ImportMapArchiveStartImportResponse": {
			"type": "string"
		},
		"TopologyResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"links": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"additionalInfo": {
										"type": "object",
										"properties": {}
									},
									"endPortID": {
										"type": "string"
									},
									"endPortIpv4Address": {
										"type": "string"
									},
									"endPortIpv4Mask": {
										"type": "string"
									},
									"endPortName": {
										"type": "string"
									},
									"endPortSpeed": {
										"type": "string"
									},
									"greyOut": {
										"type": "boolean"
									},
									"id": {
										"type": "string"
									},
									"linkStatus": {
										"type": "string"
									},
									"source": {
										"type": "string"
									},
									"startPortID": {
										"type": "string"
									},
									"startPortIpv4Address": {
										"type": "string"
									},
									"startPortIpv4Mask": {
										"type": "string"
									},
									"startPortName": {
										"type": "string"
									},
									"startPortSpeed": {
										"type": "string"
									},
									"tag": {
										"type": "string"
									},
									"target": {
										"type": "string"
									}
								}
							}
						},
						"nodes": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"aclApplied": {
										"type": "boolean"
									},
									"additionalInfo": {
										"type": "object",
										"properties": {}
									},
									"customParam": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string"
											},
											"label": {
												"type": "string"
											},
											"parentNodeId": {
												"type": "string"
											},
											"x": {
												"type": "integer"
											},
											"y": {
												"type": "integer"
											}
										}
									},
									"dataPathId": {
										"type": "string"
									},
									"deviceType": {
										"type": "string"
									},
									"family": {
										"type": "string"
									},
									"fixed": {
										"type": "boolean"
									},
									"greyOut": {
										"type": "boolean"
									},
									"id": {
										"type": "string"
									},
									"ip": {
										"type": "string"
									},
									"label": {
										"type": "string"
									},
									"networkType": {
										"type": "string"
									},
									"nodeType": {
										"type": "string"
									},
									"order": {
										"type": "integer"
									},
									"osType": {
										"type": "string"
									},
									"platformId": {
										"type": "string"
									},
									"role": {
										"type": "string"
									},
									"roleSource": {
										"type": "string"
									},
									"softwareVersion": {
										"type": "string"
									},
									"tags": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"upperNode": {
										"type": "string"
									},
									"userId": {
										"type": "string"
									},
									"vlanId": {
										"type": "string"
									},
									"x": {
										"type": "integer"
									},
									"y": {
										"type": "integer"
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"LANAutomationLogsForIndividualDevicesResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"nwOrchId": {
								"type": "string"
							},
							"logs": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"logLevel": {
											"type": "string"
										},
										"timeStamp": {
											"type": "string"
										},
										"record": {
											"type": "string"
										}
									}
								}
							},
							"serialNumber": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ExportsTheTemplatesForAGivenCriteriaRequest": {
			"type": "array",
			"items": {
				"type": "object"
			}
		},
		"GetPlannedAccessPointsForBuildingResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributes": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"instanceUuid": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"typeString": {
										"type": "string"
									},
									"domain": {
										"type": "string"
									},
									"heirarchyName": {
										"type": "string"
									},
									"source": {
										"type": "string"
									},
									"createDate": {
										"type": "integer"
									},
									"macaddress": {
										"type": "object",
										"properties": {}
									}
								}
							},
							"location": {
								"type": "object",
								"properties": {}
							},
							"position": {
								"type": "object",
								"properties": {
									"x": {
										"type": "number"
									},
									"y": {
										"type": "number"
									},
									"z": {
										"type": "number"
									}
								}
							},
							"radioCount": {
								"type": "integer"
							},
							"radios": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"attributes": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"instanceUuid": {
													"type": "string"
												},
												"slotId": {
													"type": "integer"
												},
												"ifTypeString": {
													"type": "string"
												},
												"ifTypeSubband": {
													"type": "string"
												},
												"channel": {
													"type": "object",
													"properties": {}
												},
												"channelString": {
													"type": "object",
													"properties": {}
												},
												"ifMode": {
													"type": "string"
												}
											}
										},
										"antenna": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"mode": {
													"type": "string"
												},
												"azimuthAngle": {
													"type": "number"
												},
												"elevationAngle": {
													"type": "number"
												},
												"gain": {
													"type": "number"
												}
											}
										},
										"isSensor": {
											"type": "boolean"
										}
									}
								}
							},
							"isSensor": {
								"type": "boolean"
							}
						}
					}
				},
				"version": {
					"type": "integer"
				},
				"total": {
					"type": "integer"
				}
			}
		},
		"AddRoleAPIRequest": {
			"type": "object",
			"properties": {
				"role": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"resourceTypes": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"type": {
								"type": "string"
							},
							"operations": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"AddRoleAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"roleId": {
							"type": "string"
						},
						"message": {
							"type": "string"
						}
					}
				}
			}
		},
		"CreateSPProfileVRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"qos": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"profileName": {
										"type": "string"
									},
									"model": {
										"type": "string"
									},
									"wanProvider": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"CreateSPProfileVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"SystemPropertyNameAndIntValueDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"instanceTenantId": {
						"type": "string"
					},
					"instanceUuid": {
						"type": "string"
					},
					"intValue": {
						"type": "integer"
					},
					"systemPropertyName": {
						"type": "string"
					}
				}
			}
		},
		"RawCliInfoNIOListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"cdpNeighbors": {
								"type": "string"
							},
							"healthMonitor": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"intfDescription": {
								"type": "string"
							},
							"inventory": {
								"type": "string"
							},
							"ipIntfBrief": {
								"type": "string"
							},
							"macAddressTable": {
								"type": "string"
							},
							"runningConfig": {
								"type": "string"
							},
							"snmp": {
								"type": "string"
							},
							"version": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"EventArtifactCountResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "number"
				}
			}
		},
		"UpdateUserDefinedFieldRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"UpdateUserDefinedFieldResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetDeviceByIdResponse": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"deviceInfo": {
					"type": "object",
					"properties": {
						"source": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"stack": {
							"type": "boolean"
						},
						"mode": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"location": {
							"type": "object",
							"properties": {
								"siteId": {
									"type": "string"
								},
								"address": {
									"type": "string"
								},
								"latitude": {
									"type": "string"
								},
								"longitude": {
									"type": "string"
								},
								"altitude": {
									"type": "string"
								}
							}
						},
						"description": {
							"type": "string"
						},
						"onbState": {
							"type": "string"
						},
						"authenticatedMicNumber": {
							"type": "string"
						},
						"authenticatedSudiSerialNo": {
							"type": "string"
						},
						"capabilitiesSupported": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"featuresSupported": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"cmState": {
							"type": "string"
						},
						"firstContact": {
							"type": "number"
						},
						"lastContact": {
							"type": "number"
						},
						"macAddress": {
							"type": "string"
						},
						"pid": {
							"type": "string"
						},
						"deviceSudiSerialNos": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"lastUpdateOn": {
							"type": "number"
						},
						"workflowId": {
							"type": "string"
						},
						"workflowName": {
							"type": "string"
						},
						"projectId": {
							"type": "string"
						},
						"projectName": {
							"type": "string"
						},
						"deviceType": {
							"type": "string"
						},
						"agentType": {
							"type": "string"
						},
						"imageVersion": {
							"type": "string"
						},
						"fileSystemList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"writeable": {
										"type": "boolean"
									},
									"freespace": {
										"type": "number"
									},
									"name": {
										"type": "string"
									},
									"readable": {
										"type": "boolean"
									},
									"size": {
										"type": "number"
									}
								}
							}
						},
						"pnpProfileList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"profileName": {
										"type": "string"
									},
									"discoveryCreated": {
										"type": "boolean"
									},
									"createdBy": {
										"type": "string"
									},
									"primaryEndpoint": {
										"type": "object",
										"properties": {
											"port": {
												"type": "number"
											},
											"protocol": {
												"type": "string"
											},
											"ipv4Address": {
												"type": "object",
												"properties": {}
											},
											"ipv6Address": {
												"type": "object",
												"properties": {}
											},
											"fqdn": {
												"type": "string"
											},
											"certificate": {
												"type": "string"
											}
										}
									},
									"secondaryEndpoint": {
										"type": "object",
										"properties": {
											"port": {
												"type": "number"
											},
											"protocol": {
												"type": "string"
											},
											"ipv4Address": {
												"type": "object",
												"properties": {}
											},
											"ipv6Address": {
												"type": "object",
												"properties": {}
											},
											"fqdn": {
												"type": "string"
											},
											"certificate": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"imageFile": {
							"type": "string"
						},
						"httpHeaders": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"key": {
										"type": "string"
									},
									"value": {
										"type": "string"
									}
								}
							}
						},
						"neighborLinks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"localInterfaceName": {
										"type": "string"
									},
									"localShortInterfaceName": {
										"type": "string"
									},
									"localMacAddress": {
										"type": "string"
									},
									"remoteInterfaceName": {
										"type": "string"
									},
									"remoteShortInterfaceName": {
										"type": "string"
									},
									"remoteMacAddress": {
										"type": "string"
									},
									"remoteDeviceName": {
										"type": "string"
									},
									"remotePlatform": {
										"type": "string"
									},
									"remoteVersion": {
										"type": "string"
									}
								}
							}
						},
						"lastSyncTime": {
							"type": "number"
						},
						"ipInterfaces": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"status": {
										"type": "string"
									},
									"macAddress": {
										"type": "string"
									},
									"ipv4Address": {
										"type": "object",
										"properties": {}
									},
									"ipv6AddressList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {}
										}
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"hostname": {
							"type": "string"
						},
						"authStatus": {
							"type": "string"
						},
						"stackInfo": {
							"type": "object",
							"properties": {
								"supportsStackWorkflows": {
									"type": "boolean"
								},
								"isFullRing": {
									"type": "boolean"
								},
								"stackMemberList": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"serialNumber": {
												"type": "string"
											},
											"state": {
												"type": "string"
											},
											"role": {
												"type": "string"
											},
											"macAddress": {
												"type": "string"
											},
											"pid": {
												"type": "string"
											},
											"licenseLevel": {
												"type": "string"
											},
											"licenseType": {
												"type": "string"
											},
											"sudiSerialNumber": {
												"type": "string"
											},
											"hardwareVersion": {
												"type": "string"
											},
											"stackNumber": {
												"type": "number"
											},
											"softwareVersion": {
												"type": "string"
											},
											"priority": {
												"type": "number"
											}
										}
									}
								},
								"stackRingProtocol": {
									"type": "string"
								},
								"validLicenseLevels": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"totalMemberCount": {
									"type": "number"
								}
							}
						},
						"reloadRequested": {
							"type": "boolean"
						},
						"addedOn": {
							"type": "number"
						},
						"siteId": {
							"type": "string"
						},
						"aaaCredentials": {
							"type": "object",
							"properties": {
								"password": {
									"type": "string"
								},
								"username": {
									"type": "string"
								}
							}
						},
						"userMicNumbers": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"userSudiSerialNos": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"addnMacAddrs": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"preWorkflowCliOuputs": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"cli": {
										"type": "string"
									},
									"cliOutput": {
										"type": "string"
									}
								}
							}
						},
						"tags": {
							"type": "object",
							"properties": {}
						},
						"sudiRequired": {
							"type": "boolean"
						},
						"smartAccountId": {
							"type": "string"
						},
						"virtualAccountId": {
							"type": "string"
						},
						"populateInventory": {
							"type": "boolean"
						},
						"siteName": {
							"type": "string"
						},
						"name": {
							"type": "string"
						}
					}
				},
				"systemResetWorkflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"systemWorkflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"workflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"runSummaryList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"details": {
								"type": "string"
							},
							"historyTaskInfo": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"addnDetails": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"key": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									},
									"name": {
										"type": "string"
									}
								}
							},
							"errorFlag": {
								"type": "boolean"
							},
							"timestamp": {
								"type": "number"
							}
						}
					}
				},
				"workflowParameters": {
					"type": "object",
					"properties": {
						"topOfStackSerialNumber": {
							"type": "string"
						},
						"licenseLevel": {
							"type": "string"
						},
						"licenseType": {
							"type": "string"
						},
						"configList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"configParameters": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"key": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									},
									"configId": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"dayZeroConfig": {
					"type": "object",
					"properties": {
						"config": {
							"type": "string"
						}
					}
				},
				"dayZeroConfigPreview": {
					"type": "object",
					"properties": {}
				},
				"version": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"ImageImportFromUrlDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"applicationType": {
						"type": "string"
					},
					"imageFamily": {
						"type": "string"
					},
					"sourceURL": {
						"type": "string"
					},
					"thirdParty": {
						"type": "boolean"
					},
					"vendor": {
						"type": "string"
					}
				}
			}
		},
		"GetConnectorTypesResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"connectorType": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"isDefaultSupported": {
						"type": "string"
					},
					"isCustomConnector": {
						"type": "string"
					}
				}
			}
		},
		"SmartAccountDetailsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"domain": {
								"type": "string"
							},
							"is_active_smart_account": {
								"type": "boolean"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"TagResult": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"systemTag": {
							"type": "boolean"
						},
						"description": {
							"type": "string"
						},
						"dynamicRules": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"memberType": {
										"type": "string"
									},
									"rules": {
										"type": "object",
										"properties": {
											"values": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"items": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"operation": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"name": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						}
					}
				}
			}
		},
		"DeleteWorkflowByIdResponse": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"lastupdateOn": {
					"type": "number"
				},
				"imageId": {
					"type": "string"
				},
				"currTaskIdx": {
					"type": "number"
				},
				"addedOn": {
					"type": "number"
				},
				"tasks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"state": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"currWorkItemIdx": {
								"type": "number"
							},
							"taskSeqNo": {
								"type": "number"
							},
							"endTime": {
								"type": "number"
							},
							"startTime": {
								"type": "number"
							},
							"workItemList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"state": {
											"type": "string"
										},
										"command": {
											"type": "string"
										},
										"outputStr": {
											"type": "string"
										},
										"endTime": {
											"type": "number"
										},
										"startTime": {
											"type": "number"
										},
										"timeTaken": {
											"type": "number"
										}
									}
								}
							},
							"timeTaken": {
								"type": "number"
							},
							"name": {
								"type": "string"
							}
						}
					}
				},
				"addToInventory": {
					"type": "boolean"
				},
				"instanceType": {
					"type": "string"
				},
				"endTime": {
					"type": "number"
				},
				"execTime": {
					"type": "number"
				},
				"startTime": {
					"type": "number"
				},
				"useState": {
					"type": "string"
				},
				"configId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"version": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"GetBusinessAPIExecutionDetailsResponse": {
			"type": "object",
			"properties": {
				"bapiKey": {
					"type": "string"
				},
				"bapiName": {
					"type": "string"
				},
				"bapiExecutionId": {
					"type": "string"
				},
				"startTime": {
					"type": "string"
				},
				"startTimeEpoch": {
					"type": "integer"
				},
				"endTime": {
					"type": "string"
				},
				"endTimeEpoch": {
					"type": "integer"
				},
				"timeDuration": {
					"type": "integer"
				},
				"status": {
					"type": "string",
					"enum": [
						"SUCCESS",
						"FAILURE",
						"IN_PROGRESS",
						"PENDING_FOR_EXECUTION"
					]
				},
				"runtimeInstanceId": {
					"type": "string"
				}
			}
		},
		"LANAutomationActiveSession": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"maxSupportedCount": {
							"type": "string"
						},
						"activeSessions": {
							"type": "string"
						},
						"activeSessionIds": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetAccessPointRebootTaskResultResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"wlcIP": {
						"type": "string"
					},
					"apList": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"apName": {
									"type": "string"
								},
								"rebootStatus": {
									"type": "string"
								},
								"failureReason": {
									"type": "object",
									"properties": {}
								}
							}
						}
					}
				}
			}
		},
		"GetSyslogEventSubscriptionsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"version": {
						"type": "string"
					},
					"subscriptionId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										},
										"instanceId": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"description": {
											"type": "string"
										},
										"syslogConfig": {
											"type": "object",
											"properties": {
												"version": {
													"type": "string"
												},
												"tenantId": {
													"type": "string"
												},
												"configId": {
													"type": "string"
												},
												"name": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"host": {
													"type": "string"
												},
												"port": {
													"type": "string"
												}
											}
										}
									}
								},
								"connectorType": {
									"type": "string"
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"others": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					},
					"isPrivate": {
						"type": "string"
					},
					"tenantId": {
						"type": "string"
					}
				}
			}
		},
		"GetServiceProviderDetailsVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"instanceType": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"namespace": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"key": {
								"type": "string"
							},
							"version": {
								"type": "integer"
							},
							"value": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"wanProvider": {
											"type": "string"
										},
										"spProfileName": {
											"type": "string"
										},
										"slaProfileName": {
											"type": "string"
										}
									}
								}
							},
							"groupUuid": {
								"type": "string"
							},
							"inheritedGroupUuid": {
								"type": "string"
							},
							"inheritedGroupName": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"RegisterNetworkDeviceResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"macAddress": {
							"type": "string"
						},
						"modelNumber": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetDeviceDetailResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"noiseScore": {
							"type": "integer"
						},
						"policyTagName": {
							"type": "string"
						},
						"interferenceScore": {
							"type": "integer"
						},
						"opState": {
							"type": "string"
						},
						"powerSaveMode": {
							"type": "string"
						},
						"mode": {
							"type": "string"
						},
						"resetReason": {
							"type": "string"
						},
						"nwDeviceRole": {
							"type": "string"
						},
						"protocol": {
							"type": "string"
						},
						"powerMode": {
							"type": "string"
						},
						"connectedTime": {
							"type": "string"
						},
						"ringStatus": {
							"type": "boolean"
						},
						"ledFlashSeconds": {
							"type": "string"
						},
						"ip_addr_managementIpAddr": {
							"type": "string"
						},
						"stackType": {
							"type": "string"
						},
						"subMode": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"nwDeviceName": {
							"type": "string"
						},
						"deviceGroupHierarchyId": {
							"type": "string"
						},
						"cpu": {
							"type": "string"
						},
						"utilization": {
							"type": "string"
						},
						"nwDeviceId": {
							"type": "string"
						},
						"siteHierarchyGraphId": {
							"type": "string"
						},
						"nwDeviceFamily": {
							"type": "string"
						},
						"macAddress": {
							"type": "string"
						},
						"homeApEnabled": {
							"type": "string"
						},
						"deviceSeries": {
							"type": "string"
						},
						"collectionStatus": {
							"type": "string"
						},
						"utilizationScore": {
							"type": "integer"
						},
						"maintenanceMode": {
							"type": "boolean"
						},
						"interference": {
							"type": "string"
						},
						"softwareVersion": {
							"type": "string"
						},
						"tagIdList": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"powerType": {
							"type": "string"
						},
						"overallHealth": {
							"type": "integer"
						},
						"managementIpAddr": {
							"type": "string"
						},
						"memory": {
							"type": "string"
						},
						"communicationState": {
							"type": "string"
						},
						"apType": {
							"type": "string"
						},
						"adminState": {
							"type": "string"
						},
						"noise": {
							"type": "string"
						},
						"icapCapability": {
							"type": "string"
						},
						"regulatoryDomain": {
							"type": "string"
						},
						"ethernetMac": {
							"type": "string"
						},
						"nwDeviceType": {
							"type": "string"
						},
						"airQuality": {
							"type": "string"
						},
						"rfTagName": {
							"type": "string"
						},
						"siteTagName": {
							"type": "string"
						},
						"platformId": {
							"type": "string"
						},
						"upTime": {
							"type": "string"
						},
						"memoryScore": {
							"type": "integer"
						},
						"powerSaveModeCapable": {
							"type": "string"
						},
						"powerProfile": {
							"type": "string"
						},
						"airQualityScore": {
							"type": "integer"
						},
						"location": {
							"type": "string"
						},
						"flexGroup": {
							"type": "string"
						},
						"lastBootTime": {
							"type": "number"
						},
						"powerCalendarProfile": {
							"type": "string"
						},
						"connectivityStatus": {
							"type": "integer"
						},
						"ledFlashEnabled": {
							"type": "string"
						},
						"cpuScore": {
							"type": "integer"
						},
						"avgTemperature": {
							"type": "number"
						},
						"maxTemperature": {
							"type": "number"
						},
						"haStatus": {
							"type": "string"
						},
						"osType": {
							"type": "string"
						},
						"timestamp": {
							"type": "integer"
						},
						"ipV6Addr": {
							"type": "string"
						},
						"ipV4Addr": {
							"type": "string"
						},
						"version": {
							"type": "string"
						},
						"apGroup": {
							"type": "string"
						},
						"redundancyMode": {
							"type": "string"
						},
						"featureFlagList": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"freeMbufScore": {
							"type": "integer"
						},
						"HALastResetReason": {
							"type": "string"
						},
						"wqeScore": {
							"type": "integer"
						},
						"redundancyPeerStateDerived": {
							"type": "string"
						},
						"freeTimerScore": {
							"type": "integer"
						},
						"redundancyPeerState": {
							"type": "string"
						},
						"redundancyStateDerived": {
							"type": "string"
						},
						"redundancyState": {
							"type": "string"
						},
						"packetPoolScore": {
							"type": "integer"
						},
						"freeTimer": {
							"type": "number"
						},
						"packetPool": {
							"type": "number"
						},
						"wqe": {
							"type": "number"
						},
						"freeMbuf": {
							"type": "number"
						}
					}
				}
			}
		},
		"DayZeroConfigPreviewResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"complete": {
							"type": "boolean"
						},
						"config": {
							"type": "string"
						},
						"error": {
							"type": "boolean"
						},
						"errorMessage": {
							"type": "string"
						},
						"expiredTime": {
							"type": "integer"
						},
						"rfProfile": {
							"type": "string"
						},
						"sensorProfile": {
							"type": "string"
						},
						"siteId": {
							"type": "string"
						},
						"startTime": {
							"type": "integer"
						},
						"taskId": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UpdateRestWebhookEventSubscription": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"subscriptionId": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"UpdateRestWebhookEventSubscriptionResponse": {
			"type": "object",
			"properties": {
				"statusUri": {
					"type": "string"
				}
			}
		},
		"DeleteDeviceByIdFromPnPResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"deviceInfo": {
					"type": "object",
					"properties": {
						"source": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"stack": {
							"type": "boolean"
						},
						"mode": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"location": {
							"type": "object",
							"properties": {
								"siteId": {
									"type": "string"
								},
								"address": {
									"type": "string"
								},
								"latitude": {
									"type": "string"
								},
								"longitude": {
									"type": "string"
								},
								"altitude": {
									"type": "string"
								}
							}
						},
						"description": {
							"type": "string"
						},
						"onbState": {
							"type": "string"
						},
						"authenticatedMicNumber": {
							"type": "string"
						},
						"authenticatedSudiSerialNo": {
							"type": "string"
						},
						"capabilitiesSupported": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"featuresSupported": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"cmState": {
							"type": "string"
						},
						"firstContact": {
							"type": "number"
						},
						"lastContact": {
							"type": "number"
						},
						"macAddress": {
							"type": "string"
						},
						"pid": {
							"type": "string"
						},
						"deviceSudiSerialNos": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"lastUpdateOn": {
							"type": "number"
						},
						"workflowId": {
							"type": "string"
						},
						"workflowName": {
							"type": "string"
						},
						"projectId": {
							"type": "string"
						},
						"projectName": {
							"type": "string"
						},
						"deviceType": {
							"type": "string"
						},
						"agentType": {
							"type": "string"
						},
						"imageVersion": {
							"type": "string"
						},
						"fileSystemList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"writeable": {
										"type": "boolean"
									},
									"freespace": {
										"type": "number"
									},
									"name": {
										"type": "string"
									},
									"readable": {
										"type": "boolean"
									},
									"size": {
										"type": "number"
									}
								}
							}
						},
						"pnpProfileList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"profileName": {
										"type": "string"
									},
									"discoveryCreated": {
										"type": "boolean"
									},
									"createdBy": {
										"type": "string"
									},
									"primaryEndpoint": {
										"type": "object",
										"properties": {
											"port": {
												"type": "number"
											},
											"protocol": {
												"type": "string"
											},
											"ipv4Address": {
												"type": "object",
												"properties": {}
											},
											"ipv6Address": {
												"type": "object",
												"properties": {}
											},
											"fqdn": {
												"type": "string"
											},
											"certificate": {
												"type": "string"
											}
										}
									},
									"secondaryEndpoint": {
										"type": "object",
										"properties": {
											"port": {
												"type": "number"
											},
											"protocol": {
												"type": "string"
											},
											"ipv4Address": {
												"type": "object",
												"properties": {}
											},
											"ipv6Address": {
												"type": "object",
												"properties": {}
											},
											"fqdn": {
												"type": "string"
											},
											"certificate": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"imageFile": {
							"type": "string"
						},
						"httpHeaders": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"key": {
										"type": "string"
									},
									"value": {
										"type": "string"
									}
								}
							}
						},
						"neighborLinks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"localInterfaceName": {
										"type": "string"
									},
									"localShortInterfaceName": {
										"type": "string"
									},
									"localMacAddress": {
										"type": "string"
									},
									"remoteInterfaceName": {
										"type": "string"
									},
									"remoteShortInterfaceName": {
										"type": "string"
									},
									"remoteMacAddress": {
										"type": "string"
									},
									"remoteDeviceName": {
										"type": "string"
									},
									"remotePlatform": {
										"type": "string"
									},
									"remoteVersion": {
										"type": "string"
									}
								}
							}
						},
						"lastSyncTime": {
							"type": "number"
						},
						"ipInterfaces": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"status": {
										"type": "string"
									},
									"macAddress": {
										"type": "string"
									},
									"ipv4Address": {
										"type": "object",
										"properties": {}
									},
									"ipv6AddressList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {}
										}
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"hostname": {
							"type": "string"
						},
						"authStatus": {
							"type": "string"
						},
						"stackInfo": {
							"type": "object",
							"properties": {
								"supportsStackWorkflows": {
									"type": "boolean"
								},
								"isFullRing": {
									"type": "boolean"
								},
								"stackMemberList": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"serialNumber": {
												"type": "string"
											},
											"state": {
												"type": "string"
											},
											"role": {
												"type": "string"
											},
											"macAddress": {
												"type": "string"
											},
											"pid": {
												"type": "string"
											},
											"licenseLevel": {
												"type": "string"
											},
											"licenseType": {
												"type": "string"
											},
											"sudiSerialNumber": {
												"type": "string"
											},
											"hardwareVersion": {
												"type": "string"
											},
											"stackNumber": {
												"type": "number"
											},
											"softwareVersion": {
												"type": "string"
											},
											"priority": {
												"type": "number"
											}
										}
									}
								},
								"stackRingProtocol": {
									"type": "string"
								},
								"validLicenseLevels": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"totalMemberCount": {
									"type": "number"
								}
							}
						},
						"reloadRequested": {
							"type": "boolean"
						},
						"addedOn": {
							"type": "number"
						},
						"siteId": {
							"type": "string"
						},
						"aaaCredentials": {
							"type": "object",
							"properties": {
								"password": {
									"type": "string"
								},
								"username": {
									"type": "string"
								}
							}
						},
						"userMicNumbers": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"userSudiSerialNos": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"addnMacAddrs": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"preWorkflowCliOuputs": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"cli": {
										"type": "string"
									},
									"cliOutput": {
										"type": "string"
									}
								}
							}
						},
						"tags": {
							"type": "object",
							"properties": {}
						},
						"sudiRequired": {
							"type": "boolean"
						},
						"smartAccountId": {
							"type": "string"
						},
						"virtualAccountId": {
							"type": "string"
						},
						"populateInventory": {
							"type": "boolean"
						},
						"siteName": {
							"type": "string"
						},
						"name": {
							"type": "string"
						}
					}
				},
				"systemResetWorkflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"systemWorkflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"workflow": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"lastupdateOn": {
							"type": "number"
						},
						"imageId": {
							"type": "string"
						},
						"currTaskIdx": {
							"type": "number"
						},
						"addedOn": {
							"type": "number"
						},
						"tasks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"state": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"currWorkItemIdx": {
										"type": "number"
									},
									"taskSeqNo": {
										"type": "number"
									},
									"endTime": {
										"type": "number"
									},
									"startTime": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"addToInventory": {
							"type": "boolean"
						},
						"instanceType": {
							"type": "string"
						},
						"endTime": {
							"type": "number"
						},
						"execTime": {
							"type": "number"
						},
						"startTime": {
							"type": "number"
						},
						"useState": {
							"type": "string"
						},
						"configId": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"runSummaryList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"details": {
								"type": "string"
							},
							"historyTaskInfo": {
								"type": "object",
								"properties": {
									"type": {
										"type": "string"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"outputStr": {
													"type": "string"
												},
												"endTime": {
													"type": "number"
												},
												"startTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												}
											}
										}
									},
									"timeTaken": {
										"type": "number"
									},
									"addnDetails": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"key": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									},
									"name": {
										"type": "string"
									}
								}
							},
							"errorFlag": {
								"type": "boolean"
							},
							"timestamp": {
								"type": "number"
							}
						}
					}
				},
				"workflowParameters": {
					"type": "object",
					"properties": {
						"topOfStackSerialNumber": {
							"type": "string"
						},
						"licenseLevel": {
							"type": "string"
						},
						"licenseType": {
							"type": "string"
						},
						"configList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"configParameters": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"key": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									},
									"configId": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"dayZeroConfig": {
					"type": "object",
					"properties": {
						"config": {
							"type": "string"
						}
					}
				},
				"dayZeroConfigPreview": {
					"type": "object",
					"properties": {}
				},
				"version": {
					"type": "number"
				},
				"tenantId": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceBriefNIO": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"role": {
					"type": "string"
				},
				"roleSource": {
					"type": "string"
				}
			}
		},
		"AddUserDefinedFieldToDeviceRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				}
			}
		},
		"AddUserDefinedFieldToDeviceResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeleteRoleAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						}
					}
				}
			}
		},
		"ChangeVirtualAccountRequest": {
			"type": "object",
			"properties": {
				"device_uuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"ChangeVirtualAccountResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				}
			}
		},
		"ClaimDeviceRequest": {
			"type": "object",
			"properties": {
				"configFileUrl": {
					"type": "string"
				},
				"configId": {
					"type": "string"
				},
				"deviceClaimList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"configList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"configId": {
											"type": "string"
										},
										"configParameters": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"key": {
														"type": "string"
													},
													"value": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							},
							"deviceId": {
								"type": "string"
							},
							"licenseLevel": {
								"type": "string"
							},
							"licenseType": {
								"type": "string"
							},
							"topOfStackSerialNumber": {
								"type": "string"
							}
						}
					}
				},
				"fileServiceId": {
					"type": "string"
				},
				"imageId": {
					"type": "string"
				},
				"imageUrl": {
					"type": "string"
				},
				"populateInventory": {
					"type": "boolean"
				},
				"projectId": {
					"type": "string"
				},
				"workflowId": {
					"type": "string"
				}
			}
		},
		"ClaimDeviceResponse": {
			"type": "object",
			"properties": {
				"jsonArrayResponse": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"jsonResponse": {
					"type": "object",
					"properties": {}
				},
				"message": {
					"type": "string"
				},
				"statusCode": {
					"type": "number"
				}
			}
		},
		"CiscoDNACenterNodesConfigurationSummaryResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"nodes": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"ntp": {
										"type": "object",
										"properties": {
											"servers": {
												"type": "array",
												"items": {
													"type": "string"
												}
											}
										}
									},
									"network": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"intra_cluster_link": {
													"type": "boolean"
												},
												"lacp_mode": {
													"type": "boolean"
												},
												"inet": {
													"type": "object",
													"properties": {
														"routes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														},
														"gateway": {
															"type": "string"
														},
														"dns_servers": {
															"type": "array",
															"items": {
																"type": "object"
															}
														},
														"netmask": {
															"type": "string"
														},
														"host_ip": {
															"type": "string"
														}
													}
												},
												"interface": {
													"type": "string"
												},
												"inet6": {
													"type": "object",
													"properties": {
														"host_ip": {
															"type": "string"
														},
														"netmask": {
															"type": "string"
														}
													}
												},
												"lacp_supported": {
													"type": "boolean"
												},
												"slave": {
													"type": "array",
													"items": {
														"type": "string"
													}
												}
											}
										}
									},
									"proxy": {
										"type": "object",
										"properties": {
											"https_proxy": {
												"type": "string"
											},
											"no_proxy": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"https_proxy_username": {
												"type": "string"
											},
											"http_proxy": {
												"type": "string"
											},
											"https_proxy_password": {
												"type": "string"
											}
										}
									},
									"platform": {
										"type": "object",
										"properties": {
											"vendor": {
												"type": "string"
											},
											"product": {
												"type": "string"
											},
											"serial": {
												"type": "string"
											}
										}
									},
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"DownloadReportContentResponse": {
			"type": "string"
		},
		"CiscoISEServerIntegrationStatusResponse": {
			"type": "object",
			"properties": {
				"aaaServerSettingId": {
					"type": "string"
				},
				"overallStatus": {
					"type": "string",
					"enum": [
						"INPROGRESS",
						"FAILED",
						"COMPLETE"
					]
				},
				"overallErrorMessage": {
					"type": "string"
				},
				"steps": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"stepId": {
								"type": "string"
							},
							"stepOrder": {
								"type": "string"
							},
							"stepName": {
								"type": "string"
							},
							"stepDescription": {
								"type": "string"
							},
							"stepStatus": {
								"type": "string",
								"enum": [
									"NOT_STARTED",
									"NOT_APPLICABLE",
									"FAILED",
									"COMPLETE",
									"IN_PROGRESS",
									"WAITING_USER_INPUT"
								]
							},
							"certAcceptedByUser": {
								"type": "boolean"
							},
							"stepTime": {
								"type": "integer"
							}
						}
					}
				}
			}
		},
		"GetComplianceStatusCountResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "number"
				}
			}
		},
		"UpdateApplicationPolicyQueuingProfileRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"clause": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "integer"
								},
								"type": {
									"type": "string",
									"enum": [
										"BANDWIDTH",
										"DSCP_CUSTOMIZATION"
									]
								},
								"isCommonBetweenAllInterfaceSpeeds": {
									"type": "boolean"
								},
								"interfaceSpeedBandwidthClauses": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"instanceId": {
												"type": "integer"
											},
											"interfaceSpeed": {
												"type": "string",
												"enum": [
													"ALL",
													"HUNDRED_GBPS",
													"TEN_GBPS",
													"ONE_GBPS",
													"HUNDRED_MBPS",
													"TEN_MBPS",
													"ONE_MBPS"
												]
											},
											"tcBandwidthSettings": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"instanceId": {
															"type": "integer"
														},
														"bandwidthPercentage": {
															"type": "integer"
														},
														"trafficClass": {
															"type": "string",
															"enum": [
																"BROADCAST_VIDEO",
																"REAL_TIME_INTERACTIVE",
																"VOIP_TELEPHONY",
																"SCAVENGER",
																"TRANSACTIONAL_DATA",
																"MULTIMEDIA_CONFERENCING",
																"NETWORK_CONTROL",
																"MULTIMEDIA_STREAMING",
																"BEST_EFFORT",
																"SIGNALING",
																"BULK_DATA",
																"OPS_ADMIN_MGMT"
															]
														}
													}
												}
											}
										}
									}
								},
								"tcDscpSettings": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"instanceId": {
												"type": "integer"
											},
											"dscp": {
												"type": "string"
											},
											"trafficClass": {
												"type": "string",
												"enum": [
													"BROADCAST_VIDEO",
													"REAL_TIME_INTERACTIVE",
													"VOIP_TELEPHONY",
													"SCAVENGER",
													"TRANSACTIONAL_DATA",
													"MULTIMEDIA_CONFERENCING",
													"NETWORK_CONTROL",
													"MULTIMEDIA_STREAMING",
													"BEST_EFFORT",
													"SIGNALING",
													"BULK_DATA",
													"OPS_ADMIN_MGMT"
												]
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"UpdateApplicationPolicyQueuingProfileResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ImportExportClientContext": {
			"type": "object",
			"properties": {
				"auditLog": {
					"type": "object",
					"properties": {
						"children": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"entitiesCount": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"key": {
										"type": "integer"
									}
								}
							}
						},
						"entityName": {
							"type": "string"
						},
						"entityType": {
							"type": "string",
							"enum": [
								"ROOT",
								"SITE",
								"BUILDING",
								"FLOOR",
								"ACCESS_POINT",
								"PLANNED_ACCESS_POINT",
								"CALIBRATION_MODEL",
								"OUTDOOR_AREA",
								"SENSOR",
								"OBSTACLE_TYPES",
								"OBSTACLE_TYPE",
								"CSV"
							]
						},
						"errorEntitiesCount": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"key": {
										"type": "integer"
									}
								}
							}
						},
						"errors": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"message": {
										"type": "string"
									}
								}
							}
						},
						"infos": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"message": {
										"type": "string"
									}
								}
							}
						},
						"matchingEntitiesCount": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"key": {
										"type": "integer"
									}
								}
							}
						},
						"subTasksRootTaskId": {
							"type": "string"
						},
						"successfullyImportedFloors": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"warnings": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"message": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"status": {
					"type": "string",
					"enum": [
						"UNKNOWN",
						"DEFINED",
						"UNDERWAY",
						"COMPLETED",
						"CANCELLED"
					]
				},
				"uuid": {
					"type": "object",
					"properties": {
						"leastSignificantBits": {
							"type": "integer"
						},
						"mostSignificantBits": {
							"type": "integer"
						}
					}
				}
			}
		},
		"GetRestWebhookEventSubscriptionsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"version": {
						"type": "string"
					},
					"subscriptionId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										},
										"instanceId": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"description": {
											"type": "string"
										},
										"url": {
											"type": "string"
										},
										"basePath": {
											"type": "string"
										},
										"resource": {
											"type": "string"
										},
										"method": {
											"type": "string"
										},
										"trustCert": {
											"type": "string"
										},
										"headers": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"string": {
														"type": "string"
													}
												}
											}
										},
										"queryParams": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"string": {
														"type": "string"
													}
												}
											}
										},
										"pathParams": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"string": {
														"type": "string"
													}
												}
											}
										},
										"body": {
											"type": "string"
										},
										"connectTimeout": {
											"type": "string"
										},
										"readTimeout": {
											"type": "string"
										}
									}
								},
								"connectorType": {
									"type": "string"
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"others": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					},
					"isPrivate": {
						"type": "string"
					},
					"tenantId": {
						"type": "string"
					}
				}
			}
		},
		"FunctionalCapabilityListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"deviceId": {
								"type": "string"
							},
							"functionalCapability": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"attributeInfo": {
											"type": "object",
											"properties": {}
										},
										"functionDetails": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"attributeInfo": {
														"type": "object",
														"properties": {}
													},
													"id": {
														"type": "string"
													},
													"propertyName": {
														"type": "string"
													},
													"stringValue": {
														"type": "string"
													}
												}
											}
										},
										"functionName": {
											"type": "string"
										},
										"functionOpState": {
											"type": "string",
											"enum": [
												"UNKNOWN",
												"NOT_APPLICABLE",
												"DISABLED",
												"ENABLED"
											]
										},
										"id": {
											"type": "string"
										}
									}
								}
							},
							"id": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetEventSubscriptionsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"version": {
						"type": "string"
					},
					"subscriptionId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"subscriptionEndpoints": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"instanceId": {
									"type": "string"
								},
								"subscriptionDetails": {
									"type": "object",
									"properties": {
										"connectorType": {
											"type": "string"
										},
										"instanceId": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"description": {
											"type": "string"
										},
										"url": {
											"type": "string"
										},
										"basePath": {
											"type": "string"
										},
										"resource": {
											"type": "string"
										},
										"method": {
											"type": "string"
										},
										"trustCert": {
											"type": "string"
										},
										"headers": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"string": {
														"type": "string"
													}
												}
											}
										},
										"queryParams": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"string": {
														"type": "string"
													}
												}
											}
										},
										"pathParams": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"string": {
														"type": "string"
													}
												}
											}
										},
										"body": {
											"type": "string"
										},
										"connectTimeout": {
											"type": "string"
										},
										"readTimeout": {
											"type": "string"
										}
									}
								},
								"connectorType": {
									"type": "string"
								}
							}
						}
					},
					"filter": {
						"type": "object",
						"properties": {
							"eventIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"others": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"domainsSubdomains": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"domain": {
											"type": "string"
										},
										"subDomains": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							},
							"types": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"severities": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"sources": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					},
					"isPrivate": {
						"type": "string"
					},
					"tenantId": {
						"type": "string"
					}
				}
			}
		},
		"GetAdvisoryIDsPerDeviceResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"deviceId": {
								"type": "string"
							},
							"advisoryIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeviceLicenseDetailsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"device_uuid": {
								"type": "string"
							},
							"site": {
								"type": "string"
							},
							"model": {
								"type": "string"
							},
							"license_mode": {
								"type": "string"
							},
							"is_license_expired": {
								"type": "boolean"
							},
							"software_version": {
								"type": "string"
							},
							"network_license": {
								"type": "string"
							},
							"evaluation_license_expiry": {
								"type": "string"
							},
							"device_name": {
								"type": "string"
							},
							"device_type": {
								"type": "string"
							},
							"dna_level": {
								"type": "string"
							},
							"virtual_account_name": {
								"type": "string"
							},
							"ip_address": {
								"type": "string"
							},
							"mac_address": {
								"type": "string"
							},
							"sntc_status": {
								"type": "string"
							},
							"feature_license": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"has_sup_cards": {
								"type": "boolean"
							},
							"udi": {
								"type": "string"
							},
							"stacked_devices": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"mac_address": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"role": {
											"type": "string"
										},
										"serial_number": {
											"type": "string"
										}
									}
								}
							},
							"is_stacked_device": {
								"type": "boolean"
							},
							"access_points": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ap_type": {
											"type": "string"
										},
										"count": {
											"type": "string"
										}
									}
								}
							},
							"chassis_details": {
								"type": "object",
								"properties": {
									"board_serial_number": {
										"type": "string"
									},
									"modules": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"module_type": {
													"type": "string"
												},
												"module_name": {
													"type": "string"
												},
												"serial_number": {
													"type": "string"
												},
												"id": {
													"type": "string"
												}
											}
										}
									},
									"supervisor_cards": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"serial_number": {
													"type": "string"
												},
												"supervisor_card_type": {
													"type": "string"
												},
												"status": {
													"type": "string"
												}
											}
										}
									},
									"port": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			}
		},
		"TaskDTOListResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"additionalStatusURL": {
								"type": "string"
							},
							"data": {
								"type": "string"
							},
							"endTime": {
								"type": "string"
							},
							"errorCode": {
								"type": "string"
							},
							"errorKey": {
								"type": "string"
							},
							"failureReason": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"isError": {
								"type": "boolean"
							},
							"lastUpdate": {
								"type": "string"
							},
							"operationIdList": {
								"type": "object"
							},
							"parentId": {
								"type": "string"
							},
							"progress": {
								"type": "string"
							},
							"rootId": {
								"type": "string"
							},
							"serviceType": {
								"type": "string"
							},
							"startTime": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"version": {
								"type": "integer"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"AcceptCiscoISEServerCertificateForCiscoISEServerIntegrationRequest": {
			"type": "object",
			"properties": {
				"isCertAcceptedByUser": {
					"type": "boolean"
				}
			}
		},
		"AcceptCiscoISEServerCertificateForCiscoISEServerIntegrationResponse": {
			"type": "object",
			"properties": {}
		},
		"LANAutomationStopRequest": {
			"type": "string"
		},
		"LANAutomationStopResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"errorCode": {
							"type": "string"
						},
						"message": {
							"type": "string"
						},
						"detail": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetComplianceStatusResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"deviceUuid": {
								"type": "string"
							},
							"complianceStatus": {
								"type": "string"
							},
							"message": {
								"type": "string"
							},
							"scheduleTime": {
								"type": "number"
							},
							"lastUpdateTime": {
								"type": "number"
							}
						}
					}
				}
			}
		},
		"DisassociateResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "object",
							"properties": {}
						},
						"url": {
							"type": "string"
						}
					}
				}
			}
		},
		"TagMembersResult": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"instanceUuid": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"ApplicationSets": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"scalableGroupType": {
						"type": "string"
					},
					"defaultBusinessRelevance": {
						"type": "string",
						"enum": [
							"BUSINESS_RELEVANT",
							"BUSINESS_IRRELEVANT",
							"DEFAULT"
						]
					},
					"namespace": {
						"type": "string"
					},
					"qualifier": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"scalableGroupExternalHandle": {
						"type": "string"
					}
				}
			}
		},
		"ExportDeviceDTO": {
			"type": "object",
			"properties": {
				"deviceUuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"operationEnum": {
					"type": "string",
					"enum": [
						"CREDENTIALDETAILS",
						"DEVICEDETAILS"
					]
				},
				"parameters": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"password": {
					"type": "string"
				}
			}
		},
		"ModuleListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"assemblyNumber": {
								"type": "string"
							},
							"assemblyRevision": {
								"type": "string"
							},
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"containmentEntity": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"entityPhysicalIndex": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"isFieldReplaceable": {
								"type": "string",
								"enum": [
									"UNKNOWN",
									"TRUE",
									"FALSE",
									"NOT_APPLICABLE"
								]
							},
							"isReportingAlarmsAllowed": {
								"type": "string",
								"enum": [
									"UNKNOWN",
									"TRUE",
									"FALSE",
									"NOT_APPLICABLE"
								]
							},
							"manufacturer": {
								"type": "string"
							},
							"moduleIndex": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"operationalStateCode": {
								"type": "string"
							},
							"partNumber": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"vendorEquipmentType": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UpdateSyslogConfiguration": {
			"type": "object",
			"properties": {
				"configId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"host": {
					"type": "string"
				},
				"protocol": {
					"type": "string",
					"enum": [
						"UDP",
						"TCP"
					]
				},
				"port": {
					"type": "string"
				}
			}
		},
		"UpdateSyslogDestinationResponse": {
			"type": "object",
			"properties": {
				"errorMessage": {
					"type": "object",
					"properties": {
						"errors": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"apiStatus": {
					"type": "string"
				},
				"statusMessage": {
					"type": "string"
				}
			}
		},
		"LicenseTermDetailsResponse": {
			"type": "object",
			"properties": {
				"license_details": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"model": {
								"type": "string"
							},
							"virtual_account_name": {
								"type": "string"
							},
							"license_term_start_date": {
								"type": "string"
							},
							"license_term_end_date": {
								"type": "string"
							},
							"dna_level": {
								"type": "string"
							},
							"purchased_dna_license_count": {
								"type": "string"
							},
							"is_license_expired": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"TagListResult": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"systemTag": {
								"type": "boolean"
							},
							"description": {
								"type": "string"
							},
							"dynamicRules": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"memberType": {
											"type": "string"
										},
										"rules": {
											"type": "object",
											"properties": {
												"values": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"items": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"operation": {
													"type": "string"
												},
												"name": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									}
								}
							},
							"name": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"GetEoXSummaryResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"hardwareCount": {
							"type": "integer"
						},
						"softwareCount": {
							"type": "integer"
						},
						"moduleCount": {
							"type": "integer"
						},
						"totalCount": {
							"type": "integer"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"AssignDevicesToSiteRequest": {
			"type": "object",
			"properties": {
				"device": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ip": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"AssignDevicesToSiteResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetDeviceHistoryResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"timestamp": {
								"type": "number"
							},
							"details": {
								"type": "string"
							},
							"historyTaskInfo": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"timeTaken": {
										"type": "number"
									},
									"workItemList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"state": {
													"type": "string"
												},
												"command": {
													"type": "string"
												},
												"startTime": {
													"type": "number"
												},
												"endTime": {
													"type": "number"
												},
												"timeTaken": {
													"type": "number"
												},
												"outputStr": {
													"type": "string"
												}
											}
										}
									},
									"addnDetails": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"key": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									}
								}
							},
							"errorFlag": {
								"type": "boolean"
							}
						}
					}
				},
				"statusCode": {
					"type": "number"
				}
			}
		},
		"TemplateVersionRequestDTO": {
			"type": "object",
			"properties": {
				"comments": {
					"type": "string"
				},
				"templateId": {
					"type": "string"
				}
			}
		},
		"CommandRunnerDTO": {
			"type": "object",
			"properties": {
				"commands": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"type": "string"
				},
				"deviceUuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"name": {
					"type": "string"
				},
				"timeout": {
					"type": "integer"
				}
			}
		},
		"GetApplicationPolicyQueuingProfileCountResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "integer"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CiscoDNACenterPackagesSummaryResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"version": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetDeviceCountResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "number"
				}
			}
		},
		"CustomPromptPOSTAPIRequest": {
			"type": "object",
			"properties": {
				"usernamePrompt": {
					"type": "string"
				},
				"passwordPrompt": {
					"type": "string"
				}
			}
		},
		"CustomPromptPOSTAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UpdateUserAPIRequest": {
			"type": "object",
			"properties": {
				"firstName": {
					"type": "string"
				},
				"lastName": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"userId": {
					"type": "string"
				},
				"roleList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"UpdateUserAPIResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						}
					}
				}
			}
		},
		"GetDevicesPerAdvisoryResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"WirelessInfoResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"adminEnabledPorts": {
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						"apGroupName": {
							"type": "string"
						},
						"deviceId": {
							"type": "string"
						},
						"ethMacAddress": {
							"type": "string"
						},
						"flexGroupName": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"lagModeEnabled": {
							"type": "boolean"
						},
						"netconfEnabled": {
							"type": "boolean"
						},
						"wirelessLicenseInfo": {
							"type": "string",
							"enum": [
								"ADVANTAGE",
								"ESSENTIALS"
							]
						},
						"wirelessPackageInstalled": {
							"type": "boolean"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetEoXDetailsPerDeviceResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"deviceId": {
							"type": "string"
						},
						"alertCount": {
							"type": "integer"
						},
						"eoxDetails": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"bulletinHeadline": {
										"type": "string"
									},
									"bulletinNumber": {
										"type": "string"
									},
									"bulletinURL": {
										"type": "string"
									},
									"endOfHardwareNewServiceAttachmentDate": {
										"type": "integer"
									},
									"endOfHardwareServiceContractRenewalDate": {
										"type": "integer"
									},
									"endOfLastHardwareShipDate": {
										"type": "integer"
									},
									"endOfLifeDate": {
										"type": "integer"
									},
									"endOfLifeExternalAnnouncementDate": {
										"type": "integer"
									},
									"endOfSaleDate": {
										"type": "integer"
									},
									"endOfSignatureReleasesDate": {
										"type": "integer"
									},
									"endOfSoftwareVulnerabilityOrSecuritySupportDate": {
										"type": "integer"
									},
									"endOfSoftwareVulnerabilityOrSecuritySupportDateHw": {
										"type": "integer"
									},
									"endOfSoftwareMaintenanceReleasesDate": {
										"type": "integer"
									},
									"eoxAlertType": {
										"type": "string"
									},
									"lastDateOfSupport": {
										"type": "integer"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"scanStatus": {
							"type": "string"
						},
						"comments": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"lastScanTime": {
							"type": "integer"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ActivateDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"activateLowerImageVersion": {
						"type": "boolean"
					},
					"deviceUpgradeMode": {
						"type": "string"
					},
					"deviceUuid": {
						"type": "string"
					},
					"distributeIfNeeded": {
						"type": "boolean"
					},
					"imageUuidList": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"smuImageUuidList": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			}
		},
		"GetAccessPointConfigurationTaskResultResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"instanceUuid": {
						"type": "object",
						"properties": {}
					},
					"instanceId": {
						"type": "number"
					},
					"authEntityId": {
						"type": "object",
						"properties": {}
					},
					"displayName": {
						"type": "string"
					},
					"authEntityClass": {
						"type": "object",
						"properties": {}
					},
					"instanceTenantId": {
						"type": "string"
					},
					"_orderedListOEIndex": {
						"type": "number"
					},
					"_orderedListOEAssocName": {
						"type": "object",
						"properties": {}
					},
					"_creationOrderIndex": {
						"type": "number"
					},
					"_isBeingChanged": {
						"type": "boolean"
					},
					"deployPending": {
						"type": "string"
					},
					"instanceCreatedOn": {
						"type": "object",
						"properties": {}
					},
					"instanceUpdatedOn": {
						"type": "object",
						"properties": {}
					},
					"changeLogList": {
						"type": "object",
						"properties": {}
					},
					"instanceOrigin": {
						"type": "object",
						"properties": {}
					},
					"lazyLoadedEntities": {
						"type": "object",
						"properties": {}
					},
					"instanceVersion": {
						"type": "number"
					},
					"apName": {
						"type": "string"
					},
					"controllerName": {
						"type": "string"
					},
					"locationHeirarchy": {
						"type": "string"
					},
					"macAddress": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"statusDetails": {
						"type": "string"
					},
					"internalKey": {
						"type": "object",
						"properties": {
							"type": {
								"type": "string"
							},
							"id": {
								"type": "number"
							},
							"longType": {
								"type": "string"
							},
							"url": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"ExportMapArchiveRequest": {
			"type": "string"
		},
		"GetStatusAPIForEventsResponse": {
			"type": "object",
			"properties": {
				"errorMessage": {
					"type": "object",
					"properties": {}
				},
				"apiStatus": {
					"type": "string"
				},
				"statusMessage": {
					"type": "string"
				}
			}
		},
		"GetDeviceValuesThatMatchFullyOrPartiallyAnAttributeResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetComplianceDetailResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"complianceType": {
								"type": "string"
							},
							"lastSyncTime": {
								"type": "string"
							},
							"deviceUuid": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							},
							"status": {
								"type": "string"
							},
							"category": {
								"type": "string"
							},
							"lastUpdateTime": {
								"type": "string"
							},
							"state": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"GlobalCredentialListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"comments": {
								"type": "string"
							},
							"credentialType": {
								"type": "string",
								"enum": [
									"GLOBAL",
									"APP"
								]
							},
							"description": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetNetworkVResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"instanceType": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"namespace": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"key": {
								"type": "string"
							},
							"version": {
								"type": "integer"
							},
							"value": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"groupUuid": {
								"type": "string"
							},
							"inheritedGroupUuid": {
								"type": "string"
							},
							"inheritedGroupName": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"EditAuthenticationAndPolicyServerAccessConfigurationRequest": {
			"type": "object",
			"properties": {
				"authenticationPort": {
					"type": "string"
				},
				"accountingPort": {
					"type": "string"
				},
				"ciscoIseDtos": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"description": {
								"type": "string"
							},
							"fqdn": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"sshkey": {
								"type": "string"
							},
							"ipAddress": {
								"type": "string"
							},
							"subscriberName": {
								"type": "string"
							},
							"userName": {
								"type": "string"
							}
						}
					}
				},
				"ipAddress": {
					"type": "string"
				},
				"pxgridEnabled": {
					"type": "boolean"
				},
				"useDnacCertForPxgrid": {
					"type": "boolean"
				},
				"isIseEnabled": {
					"type": "boolean"
				},
				"port": {
					"type": "string"
				},
				"protocol": {
					"type": "string",
					"enum": [
						"TACACS",
						"RADIUS",
						"RADIUS_TACACS"
					]
				},
				"retries": {
					"type": "string"
				},
				"role": {
					"type": "string"
				},
				"sharedSecret": {
					"type": "string"
				},
				"timeoutSeconds": {
					"type": "string"
				},
				"encryptionScheme": {
					"type": "string",
					"enum": [
						"KEYWRAP",
						"RADSEC"
					]
				},
				"messageKey": {
					"type": "string"
				},
				"encryptionKey": {
					"type": "string"
				},
				"externalCiscoIseIpAddrDtos": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"externalCiscoIseIpAddresses": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"externalIpAddress": {
											"type": "string"
										}
									}
								}
							},
							"type": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"EditAuthenticationAndPolicyServerAccessConfigurationResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DnacPlaformIssueResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"totalCount": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"issueId": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"siteId": {
								"type": "string"
							},
							"deviceId": {
								"type": "string"
							},
							"deviceRole": {
								"type": "string"
							},
							"aiDriven": {
								"type": "string"
							},
							"clientMac": {
								"type": "string"
							},
							"issue_occurence_count": {
								"type": "integer"
							},
							"status": {
								"type": "string"
							},
							"priority": {
								"type": "string"
							},
							"category": {
								"type": "string"
							},
							"last_occurence_time": {
								"type": "integer"
							}
						}
					}
				}
			}
		},
		"GetRestWebhookSubscriptionDetailsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"instanceId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"connectorType": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"method": {
						"type": "string"
					},
					"trustCert": {
						"type": "string"
					},
					"headers": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"value": {
									"type": "string"
								}
							}
						}
					},
					"queryParams": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"pathParams": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			}
		},
		"SystemPerformanceAPIResponse": {
			"type": "object",
			"properties": {
				"hostName": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"kpis": {
					"type": "object",
					"properties": {
						"cpu": {
							"type": "object",
							"properties": {
								"units": {
									"type": "string"
								},
								"utilization": {
									"type": "string"
								}
							}
						},
						"memory": {
							"type": "object",
							"properties": {
								"units": {
									"type": "string"
								},
								"utilization": {
									"type": "string"
								}
							}
						},
						"network tx_rate": {
							"type": "object",
							"properties": {
								"units": {
									"type": "string"
								},
								"utilization": {
									"type": "string"
								}
							}
						},
						"network rx_rate": {
							"type": "object",
							"properties": {
								"units": {
									"type": "string"
								},
								"utilization": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"ImportsTheProjectsProvidedRequest": {
			"type": "string"
		},
		"POSTREQUEST": {
			"type": "object",
			"properties": {
				"triggerFull": {
					"type": "boolean"
				},
				"categories": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"deviceUuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"RunComplianceResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "object",
							"properties": {}
						},
						"url": {
							"type": "string"
						}
					}
				}
			}
		},
		"GetSNMPDestinationResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"version": {
						"type": "string"
					},
					"tenantId": {
						"type": "string"
					},
					"configId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"ipAddress": {
						"type": "string"
					},
					"port": {
						"type": "integer"
					},
					"snmpVersion": {
						"type": "string"
					},
					"community": {
						"type": "string"
					},
					"userName": {
						"type": "string"
					},
					"snmpMode": {
						"type": "string"
					},
					"snmpAuthType": {
						"type": "string"
					},
					"authPassword": {
						"type": "string"
					},
					"snmpPrivacyType": {
						"type": "string"
					},
					"privacyPassword": {
						"type": "string"
					}
				}
			}
		},
		"UpdateGlobalPoolRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"ippool": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"ipPoolName": {
										"type": "string"
									},
									"gateway": {
										"type": "string"
									},
									"dhcpServerIps": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"dnsServerIps": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"id": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"UpdateGlobalPoolResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetApplicationsCountResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "string"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeletePortAssignmentForAccessPointInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"RetrieveRFProfilesResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"parentProfileA": {
								"type": "string"
							},
							"parentProfileB": {
								"type": "string"
							},
							"enableARadioType": {
								"type": "boolean"
							},
							"enableBRadioType": {
								"type": "boolean"
							},
							"enableCRadioType": {
								"type": "boolean"
							},
							"channelWidth": {
								"type": "string"
							},
							"aRadioChannels": {
								"type": "string"
							},
							"bRadioChannels": {
								"type": "string"
							},
							"cRadioChannels": {
								"type": "string"
							},
							"dataRatesA": {
								"type": "string"
							},
							"dataRatesB": {
								"type": "string"
							},
							"dataRatesC": {
								"type": "string"
							},
							"mandatoryDataRatesA": {
								"type": "string"
							},
							"mandatoryDataRatesB": {
								"type": "string"
							},
							"mandatoryDataRatesC": {
								"type": "string"
							},
							"enableCustom": {
								"type": "boolean"
							},
							"minPowerLevelA": {
								"type": "string"
							},
							"minPowerLevelB": {
								"type": "string"
							},
							"minPowerLevelC": {
								"type": "string"
							},
							"maxPowerLevelA": {
								"type": "string"
							},
							"maxPowerLevelB": {
								"type": "string"
							},
							"powerThresholdV1A": {
								"type": "integer"
							},
							"powerThresholdV1B": {
								"type": "integer"
							},
							"powerThresholdV1C": {
								"type": "integer"
							},
							"rxSopThresholdA": {
								"type": "string"
							},
							"rxSopThresholdB": {
								"type": "string"
							},
							"rxSopThresholdC": {
								"type": "string"
							},
							"defaultRfProfile": {
								"type": "boolean"
							},
							"enableBrownField": {
								"type": "boolean"
							}
						}
					}
				}
			}
		},
		"DeleteGlobalIPPoolResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetDeviceInfoFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"roles": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"siteHierarchy": {
					"type": "string"
				}
			}
		},
		"UpdateNFVProfileRequest": {
			"type": "object",
			"properties": {
				"device": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"deviceTag": {
								"type": "string"
							},
							"directInternetAccessForFirewall": {
								"type": "boolean"
							},
							"services": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"serviceType": {
											"type": "string",
											"enum": [
												"isr",
												"vedge",
												"waas",
												"asa",
												"ngfw",
												"paloalto",
												"fortinet",
												"checkpoint",
												"riverbed",
												"silverpeak",
												"linux"
											]
										},
										"profileType": {
											"type": "string",
											"enum": [
												"ASAv5",
												"ASAv30",
												"ISRv-mini",
												"ISRv-medium",
												"ISRv-small",
												"riverbed-small",
												"sp-small",
												"rehel7-medium",
												"vEdge-samll",
												"vwaas-200-original",
												"vwaas-150-original",
												"vWASS-6000R-Resized",
												"vWASS-1300-Original",
												"vWASS-50000-Original",
												"vCM-100",
												"vWASS-6000R-Original",
												"vWASS-750-Original",
												"vWASS-1300-Resized",
												"vWASS-2500-Original",
												"vCM-500",
												"vCM-2000",
												"vWASS-6000-Resized",
												"vWASS-6000-Original",
												"vCM-1000",
												"vWASS-750-Resized",
												"vWASS-200-Resized",
												"vWASS-12000-Original",
												"vWASS-150-Resized",
												"vWASS-12000-Resized",
												"vWASS-2500-Resized",
												"vWASS-50000-Resized"
											]
										},
										"serviceName": {
											"type": "string"
										},
										"imageName": {
											"type": "string"
										},
										"vNicMapping": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"networkType": {
														"type": "string",
														"enum": [
															"wan-net",
															"wan2-net",
															"lan-net",
															"mgmt-net",
															"service-net",
															"GEO-0",
															"GEO-1",
															"GEO-2-1",
															"GEO-2-2",
															"GEO-3-1",
															"GEO-3-2",
															"SRIOV-1",
															"SRIOV-2",
															"SRIOV-3",
															"SRIOV-4",
															"SRIOV-5",
															"SRIOV-6"
														]
													},
													"assignIpAddressToNetwork": {
														"type": "string"
													}
												}
											}
										},
										"firewallMode": {
											"type": "string",
											"enum": [
												"routed",
												"transparent"
											]
										}
									}
								}
							},
							"customNetworks": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"networkName": {
											"type": "string"
										},
										"servicesToConnect": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"serviceName": {
														"type": "string"
													}
												}
											}
										},
										"connectionType": {
											"type": "string",
											"enum": [
												"wan-net",
												"wan2-net",
												"lan-net",
												"mgmt-net",
												"service-net",
												"GEO-2-1",
												"GEO-2-2",
												"GEO-3-1",
												"GEO-3-2",
												"SRIOV-1",
												"SRIOV-2",
												"SRIOV-3",
												"SRIOV-4",
												"SRIOV-5",
												"SRIOV-6"
											]
										},
										"vlanMode": {
											"type": "string",
											"enum": [
												"trunk",
												"Access"
											]
										},
										"vlanId": {
											"type": "number"
										}
									}
								}
							},
							"vlanForL2": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"vlanType": {
											"type": "string",
											"enum": [
												"access",
												"trunk"
											]
										},
										"vlanId": {
											"type": "number"
										},
										"vlanDescription": {
											"type": "string"
										}
									}
								}
							},
							"customTemplate": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"deviceType": {
											"type": "string",
											"enum": [
												"Cisco 5400 Enterprise Network Compute System",
												"Cisco Integrated Services Virtual Router",
												"Cisco Adaptive Security Virtual Appliance (ASAv)",
												"NFVIS",
												"ASAV"
											]
										},
										"template": {
											"type": "string"
										},
										"templateType": {
											"type": "string",
											"enum": [
												"Onboarding Template(s)",
												"Day-N-Template(s)"
											]
										}
									}
								}
							},
							"currentDeviceTag": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"UpdateNFVProfileResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetTransitPeerNetworkInfoResponse": {
			"type": "object",
			"properties": {
				"transitPeerNetworkName": {
					"type": "string"
				},
				"transitPeerNetworkType": {
					"type": "string",
					"enum": [
						"ip_transit",
						"sda_transit_with_pub_sub",
						"sda_transit_with_lisp_bgp"
					]
				},
				"ipTransitSettings": {
					"type": "object",
					"properties": {
						"routingProtocolName": {
							"type": "string",
							"enum": [
								"BGP"
							]
						},
						"autonomousSystemNumber": {
							"type": "string"
						}
					}
				},
				"sdaTransitSettings": {
					"type": "object",
					"properties": {
						"transitControlPlaneSettings": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"siteNameHierarchy": {
										"type": "string"
									},
									"deviceManagementIpAddress": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed"
					]
				},
				"description": {
					"type": "string"
				}
			}
		},
		"DeleteEdgeDeviceFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"AddIPPoolInSDAVirtualNetworkRequest": {
			"type": "object",
			"properties": {
				"siteNameHierarchy": {
					"type": "string"
				},
				"virtualNetworkName": {
					"type": "string"
				},
				"isLayer2Only": {
					"type": "boolean"
				},
				"ipPoolName": {
					"type": "string"
				},
				"vlanId": {
					"type": "string"
				},
				"vlanName": {
					"type": "string"
				},
				"autoGenerateVlanName": {
					"type": "boolean"
				},
				"trafficType": {
					"type": "string",
					"enum": [
						"Data",
						"Voice"
					]
				},
				"scalableGroupName": {
					"type": "string"
				},
				"isL2FloodingEnabled": {
					"type": "boolean"
				},
				"isThisCriticalPool": {
					"type": "boolean"
				},
				"isWirelessPool": {
					"type": "boolean"
				},
				"isIpDirectedBroadcast": {
					"type": "boolean"
				},
				"isCommonPool": {
					"type": "boolean"
				},
				"isBridgeModeVm": {
					"type": "boolean"
				},
				"poolType": {
					"type": "string",
					"enum": [
						"AP",
						"Extended"
					]
				}
			}
		},
		"AddIPPoolInSDAVirtualNetworkResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetNFVProfileResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"profileName": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"device": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"deviceType": {
											"type": "string"
										},
										"deviceTag": {
											"type": "string"
										},
										"serviceProviderProfile": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"linkType": {
														"type": "string"
													},
													"connect": {
														"type": "boolean"
													},
													"connectDefaultGatewayOnWan": {
														"type": "boolean"
													},
													"serviceProvider": {
														"type": "string"
													}
												}
											}
										},
										"directInternetAccessForFirewall": {
											"type": "boolean"
										},
										"services": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"serviceType": {
														"type": "string"
													},
													"profileType": {
														"type": "string"
													},
													"serviceName": {
														"type": "string"
													},
													"imageName": {
														"type": "string"
													},
													"vNicMapping": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"networkType": {
																	"type": "string"
																},
																"assignIpAddressToNetwork": {
																	"type": "boolean"
																}
															}
														}
													},
													"firewallMode": {
														"type": "string"
													}
												}
											}
										},
										"customNetworks": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"networkName": {
														"type": "string"
													},
													"servicesToConnect": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"serviceName": {
																	"type": "string"
																}
															}
														}
													},
													"connectionType": {
														"type": "string"
													},
													"vlanMode": {
														"type": "string"
													},
													"vlanId": {
														"type": "string"
													}
												}
											}
										},
										"vlanForL2": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"vlanType": {
														"type": "string"
													},
													"vlanId": {
														"type": "string"
													},
													"vlanDescription": {
														"type": "string"
													}
												}
											}
										},
										"customTemplate": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"deviceType": {
														"type": "string"
													},
													"template": {
														"type": "string"
													},
													"templateType": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"CreateSensorTestTemplateRequest": {
			"type": "object",
			"properties": {
				"ssids": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ssid": {
								"type": "string"
							},
							"profileName": {
								"type": "string"
							},
							"authType": {
								"type": "string"
							},
							"thirdParty": {
								"type": "object",
								"properties": {
									"selected": {
										"type": "boolean"
									}
								}
							},
							"psk": {
								"type": "string"
							},
							"tests": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"config": {
											"type": "array",
											"items": {
												"type": "object"
											}
										}
									}
								}
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"qosPolicy": {
								"type": "string"
							}
						}
					}
				},
				"name": {
					"type": "string"
				},
				"connection": {
					"type": "string"
				},
				"apCoverage": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"bands": {
								"type": "string"
							},
							"numberOfApsToTest": {
								"type": "string"
							},
							"rssiThreshold": {
								"type": "string"
							}
						}
					}
				},
				"modelVersion": {
					"type": "integer"
				}
			}
		},
		"CreateSensorTestTemplateResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"modelVersion": {
							"type": "integer"
						},
						"startTime": {
							"type": "number"
						},
						"lastModifiedTime": {
							"type": "number"
						},
						"numAssociatedSensor": {
							"type": "number"
						},
						"location": {
							"type": "object",
							"properties": {}
						},
						"siteHierarchy": {
							"type": "object",
							"properties": {}
						},
						"status": {
							"type": "string"
						},
						"connection": {
							"type": "string"
						},
						"frequency": {
							"type": "object",
							"properties": {}
						},
						"rssiThreshold": {
							"type": "integer"
						},
						"numNeighborAPThreshold": {
							"type": "integer"
						},
						"scheduleInDays": {
							"type": "number"
						},
						"wlans": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"ssids": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"bands": {
										"type": "object",
										"properties": {}
									},
									"ssid": {
										"type": "string"
									},
									"profileName": {
										"type": "string"
									},
									"authType": {
										"type": "string"
									},
									"authTypeRcvd": {
										"type": "object",
										"properties": {}
									},
									"psk": {
										"type": "string"
									},
									"username": {
										"type": "object",
										"properties": {}
									},
									"password": {
										"type": "object",
										"properties": {}
									},
									"eapMethod": {
										"type": "object",
										"properties": {}
									},
									"scep": {
										"type": "boolean"
									},
									"authProtocol": {
										"type": "object",
										"properties": {}
									},
									"certfilename": {
										"type": "object",
										"properties": {}
									},
									"certxferprotocol": {
										"type": "string"
									},
									"certstatus": {
										"type": "string"
									},
									"certpassphrase": {
										"type": "object",
										"properties": {}
									},
									"certdownloadurl": {
										"type": "object",
										"properties": {}
									},
									"numAps": {
										"type": "number"
									},
									"numSensors": {
										"type": "number"
									},
									"layer3webAuthsecurity": {
										"type": "object",
										"properties": {}
									},
									"layer3webAuthuserName": {
										"type": "object",
										"properties": {}
									},
									"layer3webAuthpassword": {
										"type": "object",
										"properties": {}
									},
									"extWebAuthVirtualIp": {
										"type": "object",
										"properties": {}
									},
									"layer3webAuthEmailAddress": {
										"type": "object",
										"properties": {}
									},
									"qosPolicy": {
										"type": "string"
									},
									"extWebAuth": {
										"type": "boolean"
									},
									"whiteList": {
										"type": "boolean"
									},
									"extWebAuthPortal": {
										"type": "object",
										"properties": {}
									},
									"extWebAuthAccessUrl": {
										"type": "object",
										"properties": {}
									},
									"extWebAuthHtmlTag": {
										"type": "array",
										"items": {
											"type": "object"
										}
									},
									"thirdParty": {
										"type": "object",
										"properties": {
											"selected": {
												"type": "boolean"
											}
										}
									},
									"id": {
										"type": "number"
									},
									"wlanId": {
										"type": "number"
									},
									"wlc": {
										"type": "object",
										"properties": {}
									},
									"validFrom": {
										"type": "number"
									},
									"validTo": {
										"type": "number"
									},
									"status": {
										"type": "string"
									},
									"tests": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"config": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {}
													}
												}
											}
										}
									}
								}
							}
						},
						"testScheduleMode": {
							"type": "string"
						},
						"showWlcUpgradeBanner": {
							"type": "boolean"
						},
						"radioAsSensorRemoved": {
							"type": "boolean"
						},
						"encryptionMode": {
							"type": "string"
						},
						"runNow": {
							"type": "string"
						},
						"locationInfoList": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"schedule": {
							"type": "object",
							"properties": {}
						},
						"tests": {
							"type": "object",
							"properties": {}
						},
						"sensors": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"apCoverage": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"bands": {
										"type": "string"
									},
									"numberOfApsToTest": {
										"type": "integer"
									},
									"rssiThreshold": {
										"type": "integer"
									}
								}
							}
						},
						"testDurationEstimate": {
							"type": "integer"
						},
						"testTemplate": {
							"type": "boolean"
						},
						"legacyTestSuite": {
							"type": "boolean"
						},
						"tenantId": {
							"type": "object",
							"properties": {}
						}
					}
				}
			}
		},
		"RemoveWLCFromFabricDomainRequest": {
			"type": "object",
			"properties": {
				"deviceName": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				}
			}
		},
		"RemoveWLCFromFabricDomainResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"CreateAndProvisionSSIDRequest": {
			"type": "object",
			"properties": {
				"managedAPLocations": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ssidDetails": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"securityLevel": {
							"type": "string",
							"enum": [
								"WPA2_ENTERPRISE",
								"WPA2_PERSONAL",
								"OPEN",
								"WEB_AUTH"
							]
						},
						"enableFastLane": {
							"type": "boolean"
						},
						"passphrase": {
							"type": "string"
						},
						"trafficType": {
							"type": "string",
							"enum": [
								"data",
								"voicedata"
							]
						},
						"enableBroadcastSSID": {
							"type": "boolean"
						},
						"radioPolicy": {
							"type": "string",
							"enum": [
								"Triple band operation (2.4GHz, 5GHz and 6GHz)",
								"Triple band operation with band select",
								"5GHz only",
								"2.4GHz only",
								"6GHz only"
							]
						},
						"enableMACFiltering": {
							"type": "boolean"
						},
						"fastTransition": {
							"type": "string",
							"enum": [
								"Adaptive",
								"Enable",
								"Disable"
							]
						},
						"webAuthURL": {
							"type": "string"
						},
						"authKeyMgmt": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"rsnCipherSuiteGcmp256": {
							"type": "boolean"
						},
						"rsnCipherSuiteGcmp128": {
							"type": "boolean"
						},
						"rsnCipherSuiteCcmp256": {
							"type": "boolean"
						},
						"ghz6PolicyClientSteering": {
							"type": "boolean"
						},
						"ghz24Policy": {
							"type": "string",
							"enum": [
								"dot11-g-only",
								"dot11-bg-only"
							]
						}
					}
				},
				"ssidType": {
					"type": "string",
					"enum": [
						"Guest",
						"Enterprise"
					]
				},
				"enableFabric": {
					"type": "boolean"
				},
				"flexConnect": {
					"type": "object",
					"properties": {
						"enableFlexConnect": {
							"type": "boolean"
						},
						"localToVlan": {
							"type": "integer"
						}
					}
				}
			}
		},
		"CreateAndProvisionSSIDResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"DeleteDeviceCredentialResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"DeleteRFProfilesResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"DeleteMulticastFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"ApplicationsResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"totalCount": {
					"type": "integer"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"health": {
								"type": "integer"
							},
							"businessRelevance": {
								"type": "string",
								"enum": [
									"business-irrelevant",
									"business-relevant",
									"default"
								]
							},
							"trafficClass": {
								"type": "string"
							},
							"usageBytes": {
								"type": "integer"
							},
							"averageThroughput": {
								"type": "number"
							},
							"packetLossPercent": {
								"type": "object",
								"properties": {}
							},
							"networkLatency": {
								"type": "object",
								"properties": {}
							},
							"jitter": {
								"type": "object",
								"properties": {}
							},
							"applicationServerLatency": {
								"type": "object",
								"properties": {}
							},
							"clientNetworkLatency": {
								"type": "object",
								"properties": {}
							},
							"serverNetworkLatency": {
								"type": "object",
								"properties": {}
							},
							"exporterIpAddress": {
								"type": "string"
							},
							"exporterName": {
								"type": "string"
							},
							"exporterUUID": {
								"type": "string"
							},
							"exporterFamily": {
								"type": "string"
							},
							"clientName": {
								"type": "string"
							},
							"clientIp": {
								"type": "string"
							},
							"location": {
								"type": "string"
							},
							"operatingSystem": {
								"type": "string"
							},
							"deviceType": {
								"type": "string",
								"enum": [
									"Wired",
									"Wireless"
								]
							},
							"clientMacAddress": {
								"type": "string"
							},
							"issueId": {
								"type": "string"
							},
							"issueName": {
								"type": "string"
							},
							"application": {
								"type": "string"
							},
							"severity": {
								"type": "string"
							},
							"summary": {
								"type": "string"
							},
							"rootCause": {
								"type": "string"
							},
							"timestamp": {
								"type": "integer"
							},
							"occurrences": {
								"type": "integer"
							},
							"priority": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"GetVNFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"siteNameHierarchy": {
					"type": "string"
				},
				"virtualNetworkName": {
					"type": "string"
				},
				"fabricName": {
					"type": "string"
				},
				"isInfraVN": {
					"type": "string"
				},
				"isDefaultVN": {
					"type": "string"
				},
				"virtualNetworkContextId": {
					"type": "string"
				},
				"virtualNetworkId": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed"
					]
				},
				"description": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"NFVProvisioningDetailRequest": {
			"type": "object",
			"properties": {
				"device_ip": {
					"type": "string"
				}
			}
		},
		"NFVProvisioningDetailResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetNetworkResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"instanceType": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"namespace": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"key": {
								"type": "string"
							},
							"version": {
								"type": "integer"
							},
							"value": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ipAddresses": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"configureDnacIP": {
											"type": "boolean"
										}
									}
								}
							},
							"groupUuid": {
								"type": "string"
							},
							"inheritedGroupUuid": {
								"type": "string"
							},
							"inheritedGroupName": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"EditApplicationRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"networkApplications": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"appProtocol": {
									"type": "string"
								},
								"applicationSubType": {
									"type": "string"
								},
								"applicationType": {
									"type": "string"
								},
								"categoryId": {
									"type": "string"
								},
								"displayName": {
									"type": "string"
								},
								"engineId": {
									"type": "string"
								},
								"helpString": {
									"type": "string"
								},
								"longDescription": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"popularity": {
									"type": "string"
								},
								"rank": {
									"type": "string"
								},
								"trafficClass": {
									"type": "string"
								},
								"serverName": {
									"type": "string"
								},
								"url": {
									"type": "string"
								},
								"dscp": {
									"type": "string"
								},
								"ignoreConflict": {
									"type": "string"
								}
							}
						}
					},
					"networkIdentity": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"displayName": {
									"type": "string"
								},
								"lowerPort": {
									"type": "string"
								},
								"ports": {
									"type": "string"
								},
								"protocol": {
									"type": "string"
								},
								"upperPort": {
									"type": "string"
								}
							}
						}
					},
					"applicationSet": {
						"type": "object",
						"properties": {
							"idRef": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"EditApplicationResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CreateApplicationSetRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					}
				}
			}
		},
		"CreateApplicationSetResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeleteDefaultAuthenticationProfileFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"ReserveIPSubpoolRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"type": {
					"type": "string",
					"enum": [
						"Generic",
						"LAN",
						"WAN",
						"management",
						"service"
					]
				},
				"ipv6AddressSpace": {
					"type": "boolean"
				},
				"ipv4GlobalPool": {
					"type": "string"
				},
				"ipv4Prefix": {
					"type": "boolean"
				},
				"ipv4PrefixLength": {
					"type": "integer"
				},
				"ipv4Subnet": {
					"type": "string"
				},
				"ipv4GateWay": {
					"type": "string"
				},
				"ipv4DhcpServers": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ipv4DnsServers": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ipv6GlobalPool": {
					"type": "string"
				},
				"ipv6Prefix": {
					"type": "boolean"
				},
				"ipv6PrefixLength": {
					"type": "integer"
				},
				"ipv6Subnet": {
					"type": "string"
				},
				"ipv6GateWay": {
					"type": "string"
				},
				"ipv6DhcpServers": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ipv6DnsServers": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ipv4TotalHost": {
					"type": "integer"
				},
				"ipv6TotalHost": {
					"type": "integer"
				},
				"slaacSupport": {
					"type": "boolean"
				}
			}
		},
		"ReserveIPSubpoolResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"ClientProximityResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetReserveIPSubpoolResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"groupName": {
								"type": "string"
							},
							"ipPools": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ipPoolName": {
											"type": "string"
										},
										"dhcpServerIps": {
											"type": "array",
											"items": {
												"type": "object"
											}
										},
										"gateways": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"createTime": {
											"type": "integer"
										},
										"lastUpdateTime": {
											"type": "integer"
										},
										"totalIpAddressCount": {
											"type": "integer"
										},
										"usedIpAddressCount": {
											"type": "integer"
										},
										"parentUuid": {
											"type": "string"
										},
										"owner": {
											"type": "string"
										},
										"shared": {
											"type": "boolean"
										},
										"overlapping": {
											"type": "boolean"
										},
										"configureExternalDhcp": {
											"type": "boolean"
										},
										"usedPercentage": {
											"type": "string"
										},
										"clientOptions": {
											"type": "object",
											"properties": {}
										},
										"groupUuid": {
											"type": "string"
										},
										"dnsServerIps": {
											"type": "array",
											"items": {
												"type": "object"
											}
										},
										"context": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"owner": {
														"type": "string"
													},
													"contextKey": {
														"type": "string"
													},
													"contextValue": {
														"type": "string"
													}
												}
											}
										},
										"ipv6": {
											"type": "boolean"
										},
										"id": {
											"type": "string"
										},
										"ipPoolCidr": {
											"type": "string"
										}
									}
								}
							},
							"siteId": {
								"type": "string"
							},
							"siteHierarchy": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"groupOwner": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"PSKOverrideRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"ssid": {
						"type": "string"
					},
					"site": {
						"type": "string"
					},
					"passPhrase": {
						"type": "string"
					},
					"wlanProfileName": {
						"type": "string"
					}
				}
			}
		},
		"PSKOverrideResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"DeleteSPProfileResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"AssignDeviceCredentialToSiteRequest": {
			"type": "object",
			"properties": {
				"cliId": {
					"type": "string"
				},
				"snmpV2ReadId": {
					"type": "string"
				},
				"snmpV2WriteId": {
					"type": "string"
				},
				"httpRead": {
					"type": "string"
				},
				"httpWrite": {
					"type": "string"
				},
				"snmpV3Id": {
					"type": "string"
				}
			}
		},
		"AssignDeviceCredentialToSiteResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"UpdateDeviceCredentialsRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"cliCredential": {
							"type": "object",
							"properties": {
								"description": {
									"type": "string"
								},
								"username": {
									"type": "string"
								},
								"password": {
									"type": "string"
								},
								"enablePassword": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							}
						},
						"snmpV2cRead": {
							"type": "object",
							"properties": {
								"description": {
									"type": "string"
								},
								"readCommunity": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							}
						},
						"snmpV2cWrite": {
							"type": "object",
							"properties": {
								"description": {
									"type": "string"
								},
								"writeCommunity": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							}
						},
						"snmpV3": {
							"type": "object",
							"properties": {
								"authPassword": {
									"type": "string"
								},
								"authType": {
									"type": "string"
								},
								"snmpMode": {
									"type": "string"
								},
								"privacyPassword": {
									"type": "string"
								},
								"privacyType": {
									"type": "string"
								},
								"username": {
									"type": "string"
								},
								"description": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							}
						},
						"httpsRead": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"username": {
									"type": "string"
								},
								"password": {
									"type": "string"
								},
								"port": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							}
						},
						"httpsWrite": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"username": {
									"type": "string"
								},
								"password": {
									"type": "string"
								},
								"port": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"UpdateDeviceCredentialsResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"DeleteSiteFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"ReProvisionWiredDeviceRequest": {
			"type": "object",
			"properties": {
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				}
			}
		},
		"ReProvisionWiredDeviceResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"UpdateSPProfileRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"qos": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"profileName": {
										"type": "string"
									},
									"model": {
										"type": "string"
									},
									"wanProvider": {
										"type": "string"
									},
									"oldProfileName": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"UpdateSPProfileResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetPortAssignmentForAccessPointInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				},
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"interfaceName": {
					"type": "string"
				},
				"dataIpAddressPoolName": {
					"type": "string"
				},
				"voiceIpAddressPoolName": {
					"type": "string"
				},
				"scalableGroupName": {
					"type": "string"
				},
				"authenticateTemplateName": {
					"type": "string"
				}
			}
		},
		"CreateSiteRequest": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"area",
						"building",
						"floor"
					]
				},
				"site": {
					"type": "object",
					"properties": {
						"area": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"parentName": {
									"type": "string"
								}
							}
						},
						"building": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"address": {
									"type": "string"
								},
								"parentName": {
									"type": "string"
								},
								"latitude": {
									"type": "number"
								},
								"longitude": {
									"type": "number"
								},
								"country": {
									"type": "string"
								}
							}
						},
						"floor": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"parentName": {
									"type": "string"
								},
								"rfModel": {
									"type": "string",
									"enum": [
										"Cubes And Walled Offices",
										"Drywall Office Only",
										"Indoor High Ceiling",
										"Outdoor Open Space"
									]
								},
								"width": {
									"type": "number"
								},
								"length": {
									"type": "number"
								},
								"height": {
									"type": "number"
								},
								"floorNumber": {
									"type": "number"
								}
							}
						}
					}
				}
			}
		},
		"CreateSiteResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"AddVNInFabricRequest": {
			"type": "object",
			"properties": {
				"virtualNetworkName": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				}
			}
		},
		"AddVNInFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"DeleteIPPoolFromSDAVirtualNetworkResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"DeleteSensorTestResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"templateName": {
							"type": "string"
						},
						"status": {
							"type": "string"
						}
					}
				}
			}
		},
		"DeleteNFVProfileResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"UpdateNetworkRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"dhcpServer": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"dnsServer": {
							"type": "object",
							"properties": {
								"domainName": {
									"type": "string",
									"enum": [
										"can only contain alphanumeric characters or hyphen"
									]
								},
								"primaryIpAddress": {
									"type": "string",
									"enum": [
										"valid range : 1.0.0.0 - 223.255.255.255"
									]
								},
								"secondaryIpAddress": {
									"type": "string",
									"enum": [
										"valid range : 1.0.0.0 - 223.255.255.255"
									]
								}
							}
						},
						"syslogServer": {
							"type": "object",
							"properties": {
								"ipAddresses": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"configureDnacIP": {
									"type": "boolean"
								}
							}
						},
						"snmpServer": {
							"type": "object",
							"properties": {
								"ipAddresses": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"configureDnacIP": {
									"type": "boolean"
								}
							}
						},
						"netflowcollector": {
							"type": "object",
							"properties": {
								"ipAddress": {
									"type": "string"
								},
								"port": {
									"type": "number"
								}
							}
						},
						"ntpServer": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"timezone": {
							"type": "string"
						},
						"messageOfTheday": {
							"type": "object",
							"properties": {
								"bannerMessage": {
									"type": "string"
								},
								"retainExistingBanner": {
									"type": "string"
								}
							}
						},
						"network_aaa": {
							"type": "object",
							"properties": {
								"servers": {
									"type": "string",
									"enum": [
										"Server type supported by ISE and AAA"
									]
								},
								"ipAddress": {
									"type": "string",
									"enum": [
										"Mandatory for ISE servers and for AAA consider this as additional IP."
									]
								},
								"network": {
									"type": "string",
									"enum": [
										"For AAA server consider it as primary IP and For ISE consider as Network"
									]
								},
								"protocol": {
									"type": "string"
								},
								"sharedSecret": {
									"type": "string",
									"enum": [
										"Supported only by ISE Servers"
									]
								}
							}
						},
						"clientAndEndpoint_aaa": {
							"type": "object",
							"properties": {
								"servers": {
									"type": "string"
								},
								"ipAddress": {
									"type": "string",
									"enum": [
										"Mandatory for ISE servers."
									]
								},
								"network": {
									"type": "string"
								},
								"protocol": {
									"type": "string"
								},
								"sharedSecret": {
									"type": "string",
									"enum": [
										"Supported only by ISE servers"
									]
								}
							}
						}
					}
				}
			}
		},
		"UpdateNetworkResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"UpdateReserveIPSubpoolRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"ipv6AddressSpace": {
					"type": "boolean"
				},
				"ipv4DhcpServers": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ipv4DnsServers": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ipv6GlobalPool": {
					"type": "string"
				},
				"ipv6Prefix": {
					"type": "boolean"
				},
				"ipv6PrefixLength": {
					"type": "integer"
				},
				"ipv6Subnet": {
					"type": "string"
				},
				"ipv6GateWay": {
					"type": "string"
				},
				"ipv6DhcpServers": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ipv6DnsServers": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"slaacSupport": {
					"type": "boolean"
				},
				"ipv4GateWay": {
					"type": "string"
				}
			}
		},
		"UpdateReserveIPSubpoolResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"CreateNFVProfileRequest": {
			"type": "object",
			"properties": {
				"profileName": {
					"type": "string"
				},
				"device": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"deviceType": {
								"type": "string",
								"enum": [
									"Cisco 5400 Enterprise Network Compute System",
									"Cisco 5100 Enterprise Network Compute System"
								]
							},
							"deviceTag": {
								"type": "string"
							},
							"serviceProviderProfile": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"serviceProvider": {
											"type": "string"
										},
										"linkType": {
											"type": "string",
											"enum": [
												"GigabitEthernet",
												"Cellular"
											]
										},
										"connect": {
											"type": "boolean"
										},
										"connectDefaultGatewayOnWan": {
											"type": "boolean"
										}
									}
								}
							},
							"directInternetAccessForFirewall": {
								"type": "boolean"
							},
							"services": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"serviceType": {
											"type": "string",
											"enum": [
												"isr",
												"vedge",
												"waas",
												"asa",
												"ngfw",
												"paloalto",
												"fortinet",
												"checkpoint",
												"riverbed",
												"silverpeak",
												"linux"
											]
										},
										"profileType": {
											"type": "string",
											"enum": [
												"ASAv5",
												"ASAv30",
												"ISRv-mini",
												"ISRv-medium",
												"ISRv-small",
												"riverbed-small",
												"sp-small",
												"rehel7-medium",
												"vEdge-samll",
												"vwaas-200-original",
												"vwaas-150-original",
												"vWASS-6000R-Resized",
												"vWASS-1300-Original",
												"vWASS-50000-Original",
												"vCM-100",
												"vWASS-6000R-Original",
												"vWASS-750-Original",
												"vWASS-1300-Resized",
												"vWASS-2500-Original",
												"vCM-500",
												"vCM-2000",
												"vWASS-6000-Resized",
												"vWASS-6000-Original",
												"vCM-1000",
												"vWASS-750-Resized",
												"vWASS-200-Resized",
												"vWASS-12000-Original",
												"vWASS-150-Resized",
												"vWASS-12000-Resized",
												"vWASS-2500-Resized",
												"vWASS-50000-Resized"
											]
										},
										"serviceName": {
											"type": "string"
										},
										"imageName": {
											"type": "string"
										},
										"vNicMapping": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"networkType": {
														"type": "string",
														"enum": [
															"wan-net",
															"wan2-net",
															"lan-net",
															"mgmt-net",
															"service-net",
															"GEO-0",
															"GEO-1",
															"GEO-2-1",
															"GEO-2-2",
															"GEO-3-1",
															"GEO-3-2",
															"SRIOV-1",
															"SRIOV-2",
															"SRIOV-3",
															"SRIOV-4",
															"SRIOV-5",
															"SRIOV-6"
														]
													},
													"assignIpAddressToNetwork": {
														"type": "string"
													}
												}
											}
										},
										"firewallMode": {
											"type": "string",
											"enum": [
												"routed",
												"transparent"
											]
										}
									}
								}
							},
							"customNetworks": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"networkName": {
											"type": "string"
										},
										"servicesToConnect": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"serviceName": {
														"type": "string"
													}
												}
											}
										},
										"connectionType": {
											"type": "string",
											"enum": [
												"wan-net",
												"wan2-net",
												"lan-net",
												"mgmt-net",
												"service-net",
												"GEO-2-1",
												"GEO-2-2",
												"GEO-3-1",
												"GEO-3-2",
												"SRIOV-1",
												"SRIOV-2",
												"SRIOV-3",
												"SRIOV-4",
												"SRIOV-5",
												"SRIOV-6"
											]
										},
										"vlanMode": {
											"type": "string",
											"enum": [
												"trunk",
												"Access"
											]
										},
										"vlanId": {
											"type": "number"
										}
									}
								}
							},
							"vlanForL2": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"vlanType": {
											"type": "string",
											"enum": [
												"access",
												"trunk"
											]
										},
										"vlanId": {
											"type": "number"
										},
										"vlanDescription": {
											"type": "string"
										}
									}
								}
							},
							"customTemplate": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"deviceType": {
											"type": "string",
											"enum": [
												"Cisco 5400 Enterprise Network Compute System",
												"Cisco Integrated Services Virtual Router",
												"Cisco Adaptive Security Virtual Appliance (ASAv)",
												"NFVIS",
												"ASAV"
											]
										},
										"template": {
											"type": "string"
										},
										"templateType": {
											"type": "string",
											"enum": [
												"Onboarding Template(s)",
												"Day-N-Template(s)"
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"CreateNFVProfileResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"AddTransitPeerNetworkRequest": {
			"type": "object",
			"properties": {
				"transitPeerNetworkName": {
					"type": "string"
				},
				"transitPeerNetworkType": {
					"type": "string",
					"enum": [
						"ip_transit",
						"sda_transit_with_lisp_bgp",
						"sda_transit_with_pub_sub"
					]
				},
				"ipTransitSettings": {
					"type": "object",
					"properties": {
						"routingProtocolName": {
							"type": "string",
							"enum": [
								"BGP"
							]
						},
						"autonomousSystemNumber": {
							"type": "string"
						}
					}
				},
				"sdaTransitSettings": {
					"type": "object",
					"properties": {
						"transitControlPlaneSettings": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"siteNameHierarchy": {
										"type": "string"
									},
									"deviceManagementIpAddress": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"AddTransitPeerNetworkResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetVirtualNetworkSummaryResponse": {
			"type": "object",
			"properties": {
				"virtualNetworkCount": {
					"type": "integer"
				},
				"virtualNetworkSummary": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"virtualNetworkContextId": {
								"type": "string"
							},
							"virtualNetworkId": {
								"type": "string"
							},
							"siteNameHierarchy": {
								"type": "string"
							},
							"virtualNetworkName": {
								"type": "string"
							},
							"layer3Instance": {
								"type": "integer"
							},
							"virtualNetworkStatus": {
								"type": "string",
								"enum": [
									"ACTIVE"
								]
							}
						}
					}
				},
				"status": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetSiteResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"parentId": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"additionalInfo": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"siteHierarchy": {
								"type": "string"
							},
							"siteNameHierarchy": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"ProvisionNFVRequest": {
			"type": "object",
			"properties": {
				"siteProfile": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"siteProfileName": {
								"type": "string"
							},
							"device": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"deviceType": {
											"type": "string",
											"enum": [
												"ENCS5100",
												"ENCS5400"
											]
										},
										"tagName": {
											"type": "string"
										},
										"serviceProviders": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"serviceProvider": {
														"type": "string"
													},
													"linkType": {
														"type": "string",
														"enum": [
															"GigabitEthernet"
														]
													},
													"connect": {
														"type": "boolean"
													},
													"defaultGateway": {
														"type": "boolean"
													}
												}
											}
										},
										"dia": {
											"type": "boolean"
										},
										"services": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": {
														"type": "string",
														"enum": [
															"isr",
															"vedge",
															"waas",
															"asa",
															"ngfw",
															"paloalto",
															"fortinet",
															"checkpoint",
															"riverbed",
															"silverpeak"
														]
													},
													"profile": {
														"type": "string"
													},
													"mode": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"imageName": {
														"type": "string"
													},
													"topology": {
														"type": "object",
														"properties": {
															"type": {
																"type": "string"
															},
															"name": {
																"type": "string"
															},
															"assignIp": {
																"type": "string"
															}
														}
													}
												}
											}
										},
										"customServices": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"name": {
														"type": "string"
													},
													"applicationType": {
														"type": "string"
													},
													"profile": {
														"type": "string"
													},
													"topology": {
														"type": "object",
														"properties": {
															"type": {
																"type": "string"
															},
															"name": {
																"type": "string"
															},
															"assignIp": {
																"type": "string"
															}
														}
													},
													"imageName": {
														"type": "string"
													}
												}
											}
										},
										"customNetworks": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"name": {
														"type": "string"
													},
													"servicesToConnect": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"service": {
																	"type": "string"
																}
															}
														}
													},
													"connectionType": {
														"type": "string"
													},
													"networkMode": {
														"type": "string"
													},
													"vlan": {
														"type": "string"
													}
												}
											}
										},
										"vlan": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": {
														"type": "string"
													},
													"id": {
														"type": "string"
													}
												}
											}
										},
										"customTemplate": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"deviceType": {
														"type": "string",
														"enum": [
															"NFVIS",
															"ASAv"
														]
													},
													"template": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"provisioning": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"site": {
								"type": "object",
								"properties": {
									"siteProfileName": {
										"type": "string"
									},
									"area": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"parentName": {
												"type": "string"
											}
										}
									},
									"building": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"address": {
												"type": "string"
											},
											"latitude": {
												"type": "number"
											},
											"longitude": {
												"type": "number"
											},
											"parentName": {
												"type": "string"
											}
										}
									},
									"floor": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"parentName": {
												"type": "string"
											},
											"rfModel": {
												"type": "string"
											},
											"width": {
												"type": "number"
											},
											"length": {
												"type": "number"
											},
											"height": {
												"type": "number"
											}
										}
									}
								}
							},
							"device": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ip": {
											"type": "string"
										},
										"deviceSerialNumber": {
											"type": "string"
										},
										"tagName": {
											"type": "string"
										},
										"serviceProviders": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"serviceProvider": {
														"type": "string"
													},
													"wanInterface": {
														"type": "object",
														"properties": {
															"ipAddress": {
																"type": "string"
															},
															"interfaceName": {
																"type": "string"
															},
															"subnetmask": {
																"type": "string"
															},
															"bandwidth": {
																"type": "string"
															},
															"gateway": {
																"type": "string"
															}
														}
													}
												}
											}
										},
										"services": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": {
														"type": "string"
													},
													"mode": {
														"type": "string"
													},
													"systemIp": {
														"type": "string"
													},
													"centralManagerIP": {
														"type": "string"
													},
													"centralRegistrationKey": {
														"type": "string"
													},
													"commonKey": {
														"type": "string"
													},
													"adminPasswordHash": {
														"type": "string"
													},
													"disk": {
														"type": "string"
													}
												}
											}
										},
										"vlan": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": {
														"type": "string"
													},
													"id": {
														"type": "string"
													},
													"interfaces": {
														"type": "string"
													},
													"network": {
														"type": "string"
													}
												}
											}
										},
										"subPools": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": {
														"type": "string",
														"enum": [
															"Lan",
															"Management",
															"Service",
															"Wan",
															"Generic"
														]
													},
													"name": {
														"type": "string"
													},
													"ipSubnet": {
														"type": "string"
													},
													"gateway": {
														"type": "string"
													},
													"parentPoolName": {
														"type": "string"
													}
												}
											}
										},
										"customNetworks": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"name": {
														"type": "string"
													},
													"port": {
														"type": "string"
													},
													"ipAddressPool": {
														"type": "string"
													}
												}
											}
										},
										"templateParam": {
											"type": "object",
											"properties": {
												"nfvis": {
													"type": "object",
													"properties": {
														"var1": {
															"type": "string"
														}
													}
												},
												"asav": {
													"type": "object",
													"properties": {
														"var1": {
															"type": "string"
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"ProvisionNFVResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"SensorsResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"status": {
								"type": "string"
							},
							"radioMacAddress": {
								"type": "string"
							},
							"ethernetMacAddress": {
								"type": "string"
							},
							"location": {
								"type": "string"
							},
							"backhaulType": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"ipAddress": {
								"type": "string"
							},
							"version": {
								"type": "string"
							},
							"lastSeen": {
								"type": "integer"
							},
							"type": {
								"type": "string"
							},
							"sshConfig": {
								"type": "object",
								"properties": {
									"sshState": {
										"type": "string"
									},
									"sshUserName": {
										"type": "string"
									},
									"sshPassword": {
										"type": "string"
									},
									"enablePassword": {
										"type": "string"
									}
								}
							},
							"isLEDEnabled": {
								"type": "boolean"
							}
						}
					}
				}
			}
		},
		"CreateWirelessProfileRequest": {
			"type": "object",
			"properties": {
				"profileDetails": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"sites": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"ssidDetails": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"enableFabric": {
										"type": "boolean"
									},
									"flexConnect": {
										"type": "object",
										"properties": {
											"enableFlexConnect": {
												"type": "boolean"
											},
											"localToVlan": {
												"type": "integer"
											}
										}
									},
									"interfaceName": {
										"type": "string"
									},
									"wlanProfileName": {
										"type": "string"
									},
									"policyProfileName": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"CreateWirelessProfileResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetServiceProviderDetailsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"instanceType": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"namespace": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"key": {
								"type": "string"
							},
							"version": {
								"type": "string"
							},
							"value": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"wanProvider": {
											"type": "string"
										},
										"spProfileName": {
											"type": "string"
										},
										"slaProfileName": {
											"type": "string"
										}
									}
								}
							},
							"groupUuid": {
								"type": "string"
							},
							"inheritedGroupUuid": {
								"type": "string"
							},
							"inheritedGroupName": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeleteApplicationSetResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetSiteFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"siteNameHierarchy": {
					"type": "string"
				},
				"fabricName": {
					"type": "string"
				},
				"fabricType": {
					"type": "string"
				},
				"fabricDomainType": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed"
					]
				},
				"description": {
					"type": "string"
				}
			}
		},
		"GetEdgeDeviceFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"deviceName": {
					"type": "string"
				},
				"roles": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				},
				"fabricSiteNameHierarchy": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed"
					]
				},
				"description": {
					"type": "string"
				}
			}
		},
		"GetIssueEnrichmentDetailsResponse": {
			"type": "object",
			"properties": {
				"issueDetails": {
					"type": "object",
					"properties": {
						"issue": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"issueId": {
										"type": "string"
									},
									"issueSource": {
										"type": "string"
									},
									"issueCategory": {
										"type": "string"
									},
									"issueName": {
										"type": "string"
									},
									"issueDescription": {
										"type": "string"
									},
									"issueEntity": {
										"type": "string"
									},
									"issueEntityValue": {
										"type": "string"
									},
									"issueSeverity": {
										"type": "string"
									},
									"issuePriority": {
										"type": "string"
									},
									"issueSummary": {
										"type": "string"
									},
									"issueTimestamp": {
										"type": "integer"
									},
									"suggestedActions": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"message": {
													"type": "string"
												},
												"steps": {
													"type": "array",
													"items": {
														"type": "object"
													}
												}
											}
										}
									},
									"impactedHosts": {
										"type": "array",
										"items": {
											"type": "object"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"ProvisionUpdateRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"deviceName": {
						"type": "string"
					},
					"managedAPLocations": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"dynamicInterfaces": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"interfaceIPAddress": {
									"type": "string"
								},
								"interfaceNetmaskInCIDR": {
									"type": "integer"
								},
								"interfaceGateway": {
									"type": "string"
								},
								"lagOrPortNumber": {
									"type": "integer"
								},
								"vlanId": {
									"type": "integer"
								},
								"interfaceName": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"ProvisionUpdateResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionUrl": {
					"type": "string"
				},
				"provisioningTasks": {
					"type": "object",
					"properties": {
						"success": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"failed": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"DuplicateSensorTestTemplateRequest": {
			"type": "object",
			"properties": {
				"templateName": {
					"type": "string"
				},
				"newTemplateName": {
					"type": "string"
				}
			}
		},
		"DuplicateSensorTestTemplateResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"modelVersion": {
							"type": "integer"
						},
						"startTime": {
							"type": "number"
						},
						"lastModifiedTime": {
							"type": "number"
						},
						"numAssociatedSensor": {
							"type": "number"
						},
						"location": {
							"type": "object",
							"properties": {}
						},
						"siteHierarchy": {
							"type": "object",
							"properties": {}
						},
						"status": {
							"type": "string"
						},
						"connection": {
							"type": "string"
						},
						"frequency": {
							"type": "object",
							"properties": {}
						},
						"rssiThreshold": {
							"type": "integer"
						},
						"numNeighborAPThreshold": {
							"type": "integer"
						},
						"scheduleInDays": {
							"type": "number"
						},
						"wlans": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"ssids": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"bands": {
										"type": "object",
										"properties": {}
									},
									"ssid": {
										"type": "string"
									},
									"profileName": {
										"type": "string"
									},
									"authType": {
										"type": "string"
									},
									"authTypeRcvd": {
										"type": "object",
										"properties": {}
									},
									"psk": {
										"type": "string"
									},
									"username": {
										"type": "object",
										"properties": {}
									},
									"password": {
										"type": "object",
										"properties": {}
									},
									"eapMethod": {
										"type": "object",
										"properties": {}
									},
									"scep": {
										"type": "boolean"
									},
									"authProtocol": {
										"type": "object",
										"properties": {}
									},
									"certfilename": {
										"type": "object",
										"properties": {}
									},
									"certxferprotocol": {
										"type": "string"
									},
									"certstatus": {
										"type": "string"
									},
									"certpassphrase": {
										"type": "object",
										"properties": {}
									},
									"certdownloadurl": {
										"type": "object",
										"properties": {}
									},
									"numAps": {
										"type": "number"
									},
									"numSensors": {
										"type": "number"
									},
									"layer3webAuthsecurity": {
										"type": "object",
										"properties": {}
									},
									"layer3webAuthuserName": {
										"type": "object",
										"properties": {}
									},
									"layer3webAuthpassword": {
										"type": "object",
										"properties": {}
									},
									"extWebAuthVirtualIp": {
										"type": "object",
										"properties": {}
									},
									"layer3webAuthEmailAddress": {
										"type": "object",
										"properties": {}
									},
									"qosPolicy": {
										"type": "string"
									},
									"extWebAuth": {
										"type": "boolean"
									},
									"whiteList": {
										"type": "boolean"
									},
									"extWebAuthPortal": {
										"type": "object",
										"properties": {}
									},
									"extWebAuthAccessUrl": {
										"type": "object",
										"properties": {}
									},
									"extWebAuthHtmlTag": {
										"type": "array",
										"items": {
											"type": "object"
										}
									},
									"thirdParty": {
										"type": "object",
										"properties": {
											"selected": {
												"type": "boolean"
											}
										}
									},
									"id": {
										"type": "number"
									},
									"wlanId": {
										"type": "number"
									},
									"wlc": {
										"type": "object",
										"properties": {}
									},
									"validFrom": {
										"type": "number"
									},
									"validTo": {
										"type": "number"
									},
									"status": {
										"type": "string"
									},
									"tests": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"config": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {}
													}
												}
											}
										}
									}
								}
							}
						},
						"testScheduleMode": {
							"type": "string"
						},
						"showWlcUpgradeBanner": {
							"type": "boolean"
						},
						"radioAsSensorRemoved": {
							"type": "boolean"
						},
						"encryptionMode": {
							"type": "string"
						},
						"runNow": {
							"type": "string"
						},
						"locationInfoList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"locationId": {
										"type": "string"
									},
									"locationType": {
										"type": "string"
									},
									"allSensors": {
										"type": "boolean"
									},
									"siteHierarchy": {
										"type": "string"
									},
									"macAddressList": {
										"type": "array",
										"items": {
											"type": "object"
										}
									}
								}
							}
						},
						"schedule": {
							"type": "object",
							"properties": {
								"testScheduleMode": {
									"type": "string"
								},
								"scheduleRange": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"timeRange": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"from": {
															"type": "string"
														},
														"to": {
															"type": "string"
														},
														"frequency": {
															"type": "object",
															"properties": {
																"value": {
																	"type": "integer"
																},
																"unit": {
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"day": {
												"type": "string"
											}
										}
									}
								},
								"startTime": {
									"type": "number"
								},
								"frequency": {
									"type": "object",
									"properties": {
										"value": {
											"type": "integer"
										},
										"unit": {
											"type": "string"
										}
									}
								}
							}
						},
						"tests": {
							"type": "object",
							"properties": {}
						},
						"sensors": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"apCoverage": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"bands": {
										"type": "string"
									},
									"numberOfApsToTest": {
										"type": "integer"
									},
									"rssiThreshold": {
										"type": "integer"
									}
								}
							}
						},
						"testDurationEstimate": {
							"type": "integer"
						},
						"testTemplate": {
							"type": "boolean"
						},
						"legacyTestSuite": {
							"type": "boolean"
						},
						"tenantId": {
							"type": "object",
							"properties": {}
						}
					}
				}
			}
		},
		"ReleaseReserveIPSubpoolResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"UpdateDefaultAuthenticationProfileInSDAFabricRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"siteNameHierarchy": {
						"type": "string"
					},
					"authenticateTemplateName": {
						"type": "string",
						"enum": [
							"Open Authentication",
							"Closed Authentication",
							"Low  Impact"
						]
					},
					"authenticationOrder": {
						"type": "string",
						"enum": [
							"dot1x ",
							"mab"
						]
					},
					"dot1xToMabFallbackTimeout": {
						"type": "string"
					},
					"wakeOnLan": {
						"type": "boolean"
					},
					"numberOfHosts": {
						"type": "string",
						"enum": [
							"Unlimited",
							"Single"
						]
					}
				}
			}
		},
		"UpdateDefaultAuthenticationProfileInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"SensorTestResultsResponse": {
			"type": "object",
			"properties": {
				"summary": {
					"type": "object",
					"properties": {
						"totalTestCount": {
							"type": "integer"
						},
						"ONBOARDING": {
							"type": "object",
							"properties": {
								"AUTH": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "integer"
										},
										"failCount": {
											"type": "integer"
										}
									}
								},
								"DHCP": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "integer"
										},
										"failCount": {
											"type": "number"
										}
									}
								},
								"ASSOC": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "integer"
										},
										"failCount": {
											"type": "integer"
										}
									}
								}
							}
						},
						"PERFORMANCE": {
							"type": "object",
							"properties": {
								"IPSLASENDER": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "integer"
										},
										"failCount": {
											"type": "integer"
										}
									}
								}
							}
						},
						"NETWORK_SERVICES": {
							"type": "object",
							"properties": {
								"DNS": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "integer"
										},
										"failCount": {
											"type": "number"
										}
									}
								}
							}
						},
						"APP_CONNECTIVITY": {
							"type": "object",
							"properties": {
								"HOST_REACHABILITY": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "integer"
										},
										"failCount": {
											"type": "number"
										}
									}
								},
								"WEBSERVER": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "integer"
										},
										"failCount": {
											"type": "integer"
										}
									}
								},
								"FILETRANSFER": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "number"
										},
										"failCount": {
											"type": "integer"
										}
									}
								}
							}
						},
						"RF_ASSESSMENT": {
							"type": "object",
							"properties": {
								"DATA_RATE": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "integer"
										},
										"failCount": {
											"type": "integer"
										}
									}
								},
								"SNR": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "integer"
										},
										"failCount": {
											"type": "number"
										}
									}
								}
							}
						},
						"EMAIL": {
							"type": "object",
							"properties": {
								"MAILSERVER": {
									"type": "object",
									"properties": {
										"passCount": {
											"type": "number"
										},
										"failCount": {
											"type": "integer"
										}
									}
								}
							}
						}
					}
				},
				"failureStats": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"errorCode": {
								"type": "integer"
							},
							"errorTitle": {
								"type": "string"
							},
							"testType": {
								"type": "string"
							},
							"testCategory": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"GetApplicationsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"networkApplications": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"appProtocol": {
									"type": "string"
								},
								"applicationSubType": {
									"type": "string"
								},
								"applicationType": {
									"type": "string"
								},
								"categoryId": {
									"type": "string"
								},
								"displayName": {
									"type": "string"
								},
								"engineId": {
									"type": "string"
								},
								"helpString": {
									"type": "string"
								},
								"longDescription": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"popularity": {
									"type": "string"
								},
								"rank": {
									"type": "string"
								},
								"trafficClass": {
									"type": "string"
								},
								"serverName": {
									"type": "string"
								},
								"url": {
									"type": "string"
								},
								"dscp": {
									"type": "string"
								},
								"ignoreConflict": {
									"type": "string"
								}
							}
						}
					},
					"networkIdentity": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"displayName": {
									"type": "string"
								},
								"lowerPort": {
									"type": "string"
								},
								"ports": {
									"type": "string"
								},
								"protocol": {
									"type": "string"
								},
								"upperPort": {
									"type": "string"
								}
							}
						}
					},
					"applicationSet": {
						"type": "object",
						"properties": {
							"idRef": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"AddEdgeDeviceInSDAFabricRequest": {
			"type": "object",
			"properties": {
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				}
			}
		},
		"AddEdgeDeviceInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"CreateEnterpriseSSIDRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"securityLevel": {
					"type": "string",
					"enum": [
						"WPA2_ENTERPRISE",
						"WPA2_PERSONAL",
						"OPEN",
						"WPA3_ENTERPRISE",
						"WPA3_PERSONAL",
						"WPA2_WPA3_PERSONAL",
						"WPA2_WPA3_ENTERPRISE"
					]
				},
				"passphrase": {
					"type": "string"
				},
				"enableFastLane": {
					"type": "boolean"
				},
				"enableMACFiltering": {
					"type": "boolean"
				},
				"trafficType": {
					"type": "string",
					"enum": [
						"voicedata",
						"data"
					]
				},
				"radioPolicy": {
					"type": "string",
					"enum": [
						"Triple band operation (2.4GHz, 5GHz and 6GHz)",
						"Triple band operation with band select",
						"5GHz only",
						"2.4GHz only",
						"6GHz only"
					]
				},
				"enableBroadcastSSID": {
					"type": "boolean"
				},
				"fastTransition": {
					"type": "string",
					"enum": [
						"Adaptive",
						"Enable",
						"Disable"
					]
				},
				"enableSessionTimeOut": {
					"type": "boolean"
				},
				"sessionTimeOut": {
					"type": "integer"
				},
				"enableClientExclusion": {
					"type": "boolean"
				},
				"clientExclusionTimeout": {
					"type": "integer"
				},
				"enableBasicServiceSetMaxIdle": {
					"type": "boolean"
				},
				"basicServiceSetClientIdleTimeout": {
					"type": "integer"
				},
				"enableDirectedMulticastService": {
					"type": "boolean"
				},
				"enableNeighborList": {
					"type": "boolean"
				},
				"mfpClientProtection": {
					"type": "string",
					"enum": [
						"Optional",
						"Disabled",
						"Required"
					]
				},
				"nasOptions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"profileName": {
					"type": "string"
				},
				"policyProfileName": {
					"type": "string"
				},
				"aaaOverride": {
					"type": "boolean"
				},
				"coverageHoleDetectionEnable": {
					"type": "boolean"
				},
				"protectedManagementFrame": {
					"type": "string",
					"enum": [
						"Optional",
						"Disabled",
						"Required"
					]
				},
				"multiPSKSettings": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"priority": {
								"type": "integer"
							},
							"passphraseType": {
								"type": "string",
								"enum": [
									"ASCII",
									"HEX"
								]
							},
							"passphrase": {
								"type": "string"
							}
						}
					}
				},
				"clientRateLimit": {
					"type": "number"
				}
			}
		},
		"CreateEnterpriseSSIDResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetDefaultAuthenticationProfileFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"siteNameHierarchy": {
					"type": "string"
				},
				"authenticateTemplateName": {
					"type": "string"
				},
				"authenticationOrder": {
					"type": "string"
				},
				"dot1xToMabFallbackTimeout": {
					"type": "string"
				},
				"wakeOnLan": {
					"type": "boolean"
				},
				"numberOfHosts": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed"
					]
				},
				"description": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetDeviceRoleInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"roles": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"AddPortAssignmentForUserDeviceInSDAFabricRequest": {
			"type": "object",
			"properties": {
				"siteNameHierarchy": {
					"type": "string"
				},
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"interfaceName": {
					"type": "string"
				},
				"interfaceNames": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"dataIpAddressPoolName": {
					"type": "string"
				},
				"voiceIpAddressPoolName": {
					"type": "string"
				},
				"authenticateTemplateName": {
					"type": "string",
					"enum": [
						"Open Authentication",
						"Closed Authentication",
						"Low Impact",
						"No Authentication"
					]
				},
				"scalableGroupName": {
					"type": "string"
				},
				"interfaceDescription": {
					"type": "string"
				}
			}
		},
		"AddPortAssignmentForUserDeviceInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetBorderDeviceDetailFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"payload": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"instanceId": {
							"type": "integer"
						},
						"authEntityId": {
							"type": "integer"
						},
						"displayName": {
							"type": "string"
						},
						"authEntityClass": {
							"type": "integer"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"deployPending": {
							"type": "string"
						},
						"instanceVersion": {
							"type": "integer"
						},
						"createTime": {
							"type": "integer"
						},
						"deployed": {
							"type": "boolean"
						},
						"isSeeded": {
							"type": "boolean"
						},
						"isStale": {
							"type": "boolean"
						},
						"lastUpdateTime": {
							"type": "integer"
						},
						"name": {
							"type": "string"
						},
						"namespace": {
							"type": "string"
						},
						"provisioningState": {
							"type": "string"
						},
						"resourceVersion": {
							"type": "integer"
						},
						"targetIdList": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"type": {
							"type": "string"
						},
						"cfsChangeInfo": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"customProvisions": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"configs": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"managedSites": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"networkDeviceId": {
							"type": "string"
						},
						"roles": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"saveWanConnectivityDetailsOnly": {
							"type": "boolean"
						},
						"siteId": {
							"type": "string"
						},
						"akcSettingsCfs": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"deviceInterfaceInfo": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"deviceSettings": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"instanceId": {
									"type": "integer"
								},
								"displayName": {
									"type": "string"
								},
								"instanceTenantId": {
									"type": "string"
								},
								"deployPending": {
									"type": "string"
								},
								"instanceVersion": {
									"type": "integer"
								},
								"connectedTo": {
									"type": "array",
									"items": {
										"type": "object"
									}
								},
								"cpu": {
									"type": "number"
								},
								"dhcpEnabled": {
									"type": "boolean"
								},
								"externalConnectivityIpPool": {
									"type": "string"
								},
								"externalDomainRoutingProtocol": {
									"type": "string"
								},
								"internalDomainProtocolNumber": {
									"type": "string"
								},
								"memory": {
									"type": "number"
								},
								"nodeType": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"storage": {
									"type": "number"
								},
								"extConnectivitySettings": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string"
											},
											"instanceId": {
												"type": "integer"
											},
											"displayName": {
												"type": "string"
											},
											"instanceTenantId": {
												"type": "string"
											},
											"deployPending": {
												"type": "string"
											},
											"instanceVersion": {
												"type": "integer"
											},
											"externalDomainProtocolNumber": {
												"type": "string"
											},
											"interfaceUuid": {
												"type": "string"
											},
											"policyPropagationEnabled": {
												"type": "boolean"
											},
											"policySgtTag": {
												"type": "number"
											},
											"l2Handoff": {
												"type": "array",
												"items": {
													"type": "object"
												}
											},
											"l3Handoff": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"id": {
															"type": "string"
														},
														"instanceId": {
															"type": "integer"
														},
														"displayName": {
															"type": "string"
														},
														"instanceTenantId": {
															"type": "string"
														},
														"deployPending": {
															"type": "string"
														},
														"instanceVersion": {
															"type": "number"
														},
														"localIpAddress": {
															"type": "string"
														},
														"remoteIpAddress": {
															"type": "string"
														},
														"vlanId": {
															"type": "integer"
														},
														"virtualNetwork": {
															"type": "object",
															"properties": {
																"idRef": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"networkWideSettings": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"instanceId": {
									"type": "integer"
								},
								"displayName": {
									"type": "string"
								},
								"instanceTenantId": {
									"type": "string"
								},
								"deployPending": {
									"type": "string"
								},
								"instanceVersion": {
									"type": "integer"
								},
								"aaa": {
									"type": "array",
									"items": {
										"type": "object"
									}
								},
								"cmx": {
									"type": "array",
									"items": {
										"type": "object"
									}
								},
								"dhcp": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string"
											},
											"ipAddress": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string"
													},
													"paddedAddress": {
														"type": "string"
													},
													"addressType": {
														"type": "string"
													},
													"address": {
														"type": "string"
													}
												}
											}
										}
									}
								},
								"dns": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string"
											},
											"domainName": {
												"type": "string"
											},
											"ip": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string"
													},
													"paddedAddress": {
														"type": "string"
													},
													"addressType": {
														"type": "string"
													},
													"address": {
														"type": "string"
													}
												}
											}
										}
									}
								},
								"ldap": {
									"type": "array",
									"items": {
										"type": "object"
									}
								},
								"nativeVlan": {
									"type": "array",
									"items": {
										"type": "object"
									}
								},
								"netflow": {
									"type": "array",
									"items": {
										"type": "object"
									}
								},
								"ntp": {
									"type": "array",
									"items": {
										"type": "object"
									}
								},
								"snmp": {
									"type": "array",
									"items": {
										"type": "object"
									}
								},
								"syslogs": {
									"type": "array",
									"items": {
										"type": "object"
									}
								}
							}
						},
						"otherDevice": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"transitNetworks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"idRef": {
										"type": "string"
									}
								}
							}
						},
						"virtualNetwork": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"wlan": {
							"type": "array",
							"items": {
								"type": "object"
							}
						}
					}
				}
			}
		},
		"GetDeviceCredentialDetailsResponse": {
			"type": "object",
			"properties": {
				"snmp_v3": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"username": {
								"type": "string"
							},
							"authPassword": {
								"type": "string"
							},
							"authType": {
								"type": "string"
							},
							"privacyPassword": {
								"type": "string"
							},
							"privacyType": {
								"type": "string"
							},
							"snmpMode": {
								"type": "string"
							},
							"comments": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"credentialType": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						}
					}
				},
				"http_read": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"secure": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"port": {
								"type": "string"
							},
							"comments": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"credentialType": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						}
					}
				},
				"http_write": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"secure": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"port": {
								"type": "string"
							},
							"comments": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"credentialType": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						}
					}
				},
				"snmp_v2_write": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"writeCommunity": {
								"type": "string"
							},
							"comments": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"credentialType": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						}
					}
				},
				"snmp_v2_read": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"readCommunity": {
								"type": "string"
							},
							"comments": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"credentialType": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						}
					}
				},
				"cli": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"username": {
								"type": "string"
							},
							"enablePassword": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"comments": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"credentialType": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"GetDeviceDetailsByIPRequest": {
			"type": "object",
			"properties": {
				"device_ip": {
					"type": "string"
				}
			}
		},
		"GetDeviceDetailsByIPResponse": {
			"type": "object",
			"properties": {
				"provisionDetails": {
					"type": "object",
					"properties": {
						"startTime": {
							"type": "string"
						},
						"endTime": {
							"type": "string"
						},
						"duration": {
							"type": "string"
						},
						"statusMessage": {
							"type": "string"
						},
						"status": {
							"type": "string"
						},
						"taskNodes": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"startTime": {
										"type": "string"
									},
									"endTime": {
										"type": "string"
									},
									"duration": {
										"type": "string"
									},
									"status": {
										"type": "string"
									},
									"nextTask": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"target": {
										"type": "string"
									},
									"statusMessage": {
										"type": "string"
									},
									"payload": {
										"type": "string"
									},
									"provisionedNames": {
										"type": "object",
										"properties": {}
									},
									"errorPayload": {
										"type": "object",
										"properties": {}
									},
									"parentTask": {
										"type": "object",
										"properties": {}
									},
									"cliTemplateUserMessageDTO": {
										"type": "object",
										"properties": {}
									},
									"stepRan": {
										"type": "string"
									}
								}
							}
						},
						"topology": {
							"type": "string"
						},
						"beginStep": {
							"type": "string"
						}
					}
				}
			}
		},
		"CreateSPProfileRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"qos": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"profileName": {
										"type": "string"
									},
									"model": {
										"type": "string"
									},
									"wanProvider": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"CreateSPProfileResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetCMDBSyncStatusRequest": {
			"type": "string"
		},
		"GetCMDBSyncStatusResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"successCount": {
						"type": "string"
					},
					"failureCount": {
						"type": "string"
					},
					"devices": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"deviceId": {
									"type": "string"
								},
								"status": {
									"type": "string"
								}
							}
						}
					},
					"unknownErrorCount": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"syncTime": {
						"type": "string"
					}
				}
			}
		},
		"GetControlPlaneDeviceFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"deviceName": {
					"type": "string"
				},
				"roles": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				},
				"routeDistributionProtocol": {
					"type": "string",
					"enum": [
						"LISP_BGP",
						"LISP_PUB_SUB"
					]
				},
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed"
					]
				},
				"description": {
					"type": "string"
				}
			}
		},
		"UpdateSSIDToIPPoolMappingRequest": {
			"type": "object",
			"properties": {
				"vlanName": {
					"type": "string"
				},
				"scalableGroupName": {
					"type": "string"
				},
				"ssidNames": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"siteNameHierarchy": {
					"type": "string"
				}
			}
		},
		"UpdateSSIDToIPPoolMappingResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetFailedITSMEventsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"instanceId": {
						"type": "string"
					},
					"eventId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"category": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"subDomain": {
						"type": "string"
					},
					"severity": {
						"type": "string"
					},
					"source": {
						"type": "string"
					},
					"timestamp": {
						"type": "integer"
					},
					"enrichmentInfo": {
						"type": "object",
						"properties": {
							"eventStatus": {
								"type": "string"
							},
							"errorCode": {
								"type": "string"
							},
							"errorDescription": {
								"type": "string"
							},
							"responseReceivedFromITSMSystem": {
								"type": "object",
								"properties": {}
							}
						}
					},
					"description": {
						"type": "string"
					}
				}
			}
		},
		"GetWirelessProfileResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"profileDetails": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"sites": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"ssidDetails": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"type": {
											"type": "string",
											"enum": [
												"Guest",
												"Enterprise"
											]
										},
										"enableFabric": {
											"type": "boolean"
										},
										"flexConnect": {
											"type": "object",
											"properties": {
												"enableFlexConnect": {
													"type": "boolean"
												},
												"localToVlan": {
													"type": "integer"
												}
											}
										},
										"interfaceName": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"CreateOrUpdateRFProfileRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"defaultRfProfile": {
					"type": "boolean"
				},
				"enableRadioTypeA": {
					"type": "boolean"
				},
				"enableRadioTypeB": {
					"type": "boolean"
				},
				"channelWidth": {
					"type": "string"
				},
				"enableCustom": {
					"type": "boolean"
				},
				"enableBrownField": {
					"type": "boolean"
				},
				"radioTypeAProperties": {
					"type": "object",
					"properties": {
						"parentProfile": {
							"type": "string"
						},
						"radioChannels": {
							"type": "string"
						},
						"dataRates": {
							"type": "string"
						},
						"mandatoryDataRates": {
							"type": "string"
						},
						"powerThresholdV1": {
							"type": "number"
						},
						"rxSopThreshold": {
							"type": "string"
						},
						"minPowerLevel": {
							"type": "number"
						},
						"maxPowerLevel": {
							"type": "number"
						}
					}
				},
				"radioTypeBProperties": {
					"type": "object",
					"properties": {
						"parentProfile": {
							"type": "string"
						},
						"radioChannels": {
							"type": "string"
						},
						"dataRates": {
							"type": "string"
						},
						"mandatoryDataRates": {
							"type": "string"
						},
						"powerThresholdV1": {
							"type": "number"
						},
						"rxSopThreshold": {
							"type": "string"
						},
						"minPowerLevel": {
							"type": "number"
						},
						"maxPowerLevel": {
							"type": "number"
						}
					}
				},
				"radioTypeCProperties": {
					"type": "object",
					"properties": {
						"parentProfile": {
							"type": "string"
						},
						"radioChannels": {
							"type": "string"
						},
						"dataRates": {
							"type": "string"
						},
						"mandatoryDataRates": {
							"type": "string"
						},
						"rxSopThreshold": {
							"type": "string"
						},
						"minPowerLevel": {
							"type": "number"
						},
						"maxPowerLevel": {
							"type": "number"
						},
						"powerThresholdV1": {
							"type": "number"
						}
					}
				},
				"enableRadioTypeC": {
					"type": "boolean"
				}
			}
		},
		"CreateOrUpdateRFProfileResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetPortAssignmentForUserDeviceInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				},
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"interfaceName": {
					"type": "string"
				},
				"dataIpAddressPoolName": {
					"type": "string"
				},
				"voiceIpAddressPoolName": {
					"type": "string"
				},
				"scalableGroupName": {
					"type": "string"
				},
				"authenticateTemplateName": {
					"type": "string"
				}
			}
		},
		"GetClientEnrichmentDetailsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"userDetails": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"connectionStatus": {
								"type": "string"
							},
							"hostType": {
								"type": "string"
							},
							"userId": {
								"type": "string"
							},
							"hostName": {
								"type": "object",
								"properties": {}
							},
							"hostOs": {
								"type": "object",
								"properties": {}
							},
							"hostVersion": {
								"type": "object",
								"properties": {}
							},
							"subType": {
								"type": "object",
								"properties": {}
							},
							"lastUpdated": {
								"type": "integer"
							},
							"healthScore": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"healthType": {
											"type": "string"
										},
										"reason": {
											"type": "string"
										},
										"score": {
											"type": "integer"
										}
									}
								}
							},
							"hostMac": {
								"type": "string"
							},
							"hostIpV4": {
								"type": "string"
							},
							"hostIpV6": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"authType": {
								"type": "object",
								"properties": {}
							},
							"vlanId": {
								"type": "string"
							},
							"ssid": {
								"type": "object",
								"properties": {}
							},
							"location": {
								"type": "object",
								"properties": {}
							},
							"clientConnection": {
								"type": "string"
							},
							"connectedDevice": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"issueCount": {
								"type": "number"
							},
							"rssi": {
								"type": "object",
								"properties": {}
							},
							"snr": {
								"type": "object",
								"properties": {}
							},
							"dataRate": {
								"type": "object",
								"properties": {}
							},
							"port": {
								"type": "object",
								"properties": {}
							}
						}
					},
					"connectedDevice": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"deviceDetails": {
									"type": "object",
									"properties": {
										"family": {
											"type": "string"
										},
										"type": {
											"type": "string"
										},
										"location": {
											"type": "object",
											"properties": {}
										},
										"errorCode": {
											"type": "string"
										},
										"macAddress": {
											"type": "string"
										},
										"role": {
											"type": "string"
										},
										"apManagerInterfaceIp": {
											"type": "string"
										},
										"associatedWlcIp": {
											"type": "string"
										},
										"bootDateTime": {
											"type": "object",
											"properties": {}
										},
										"collectionStatus": {
											"type": "string"
										},
										"interfaceCount": {
											"type": "object",
											"properties": {}
										},
										"lineCardCount": {
											"type": "object",
											"properties": {}
										},
										"lineCardId": {
											"type": "object",
											"properties": {}
										},
										"managementIpAddress": {
											"type": "string"
										},
										"memorySize": {
											"type": "string"
										},
										"platformId": {
											"type": "string"
										},
										"reachabilityFailureReason": {
											"type": "string"
										},
										"reachabilityStatus": {
											"type": "string"
										},
										"snmpContact": {
											"type": "string"
										},
										"snmpLocation": {
											"type": "string"
										},
										"tunnelUdpPort": {
											"type": "string"
										},
										"waasDeviceMode": {
											"type": "object",
											"properties": {}
										},
										"series": {
											"type": "string"
										},
										"inventoryStatusDetail": {
											"type": "string"
										},
										"collectionInterval": {
											"type": "string"
										},
										"serialNumber": {
											"type": "string"
										},
										"softwareVersion": {
											"type": "string"
										},
										"roleSource": {
											"type": "string"
										},
										"hostname": {
											"type": "string"
										},
										"upTime": {
											"type": "string"
										},
										"lastUpdateTime": {
											"type": "integer"
										},
										"errorDescription": {
											"type": "object",
											"properties": {}
										},
										"locationName": {
											"type": "object",
											"properties": {}
										},
										"tagCount": {
											"type": "string"
										},
										"lastUpdated": {
											"type": "string"
										},
										"instanceUuid": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"neighborTopology": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"nodes": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"role": {
																	"type": "string"
																},
																"name": {
																	"type": "string"
																},
																"id": {
																	"type": "string"
																},
																"description": {
																	"type": "string"
																},
																"deviceType": {
																	"type": "object",
																	"properties": {}
																},
																"platformId": {
																	"type": "object",
																	"properties": {}
																},
																"family": {
																	"type": "object",
																	"properties": {}
																},
																"ip": {
																	"type": "object",
																	"properties": {}
																},
																"softwareVersion": {
																	"type": "object",
																	"properties": {}
																},
																"userId": {
																	"type": "object",
																	"properties": {}
																},
																"nodeType": {
																	"type": "object",
																	"properties": {}
																},
																"radioFrequency": {
																	"type": "object",
																	"properties": {}
																},
																"clients": {
																	"type": "number"
																},
																"count": {
																	"type": "object",
																	"properties": {}
																},
																"healthScore": {
																	"type": "object",
																	"properties": {}
																},
																"level": {
																	"type": "number"
																},
																"fabricGroup": {
																	"type": "object",
																	"properties": {}
																}
															}
														}
													},
													"links": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"source": {
																	"type": "string"
																},
																"linkStatus": {
																	"type": "string"
																},
																"label": {
																	"type": "array",
																	"items": {
																		"type": "object"
																	}
																},
																"target": {
																	"type": "string"
																},
																"id": {
																	"type": "object",
																	"properties": {}
																},
																"portUtilization": {
																	"type": "object",
																	"properties": {}
																}
															}
														}
													}
												}
											}
										},
										"cisco360view": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"issueDetails": {
						"type": "object",
						"properties": {
							"issue": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"issueId": {
											"type": "string"
										},
										"issueSource": {
											"type": "string"
										},
										"issueCategory": {
											"type": "string"
										},
										"issueName": {
											"type": "string"
										},
										"issueDescription": {
											"type": "string"
										},
										"issueEntity": {
											"type": "string"
										},
										"issueEntityValue": {
											"type": "string"
										},
										"issueSeverity": {
											"type": "string"
										},
										"issuePriority": {
											"type": "string"
										},
										"issueSummary": {
											"type": "string"
										},
										"issueTimestamp": {
											"type": "integer"
										},
										"suggestedActions": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"message": {
														"type": "string"
													},
													"steps": {
														"type": "array",
														"items": {
															"type": "object"
														}
													}
												}
											}
										},
										"impactedHosts": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"hostType": {
														"type": "string"
													},
													"hostName": {
														"type": "string"
													},
													"hostOs": {
														"type": "string"
													},
													"ssid": {
														"type": "string"
													},
													"connectedInterface": {
														"type": "string"
													},
													"macAddress": {
														"type": "string"
													},
													"failedAttempts": {
														"type": "integer"
													},
													"location": {
														"type": "object",
														"properties": {
															"siteId": {
																"type": "string"
															},
															"siteType": {
																"type": "string"
															},
															"area": {
																"type": "string"
															},
															"building": {
																"type": "string"
															},
															"floor": {
																"type": "object",
																"properties": {}
															},
															"apsImpacted": {
																"type": "array",
																"items": {
																	"type": "object"
																}
															}
														}
													},
													"timestamp": {
														"type": "integer"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"AddDefaultAuthenticationTemplateInSDAFabricRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"siteNameHierarchy": {
						"type": "string"
					},
					"authenticateTemplateName": {
						"type": "string",
						"enum": [
							"No Authentication",
							"Open Authentication",
							"Closed Authentication",
							"Low Impact"
						]
					}
				}
			}
		},
		"AddDefaultAuthenticationTemplateInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetSiteCountResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "integer"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"AddBorderDeviceInSDAFabricRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"deviceManagementIpAddress": {
						"type": "string"
					},
					"siteNameHierarchy": {
						"type": "string"
					},
					"deviceRole": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"routeDistributionProtocol": {
						"type": "string"
					},
					"externalDomainRoutingProtocolName": {
						"type": "string",
						"enum": [
							"BGP"
						]
					},
					"externalConnectivityIpPoolName": {
						"type": "string"
					},
					"internalAutonomouSystemNumber": {
						"type": "string"
					},
					"borderPriority": {
						"type": "string"
					},
					"borderSessionType": {
						"type": "string",
						"enum": [
							"EXTERNAL",
							"INTERNAL",
							"ANYWHERE"
						]
					},
					"connectedToInternet": {
						"type": "boolean"
					},
					"sdaTransitNetworkName": {
						"type": "string"
					},
					"borderWithExternalConnectivity": {
						"type": "boolean"
					},
					"externalConnectivitySettings": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"interfaceName": {
									"type": "string"
								},
								"interfaceDescription": {
									"type": "string"
								},
								"externalAutonomouSystemNumber": {
									"type": "string"
								},
								"l3Handoff": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"virtualNetwork": {
												"type": "object",
												"properties": {
													"virtualNetworkName": {
														"type": "string"
													},
													"vlanId": {
														"type": "string"
													}
												}
											}
										}
									}
								},
								"l2Handoff": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"virtualNetworkName": {
												"type": "string"
											},
											"vlanName": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"AddBorderDeviceInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"EditSensorTestTemplateRequest": {
			"type": "object",
			"properties": {
				"templateName": {
					"type": "string"
				},
				"locationInfoList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"locationId": {
								"type": "string"
							},
							"locationType": {
								"type": "string"
							},
							"siteHierarchy": {
								"type": "string"
							},
							"allSensors": {
								"type": "boolean"
							}
						}
					}
				},
				"schedule": {
					"type": "object",
					"properties": {
						"testScheduleMode": {
							"type": "string"
						},
						"frequency": {
							"type": "object",
							"properties": {
								"unit": {
									"type": "string"
								},
								"value": {
									"type": "integer"
								}
							}
						},
						"scheduleRange": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"day": {
										"type": "string"
									},
									"timeRange": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"from": {
													"type": "string"
												},
												"to": {
													"type": "string"
												},
												"frequency": {
													"type": "object",
													"properties": {
														"unit": {
															"type": "string"
														},
														"value": {
															"type": "integer"
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"EditSensorTestTemplateResponse": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"_id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"version": {
							"type": "number"
						},
						"modelVersion": {
							"type": "integer"
						},
						"startTime": {
							"type": "number"
						},
						"lastModifiedTime": {
							"type": "number"
						},
						"numAssociatedSensor": {
							"type": "number"
						},
						"location": {
							"type": "object",
							"properties": {}
						},
						"siteHierarchy": {
							"type": "object",
							"properties": {}
						},
						"status": {
							"type": "string"
						},
						"connection": {
							"type": "string"
						},
						"frequency": {
							"type": "object",
							"properties": {}
						},
						"rssiThreshold": {
							"type": "integer"
						},
						"numNeighborAPThreshold": {
							"type": "integer"
						},
						"scheduleInDays": {
							"type": "number"
						},
						"wlans": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"ssids": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"bands": {
										"type": "object",
										"properties": {}
									},
									"ssid": {
										"type": "string"
									},
									"profileName": {
										"type": "string"
									},
									"authType": {
										"type": "string"
									},
									"authTypeRcvd": {
										"type": "object",
										"properties": {}
									},
									"psk": {
										"type": "string"
									},
									"username": {
										"type": "object",
										"properties": {}
									},
									"password": {
										"type": "object",
										"properties": {}
									},
									"eapMethod": {
										"type": "object",
										"properties": {}
									},
									"scep": {
										"type": "boolean"
									},
									"authProtocol": {
										"type": "object",
										"properties": {}
									},
									"certfilename": {
										"type": "object",
										"properties": {}
									},
									"certxferprotocol": {
										"type": "string"
									},
									"certstatus": {
										"type": "string"
									},
									"certpassphrase": {
										"type": "object",
										"properties": {}
									},
									"certdownloadurl": {
										"type": "object",
										"properties": {}
									},
									"numAps": {
										"type": "number"
									},
									"numSensors": {
										"type": "number"
									},
									"layer3webAuthsecurity": {
										"type": "object",
										"properties": {}
									},
									"layer3webAuthuserName": {
										"type": "object",
										"properties": {}
									},
									"layer3webAuthpassword": {
										"type": "object",
										"properties": {}
									},
									"extWebAuthVirtualIp": {
										"type": "object",
										"properties": {}
									},
									"layer3webAuthEmailAddress": {
										"type": "object",
										"properties": {}
									},
									"qosPolicy": {
										"type": "string"
									},
									"extWebAuth": {
										"type": "boolean"
									},
									"whiteList": {
										"type": "boolean"
									},
									"extWebAuthPortal": {
										"type": "object",
										"properties": {}
									},
									"extWebAuthAccessUrl": {
										"type": "object",
										"properties": {}
									},
									"extWebAuthHtmlTag": {
										"type": "array",
										"items": {
											"type": "object"
										}
									},
									"thirdParty": {
										"type": "object",
										"properties": {
											"selected": {
												"type": "boolean"
											}
										}
									},
									"id": {
										"type": "number"
									},
									"wlanId": {
										"type": "number"
									},
									"wlc": {
										"type": "object",
										"properties": {}
									},
									"validFrom": {
										"type": "number"
									},
									"validTo": {
										"type": "number"
									},
									"status": {
										"type": "string"
									},
									"tests": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"config": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {}
													}
												}
											}
										}
									}
								}
							}
						},
						"testScheduleMode": {
							"type": "string"
						},
						"showWlcUpgradeBanner": {
							"type": "boolean"
						},
						"radioAsSensorRemoved": {
							"type": "boolean"
						},
						"encryptionMode": {
							"type": "string"
						},
						"runNow": {
							"type": "string"
						},
						"locationInfoList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"locationId": {
										"type": "string"
									},
									"locationType": {
										"type": "string"
									},
									"allSensors": {
										"type": "boolean"
									},
									"siteHierarchy": {
										"type": "string"
									},
									"macAddressList": {
										"type": "array",
										"items": {
											"type": "object"
										}
									}
								}
							}
						},
						"schedule": {
							"type": "object",
							"properties": {
								"testScheduleMode": {
									"type": "string"
								},
								"scheduleRange": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"timeRange": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"from": {
															"type": "string"
														},
														"to": {
															"type": "string"
														},
														"frequency": {
															"type": "object",
															"properties": {
																"value": {
																	"type": "integer"
																},
																"unit": {
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"day": {
												"type": "string"
											}
										}
									}
								},
								"startTime": {
									"type": "number"
								},
								"frequency": {
									"type": "object",
									"properties": {
										"value": {
											"type": "integer"
										},
										"unit": {
											"type": "string"
										}
									}
								}
							}
						},
						"tests": {
							"type": "object",
							"properties": {}
						},
						"sensors": {
							"type": "array",
							"items": {
								"type": "object"
							}
						},
						"apCoverage": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"bands": {
										"type": "string"
									},
									"numberOfApsToTest": {
										"type": "integer"
									},
									"rssiThreshold": {
										"type": "integer"
									}
								}
							}
						},
						"testDurationEstimate": {
							"type": "integer"
						},
						"testTemplate": {
							"type": "boolean"
						},
						"legacyTestSuite": {
							"type": "boolean"
						},
						"tenantId": {
							"type": "string"
						}
					}
				}
			}
		},
		"CreateNetworkRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"dhcpServer": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"dnsServer": {
							"type": "object",
							"properties": {
								"domainName": {
									"type": "string",
									"enum": [
										"can only contain alphanumeric characters or hyphen"
									]
								},
								"primaryIpAddress": {
									"type": "string",
									"enum": [
										"valid range : 1.0.0.0 - 223.255.255.255"
									]
								},
								"secondaryIpAddress": {
									"type": "string",
									"enum": [
										"valid range : 1.0.0.0 - 223.255.255.255"
									]
								}
							}
						},
						"syslogServer": {
							"type": "object",
							"properties": {
								"ipAddresses": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"configureDnacIP": {
									"type": "boolean"
								}
							}
						},
						"snmpServer": {
							"type": "object",
							"properties": {
								"ipAddresses": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"configureDnacIP": {
									"type": "boolean"
								}
							}
						},
						"netflowcollector": {
							"type": "object",
							"properties": {
								"ipAddress": {
									"type": "string"
								},
								"port": {
									"type": "number"
								}
							}
						},
						"ntpServer": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"timezone": {
							"type": "string"
						},
						"messageOfTheday": {
							"type": "object",
							"properties": {
								"bannerMessage": {
									"type": "string"
								},
								"retainExistingBanner": {
									"type": "string"
								}
							}
						},
						"network_aaa": {
							"type": "object",
							"properties": {
								"servers": {
									"type": "string",
									"enum": [
										"Server type supported by ISE and AAA"
									]
								},
								"ipAddress": {
									"type": "string",
									"enum": [
										"Mandatory for ISE servers and for AAA consider this as additional IP."
									]
								},
								"network": {
									"type": "string",
									"enum": [
										"For AAA server consider it as primary IP and For ISE consider as Network"
									]
								},
								"protocol": {
									"type": "string"
								},
								"sharedSecret": {
									"type": "string",
									"enum": [
										"Supported only by ISE Servers"
									]
								}
							}
						},
						"clientAndEndpoint_aaa": {
							"type": "object",
							"properties": {
								"servers": {
									"type": "string"
								},
								"ipAddress": {
									"type": "string",
									"enum": [
										"Mandatory for ISE servers."
									]
								},
								"network": {
									"type": "string"
								},
								"protocol": {
									"type": "string"
								},
								"sharedSecret": {
									"type": "string",
									"enum": [
										"Supported only by ISE servers"
									]
								}
							}
						}
					}
				}
			}
		},
		"CreateNetworkResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetGlobalPoolResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ipPoolName": {
								"type": "string"
							},
							"dhcpServerIps": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"gateways": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"createTime": {
								"type": "string"
							},
							"lastUpdateTime": {
								"type": "string"
							},
							"totalIpAddressCount": {
								"type": "string"
							},
							"usedIpAddressCount": {
								"type": "string"
							},
							"parentUuid": {
								"type": "string"
							},
							"owner": {
								"type": "string"
							},
							"shared": {
								"type": "string"
							},
							"overlapping": {
								"type": "string"
							},
							"configureExternalDhcp": {
								"type": "string"
							},
							"usedPercentage": {
								"type": "string"
							},
							"clientOptions": {
								"type": "object",
								"properties": {}
							},
							"dnsServerIps": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"context": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"owner": {
											"type": "string"
										},
										"contextKey": {
											"type": "string"
										},
										"contextValue": {
											"type": "string"
										}
									}
								}
							},
							"ipv6": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"ipPoolCidr": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"AddSSIDToIPPoolMappingRequest": {
			"type": "object",
			"properties": {
				"vlanName": {
					"type": "string"
				},
				"scalableGroupName": {
					"type": "string"
				},
				"ssidNames": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"siteNameHierarchy": {
					"type": "string"
				}
			}
		},
		"AddSSIDToIPPoolMappingResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetMulticastDetailsFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"multicastMethod": {
					"type": "string"
				},
				"multicastType": {
					"type": "string"
				},
				"multicastVnInfo": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"virtualNetworkName": {
								"type": "string"
							},
							"ipPoolName": {
								"type": "string"
							},
							"internalRpIpAddress": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"externalRpIpAddress": {
								"type": "string"
							},
							"ssmInfo": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ssmGroupRange": {
											"type": "string"
										},
										"ssmWildcardMask": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				},
				"status": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"AddPortAssignmentForAccessPointInSDAFabricRequest": {
			"type": "object",
			"properties": {
				"siteNameHierarchy": {
					"type": "string"
				},
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"interfaceName": {
					"type": "string"
				},
				"dataIpAddressPoolName": {
					"type": "string"
				},
				"authenticateTemplateName": {
					"type": "string",
					"enum": [
						"No Authentication",
						"Open Authentication",
						"Closed Authentication ",
						"Low Impact "
					]
				},
				"interfaceDescription": {
					"type": "string"
				}
			}
		},
		"AddPortAssignmentForAccessPointInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"UpdateVirtualNetworkWithScalableGroupsRequest": {
			"type": "object",
			"properties": {
				"virtualNetworkName": {
					"type": "string"
				},
				"isGuestVirtualNetwork": {
					"type": "boolean"
				},
				"scalableGroupNames": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"vManageVpnId": {
					"type": "string"
				}
			}
		},
		"UpdateVirtualNetworkWithScalableGroupsResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetDynamicInterfaceResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"interfaceName": {
						"type": "string"
					},
					"vlanId": {
						"type": "number"
					}
				}
			}
		},
		"DeleteVNFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"UpdateEnterpriseSSIDRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"securityLevel": {
					"type": "string",
					"enum": [
						"WPA2_ENTERPRISE",
						"WPA2_PERSONAL",
						"OPEN",
						"WPA3_ENTERPRISE",
						"WPA3_PERSONAL",
						"WPA2_WPA3_PERSONAL",
						"WPA2_WPA3_ENTERPRISE"
					]
				},
				"passphrase": {
					"type": "string"
				},
				"enableFastLane": {
					"type": "boolean"
				},
				"enableMACFiltering": {
					"type": "boolean"
				},
				"trafficType": {
					"type": "string",
					"enum": [
						"voicedata",
						"data"
					]
				},
				"radioPolicy": {
					"type": "string",
					"enum": [
						"Triple band operation (2.4GHz, 5GHz and 6GHz)",
						"Triple band operation with band select",
						"5GHz only",
						"2.4GHz only",
						"6GHz only"
					]
				},
				"enableBroadcastSSID": {
					"type": "boolean"
				},
				"fastTransition": {
					"type": "string",
					"enum": [
						"Adaptive",
						"Enable",
						"Disable"
					]
				},
				"enableSessionTimeOut": {
					"type": "boolean"
				},
				"sessionTimeOut": {
					"type": "integer"
				},
				"enableClientExclusion": {
					"type": "boolean"
				},
				"clientExclusionTimeout": {
					"type": "integer"
				},
				"enableBasicServiceSetMaxIdle": {
					"type": "boolean"
				},
				"basicServiceSetClientIdleTimeout": {
					"type": "integer"
				},
				"enableDirectedMulticastService": {
					"type": "boolean"
				},
				"enableNeighborList": {
					"type": "boolean"
				},
				"mfpClientProtection": {
					"type": "string",
					"enum": [
						"Optional",
						"Disabled",
						"Required"
					]
				},
				"nasOptions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"profileName": {
					"type": "string"
				},
				"policyProfileName": {
					"type": "string"
				},
				"aaaOverride": {
					"type": "boolean"
				},
				"coverageHoleDetectionEnable": {
					"type": "boolean"
				},
				"protectedManagementFrame": {
					"type": "string",
					"enum": [
						"Optional",
						"Disabled",
						"Required"
					]
				},
				"multiPSKSettings": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"priority": {
								"type": "integer"
							},
							"passphraseType": {
								"type": "string",
								"enum": [
									"ASCII",
									"HEX"
								]
							},
							"passphrase": {
								"type": "string"
							}
						}
					}
				},
				"clientRateLimit": {
					"type": "number"
				}
			}
		},
		"UpdateEnterpriseSSIDResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"DeleteVirtualNetworkWithScalableGroupsResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetApplicationSetsResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"identitySource": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string"
									}
								}
							},
							"name": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"DeletePortAssignmentForUserDeviceInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"DeleteBorderDeviceFromSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"ProvisionWiredDeviceRequest": {
			"type": "object",
			"properties": {
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				}
			}
		},
		"ProvisionWiredDeviceResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"ExecuteSuggestedActionsCommandsRequest": {
			"type": "object",
			"properties": {
				"entity_type": {
					"type": "string"
				},
				"entity_value": {
					"type": "string"
				}
			}
		},
		"ExecuteSuggestedActionsCommandsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"actionInfo": {
						"type": "string"
					},
					"stepsCount": {
						"type": "integer"
					},
					"entityId": {
						"type": "string"
					},
					"hostname": {
						"type": "string"
					},
					"stepsDescription": {
						"type": "string"
					},
					"command": {
						"type": "string"
					},
					"commandOutput": {
						"type": "object",
						"properties": {}
					}
				}
			}
		},
		"DeleteEnterpriseSSIDResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"UpdateWirelessProfileRequest": {
			"type": "object",
			"properties": {
				"profileDetails": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"sites": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"ssidDetails": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"enableFabric": {
										"type": "boolean"
									},
									"flexConnect": {
										"type": "object",
										"properties": {
											"enableFlexConnect": {
												"type": "boolean"
											},
											"localToVlan": {
												"type": "integer"
											}
										}
									},
									"interfaceName": {
										"type": "string"
									},
									"wlanProfileName": {
										"type": "string"
									},
									"policyProfileName": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"UpdateWirelessProfileResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetApplicationSetsCountResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "string"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ProvisionRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"deviceName": {
						"type": "string"
					},
					"site": {
						"type": "string"
					},
					"managedAPLocations": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"dynamicInterfaces": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"interfaceIPAddress": {
									"type": "string"
								},
								"interfaceNetmaskInCIDR": {
									"type": "integer"
								},
								"interfaceGateway": {
									"type": "string"
								},
								"lagOrPortNumber": {
									"type": "integer"
								},
								"vlanId": {
									"type": "integer"
								},
								"interfaceName": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"ProvisionResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionUrl": {
					"type": "string"
				},
				"provisioningTasks": {
					"type": "object",
					"properties": {
						"success": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"failed": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"AddSiteInSDAFabricRequest": {
			"type": "object",
			"properties": {
				"fabricName": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				},
				"fabricType": {
					"type": "string"
				}
			}
		},
		"AddSiteInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"DeleteApplicationResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetEnterpriseSSIDResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"instanceUuid": {
						"type": "string"
					},
					"version": {
						"type": "integer"
					},
					"ssidDetails": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"wlanType": {
									"type": "string"
								},
								"enableFastLane": {
									"type": "boolean"
								},
								"securityLevel": {
									"type": "string"
								},
								"authServer": {
									"type": "string"
								},
								"passphrase": {
									"type": "string"
								},
								"trafficType": {
									"type": "string"
								},
								"enableMACFiltering": {
									"type": "boolean"
								},
								"isEnabled": {
									"type": "boolean"
								},
								"isFabric": {
									"type": "boolean"
								},
								"fastTransition": {
									"type": "string"
								},
								"radioPolicy": {
									"type": "string"
								},
								"enableBroadcastSSID": {
									"type": "boolean"
								},
								"nasOptions": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"aaaOverride": {
									"type": "boolean"
								},
								"coverageHoleDetectionEnable": {
									"type": "boolean"
								},
								"protectedManagementFrame": {
									"type": "string",
									"enum": [
										"Optional",
										"Disabled",
										"Required"
									]
								},
								"multiPSKSettings": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"priority": {
												"type": "integer"
											},
											"passphraseType": {
												"type": "string",
												"enum": [
													"ASCII",
													"HEX"
												]
											},
											"passphrase": {
												"type": "string"
											}
										}
									}
								},
								"clientRateLimit": {
									"type": "number"
								}
							}
						}
					},
					"groupUuid": {
						"type": "string"
					},
					"inheritedGroupUuid": {
						"type": "string"
					},
					"inheritedGroupName": {
						"type": "string"
					}
				}
			}
		},
		"DeleteTransitPeerNetworkResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetSSIDToIPPoolMappingRequest": {
			"type": "object",
			"properties": {
				"vlanName": {
					"type": "string"
				},
				"scalableGroupName": {
					"type": "string"
				},
				"ssidNames": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"siteNameHierarchy": {
					"type": "string"
				}
			}
		},
		"GetSSIDToIPPoolMappingResponse": {
			"type": "object",
			"properties": {
				"vlanName": {
					"type": "string"
				},
				"ssidDetails": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"scalableGroupName": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"CreateUpdateDynamicInterfaceRequest": {
			"type": "object",
			"properties": {
				"interfaceName": {
					"type": "string"
				},
				"vlanId": {
					"type": "number"
				}
			}
		},
		"CreateUpdateDynamicInterfaceResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"executionId": {
						"type": "string"
					},
					"executionUrl": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				}
			}
		},
		"APProvisionRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"rfProfile": {
						"type": "string"
					},
					"deviceName": {
						"type": "string"
					},
					"customApGroupName": {
						"type": "string"
					},
					"customFlexGroupName": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"type": {
						"type": "string"
					},
					"siteNameHierarchy": {
						"type": "string"
					}
				}
			}
		},
		"APProvisionResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"executionId": {
						"type": "string"
					},
					"executionUrl": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				}
			}
		},
		"DeleteWirelessProfileRequest": {
			"type": "string"
		},
		"DeleteWirelessProfileResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"GetDeviceEnrichmentDetailsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"deviceDetails": {
						"type": "object",
						"properties": {
							"family": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"location": {
								"type": "object",
								"properties": {}
							},
							"errorCode": {
								"type": "string"
							},
							"macAddress": {
								"type": "string"
							},
							"role": {
								"type": "string"
							},
							"apManagerInterfaceIp": {
								"type": "string"
							},
							"associatedWlcIp": {
								"type": "string"
							},
							"bootDateTime": {
								"type": "string"
							},
							"collectionStatus": {
								"type": "string"
							},
							"interfaceCount": {
								"type": "string"
							},
							"lineCardCount": {
								"type": "string"
							},
							"lineCardId": {
								"type": "string"
							},
							"managementIpAddress": {
								"type": "string"
							},
							"memorySize": {
								"type": "string"
							},
							"platformId": {
								"type": "string"
							},
							"reachabilityFailureReason": {
								"type": "string"
							},
							"reachabilityStatus": {
								"type": "string"
							},
							"snmpContact": {
								"type": "string"
							},
							"snmpLocation": {
								"type": "string"
							},
							"tunnelUdpPort": {
								"type": "object",
								"properties": {}
							},
							"waasDeviceMode": {
								"type": "object",
								"properties": {}
							},
							"series": {
								"type": "string"
							},
							"inventoryStatusDetail": {
								"type": "string"
							},
							"collectionInterval": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"softwareVersion": {
								"type": "string"
							},
							"roleSource": {
								"type": "string"
							},
							"hostname": {
								"type": "string"
							},
							"upTime": {
								"type": "string"
							},
							"lastUpdateTime": {
								"type": "integer"
							},
							"errorDescription": {
								"type": "string"
							},
							"locationName": {
								"type": "object",
								"properties": {}
							},
							"tagCount": {
								"type": "string"
							},
							"lastUpdated": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"neighborTopology": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"nodes": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"role": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"id": {
														"type": "string"
													},
													"description": {
														"type": "string"
													},
													"deviceType": {
														"type": "string"
													},
													"platformId": {
														"type": "string"
													},
													"family": {
														"type": "string"
													},
													"ip": {
														"type": "string"
													},
													"softwareVersion": {
														"type": "string"
													},
													"userId": {
														"type": "object",
														"properties": {}
													},
													"nodeType": {
														"type": "string"
													},
													"radioFrequency": {
														"type": "object",
														"properties": {}
													},
													"clients": {
														"type": "object",
														"properties": {}
													},
													"count": {
														"type": "object",
														"properties": {}
													},
													"healthScore": {
														"type": "integer"
													},
													"level": {
														"type": "number"
													},
													"fabricGroup": {
														"type": "object",
														"properties": {}
													},
													"connectedDevice": {
														"type": "object",
														"properties": {}
													}
												}
											}
										},
										"links": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"source": {
														"type": "string"
													},
													"linkStatus": {
														"type": "string"
													},
													"label": {
														"type": "array",
														"items": {
															"type": "object"
														}
													},
													"target": {
														"type": "string"
													},
													"id": {
														"type": "object",
														"properties": {}
													},
													"portUtilization": {
														"type": "object",
														"properties": {}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"GetUserEnrichmentDetailsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"userDetails": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"connectionStatus": {
								"type": "string"
							},
							"hostType": {
								"type": "string"
							},
							"userId": {
								"type": "object",
								"properties": {}
							},
							"hostName": {
								"type": "object",
								"properties": {}
							},
							"hostOs": {
								"type": "object",
								"properties": {}
							},
							"hostVersion": {
								"type": "object",
								"properties": {}
							},
							"subType": {
								"type": "string"
							},
							"lastUpdated": {
								"type": "integer"
							},
							"healthScore": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"healthType": {
											"type": "string"
										},
										"reason": {
											"type": "string"
										},
										"score": {
											"type": "integer"
										}
									}
								}
							},
							"hostMac": {
								"type": "string"
							},
							"hostIpV4": {
								"type": "string"
							},
							"hostIpV6": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"authType": {
								"type": "object",
								"properties": {}
							},
							"vlanId": {
								"type": "string"
							},
							"ssid": {
								"type": "object",
								"properties": {}
							},
							"frequency": {
								"type": "object",
								"properties": {}
							},
							"channel": {
								"type": "object",
								"properties": {}
							},
							"apGroup": {
								"type": "object",
								"properties": {}
							},
							"location": {
								"type": "object",
								"properties": {}
							},
							"clientConnection": {
								"type": "string"
							},
							"connectedDevice": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"issueCount": {
								"type": "number"
							},
							"rssi": {
								"type": "object",
								"properties": {}
							},
							"avgRssi": {
								"type": "object",
								"properties": {}
							},
							"snr": {
								"type": "object",
								"properties": {}
							},
							"avgSnr": {
								"type": "object",
								"properties": {}
							},
							"dataRate": {
								"type": "object",
								"properties": {}
							},
							"txBytes": {
								"type": "object",
								"properties": {}
							},
							"rxBytes": {
								"type": "object",
								"properties": {}
							},
							"dnsSuccess": {
								"type": "object",
								"properties": {}
							},
							"dnsFailure": {
								"type": "object",
								"properties": {}
							},
							"onboarding": {
								"type": "object",
								"properties": {
									"averageRunDuration": {
										"type": "object",
										"properties": {}
									},
									"maxRunDuration": {
										"type": "object",
										"properties": {}
									},
									"averageAssocDuration": {
										"type": "object",
										"properties": {}
									},
									"maxAssocDuration": {
										"type": "object",
										"properties": {}
									},
									"averageAuthDuration": {
										"type": "object",
										"properties": {}
									},
									"maxAuthDuration": {
										"type": "object",
										"properties": {}
									},
									"averageDhcpDuration": {
										"type": "object",
										"properties": {}
									},
									"maxDhcpDuration": {
										"type": "object",
										"properties": {}
									},
									"aaaServerIp": {
										"type": "object",
										"properties": {}
									},
									"dhcpServerIp": {
										"type": "object",
										"properties": {}
									}
								}
							},
							"onboardingTime": {
								"type": "object",
								"properties": {}
							},
							"port": {
								"type": "object",
								"properties": {}
							}
						}
					},
					"connectedDevice": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"deviceDetails": {
									"type": "object",
									"properties": {
										"family": {
											"type": "string"
										},
										"type": {
											"type": "string"
										},
										"location": {
											"type": "object",
											"properties": {}
										},
										"errorCode": {
											"type": "object",
											"properties": {}
										},
										"macAddress": {
											"type": "string"
										},
										"role": {
											"type": "string"
										},
										"apManagerInterfaceIp": {
											"type": "string"
										},
										"associatedWlcIp": {
											"type": "string"
										},
										"bootDateTime": {
											"type": "string"
										},
										"collectionStatus": {
											"type": "string"
										},
										"interfaceCount": {
											"type": "string"
										},
										"lineCardCount": {
											"type": "string"
										},
										"lineCardId": {
											"type": "string"
										},
										"managementIpAddress": {
											"type": "string"
										},
										"memorySize": {
											"type": "string"
										},
										"platformId": {
											"type": "string"
										},
										"reachabilityFailureReason": {
											"type": "string"
										},
										"reachabilityStatus": {
											"type": "string"
										},
										"snmpContact": {
											"type": "string"
										},
										"snmpLocation": {
											"type": "string"
										},
										"tunnelUdpPort": {
											"type": "object",
											"properties": {}
										},
										"waasDeviceMode": {
											"type": "object",
											"properties": {}
										},
										"series": {
											"type": "string"
										},
										"inventoryStatusDetail": {
											"type": "string"
										},
										"collectionInterval": {
											"type": "string"
										},
										"serialNumber": {
											"type": "string"
										},
										"softwareVersion": {
											"type": "string"
										},
										"roleSource": {
											"type": "string"
										},
										"hostname": {
											"type": "string"
										},
										"upTime": {
											"type": "string"
										},
										"lastUpdateTime": {
											"type": "integer"
										},
										"errorDescription": {
											"type": "object",
											"properties": {}
										},
										"locationName": {
											"type": "object",
											"properties": {}
										},
										"tagCount": {
											"type": "string"
										},
										"lastUpdated": {
											"type": "string"
										},
										"instanceUuid": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"neighborTopology": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"errorCode": {
														"type": "integer"
													},
													"message": {
														"type": "string"
													},
													"detail": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"GetProvisionedWiredDeviceResponse": {
			"type": "object",
			"properties": {
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed"
					]
				},
				"description": {
					"type": "string"
				}
			}
		},
		"DeleteProvisionedWiredDeviceResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetVirtualNetworkWithScalableGroupsResponse": {
			"type": "object",
			"properties": {
				"virtualNetworkName": {
					"type": "string"
				},
				"isGuestVirtualNetwork": {
					"type": "boolean"
				},
				"scalableGroupNames": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"vManageVpnId": {
					"type": "string"
				},
				"virtualNetworkContextId": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed"
					]
				},
				"description": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetMembershipResponse": {
			"type": "object",
			"properties": {
				"site": {
					"type": "object",
					"properties": {
						"response": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {}
							}
						},
						"version": {
							"type": "string"
						}
					}
				},
				"device": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"response": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {}
								}
							},
							"version": {
								"type": "string"
							},
							"siteId": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"AddControlPlaneDeviceInSDAFabricRequest": {
			"type": "object",
			"properties": {
				"deviceManagementIpAddress": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				},
				"routeDistributionProtocol": {
					"type": "string"
				}
			}
		},
		"AddControlPlaneDeviceInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"DeleteSiteResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"AddWLCToFabricDomainRequest": {
			"type": "object",
			"properties": {
				"deviceName": {
					"type": "string"
				},
				"siteNameHierarchy": {
					"type": "string"
				}
			}
		},
		"AddWLCToFabricDomainResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"RunNowSensorTestRequest": {
			"type": "object",
			"properties": {
				"templateName": {
					"type": "string"
				}
			}
		},
		"CreateGlobalPoolRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"ippool": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"ipPoolName": {
										"type": "string"
									},
									"type": {
										"type": "string",
										"enum": [
											"Generic",
											"Tunnel"
										]
									},
									"ipPoolCidr": {
										"type": "string"
									},
									"gateway": {
										"type": "string"
									},
									"dhcpServerIps": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"dnsServerIps": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"IpAddressSpace": {
										"type": "string",
										"enum": [
											"IPv6 or IPv4"
										]
									}
								}
							}
						}
					}
				}
			}
		},
		"CreateGlobalPoolResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"CreateApplicationRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"networkApplications": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"appProtocol": {
									"type": "string"
								},
								"applicationSubType": {
									"type": "string"
								},
								"applicationType": {
									"type": "string"
								},
								"categoryId": {
									"type": "string"
								},
								"displayName": {
									"type": "string"
								},
								"engineId": {
									"type": "string"
								},
								"helpString": {
									"type": "string"
								},
								"longDescription": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"popularity": {
									"type": "string"
								},
								"rank": {
									"type": "string"
								},
								"trafficClass": {
									"type": "string"
								},
								"serverName": {
									"type": "string"
								},
								"url": {
									"type": "string"
								},
								"dscp": {
									"type": "string"
								},
								"ignoreConflict": {
									"type": "string"
								}
							}
						}
					},
					"networkIdentity": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"displayName": {
									"type": "string"
								},
								"lowerPort": {
									"type": "string"
								},
								"ports": {
									"type": "string"
								},
								"protocol": {
									"type": "string"
								},
								"upperPort": {
									"type": "string"
								}
							}
						}
					},
					"applicationSet": {
						"type": "object",
						"properties": {
							"idRef": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"CreateApplicationResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"RetryIntegrationEventsRequest": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"RetryIntegrationEventsResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"AddVirtualNetworkWithScalableGroupsRequest": {
			"type": "object",
			"properties": {
				"virtualNetworkName": {
					"type": "string"
				},
				"isGuestVirtualNetwork": {
					"type": "boolean"
				},
				"scalableGroupNames": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"vManageVpnId": {
					"type": "string"
				}
			}
		},
		"AddVirtualNetworkWithScalableGroupsResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"GetIPPoolFromSDAVirtualNetworkResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"virtualNetworkName": {
					"type": "string"
				},
				"ipPoolName": {
					"type": "string"
				},
				"authenticationPolicyName": {
					"type": "string"
				},
				"trafficType": {
					"type": "string"
				},
				"scalableGroupName": {
					"type": "string"
				},
				"isL2FloodingEnabled": {
					"type": "boolean"
				},
				"isThisCriticalPool": {
					"type": "boolean"
				}
			}
		},
		"DeleteSSIDAndProvisionItToDevicesResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"AddMulticastInSDAFabricRequest": {
			"type": "object",
			"properties": {
				"siteNameHierarchy": {
					"type": "string"
				},
				"multicastMethod": {
					"type": "string",
					"enum": [
						"native_multicast"
					]
				},
				"multicastType": {
					"type": "string",
					"enum": [
						"ssm",
						"asm_with_internal_rp",
						"asm_with_external_rp"
					]
				},
				"multicastVnInfo": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"virtualNetworkName": {
								"type": "string"
							},
							"ipPoolName": {
								"type": "string"
							},
							"internalRpIpAddress": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"externalRpIpAddress": {
								"type": "string"
							},
							"ssmInfo": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ssmGroupRange": {
											"type": "string"
										},
										"ssmWildcardMask": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"AddMulticastInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"UpdateSiteRequest": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"area",
						"building",
						"floor"
					]
				},
				"site": {
					"type": "object",
					"properties": {
						"area": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"parentName": {
									"type": "string"
								}
							}
						},
						"building": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"address": {
									"type": "string"
								},
								"parentName": {
									"type": "string"
								},
								"latitude": {
									"type": "number"
								},
								"longitude": {
									"type": "number"
								}
							}
						},
						"floor": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"rfModel": {
									"type": "string",
									"enum": [
										"Cubes And Walled Offices",
										"Drywall Office Only",
										"Indoor High Ceiling",
										"Outdoor Open Space"
									]
								},
								"width": {
									"type": "number"
								},
								"length": {
									"type": "number"
								},
								"height": {
									"type": "number"
								}
							}
						}
					}
				}
			}
		},
		"UpdateSiteResponse": {
			"type": "object",
			"properties": {
				"result": {
					"type": "string"
				},
				"response": {
					"type": "object",
					"properties": {
						"endTime": {
							"type": "string"
						},
						"version": {
							"type": "string"
						},
						"startTime": {
							"type": "string"
						},
						"progress": {
							"type": "string"
						},
						"data": {
							"type": "string"
						},
						"serviceType": {
							"type": "string"
						},
						"operationIdList": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"isError": {
							"type": "string"
						},
						"rootId": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"status": {
					"type": "string"
				}
			}
		},
		"DeleteControlPlaneDeviceInSDAFabricResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"success",
						"failed",
						"pending",
						""
					]
				},
				"description": {
					"type": "string"
				},
				"taskId": {
					"type": "string"
				},
				"taskStatusUrl": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"executionId": {
					"type": "string"
				}
			}
		},
		"CreateDeviceCredentialsRequest": {
			"type": "object",
			"properties": {
				"settings": {
					"type": "object",
					"properties": {
						"cliCredential": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"description": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"password": {
										"type": "string"
									},
									"enablePassword": {
										"type": "string"
									}
								}
							}
						},
						"snmpV2cRead": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"description": {
										"type": "string"
									},
									"readCommunity": {
										"type": "string"
									}
								}
							}
						},
						"snmpV2cWrite": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"description": {
										"type": "string"
									},
									"writeCommunity": {
										"type": "string"
									}
								}
							}
						},
						"snmpV3": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"description": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"privacyType": {
										"type": "string",
										"enum": [
											"AES128",
											"DES"
										]
									},
									"privacyPassword": {
										"type": "string"
									},
									"authType": {
										"type": "string",
										"enum": [
											"SHA",
											"MD5"
										]
									},
									"authPassword": {
										"type": "string"
									},
									"snmpMode": {
										"type": "string",
										"enum": [
											"AUTHPRIV",
											"AUTHNOPRIV",
											"NOAUTHNOPRIV"
										]
									}
								}
							}
						},
						"httpsRead": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"password": {
										"type": "string"
									},
									"port": {
										"type": "number"
									}
								}
							}
						},
						"httpsWrite": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"password": {
										"type": "string"
									},
									"port": {
										"type": "number"
									}
								}
							}
						}
					}
				}
			}
		},
		"CreateDeviceCredentialsResponse": {
			"type": "object",
			"properties": {
				"executionId": {
					"type": "string"
				},
				"executionStatusUrl": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		}
	}
}